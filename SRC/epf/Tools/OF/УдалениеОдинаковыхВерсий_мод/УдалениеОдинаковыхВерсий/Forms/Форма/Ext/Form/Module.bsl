
Процедура КнопкаНайтиИУдалитьНажатие(Кнопка)
	
	УдалитьВерсииБезИзменений(Истина);
	
КонецПроцедуры

Процедура КнопкаАнализНажатие(Кнопка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Объект КАК Объект,
	|	ВложенныйЗапрос.КоличествоВерсий КАК КоличествоВерсий,
	|	ВложенныйЗапрос.Объект * ВложенныйЗапрос.КоличествоВерсий КАК КоличествоЗаписей
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВерсииОбъектов.Объект) КАК Объект,
	|		ВложенныйЗапрос.НомерВерсии КАК КоличествоВерсий
	|	ИЗ
	|		РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВерсииОбъектов.Объект КАК Объект,
	|				КОЛИЧЕСТВО(ВерсииОбъектов.НомерВерсии) КАК НомерВерсии
	|			ИЗ
	|				РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВерсииОбъектов.Объект) КАК ВложенныйЗапрос
	|			ПО ВерсииОбъектов.Объект = ВложенныйЗапрос.Объект
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.НомерВерсии) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект УБЫВ,
	|	КоличествоВерсий
	|ИТОГИ
	|	СУММА(Объект),
	|	СУММА(КоличествоЗаписей)
	|ПО
	|	ОБЩИЕ";
	
	ГлавноеДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВсегоЗаписей = ГлавноеДерево.Строки[0].КоличествоЗаписей;
	ВсегоОбъектов= ГлавноеДерево.Строки[0].Объект;
	
	Сообщить("Всего "+ ВсегоЗаписей+" записей по "+
					 + ВсегоОбъектов+ " "
					 + ОбщегоНазначения.ФормаМножественногоЧисла("объекту", "объектам", "объектам", ВсегоОбъектов)
					 + " из них: ");
	
	Для Каждого Строка Из ГлавноеДерево.Строки[0].Строки Цикл
		Сообщить(Строка(Строка.Объект)
					+ " " +ОбщегоНазначения.ФормаМножественногоЧисла("объект", "объекта", "объектов", Строка.Объект)
					+ " " +ОбщегоНазначения.ФормаМножественногоЧисла("имеет", "имеют", "имеют", Строка.Объект)
					+ ?(Строка.Объект=1, " ", " по ")
					+ Строка(Строка.КоличествоВерсий)
					+ " " + ОбщегоНазначения.ФормаМножественногоЧисла("версию", "версий", "версий", Строка.КоличествоВерсий));
	КонецЦикла;
		
КонецПроцедуры

Процедура КнопкаНайтиНажатие(Кнопка)
	
	УдалитьВерсииБезИзменений(Ложь);
	
КонецПроцедуры

Процедура УдалитьВерсииБезИзменений(УдалятьЗапись)
	
	//ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	//ФормаИндикации.НаименованиеОбработкиДанных = "Удаление версий объектов без изменений";
	//
	//ЗаписиДляУдаления = Новый ТаблицаЗначений;
	//ЗаписиДляУдаления.Колонки.Добавить("Объект");
	//ЗаписиДляУдаления.Колонки.Добавить("НомерВерсии");
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ВерсииОбъектов.Объект КАК Объект,
	//|	КОЛИЧЕСТВО(ВерсииОбъектов.НомерВерсии) КАК НомерВерсии
	//|ПОМЕСТИТЬ втВложенныйЗапрос
	//|ИЗ
	//|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ВерсииОбъектов.Объект
	//|
	//|ИМЕЮЩИЕ
	//|	КОЛИЧЕСТВО(ВерсииОбъектов.НомерВерсии) МЕЖДУ &КоличествоВерсийНачало И &КоличествоВерсийКонец
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВерсииОбъектов.Объект КАК Объект,
	//|	ВерсииОбъектов.НомерВерсии КАК НомерВерсии
	//|ИЗ
	//|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВложенныйЗапрос КАК ВложенныйЗапрос
	//|		ПО ВерсииОбъектов.Объект = ВложенныйЗапрос.Объект
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерВерсии
	//|ИТОГИ ПО
	//|	Объект";
	//
	//Если КоличествоВерсий2 = 0 Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕЖДУ", МетодСравнения);
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, " И &КоличествоВерсийКонец", "");
	//КонецЕсли;	
	//
	//Запрос.УстановитьПараметр("КоличествоВерсийНачало", КоличествоВерсий);
	//Запрос.УстановитьПараметр("КоличествоВерсийКонец", КоличествоВерсий2);
	//
	//ВыборкаПоОбъектам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//ФормаИндикации.Открыть();
	//ФормаИндикации.Значение = 0;
	//ФормаИндикации.КомментарийОбработкиДанных = "Поиск одинаковых версий объектов";
	//
	//КоличествоОбработано = 0;
	//ОбщееКоличество		 = ВыборкаПоОбъектам.Количество();
	//
	//ФормаИндикации.МаксимальноеЗначение = ОбщееКоличество;
	//
	//Пока ВыборкаПоОбъектам.Следующий() Цикл
	//		
	//	ОбработкаПрерыванияПользователя();
	//			
	//	МассивВерсий = Новый Массив;
	//	
	//	Выборка = ВыборкаПоОбъектам.Выбрать();
	//	Выборка.Следующий();
	//	
	//	ВерсияДляСравнения = Выборка.НомерВерсии;
	//	
	//	Пока Выборка.Следующий() Цикл
	//		МассивВерсий.Очистить();
	//		
	//		МассивВерсий.Добавить(Выборка.НомерВерсии);
	//		МассивВерсий.Добавить(ВерсияДляСравнения);
	//		
	//		ЕстьИзменения = СформироватьОтчетПоИзменениям(ВыборкаПоОбъектам.Объект, МассивВерсий);
	//		
	//		Если ЕстьИзменения Тогда
	//			ВерсияДляСравнения = Выборка.НомерВерсии;
	//		Иначе
	//			ЗаписьДляУдаления = ЗаписиДляУдаления.Добавить();
	//			ЗаполнитьЗначенияСвойств(ЗаписьДляУдаления, Выборка);
	//		КонецЕсли;
	//	КонецЦикла;	
	//	
	//	КоличествоОбработано = КоличествоОбработано + 1;
	//	ФормаИндикации.КомментарийЗначения = "Обработано "+КоличествоОбработано+" из "+ОбщееКоличество;
	//	
	//	ФормаИндикации.Значение = КоличествоОбработано;
	//	
	//КонецЦикла;
	//
	//ФормаИндикации.Закрыть();
	//
	//Если ЗаписиДляУдаления.Количество() = 0 Тогда
	//	Предупреждение("Нет записей для удаления!");
	//	Возврат;
	//КонецЕсли;	
	//
	//ФормаИндикации.Открыть();
	//ФормаИндикации.Значение = 0;
	//ФормаИндикации.НаименованиеОбработкиДанных = "Удаление версий объектов без изменений";
	//ФормаИндикации.МаксимальноеЗначение = ЗаписиДляУдаления.Количество();
	//КоличествоОбработано = 0;
	//	
	//Сообщить("--------------------------------");
	//
	//Если УдалятьЗапись Тогда
	//	
	//	ФормаИндикации.КомментарийОбработкиДанных = "Удаление одинаковых версий объектов";
	//	
	//	УдаленоЗаписей = 0;
	//	
	//	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	//
	//	Для Каждого Запись Из ЗаписиДляУдаления Цикл
	//	
	//		ОбработкаПрерыванияПользователя();
	//	
	//		Попытка
	//			НаборЗаписей.Отбор.Объект.Установить(Запись.Объект);
	//			НаборЗаписей.Отбор.НомерВерсии.Установить(Запись.НомерВерсии);
	//				
	//			НаборЗаписей.Записать();
	//							
	//			Сообщить("Удалена запись по объекту "+Запись.Объект+" (Версия "+Запись.НомерВерсии+")");
	//			
	//			УдаленоЗаписей = УдаленоЗаписей + 1;
	//		Исключение
	//			Сообщить(ОписаниеОшибки());
	//		КонецПопытки;
	//		
	//		КоличествоОбработано = КоличествоОбработано + 1;
	//		ФормаИндикации.Значение = КоличествоОбработано;	
	//		
	//	КонецЦикла;
	//	
	//	Сообщить("--------------------------------");
	//	Сообщить("Удалено записей "+УдаленоЗаписей+" из "+ЗаписиДляУдаления.Количество());
	//Иначе	
	//	
	//	ФормаИндикации.КомментарийОбработкиДанных = "Вывод одинаковых версий объектов";
	//	
	//	Для Каждого Запись Из ЗаписиДляУдаления Цикл
	//	
	//		ОбработкаПрерыванияПользователя();
	//	
	//		Сообщить("Запись по объекту "+Запись.Объект+" (Версия "+Запись.НомерВерсии+")");
	//		
	//	    КоличествоОбработано = КоличествоОбработано + 1;
	//		ФормаИндикации.Значение = КоличествоОбработано;	
	//	
	//	КонецЦикла;
	//
	//	Сообщить("--------------------------------");
	//	Сообщить("Найдено записей: "+ФормаИндикации.МаксимальноеЗначение);
	//КонецЕсли;
	//

	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикации.НаименованиеОбработкиДанных = "Удаление версий объектов без изменений";
	
	ЗаписиДляУдаления = Новый ТаблицаЗначений;
	ЗаписиДляУдаления.Колонки.Добавить("Объект");
	ЗаписиДляУдаления.Колонки.Добавить("НомерВерсии");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииОбъектов.Объект КАК Объект,
	|	КОЛИЧЕСТВО(ВерсииОбъектов.НомерВерсии) КАК НомерВерсии
	|ПОМЕСТИТЬ втВложенныйЗапрос
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииОбъектов.Объект
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВерсииОбъектов.НомерВерсии) МЕЖДУ &КоличествоВерсийНачало И &КоличествоВерсийКонец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииОбъектов.Объект КАК Объект,
	|	ВерсииОбъектов.НомерВерсии КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВложенныйЗапрос КАК ВложенныйЗапрос
	|		ПО ВерсииОбъектов.Объект = ВложенныйЗапрос.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсии
	|ИТОГИ ПО
	|	Объект";
	
	Если КоличествоВерсий2 = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МЕЖДУ", МетодСравнения);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " И &КоличествоВерсийКонец", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоличествоВерсийНачало", КоличествоВерсий);
	Запрос.УстановитьПараметр("КоличествоВерсийКонец", КоличествоВерсий2);
	
	ВыборкаПоОбъектам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ФормаИндикации.Открыть();
	ФормаИндикации.Значение = 0;
	ФормаИндикации.КомментарийОбработкиДанных = "Поиск одинаковых версий объектов";
	
	КоличествоОбработано = 0;
	ОбщееКоличество		 = ВыборкаПоОбъектам.Количество();
	
	ФормаИндикации.МаксимальноеЗначение = ОбщееКоличество;
	
	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	
	Пока ВыборкаПоОбъектам.Следующий() Цикл
			
		ОбработкаПрерыванияПользователя();
  		
		Выборка = ВыборкаПоОбъектам.Выбрать();
		Выборка.Следующий();

		Пока Выборка.Следующий() Цикл
			
			ОбработкаПрерыванияПользователя();
			
			//просто удаляем
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.НомерВерсии.Установить(Выборка.НомерВерсии);
			НаборЗаписей.Записать();

		КонецЦикла;
		
		КоличествоОбработано = КоличествоОбработано + 1;
		ФормаИндикации.КомментарийЗначения = "Обработано "+КоличествоОбработано+" из "+ОбщееКоличество;
		
		ФормаИндикации.Значение = КоличествоОбработано;
		
	КонецЦикла;
	
	ФормаИндикации.Закрыть();

КонецПроцедуры	

Процедура ПриОткрытии()
	
	ЭлементыФормы.МетодСравнения.Значение = ЭлементыФормы.МетодСравнения.СписокВыбора.НайтиПоЗначению(">");
	
	МетодСравнения = ">";
	КоличествоВерсий = 1;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	ТекстОбработки = "Будут обрабатываться объекты, количество версий которых ";

	Если МетодСравнения = ">=,<=" Тогда
		
		Если КоличествоВерсий2 = 0 Тогда
			КоличествоВерсий2 = 1;
		КонецЕсли;
		
		ТекстОбработки = ТекстОбработки 
					 	 + "находится в интервале между "+ " "+КоличествоВерсий+ " и "+КоличествоВерсий2;
						 
		ЭлементыФормы.КоличествоВерсий2.Видимость = Истина;
	Иначе
		ТекстОбработки = ТекстОбработки
							+ НРег(ЭлементыФормы.МетодСравнения.СписокВыбора.НайтиПоЗначению(МетодСравнения).Представление)
							+ " "+КоличествоВерсий;
						 
		КоличествоВерсий2 = 0;
		ЭлементыФормы.КоличествоВерсий2.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

Процедура МетодСравненияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для получения отчета по изменениям

// Основная управляющая функция для формирование отчета по изменениям.
// Состоит из трех этапов:
// 1. Получение XML представления хранимых версий объекта. Формирование
//    специальных структур данных для сравнения объектов.
// 2. Получение 
//
Функция СформироватьОтчетПоИзменениям(СсылкаНаОбъект, знач МассивВерсий)
	
	// Хранит переходную разобранную версию объекта,
	// что бы сократить число разборов XML
	Перем ВерсияОбъекта;
	
	// "Сквозной" идентификатор измененных строк в версиях
	Перем счетчикУникальныйИд;
	
	//ТЧОтчета.Очистить();
	
	// Формируем массив номеров версий (так как некоторые могут отсутствовать
	// и иметь непоследовательную нумерацию), массив отсортирован по возрастанию.
	МассивНомеровВерсий = МассивВерсий;
	
	// Количество версий объекта хранящихся в базе (k).
	// Для формирования отчета необходимо сделать (k-1) сравнений.
	// Фактически это означает, что у таблиц изменений будет (k) колонок
	//КоличествоВерсийОбъекта = КоличествоВерсий;
	КоличествоВерсийОбъекта = МассивНомеровВерсий.Количество();
	
	// Хранит в себе все изменения реквизитов имеет две размерности:
	// первая (строки) содержит значения наименований реквизитов объекта
	// вторая (столбцы) содержит идентификацию версии объекта и характеристику
	// изменения идентификация версии это строка которая однозначно идентифицирует
	// версию объекта среди остальных и сообщает дополнительную информацию по изменению
	ТаблицаИзмененийРеквизитов = Новый ТаблицаЗначений;
	ПодготовитьКолонкиТаблицИзмененийРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий);
	
	// Хранит в себе изменения табличных частей в виде соответствий имен
	// таблиц значений объекта истории изменений этой таблицы значений
	// каждое соответствие - табличная часть
	// первая (строки) содержит значения наименований полей табличной части
	// вторая (столбцы) содержит идентификацию версии объекта
	// идентификация версии это строка которая однозначно идентифицирует версию
	// объекта среди остальных и сообщает дополнительную информацию по изменению
	ТаблицаИзмененийТабличныхЧастей = Новый Соответствие;
	
	// формируем начальные версии объекта, значения которых показываются всегда
	// (при наличии последующих изменений)
	ВерсияОбъекта_Пред = СчитатьНачальныеЗначенияРеквизитовИТабличныхЧастей(
								   СсылкаНаОбъект,
								   ТаблицаИзмененийРеквизитов,
								   ТаблицаИзмененийТабличныхЧастей,
								   КоличествоВерсийОбъекта,
								   МассивНомеровВерсий);
	
	счетчикУникальныйИд = ПолучитьУникальныеУникальныйИд(ТаблицаИзмененийТабличныхЧастей, "Вер" + МассивНомеровВерсий[0]);
	
	Для ИндексВерсии = 2 По МассивНомеровВерсий.Количество() Цикл
		НомерВерсии = МассивНомеровВерсий[ИндексВерсии-1];

		НомерПредыдущейВерсии = "Вер" + (Число(МассивНомеровВерсий[ИндексВерсии-2]));
		ИмяКолонкиТекущейВерсии = "Вер" + НомерВерсии;
		
		РезультатСравнения = РассчитатьИзменения(СсылкаНаОбъект, НомерВерсии, ВерсияОбъекта_Пред, ВерсияОбъекта);
		
		ИзмРек = РезультатСравнения["Реквизиты"]["и"];
		ДобРек = РезультатСравнения["Реквизиты"]["д"];
		УдлРек = РезультатСравнения["Реквизиты"]["у"];
		
		// заполнение таблицы отчета по реквизитам
		ЗаполнитьХарактеристикуИзмененияРеквизита(ИзмРек, "И", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		ЗаполнитьХарактеристикуИзмененияРеквизита(ДобРек, "Д", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		ЗаполнитьХарактеристикуИзмененияРеквизита(УдлРек, "У", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		
		// Изменения в табличных частях
		ИзмТЧ = РезультатСравнения["ТабличныеЧасти"]["и"];
		
		// Данная функциональность пока не реализуется
		ДобТЧ = РезультатСравнения["ТабличныеЧасти"]["д"];
		УдлТЧ = РезультатСравнения["ТабличныеЧасти"]["у"];
				
		Если ИзмТЧ.Количество() Тогда
			СтрокаИзменений = ?(ПустаяСтрока(СтрокаИзменений),"", СтрокаИзменений + Символы.ПС) + "Изменены таблицы: ";
			Для каждого Элемент из ИзмТЧ Цикл
				СтрокаИзменений = СтрокаИзменений + Элемент.Ключ + ",";
			КонецЦикла;
			СтрокаИзменений = Лев(СтрокаИзменений,СтрДлина(СтрокаИзменений)-1)
		КонецЕсли;
		
		// Сравнение табличных частей
		//Для Каждого ЭлементСоответствия Из ВерсияОбъекта.ТабличныеЧасти Цикл
		//	
		//	ИмяТаблицы = ЭлементСоответствия.Ключ;
		//	
		//	Если ЗначениеЗаполнено(ДобТЧ.Найти(ИмяТаблицы))
		//	 Или ЗначениеЗаполнено(УдлТЧ.Найти(ИмяТаблицы)) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][ИмяКолонкиТекущейВерсии] = ВерсияОбъекта.ТабличныеЧасти[ИмяТаблицы].Скопировать();
		//	СсылкаНаВерсиюТаблицы = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][ИмяКолонкиТекущейВерсии];
		//	СсылкаНаВерсиюТаблицы.Колонки.Добавить("_ИдСтроки");
		//	СсылкаНаВерсиюТаблицы.ЗаполнитьЗначения(Неопределено, "_ИдСтроки");
		//	СсылкаНаВерсиюТаблицы.Колонки.Добавить("_Модификация");
		//	СсылкаНаВерсиюТаблицы.ЗаполнитьЗначения(Неопределено, "_Модификация");
		//	ТаблицаСИзменениями = ИзмТЧ.Получить(ИмяТаблицы);
		//	Если ТаблицаСИзменениями <> Неопределено Тогда
		//		ИзмТЧ_СтрокиИ = ТаблицаСИзменениями["И"];
		//		ИзмТЧ_СтрокиД = ТаблицаСИзменениями["Д"];
		//		ИзмТЧ_СтрокиУ = ТаблицаСИзменениями["У"];
		//		
		//		РазмерностьВТЧ0 = ВерсияОбъекта_Пред.ТабличныеЧасти[ИмяТаблицы].Количество();
		//		Если РазмерностьВТЧ0 = 0 Тогда
		//			ПомеченныеВТЧ0 = Новый Массив;
		//		Иначе
		//			ПомеченныеВТЧ0 = Новый Массив(РазмерностьВТЧ0);
		//		КонецЕсли;
		//		
		//		РазмерностьВТЧ1 = ВерсияОбъекта.ТабличныеЧасти[ИмяТаблицы].Количество();
		//		Если РазмерностьВТЧ1 = 0 Тогда
		//			ПомеченныеВТЧ1 = Новый Массив;
		//		Иначе
		//			ПомеченныеВТЧ1 = Новый Массив(РазмерностьВТЧ1);
		//		КонецЕсли;
		//		
		//		Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиИ Цикл
		//			СтрокаТИЗ = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии][ЭлементТЧ.ИндексВТЧ0-1];
		//			СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._ИдСтроки = СтрокаТИЗ._ИдСтроки;
		//			СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._Модификация = "И";
		//		КонецЦикла;
		//		
		//		Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиД Цикл
		//			СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._ИдСтроки = УвеличитьСчетчик(счетчикУникальныйИд, ИмяТаблицы);
		//			СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1]._Модификация = "Д";
		//		КонецЦикла;
		//		
		//		// необходимо заполнить всем элементам УникальныйИд (сопоставить с предыдущей версией)
		//		Для Индекс = 1 По СсылкаНаВерсиюТаблицы.Количество() Цикл
		//			Если СсылкаНаВерсиюТаблицы[Индекс-1]._ИдСтроки = Неопределено Тогда
		//				// найдена строка, для которой необходимо найти соответствие в предыдущей таблице
		//				СтрокаТЧ = СсылкаНаВерсиюТаблицы[Индекс-1];
		//				
		//				ПараметрыОтбора = Новый Структура;
		//				Для Каждого ЭлементКоллекции Из СсылкаНаВерсиюТаблицы.Колонки Цикл
		//					Если (ЭлементКоллекции.Имя <> "_ИдСтроки") И (ЭлементКоллекции.Имя <> "_Модификация") Тогда
		//						ПараметрыОтбора.Вставить(ЭлементКоллекции.Имя, СтрокаТЧ[ЭлементКоллекции.Имя]);
		//					КонецЕсли;
		//				КонецЦикла;
		//				МассивСтрокТекущейТЧ = СсылкаНаВерсиюТаблицы.НайтиСтроки(ПараметрыОтбора);
		//				МассивСтрокПредыдущейТЧ = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии].НайтиСтроки(ПараметрыОтбора);
		//				
		//				Для ИндПоТЗ_Текущей = 1 По МассивСтрокТекущейТЧ.Количество() Цикл
		//					Если ИндПоТЗ_Текущей <= МассивСтрокПредыдущейТЧ.Количество() Тогда
		//						МассивСтрокТекущейТЧ[ИндПоТЗ_Текущей-1]._ИдСтроки = МассивСтрокПредыдущейТЧ[ИндПоТЗ_Текущей-1]._ИдСтроки;
		//					КонецЕсли;
		//					МассивСтрокТекущейТЧ[ИндПоТЗ_Текущей-1]._Модификация = Ложь;
		//				КонецЦикла;
		//			КонецЕсли;
		//		КонецЦикла;
		//		Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиУ Цикл
		//			СтрокаМнимая = СсылкаНаВерсиюТаблицы.Добавить();
		//			СтрокаМнимая._ИдСтроки = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии][ЭлементТЧ.ИндексВТЧ0-1]._ИдСтроки;
		//			СтрокаМнимая._Модификация = "У";
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		
		ВерсияОбъекта_Пред = ВерсияОбъекта;
	КонецЦикла;
	
	ВерсииОтличаются = Ложь;
	
	ЧислоИзменившихсяРеквизитов = РассчитатьЧислоИзменившихсяРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий);
	Если ЧислоИзменившихсяРеквизитов > 0 ИЛИ ИзмТЧ.Количество() > 0 Тогда
		ВерсииОтличаются = Истина;
	КонецЕсли;
	
	Возврат ВерсииОтличаются;

КонецФункции

// Движок отчета. Заполняет отчет по номеру переданной версии.
// Выполняется сравнение между версиями переданной в качестве параметра РезультатРазбораВерсии_0
// и заданной по НомерВерсии
// Последовательность выполнения:
// 1. Получение результата разбора версий сравниваемых объектов
// 2. Формирование списка реквизитов и табличных частей, которые были
//    - изменены
//    - добавлены
//    - удалены
//
Функция РассчитатьИзменения(СсылкаНаОбъект, НомерВерсии,
						   РезультатРазбораВерсии_0,
						   РезультатРазбораВерсии_1)
	
	ЭтоДокумент = Ложь;
	
	Если Метаданные.Документы.Содержит(СсылкаНаОбъект.Метаданные()) Тогда
		ЭтоДокумент = Истина;
	КонецЕсли;
	
	// Выполняем разбор предпоследней версии
	Реквизиты_0      = РезультатРазбораВерсии_0.Реквизиты;
	ТабличныеЧасти_0 = РезультатРазбораВерсии_0.ТабличныеЧасти;
	
	// Выполняем разбор последней версии
	РезультатРазбораВерсии_1 = РазборВерсии(НомерВерсии, СсылкаНаОбъект);
	Реквизиты_1      = РезультатРазбораВерсии_1.Реквизиты;
	ТабличныеЧасти_1 = РезультатРазбораВерсии_1.ТабличныеЧасти;
	
	///////////////////////////////////////////////////////////////////////////////
	//           Формируем список табличных частей, которые изменились           //
	///////////////////////////////////////////////////////////////////////////////
	СписокТабличныхЧастей_0	= СоздатьТаблицуСравнения();
	Для Каждого Элемент Из ТабличныеЧасти_0 Цикл
		НоваяСтрока = СписокТабличныхЧастей_0.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Элемент.Ключ));
	КонецЦикла;
	
	СписокТабличныхЧастей_1	= СоздатьТаблицуСравнения();
	Для Каждого Элемент Из ТабличныеЧасти_1 Цикл
		НоваяСтрока = СписокТабличныхЧастей_1.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Элемент.Ключ));
	КонецЦикла;
	
	// возможно была изменена структура метаданных - добавились или были удалены реквизиты
	СписокДобавленныхТЧ = ВычестьТаблицу(СписокТабличныхЧастей_1, СписокТабличныхЧастей_0);
	СписокУдаленныхТЧ  = ВычестьТаблицу(СписокТабличныхЧастей_0, СписокТабличныхЧастей_1);
	
	// список не изменившихся реквизитов, по которым будем искать совпадения / расхождения
	СписокОставшихсяТЧ = ВычестьТаблицу(СписокТабличныхЧастей_1, СписокДобавленныхТЧ);
	
	// список реквизитов, которые были изменены
	СписокИзменившихсяТЧ = НайтиИзменившиесяТабличныеЧасти(СписокОставшихсяТЧ,
														   ТабличныеЧасти_0,
														   ТабличныеЧасти_1);
	
	///////////////////////////////////////////////////////////////////////////////
	//           Формируем список реквизитов, которые изменились                 //
	///////////////////////////////////////////////////////////////////////////////
	СписокРеквизитов0 = СоздатьТаблицуСравнения();
	Для Каждого Реквизит Из РезультатРазбораВерсии_0.Реквизиты Цикл
		НоваяСтрока = СписокРеквизитов0.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Строка(Реквизит.НаименованиеРеквизита)));
	КонецЦикла;
	
	СписокРеквизитов1 = СоздатьТаблицуСравнения();
	Для Каждого Реквизит Из РезультатРазбораВерсии_1.Реквизиты Цикл
		НоваяСтрока = СписокРеквизитов1.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Строка(Реквизит.НаименованиеРеквизита)));
	КонецЦикла;
	
	// возможно была изменена структура метаданных - добавились или были удалены реквизиты
	СписокДобавленныхРеквизитов = ВычестьТаблицу(СписокРеквизитов1, СписокРеквизитов0);
	СписокУдаленныхРеквизитов  = ВычестьТаблицу(СписокРеквизитов0, СписокРеквизитов1);
	
	// список не изменившихся реквизитов, по которым будем искать совпадения / расхождения
	СписокОставшихсяРеквизитов = ВычестьТаблицу(СписокРеквизитов1, СписокДобавленныхРеквизитов);
	
	// список реквизитов, которые были изменены
	СписокИзменившихсяРеквизитов = СоздатьТаблицуСравнения();
	
	ИзмененияВРеквизитах = Новый Соответствие;
	ИзмененияВРеквизитах.Вставить("д", СписокДобавленныхРеквизитов);
	ИзмененияВРеквизитах.Вставить("у", СписокУдаленныхРеквизитов);
	ИзмененияВРеквизитах.Вставить("и", СписокИзменившихсяРеквизитов);
	
	Для Каждого СтрокаТаблицыЗначений Из СписокОставшихсяРеквизитов Цикл
		
		Реквизит = СтрокаТаблицыЗначений.Значение;
		Зн_0 = Реквизиты_0.Найти(Реквизит, "НаименованиеРеквизита").ЗначениеРеквизита;
		Зн_1 = Реквизиты_1.Найти(Реквизит, "НаименованиеРеквизита").ЗначениеРеквизита;
		
		Если Зн_0 <> Зн_1 Тогда
			НоваяСтрока = СписокИзменившихсяРеквизитов.Добавить();
			НоваяСтрока.Установить(0, Реквизит);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзмененияВТаблицах = РассчитатьИзмененияТабличныхЧастей(
								  СписокИзменившихсяТЧ,
								  ТабличныеЧасти_0,
								  ТабличныеЧасти_1);
	
	МодификацииТабличныхЧастей = Новый Структура;
	МодификацииТабличныхЧастей.Вставить("д", СписокДобавленныхТЧ);
	МодификацииТабличныхЧастей.Вставить("у", СписокУдаленныхТЧ);
	МодификацииТабличныхЧастей.Вставить("и", ИзмененияВТаблицах);
	
	КомпоновкаИзменений = Новый Соответствие;
	КомпоновкаИзменений.Вставить("Реквизиты",      ИзмененияВРеквизитах);
	КомпоновкаИзменений.Вставить("ТабличныеЧасти", МодификацииТабличныхЧастей);
	
	Возврат КомпоновкаИзменений;
	
КонецФункции

// Функция добавляет колонки, соответственно количеству версий объекта
// Колонки имеют называния в виде "Вер<Номер>", где <Номер> принимает
// значения от 1 до количества сохраненных версий объекта. Нумерация
// является условной, т.е. например название "Вер1" может не соответствовать
// сохраненной версии объекта с версией 0.
//
Процедура ПодготовитьКолонкиТаблицИзмененийРеквизитов(ТаблицаЗначений,
                                                      МассивНомеровВерсий)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Наименование");
	ТаблицаЗначений.Колонки.Добавить("_Модификация");
	ТаблицаЗначений.Колонки.Добавить("_ТипЗначения"); // предполагаемый тип значения
	
	Для Индекс = 1 По МассивНомеровВерсий.Количество() Цикл
		ТаблицаЗначений.Колонки.Добавить("Вер" + МассивНомеровВерсий[Индекс-1]);
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьИзмененияТабличныхЧастей(СписокИзменившихсяТЧ,
										  ТабличныеЧасти_0,
										  ТабличныеЧасти_1)
	
	ИзмененияВТаблицах = Новый Соответствие;
	
	// цикл по количеству табличных частей
	Для Индекс = 1 По СписокИзменившихсяТЧ.Количество() Цикл
		
		ИзмененияВТаблицах.Вставить(СписокИзменившихсяТЧ[Индекс-1].Значение, Новый Соответствие);
		
		// Таблица разбиений предназначена для хранения интервалов поиска
		// поиск прекратиться только тогда, когда в таблице разбиений
		// не останется ненулевых размерностей. Поиск может происходить ТОЛЬКО
		// по таблице интервалов и только по текущему интервалу!!!
		//
		ТаблицаИнтерваловПоиска = Новый ТаблицаЗначений;
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокНачало_1");
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокКонец_1");
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокНачало_2");
		ТаблицаИнтерваловПоиска.Колонки.Добавить("БлокКонец_2");
		
		ТаблицаДляАнализа = СписокИзменившихсяТЧ[Индекс-1].Значение;
		ТЧ0 = ТабличныеЧасти_0[ТаблицаДляАнализа];
		ТЧ1 = ТабличныеЧасти_1[ТаблицаДляАнализа];
		
		ПервоеРазбиение = ТаблицаИнтерваловПоиска.Добавить();
		ПервоеРазбиение.БлокНачало_1 = 1;
		ПервоеРазбиение.БлокКонец_1  = ТЧ0.Количество();
		ПервоеРазбиение.БлокНачало_2 = 1;
		ПервоеРазбиение.БлокКонец_2  = ТЧ1.Количество();
		
		// Часть №1:
		// фильтрация совпадающих элементов элементов
		// на выходе - заполненная ТаблицаИнтерваловПоиска.
		// Далее необходимо эту таблицу обработать и вычислить
		// добавленные/удаленные/измененные элементы.
		
		ИзмененияВИнтервалах = Истина;
		// цикл до тех пока появляются новые интервалы для поиска
		Пока ИзмененияВИнтервалах Цикл
			
			// число интервалов в которых будет происходить поиск
			ЧислоИнтерваловПоиска = ТаблицаИнтерваловПоиска.Количество();
			
			ИзмененияВИнтервалах = Ложь;
			
			Для НомерИнтервалаПоиска = 1 По ЧислоИнтерваловПоиска Цикл
			
				БлокНачало_1 = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокНачало_1;
				БлокКонец_1  = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокКонец_1;
				
				БлокНачало_2 = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокНачало_2;
				БлокКонец_2  = ТаблицаИнтерваловПоиска[НомерИнтервалаПоиска-1].БлокКонец_2;
				
				Если    (БлокНачало_1 > БлокКонец_1)
					ИЛИ (БлокНачало_2 > БлокКонец_2) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				// этот интервал можно удалить
				Если      (БлокКонец_1 = 0) И (БлокКонец_2 = 0) Тогда
					// удаляем этот интервал и сбрасываем счетчик по разбиениям
					ТаблицаИнтерваловПоиска.Удалить(НомерИнтервалаПоиска);
					Прервать;
				// Если интервал разбиения ТЧ0 нулевой, то строки были добавлены в ТЧ1
				ИначеЕсли (БлокКонец_1 = 0) Тогда
				// Если интервал разбиения ТЧ1 нулевой, то строки были удалены в ТЧ1
				ИначеЕсли (БлокКонец_2 = 0) Тогда
				
				Иначе
					Результат = НайтиОдинаковыеБлоки(ТЧ0, ТЧ1,
													 БлокНачало_1,
													 БлокКонец_1,
													 БлокНачало_2,
													 БлокКонец_2,
													 ТаблицаИнтерваловПоиска,
													 НомерИнтервалаПоиска);
					
					Если Результат <> Неопределено Тогда
						
						ИзмененияВИнтервалах = Истина;
						
						// разбиваем текущий интервал - выделяем в нем участок, в котором отсутствуют совпадающие элементы
						
						Строка = ТаблицаИнтерваловПоиска.Вставить(НомерИнтервалаПоиска-1);
						Строка.БлокНачало_1 = БлокНачало_1;
						Строка.БлокКонец_1  = Результат.БлокНачало_1 - 1;
						
						Строка.БлокНачало_2 = БлокНачало_2;
						Строка.БлокКонец_2  = Результат.БлокНачало_2 - 1;
						
						Строка = ТаблицаИнтерваловПоиска.Вставить(НомерИнтервалаПоиска);
						Строка.БлокНачало_1 = Результат.БлокНачало_1+Результат.Размер;
						Строка.БлокКонец_1  = БлокКонец_1;
						
						Строка.БлокНачало_2 = Результат.БлокНачало_2+Результат.Размер;
						Строка.БлокКонец_2  = БлокКонец_2;
						
						ТаблицаИнтерваловПоиска.Удалить(НомерИнтервалаПоиска+1);
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Удаляем "пустые интервалы".
		Для Каждого Элемент Из ТаблицаИнтерваловПоиска Цикл
			Если  (Элемент.БлокНачало_1 > Элемент.БлокКонец_1)
				И (Элемент.БлокНачало_2 > Элемент.БлокКонец_2) Тогда
				ТаблицаИнтерваловПоиска.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		// шаг 3- сортировка строк по признаку добавлены / удалены / изменены
		
		ТаблицаДобавленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаУдаленныхСтрок   = Новый ТаблицаЗначений;
		ТаблицаИзмененныхСтрок  = Новый ТаблицаЗначений;
		
		Для Каждого Элемент Из ТЧ0.Колонки Цикл
			ТаблицаДобавленныхСтрок.Колонки.Добавить(Элемент.Имя);
			ТаблицаУдаленныхСтрок.Колонки.Добавить(Элемент.Имя);
			ТаблицаИзмененныхСтрок.Колонки.Добавить(Элемент.Имя);
		КонецЦикла;
		
		// 3.1 ищем все вхождения в своих под-интервалах
		
		ТаблицаИзмененныхСтрок = Новый ТаблицаЗначений;
		ТаблицаИзмененныхСтрок.Колонки.Добавить("ИндексВТЧ0");
		ТаблицаИзмененныхСтрок.Колонки.Добавить("ИндексВТЧ1");
		
		ТаблицаДобавленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаДобавленныхСтрок.Колонки.Добавить("ИндексВТЧ1");
		
		ТаблицаУдаленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаУдаленныхСтрок.Колонки.Добавить("ИндексВТЧ0");
		
		Для Каждого Элемент Из ТаблицаИнтерваловПоиска Цикл
			ИзмененныеСтроки = РассчитатьИзмененияПоСтрокам(ТаблицаИзмененныхСтрок,
															ТаблицаДобавленныхСтрок,
															ТаблицаУдаленныхСтрок,
															Элемент,
															ТЧ0,
															ТЧ1);
		КонецЦикла;
		
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("Д", ТаблицаДобавленныхСтрок);
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("У", ТаблицаУдаленныхСтрок);
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("И", ТаблицаИзмененныхСтрок);
		
	КонецЦикла;
	
	Возврат ИзмененияВТаблицах;
	
КонецФункции

// Сравнивает две табличные части, список которых передается в первом параметре
// и пытается найти расхождения в них (не совпадающие элементы). Если таковые
// таблицы есть, то формируется список таких табличных частей.
//
Функция НайтиИзменившиесяТабличныеЧасти(СписокОставшихсяТЧ,
                                        ТабличныеЧасти_0,
                                        ТабличныеЧасти_1)
	
	СписокИзменившихсяТЧ = СоздатьТаблицуСравнения();
	
	// Поиск Табличных частей, в которых изменились строки
	Для Каждого Элемент Из СписокОставшихсяТЧ Цикл
		
		ТЧ_0 = ТабличныеЧасти_0[Элемент.Значение];
		ТЧ_1 = ТабличныеЧасти_1[Элемент.Значение];
		
		Если ТЧ_0.Количество() = ТЧ_1.Количество() Тогда
			
			НайденоОтличие = Ложь;
			// проверяем, что структура колонок осталась прежней (эквивалентна)
			Если ТЧЭквиваленты (ТЧ_0.Колонки, ТЧ_1.Колонки) Тогда
				
				// ищем различающиеся элементы - строки
				Для Индекс = 0 По ТЧ_0.Количество() - 1 Цикл
					Строка_0 = ТЧ_0[Индекс];
					Строка_1 = ТЧ_1[Индекс];
					
					Если НЕ СтрокиТЧРавны(Строка_0, Строка_1, ТЧ_0.Колонки) Тогда
						НайденоОтличие = Истина;
						Прервать;
					КонецЕсли
				КонецЦикла;
				
			Иначе
				НайденоОтличие = Истина;
			КонецЕсли;
			
			Если НайденоОтличие Тогда
				НоваяСтрока = СписокИзменившихсяТЧ.Добавить();
				НоваяСтрока.Установить(0, Элемент.Значение);
			КонецЕсли;
			
		Иначе
			НоваяСтрока = СписокИзменившихсяТЧ.Добавить();
			НоваяСтрока.Установить(0, Элемент.Значение);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СписокИзменившихсяТЧ;
	
КонецФункции

// Функция по номеру версии объекта и ссылке на него получает объект из
// регистра сведений, записывает его на диск и вызывает функцию разбора
// XML представления объекта.
// Параметры:
// НомерВерсии   - число - номер версии документа в регистре сведений
// Ссылка        - СправочникСсылка/ДокументСсылка - ссылка на экземпляр 
//                 объекта метаданных
// Возвращаемое значение:
// Структура:
//
Функция РазборВерсии(НомерВерсии, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ АвторВерсии, ДатаВерсии, ВерсияОбъекта 
					|ИЗ РегистрСведений.ВерсииОбъектов
					|ГДЕ Объект = &Ссылка
					|И НомерВерсии = &НомВер";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомВер", Число(НомерВерсии));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
	
	Если ВерсияОбъекта = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ВерсияОбъекта.Записать(ИмяВременногоФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат = РазборПредставленияОбъектаXML(СтрокаXML, Ссылка);
		Результат.Вставить("ИмяОбъекта", Строка(Ссылка));
		//Результат.Вставить("АвторИзменения", СокрЛП(Строка(Выборка.АвторВерсии)));
		//Результат.Вставить("ДатаИзменения", Выборка.ДатаВерсии);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Функция считывает начальные значения реквизитов и табличных частей документа
// формат формируемой структуры данных для реквизитов:
// ТаблицаРеквизитов - ТаблицаЗначений
// Колонки 
// |-Вер<младший номер версии>
// |-...
// |-Вер<старший номер версии>
// |-_Модификация (Булево)
// |-Наименование
//
// Строки содержат список реквизитов и их изменения во времени, в колонке _Модификация
// содержится признак модифицированности строки:
// ложь - строка не была изменена
// "д"  - строка была добавлена
// "у"  - строка была удалена
// "и"  - строка была изменена
//
// Формат формируемой структуры данных для таблиц значений:
// ТаблицаТЧ - Соответствие
// |- <Имя табличной части1> - Соответствие
//    |-Вер<младший номер версии> - ТаблицаЗначений
//       Колонки
//       |- Базовые колонки соответствующей таблицы части объекта
//       |- _ИдСтроки     - уникальный, в пределах таблицы, идентификатор данной строки
//       |- _Модификация  - признак модифицированности строки
//           принимает следующие значения:
//           ложь - строка не была изменена
//           "д"  - строка была добавлена
//           "у"  - строка была удалена
//           "и"  - строка была изменена
//    |-...
//    |-Вер<старший номер версии>
// |-...
// |- <Имя табличной частиN>
//
Функция СчитатьНачальныеЗначенияРеквизитовИТабличныхЧастей(СсылкаНаОбъект,
														   ТаблицаРеквизитов,
														   ТаблицаТЧ,
														   КоличествоВерсий,
														   МассивНомеровВерсий)
	
	МладшаяВерсияОбъекта = МассивНомеровВерсий[0];
	
	// Выполняем разбор первой версии
	ВерсияОбъекта  = РазборВерсии(МладшаяВерсияОбъекта, СсылкаНаОбъект);
	Реквизиты      = ВерсияОбъекта.Реквизиты;
	ТабличныеЧасти = ВерсияОбъекта.ТабличныеЧасти;
	
	Колонка = "Вер" + МассивНомеровВерсий[0];
	
	Для Каждого СтрокаТаблицыЗначений Из Реквизиты Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[Колонка] = СтрокаТаблицыЗначений.ЗначениеРеквизита;
		НоваяСтрока.Наименование = СтрокаТаблицыЗначений.НаименованиеРеквизита;
		НоваяСтрока._Модификация = Ложь;
		НоваяСтрока._ТипЗначения = СтрокаТаблицыЗначений.ТипРеквизита;
	КонецЦикла;
	
	Для Каждого ЭлементТЧ Из ТабличныеЧасти Цикл
		
		ТаблицаТЧ.Вставить(ЭлементТЧ.Ключ, Новый Соответствие);
		ПодготовитьКолонкиТаблицИзмененийДляСоответствия(ТаблицаТЧ[ЭлементТЧ.Ключ], МассивНомеровВерсий);
		ТаблицаТЧ[ЭлементТЧ.Ключ]["Вер"+МладшаяВерсияОбъекта] = ЭлементТЧ.Значение.Скопировать();
		
		ТекущаяТЗ = ТаблицаТЧ[ЭлементТЧ.Ключ]["Вер"+МладшаяВерсияОбъекта];
		
		// спец идентификатор строки что бы различать строки
		// значение является уникальным в пределах данной таблицы значений
		ТекущаяТЗ.Колонки.Добавить("_ИдСтроки");
		ТекущаяТЗ.Колонки.Добавить("_Модификация");
		
		Для Индекс = 1 По ТекущаяТЗ.Количество() Цикл
			ТекущаяТЗ[Индекс-1]._ИдСтроки = Индекс;
			ТекущаяТЗ[Индекс-1]._Модификация = Ложь;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ВерсияОбъекта;
	
КонецФункции

// Процедура считывает данные XML из файла и заполняет структуры данных
//
// Возвращаемое значение:
// Структура, содержащая два соответствия: ТабличныеЧасти, Реквизиты
// Структура хранения данных:
// Соответствие ТабличныеЧасти, которое содержит в себе значения табличных частей
// формат: 
//          СоответствиеИмя1 -> ТаблицаЗначений1
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM1
//
//          СоответствиеИмя2 -> ТаблицаЗначений2
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM2
//
//
//          СоответствиеИмяN -> ТаблицаЗначенийN
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM3
//
// Соответствие ЗначенияРеквизитов
//          ИмяРеквизита1 -> Значение1
//          ИмяРеквизита2 -> Значение2
//          ...
//          ИмяРеквизитаN -> ЗначениеN
//
Функция РазборПредставленияОбъектаXML(СтрокаXML, Ссылка)
	
	// содержит имя метаданного измененного объекта
	Перем ИмяОбъекта;
	
	// Содержит положение маркера в дереве XML.
	// Требуется для идентификации текущего элемента.
	Перем УровеньЧтения;
	
	// Содержат значения реквизитов справочников / документов
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	// уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части
	УровеньЧтения = 0;
	
	ТабличныеЧастиМТД = Ссылка.Метаданные().ТабличныеЧасти;
	
	ТипЗначения = "";
	
	ТипЗначенияПоляТЧ = "";
	
	// основной цикл разбора по XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // указатель на первом элементе XML - корень XML
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // указатель на втором уровне - это реквизит или имя табличной части
				ИмяРеквизита = ЧтениеXML.Имя;
				Если ТабличныеЧастиМТД.Найти(ИмяРеквизита) <> Неопределено Тогда
					ИмяТабличнойЧасти = ИмяРеквизита;
					// создаем новую таблицу значений в таблице соответствий
					Если ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
						ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
					КонецЕсли;
				КонецЕсли;
				НовоеЗР = ЗначенияРеквизитов.Добавить();
				НовоеЗР.НаименованиеРеквизита = ИмяРеквизита;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							НовоеЗР.ТипРеквизита = ЧтениеXML.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			
			ИначеЕсли (УровеньЧтения = 3) и (ЧтениеXML.Имя = "Row") Тогда // указатель на поле табличной части
				ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			ИначеЕсли УровеньЧтения = 4 Тогда // указатель на поле табличной части
				
				ТипЗначенияПоляТЧ = "";
				
				ИмяПоляТЧ = ЧтениеXML.Имя; // 
				Таблица   = ТабличныеЧасти[ИмяТабличнойЧасти];
				Если Таблица.Колонки.Найти(ИмяПоляТЧ)= Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяПоляТЧ);
				КонецЕсли;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							XMLТип = ЧтениеXML.Значение;
							
							Если Лев(XMLТип, 3) = "xs:" Тогда
								ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3), "http://www.w3.org/2001/XMLSchema"));
							Иначе
								ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				НовоеЗР.ЗначениеРеквизита = ЧтениеXML.Значение;
				//ЗначенияРеквизитов[ИмяРеквизита] = ЧтениеXML.Значение;
				
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				ПоследняяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Получить(ТабличныеЧасти[ИмяТабличнойЧасти].Количество()-1);
				
				Если ТипЗначенияПоляТЧ = "" Тогда
					
					ОписаниеРТЧ = ТабличныеЧастиМТД[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяПоляТЧ);
					
					Если ОписаниеРТЧ = Неопределено Тогда
						Для Каждого СтдРеквизит Из ТабличныеЧастиМТД[ИмяТабличнойЧасти].СтандартныеРеквизиты Цикл
							Если СтдРеквизит.Имя = ИмяПоляТЧ Тогда
								ОписаниеРТЧ = СтдРеквизит;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ОписаниеРТЧ <> Неопределено
					   И ОписаниеРТЧ.Тип.Типы().Количество() = 1 Тогда
						ТипЗначенияПоляТЧ = ОписаниеРТЧ.Тип.Типы()[0];
					КонецЕсли;
					
				КонецЕсли;
				
				ПоследняяСтрока[ИмяПоляТЧ] = ?(НЕ ЗначениеЗаполнено(ТипЗначенияПоляТЧ), ЧтениеXML.Значение, XMLЗначение(ТипЗначенияПоляТЧ, ЧтениеXML.Значение));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 2-й этап: из списка реквизитов исключаем табличные части
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	//ТабличныеЧастиМТД
	Для Каждого ЭлементСоответствия Из ТабличныеЧасти Цикл
		Таблица = ЭлементСоответствия.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			ТаблицаМТД = ТабличныеЧастиМТД.Найти(ЭлементСоответствия.Ключ);
			Если ТаблицаМТД <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из ТаблицаМТД.Реквизиты Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьКолонкиТаблицИзмененийДляСоответствия(Соответствие, МассивНомеровВерсий)
	
	Количество = МассивНомеровВерсий.Количество();
	
	Для Индекс = 1 По Количество Цикл
		Соответствие.Вставить("Вер" + МассивНомеровВерсий[Индекс-1], Новый ТаблицаЗначений);
	КонецЦикла;
	
КонецПроцедуры

// Функция ищет одно вхождение части одного блока в другой
//
Функция НайтиОдинаковыеБлоки(ТаблицаЗначений1,
                             ТаблицаЗначений2,
                             БлокНачало_1,
                             БлокКонец_1,
                             БлокНачало_2,
                             БлокКонец_2,
                             ТаблицаИнтерваловПоиска,
                             ТекущийНомерИнтервала);
	
	// количество разбиений меньшей таблицы значений интервала поиска 
	ЧислоРазбиений = 0;
	
	// инициализация, что бы компилятор не ругался
	Кон = 0;
	
	НайденоСовпадение = Ложь;
	
	ТаблицаСовпадений = Новый ТаблицаЗначений;
	ТаблицаСовпадений.Колонки.Добавить("БлокНачало_1");
	ТаблицаСовпадений.Колонки.Добавить("БлокНачало_2");
	ТаблицаСовпадений.Колонки.Добавить("Размер");
	
	Размерность1 = БлокКонец_1 - БлокНачало_1 + 1;
	Размерность2 = БлокКонец_2 - БлокНачало_2 + 1;
	
	// находим разбиваемую таблицу - это таблица с наименьшим числом
	// элементов
	
	Если Размерность1 <= Размерность2 Тогда
		ТаблицаАнализа1 = ТаблицаЗначений1;
		ТаблицаАнализа2 = ТаблицаЗначений2;
		ПервыйБлок_Нач = БлокНачало_1;
		ПервыйБлок_Кон = БлокКонец_1;
		ВторойБлок_Нач = БлокНачало_2;
		ВторойБлок_Кон = БлокКонец_2;
		ПрямоеСоответствие = Истина;
	Иначе
		ТаблицаАнализа1 = ТаблицаЗначений2;
		ТаблицаАнализа2 = ТаблицаЗначений1;
		ПервыйБлок_Нач = БлокНачало_2;
		ПервыйБлок_Кон = БлокКонец_2;
		ВторойБлок_Нач = БлокНачало_1;
		ВторойБлок_Кон = БлокКонец_1;
		ПрямоеСоответствие = Ложь;
	КонецЕсли;
	
	Пока НЕ НайденоСовпадение Цикл
		
		ЧислоРазбиений = ЧислоРазбиений + 1;
		
		Если ЧислоРазбиений > (ПервыйБлок_Кон - ПервыйБлок_Нач + 1) Тогда
			Прервать;
		КонецЕсли;
		
		Для Счетчик = 1 По ЧислоРазбиений Цикл
			
			// ограничиваем область искомого блока в ТЧ
			Если Счетчик = 1 Тогда
				Нач = Цел(ПервыйБлок_Нач + (ПервыйБлок_Кон-ПервыйБлок_Нач)/ЧислоРазбиений*(Счетчик-1));
			Иначе
				Нач = Кон + 1;
			КонецЕсли;
			
			Кон = Цел(ПервыйБлок_Нач + (ПервыйБлок_Кон-ПервыйБлок_Нач)/ЧислоРазбиений*Счетчик);
			
			// возвращает номер позиции
			Результат = ПоискПодтаблицы(ТаблицаАнализа1, Нач, Кон, ТаблицаАнализа2, ВторойБлок_Нач, ВторойБлок_Кон);
			
			// Если совпадение найдено - развиваем успех: 
			// ищем продолжение подтаблицы до найденного паттерна и после.
			// Нижняя граница искомого паттерна ограничена ПервыйБлок_Нач, его верхняя граница
			// ограничена ПервыйБлок_Кон. Граница таблицы на основе которой происходит поиск
			// ограничивается ВторойБлок_Нач и ВторойБлок_Кон соответственно.
			// 
			Если Результат <> Неопределено Тогда
				
				// 1. пробуем "откатиться" к началу
				
				НижняяСдвигаемаяГраницаТаблицыАнализа1 = Нач;
				НижняяСдвигаемаяГраницаТаблицыАнализа2 = Результат;
				
				Пока  (НижняяСдвигаемаяГраницаТаблицыАнализа1 - 1) >= 1
					И (НижняяСдвигаемаяГраницаТаблицыАнализа2 - 1) >= 1
					И (НижняяСдвигаемаяГраницаТаблицыАнализа1 - 1) > ТаблицаИнтерваловПоиска[ТекущийНомерИнтервала-1].БлокНачало_1
					И (НижняяСдвигаемаяГраницаТаблицыАнализа2 - 1) > ТаблицаИнтерваловПоиска[ТекущийНомерИнтервала-1].БлокНачало_2
					И СтрокиТЧРавны(ТаблицаАнализа1[НижняяСдвигаемаяГраницаТаблицыАнализа1-2], ТаблицаАнализа2[НижняяСдвигаемаяГраницаТаблицыАнализа2-2], ТаблицаАнализа1.Колонки) Цикл
					
					Если (НижняяСдвигаемаяГраницаТаблицыАнализа1-1)>=ПервыйБлок_Нач И (НижняяСдвигаемаяГраницаТаблицыАнализа2-1)>=ВторойБлок_Нач Тогда
						НижняяСдвигаемаяГраницаТаблицыАнализа1 = НижняяСдвигаемаяГраницаТаблицыАнализа1 - 1;
						НижняяСдвигаемаяГраницаТаблицыАнализа2 = НижняяСдвигаемаяГраницаТаблицыАнализа2 - 1;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// 2. пробуем "откатиться" к концу таблицы
				
				ВерхняяСдвигаемаяГраницаТаблицыАнализа1 = Кон;
				ВерхняяСдвигаемаяГраницаТаблицыАнализа2 = Результат + Кон - Нач;
				
				Пока  ВерхняяСдвигаемаяГраницаТаблицыАнализа1 < ТаблицаАнализа1.Количество()
					И ВерхняяСдвигаемаяГраницаТаблицыАнализа2 < ТаблицаАнализа2.Количество()
					И СтрокиТЧРавны(ТаблицаАнализа1[ВерхняяСдвигаемаяГраницаТаблицыАнализа1-1+1], ТаблицаАнализа2[ВерхняяСдвигаемаяГраницаТаблицыАнализа2-1+1], ТаблицаАнализа1.Колонки) Цикл
					
					Если ВерхняяСдвигаемаяГраницаТаблицыАнализа1 < ПервыйБлок_Кон И ВерхняяСдвигаемаяГраницаТаблицыАнализа2 < ВторойБлок_Кон Тогда
						ВерхняяСдвигаемаяГраницаТаблицыАнализа1 = ВерхняяСдвигаемаяГраницаТаблицыАнализа1 + 1;
						ВерхняяСдвигаемаяГраницаТаблицыАнализа2 = ВерхняяСдвигаемаяГраницаТаблицыАнализа2 + 1;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// 3. ТаблицаСовпадений
				// когда нашли продолжение вычисляем индекс, с которого начинается совпадение
				// и размер совпадения в строках (число строк)
				НоваяСтрока = ТаблицаСовпадений.Добавить();
				НоваяСтрока.БлокНачало_1 = НижняяСдвигаемаяГраницаТаблицыАнализа1;
				НоваяСтрока.БлокНачало_2 = НижняяСдвигаемаяГраницаТаблицыАнализа2;
				НоваяСтрока.Размер       = ВерхняяСдвигаемаяГраницаТаблицыАнализа1-НижняяСдвигаемаяГраницаТаблицыАнализа1 + 1;
				
				НайденоСовпадение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Макс_Инд = -1;
	
	Для I = 1 По ТаблицаСовпадений.Количество() Цикл
		
		Если Макс_Инд = -1 Тогда
			Макс_Инд = I;
		КонецЕсли;
		
		Если ТаблицаСовпадений[I-1].Размер > ТаблицаСовпадений[Макс_Инд-1].Размер Тогда
			Макс_Инд = I;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Макс_Инд = -1 Тогда
		Возврат Неопределено;
	Иначе
		
		Если Не ПрямоеСоответствие Тогда
			ВремПерем = ТаблицаСовпадений[Макс_Инд-1].БлокНачало_1;
			ТаблицаСовпадений[Макс_Инд-1].БлокНачало_1 = ТаблицаСовпадений[Макс_Инд-1].БлокНачало_2;
			ТаблицаСовпадений[Макс_Инд-1].БлокНачало_2 = ВремПерем;
		КонецЕсли;
		
		Возврат ТаблицаСовпадений[Макс_Инд-1];
	КонецЕсли;
	
КонецФункции

// Спецификация функции
// функция производит точный поиск ВСЕГО ОКНА поиска ИскомыйШаблон(НачальнаяПозицияВОкнеПоиска, ОконечнаяПозицияВОкнеПоиска) в границах поиска
// АнализируемаяТаблица (НижняяГраницаПоиска, ВерхняяГраницаПоиска)
// Возвращает номер позиции в АнализируемаяТаблица (нумерация с 1) с которой найдена подтаблица
Функция ПоискПодтаблицы(
                         ИскомыйШаблон,               // искомая таблица 
                         НачальнаяПозицияВОкнеПоиска, // индекс первого элемента в окне поиска
                         ОконечнаяПозицияВОкнеПоиска, // индекс последнего элемента в окне поиска 
                                                      // НачальнаяПозицияВОкнеПоиска и ОконечнаяПозицияВОкнеПоиска определяют окно поиска
                         АнализируемаяТаблица,        // Таблица в которой производится поиск
                         НижняяГраницаПоиска,         // НижняяГраницаПоиска, ВерхняяГраницаПоиска - определяют границы,
                         ВерхняяГраницаПоиска)        // в которых возможен поиск
	
	// имеет смысл искать только до тех пор пока выполняется неравенство
	// ТекущаяПозицияПоиска + (ОконечнаяПозицияВОкнеПоиска - НачальнаяПозицияВОкнеПоиска) <= ВерхняяГраницаПоиска
	
	ТекущаяПозицияПоиска = НижняяГраницаПоиска;
	
	Пока ((ТекущаяПозицияПоиска + (ОконечнаяПозицияВОкнеПоиска - НачальнаяПозицияВОкнеПоиска)) <= ВерхняяГраницаПоиска) Цикл
		
		ПодстрокаНайдена = Истина;
		
		Для Индекс = НачальнаяПозицияВОкнеПоиска По ОконечнаяПозицияВОкнеПоиска Цикл
			Если НЕ СтрокиТЧРавны(ИскомыйШаблон[Индекс-1], АнализируемаяТаблица[ТекущаяПозицияПоиска+Индекс-НачальнаяПозицияВОкнеПоиска-1], ИскомыйШаблон.Колонки) Тогда
				ПодстрокаНайдена = Ложь;                            //НижняяГраницаПоиска+ТекущаяПозицияПоиска+Индекс-НачальнаяПозицияВОкнеПоиска-2
				Прервать;
			КонецЕсли
		КонецЦикла;
		
		Если ПодстрокаНайдена Тогда
			Прервать;
		КонецЕсли;
		
		ТекущаяПозицияПоиска = ТекущаяПозицияПоиска + 1;
		
	КонецЦикла;
	
	Если ПодстрокаНайдена Тогда
		
		Возврат ТекущаяПозицияПоиска;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Принимает две табличные части с записью об интервалах, в которых необходимо найти
// изменения
Функция РассчитатьИзмененияПоСтрокам(ТаблицаИзмененныхСтрок,
                                    ТаблицаДобавленныхСтрок,
                                    ТаблицаУдаленныхСтрок,
                                    Элемент,
                                    ТЧ0,
                                    ТЧ1)
	
	кТЧ0 = Новый ТаблицаЗначений;
	кТЧ1 = Новый ТаблицаЗначений;
	
	Колонки = ТЧ0.Колонки;
	
	Для Каждого Колонка Из ТЧ0.Колонки Цикл
		кТЧ0.Колонки.Добавить(Колонка.Имя);
		кТЧ1.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	кТЧ0.Колонки.Добавить("Использована");
	кТЧ1.Колонки.Добавить("Использована");
	
	Для Индекс = Элемент.БлокНачало_1 По Элемент.БлокКонец_1 Цикл
		НоваяСтрока = кТЧ0.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТЧ0[Индекс-1]);
	КонецЦикла;
	
	Для Индекс = Элемент.БлокНачало_2 По Элемент.БлокКонец_2 Цикл
		НоваяСтрока = кТЧ1.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТЧ1[Индекс-1]);
	КонецЦикла;
	
	РазмерностьТЧ0 = Элемент.БлокКонец_1 - Элемент.БлокНачало_1 + 1;
	РазмерностьТЧ1 = Элемент.БлокКонец_2 - Элемент.БлокНачало_2 + 1;
	
	Для Индекс1 = 1 По РазмерностьТЧ0 Цикл
	
		СтрокаТЧ0 = кТЧ0[Индекс1 - 1];
		СоответствиеНайдено = Ложь;
		
		Если СтрокаТЧ0.Использована <> Истина Тогда
			Для Индекс2 = 1 По РазмерностьТЧ1 Цикл
				СтрокаТЧ1 = кТЧ1[Индекс2 - 1];
				Если СтрокаТЧ1.Использована <> Истина Тогда
					Если ПроверитьСтрокиНаРавенство (СтрокаТЧ0, СтрокаТЧ1, Колонки) Тогда
						СоответствиеНайдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли; // Если СтрокаТЧ1.Использована <> Истина Тогда
			КонецЦикла; // Для Индекс2= 1 По РазмерностьТЧ1 Цикл
		КонецЕсли; // Если СтрокаТЧ0.Использована <> Истина Тогда
		
		Если СоответствиеНайдено Тогда
			СтрокаТЧ0.Использована = Истина;
			СтрокаТЧ1.Использована = Истина;
			НоваяСтрока = ТаблицаИзмененныхСтрок.Добавить();
			НоваяСтрока.ИндексВТЧ0 = Индекс1+Элемент.БлокНачало_1-1;
			НоваяСтрока.ИндексВТЧ1 = Индекс2+Элемент.БлокНачало_2-1;
		Иначе
			СтрокаТЧ0.Использована = Истина;
			НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
			НоваяСтрока.ИндексВТЧ0 = Индекс1+Элемент.БлокНачало_1-1;
		КонецЕсли;
		
	КонецЦикла; // Для Индекс1 = 1 По РазмерностьТЧ0 Цикл
	
	Для Индекс = 1 По РазмерностьТЧ1 Цикл
	
		СтрокаТЧ1 = кТЧ1[Индекс - 1];
		Если СтрокаТЧ1.Использована <> Истина Тогда
			СтрокаТЧ1.Использована = Истина;
			НоваяСтрока = ТаблицаДобавленныхСтрок.Добавить();
			НоваяСтрока.ИндексВТЧ1 = Индекс+Элемент.БлокНачало_2-1;
		КонецЕсли; // Если СтрокаТЧ0.Использована <> Истина Тогда
		
	КонецЦикла; // Для Индекс1 = 1 По РазмерностьТЧ0 Цикл
	
КонецФункции

// Принимает на вход две строки из табличных частей с одинаковой структурой и сравнивает их.
// Строки считаются измененными, если у них совпадает хотя бы одна колонка.
Функция ПроверитьСтрокиНаРавенство(Строка1, Строка2, НаборКолонок)
	
	ЧислоОдинаковыхКолонок = 0;
	ЧислоКолонок = 0;
	
	Для Каждого Колонка Из НаборКолонок Цикл
		ЧислоКолонок = ЧислоКолонок + 1;
		Если Строка1[Колонка.Имя] = Строка2[Колонка.Имя] Тогда
			ЧислоОдинаковыхКолонок = ЧислоОдинаковыхКолонок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (ЧислоОдинаковыхКолонок/ЧислоКолонок) >= КритерийДоступаНаРавенствоСтрок() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает доступ - отношение числа неизмененных колонок в строке табличной 
// части к общему числу колонок. На данный момент доступ - 3/5. Т.е. если 
// при сравнении двух строк в двух табличной частях с одинаковым составом колонок
// изменилось всего 2 колонки из 5 то считается, что это та же самая строка.
// 
Функция КритерийДоступаНаРавенствоСтрок()
	Возврат (0.6);
КонецФункции

// Возвращает Истина или Ложь в зависимости от того, эквивалентны табличные
// части или нет. ТЧ считаются эквивалентными, если количество, наименование
// и тип их полей одинаков. Изменение порядка следования колонок не считается
// изменением табличной части.
//
Функция ТЧЭквиваленты(Колонки1, Колонки2)
	
	ТаблицаКолонок1 = СоздатьТаблицуСравнения();
	Для Каждого Элемент Из Колонки1 Цикл
		НоваяСтрока = ТаблицаКолонок1.Добавить();
		НоваяСтрока.Установить(0, Элемент.Имя);
	КонецЦикла;
	
	ТаблицаКолонок2 = СоздатьТаблицуСравнения();
	Для Каждого Элемент Из Колонки2 Цикл
		НоваяСтрока = ТаблицаКолонок2.Добавить();
		НоваяСтрока.Установить(0, Элемент.Имя);
	КонецЦикла;
	
	СписокДобавленныхКолонок = ВычестьТаблицу(ТаблицаКолонок1, ТаблицаКолонок2);
	Если СписокДобавленныхКолонок.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокУдаленныхКолонок   = ВычестьТаблицу(ТаблицаКолонок1, ТаблицаКолонок2);
	Если СписокУдаленныхКолонок.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем совпадение типов колонок
	Для Каждого Элемент1 Из Колонки1 Цикл
		
		Элемент2 = Колонки2.Найти(Элемент1.Имя);
		Типы1 = Элемент1.ТипЗначения.Типы();
		Для Каждого Тип Из Типы1 Цикл
			Если Не Элемент2.ТипЗначения.СодержитТип (Тип) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// проверяем совпадение типов колонок
	Для Каждого Элемент2 Из Колонки2 Цикл
		
		Элемент1 = Колонки1.Найти(Элемент1.Имя);
		Типы2 = Элемент2.ТипЗначения.Типы();
		Для Каждого Тип Из Типы2 Цикл
			Если Не Элемент1.ТипЗначения.СодержитТип (Тип) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция сравнивает значения двух строк (по значению) и возвращает 
// Истина, в случае если строки равны, иначе возвращает Ложь
// Предполагается что структура метаданных табличных частей  эквивалентна.
//
Функция СтрокиТЧРавны(СтрокаТЧ1, СтрокаТЧ2, Колонки)
	
	Для Каждого Колонка Из Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		
		Попытка
			ЗначениеИзТЧ1 = СтрокаТЧ1[ИмяКолонки];
		Исключение
			ЗначениеИзТЧ1 = Неопределено;
		КонецПопытки;
		
		Попытка
			ЗначениеИзТЧ2 = СтрокаТЧ2[ИмяКолонки];
		Исключение
			ЗначениеИзТЧ2 = Неопределено;
		КонецПопытки;
		
		Если ЗначениеИзТЧ1 <> ЗначениеИзТЧ2 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Подсчитывает число изменившихся реквизитов в таблице изменившихся реквизитов
//
Функция РассчитатьЧислоИзменившихсяРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий)
	
	Результат = 0;
	
	Для Каждого ЭлементТЗ Из ТаблицаИзмененийРеквизитов Цикл
		Если ЭлементТЗ._Модификация <> Неопределено И ЭлементТЗ._Модификация = Истина Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает уникальный номер для идентификации строки из таблицы по версии
//
Функция ПолучитьУникальныеУникальныйИд(ТаблицаИзмененийТЧ, ИмяКолонкиВерсии)
	
	СоответствиеУникальныйИд = Новый Соответствие;
	
	Для Каждого ЭлементСоотв Из ТаблицаИзмененийТЧ Цикл
		СоответствиеУникальныйИд[ЭлементСоотв.Ключ] = Число(ЭлементСоотв.Значение[ИмяКолонкиВерсии].Количество());
	КонецЦикла;
	
	Возврат СоответствиеУникальныйИд;
	
КонецФункции

// Заполняет таблицу отчета по результатам сравнения на некотором шаге
//
// Параметры:
// ПометкаИзменения - строка - "д" - реквизит добавлен
//                             "у" - реквизит удален
//                             "и" - реквизит изменен
//
Процедура ЗаполнитьХарактеристикуИзмененияРеквизита(ТаблицаИзмененийРеквизита, 
                                                    ПометкаИзменения,
                                                    ТаблицаИзмененийРеквизитов,
                                                    ИмяКолонкиТекущейВерсии,
                                                    ВерсияОбъекта)
	
	Для Каждого Элемент Из ТаблицаИзмененийРеквизита Цикл
		Наименование = Элемент.Значение;
		ИзменениеРеквизита = ТаблицаИзмененийРеквизитов.Найти (Наименование, "Наименование");
		
		Если ИзменениеРеквизита = Неопределено Тогда
			ИзменениеРеквизита = ТаблицаИзмененийРеквизитов.Добавить();
			ИзменениеРеквизита.Наименование = Наименование;
		КонецЕсли;
		
		ПараметрыИзменения = Новый Структура;
		ПараметрыИзменения.Вставить("ТипИзменения", ПометкаИзменения);
		
		Если ПометкаИзменения = "у" Тогда
			ПараметрыИзменения.Вставить("Значение", "удалено");
		Иначе
			ПараметрыИзменения.Вставить("Значение", ВерсияОбъекта.Реквизиты.Найти(Наименование, "НаименованиеРеквизита"));
		КонецЕсли;
		
		ИзменениеРеквизита[ИмяКолонкиТекущейВерсии] = ПараметрыИзменения;
		ИзменениеРеквизита._Модификация = Истина;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  СЕКЦИЯ СЛУЖЕБНЫХ ФУНКЦИЙ (ВНУТРЕННЯЯ ЛОГИКА)

// Функция возвращает результат вычитания элементов множества таблицы
// ТаблицаВычитаемая из ТаблицаОсновная.
//
Функция ВычестьТаблицу(знач ТаблицаОсновная,
                       знач ТаблицаВычитаемая,
                       знач КолонкаСравненияОсновнойТаблицы = "",
                       знач КолонкаСравненияВычитаемойТаблицы = "")
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияОсновнойТаблицы) Тогда
		КолонкаСравненияОсновнойТаблицы = "Значение";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияВычитаемойТаблицы) Тогда
		КолонкаСравненияВычитаемойТаблицы = "Значение";
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = ТаблицаОсновная.Скопировать();
	
	Для Каждого Элемент Из ТаблицаВычитаемая Цикл
		Значение = Элемент[КолонкаСравненияОсновнойТаблицы];
		НайденнаяСтрока = ТаблицаРезультат.Найти(Значение, КолонкаСравненияОсновнойТаблицы);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаРезультат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравнения(ТаблицаИнициализации = Неопределено,
                                ИмяКолонкиСравнения = "Значение")
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонкиСравнения);
	
	Если ТаблицаИнициализации <> Неопределено Тогда
		
		МассивЗначений = ТаблицаИнициализации.ВыгрузитьКолонку(ИмяКолонкиСравнения);
		
		Для Каждого Элемент Из ТаблицаИнициализации Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент[ИмяКолонкиСравнения]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции

Процедура КоличествоВерсийПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура КоличествоВерсий2ПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры
