Перем 
	ТабДок,
	ОбластьНачалоЗапроса,
	ОбластьП01, ОбластьП03,
	ОбластьОтступСлева,
	ОбластьЛевоеСоединение,
	ОбластьПравоеСоединение,
	ОбластьПолноеСоединение,
	ОбластьВнутреннееСоединение,
	ОбластьОтступСоединение,
	ОбластьИсточникДанных,
	ОбластьНетИсточникДанных,
	ОбластьОтступИсточникДанных,
	ОбластьСтрелкаВверх,
	ОбластьОбъединение,
	ОбластьОбъединить, 
	ОбластьОбъединитьВсе, 
	ЕстьПодчиненные;

// Весьма полезная функция для парсинга.
Функция СловоМежду(знач Текст, Слово1, КавычкаСлева="""", КавычкаСправа="""") Экспорт
	Перем п;
	п=Найти(врег(Текст), врег(Слово1));
	Если п<1 Тогда
		Возврат "";
	КонецЕсли;
	Текст = Сред(Текст, п+СтрДлина(Слово1));
	п=Найти(врег(Текст), врег(КавычкаСлева));
	Если п<1 Тогда
		Возврат "";
	КонецЕсли;
	Текст = Сред(Текст, п+СтрДлина(КавычкаСлева));
	п=Найти(врег(Текст), врег(КавычкаСправа));
	Если п<1 Тогда
		Возврат "";
	КонецЕсли;
	Возврат Лев(Текст, п-1);
КонецФункции

Функция ВЧисло(Текст, ЗначениеПоУмолчанию=0) Экспорт
	Перем Цифры, Ответ, сч, Буква;
	Цифры = "-0123456789.,";
	Ответ = "";
	Для сч=1 По СтрДлина(Текст) Цикл
		Буква = Сред(Текст, сч, 1);
		Если Найти(Цифры, Буква)>0 Тогда
			Ответ = Ответ + Буква;
		КонецЕсли;
	КонецЦикла;
	Попытка
		Возврат Число(Ответ);
	Исключение
		Возврат ЗначениеПоУмолчанию;
	КонецПопытки;
КонецФункции
	
Функция ПроверитьЗапрос(ТекстЗапроса) Экспорт
	Попытка
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.НайтиПараметры();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ФорматСловаЗапроса(Слово) Экспорт
	Ответ = ВРЕГ(Слово);
	// Поддержка буржуйского языка в запросе
	Если 	  Ответ="SELECT"  Тогда Ответ="ВЫБРАТЬ"
	ИначеЕсли Ответ="FROM"    Тогда Ответ="ИЗ"
	ИначеЕсли Ответ="JOIN"    Тогда Ответ="СОЕДИНЕНИЕ"
	ИначеЕсли Ответ="UNION"   Тогда Ответ="ОБЪЕДИНИТЬ"
	ИначеЕсли Ответ="ALL"  	  Тогда Ответ="ВСЕ"
	ИначеЕсли Ответ="WHERE"   Тогда Ответ="ГДЕ"
	ИначеЕсли Ответ="AS"      Тогда Ответ="КАК"
	ИначеЕсли Ответ="DROP"    Тогда Ответ="УНИЧТОЖИТЬ"
	ИначеЕсли Ответ="LEFT"    Тогда Ответ="ЛЕВОЕ"
	ИначеЕсли Ответ="RIGHT"   Тогда Ответ="ПРАВОЕ"
	ИначеЕсли Ответ="OUTER"   Тогда Ответ="ПОЛНОЕ"
	ИначеЕсли Ответ="INNER"   Тогда Ответ="ВНУТРЕННЕЕ"
	ИначеЕсли Ответ="WHERE"   Тогда Ответ="ГДЕ"
	ИначеЕсли Ответ="SORT"    Тогда Ответ="СОРТИРОВАТЬ"
	ИначеЕсли Ответ="GROUP"   Тогда Ответ="СГРУППИРОВАТЬ"
	ИначеЕсли Ответ="SUMMARY" Тогда Ответ="ИТОГИ"
	ИначеЕсли Ответ="BY" 	  Тогда Ответ="ПО"
	КонецЕсли;
	Возврат Ответ;
КонецФункции

// Убрать из текста запроса комментарии и строки (строки заменяются на "")
// Упрощает дальнейший разбор в некоторых функциях
//
Функция ОчиститьТекстЗапроса(ТекстЗапроса) Экспорт
	Перем Ответ, флЭтоКомментарий, флЭтоСтрока, БукваСледующая, сч, дл, Буква;
	Ответ = "";
	флЭтоКомментарий = Ложь;
	флЭтоСтрока =Ложь;
	флЭтоДляПостроителя = Ложь;
	БукваСледующая = Лев(ТекстЗапроса, 1);
	сч = 1;
	дл = СтрДлина(ТекстЗапроса);
	Пока сч<=дл Цикл
		сч = сч + 1;
		Буква = БукваСледующая;
		БукваСледующая = Сред(ТекстЗапроса, сч, 1);
		Если Буква="""" и БукваСледующая="""" и флЭтоСтрока и (НЕ флЭтоКомментарий) Тогда
			сч = сч + 1;
			Буква = БукваСледующая;
			БукваСледующая = Сред(ТекстЗапроса, сч, 1);
			Продолжить;
		ИначеЕсли Буква="""" и (БукваСледующая<>"""" или (НЕ флЭтоСтрока)) и (НЕ флЭтоКомментарий) Тогда
			флЭтоСтрока = НЕ флЭтоСтрока;
			Ответ = Ответ + """";
			Продолжить;
		ИначеЕсли Буква="/" и БукваСледующая="/" и (НЕ флЭтоСтрока) Тогда
			флЭтоКомментарий = Истина;
			Продолжить;
		ИначеЕсли Буква=Символы.ПС и флЭтоКомментарий Тогда
			флЭтоКомментарий = Ложь;
		ИначеЕсли Буква="{" и (НЕ флЭтоСтрока) и (НЕ флЭтоКомментарий) Тогда
			флЭтоДляПостроителя = Истина;
		ИначеЕсли Буква="}" и (НЕ флЭтоСтрока) и (НЕ флЭтоКомментарий) Тогда
			флЭтоДляПостроителя = Ложь;
		КонецЕсли;
		Если НЕ (флЭтоСтрока или флЭтоКомментарий или флЭтоДляПостроителя) Тогда
			Ответ = Ответ + Буква;
		КонецЕсли;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

// Вспомогательная!
// Получает слеедующее слово в тексте запроса от позиции "НачальнаяПозиция"
// Возвращает структуру: само слово и его начальная и конечная позиции в тексте
// 		Внимание! Важно, чтобы НачальнаяПозиция соответствовала началу слова или символу перед ним, входящим в набор символов-разделителей
//		/ . , ; * - + = ( ) % <Пробел> <Символы табуляции, перевода строки и др. управляющие символы>
Функция СледующееСлово(ТекстЗапроса, НачальнаяПозиция, Разделители="") Экспорт
	Перем РазделителиСлов, сч, дл, Буква, Слово, НачПозиция, КонПозиция;
	РазделителиСлов = ?(Разделители="", ".,;*-+=)% "+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ, Разделители);
	сч = НачальнаяПозиция-1;
	дл = СтрДлина(ТекстЗапроса);
	Пока сч<=дл Цикл
		сч = сч + 1;
		Буква = Сред(ТекстЗапроса, сч, 1);
		Если (Найти(РазделителиСлов, Буква)=0) и (Буква<>"/" или Сред(ТекстЗапроса, сч+1, 1)="/") Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	РазделителиСлов = РазделителиСлов + ?(Разделители="", "(", "");
	Слово = "";
	НачПозиция = сч;
	Буква = Сред(ТекстЗапроса, сч, 1);
	Если Буква="(" Тогда
		сч = НайтиЗакрывающуюСкобку(ТекстЗапроса, сч+1);
		Слово = Сред(ТекстЗапроса, НачПозиция, сч-НачПозиция+1);
	ИначеЕсли Буква=""""  или Буква="'" Тогда
		// Это строка или дата
		НачБуква = Буква;
		Слово = Буква;
		сч = сч + 1;
		БукваСледующая = Сред(ТекстЗапроса, сч, 1);
		Пока сч<=дл Цикл
			сч = сч + 1;
			Буква = БукваСледующая;
			БукваСледующая = Сред(ТекстЗапроса, сч, 1);
			Слово = Слово + Буква;
			Если Буква=НачБуква и БукваСледующая<>НачБуква Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Буква="/" и Сред(ТекстЗапроса, сч+1, 1)="/" Тогда
		// Это комментарий
		Пока сч<=дл Цикл
			сч = сч + 1;
			Слово = Слово + Буква;
			Буква = Сред(ТекстЗапроса, сч, 1);
			Если Буква=Символы.ПС Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Буква="{" Тогда
		// Это текст для построителя отчетов
		флЭтоКомментарий = Ложь;
		флЭтоСтрока =Ложь;
		Пока (сч<=дл) и Буква<>"}" Цикл
			Слово = "{";
			сч = сч + 1;
			дл = СтрДлина(ТекстЗапроса);
			БукваСледующая = Сред(ТекстЗапроса, сч, 1);
			Пока сч<=дл Цикл
				сч = сч + 1;
				Буква = БукваСледующая;
				БукваСледующая = Сред(ТекстЗапроса, сч, 1);
				Если Буква="""" и (БукваСледующая<>"""" или (НЕ флЭтоСтрока)) и (НЕ флЭтоКомментарий) Тогда
					флЭтоСтрока = НЕ флЭтоСтрока;
					Слово = Слово + Буква;
					Продолжить;
				ИначеЕсли Буква="/" и БукваСледующая="/" и (НЕ флЭтоСтрока) Тогда
					флЭтоКомментарий = Истина;
					Продолжить;
				ИначеЕсли Буква=Символы.ПС и флЭтоКомментарий Тогда
					флЭтоКомментарий = Ложь;
				ИначеЕсли Буква="}" и (НЕ флЭтоСтрока) и (НЕ флЭтоКомментарий) Тогда
					Слово = Слово + Буква;
					Прервать;
				КонецЕсли;
				Если НЕ (флЭтоСтрока или флЭтоКомментарий) Тогда
					Слово = Слово + Буква;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		РазделителиСлов = РазделителиСлов + "/";
		// Это просто слово
		Пока сч<=дл Цикл
			Буква = Сред(ТекстЗапроса, сч, 1);
			сч = сч + 1;
			Если Найти(РазделителиСлов, Буква)>0 Тогда
				сч = сч - 2;
				Прервать;
			КонецЕсли;
			Слово = Слово + Буква;
		КонецЦикла;
	КонецЕсли;
	КонПозиция = сч;
	Возврат Новый Структура("Слово,НачПозиция,КонПозиция", Слово, НачПозиция, КонПозиция);
КонецФункции

Функция СледующееСловоБезКомментариев(ТекстЗапроса, НачальнаяПозиция, Разделители="") Экспорт
	Ответ = СледующееСлово(ТекстЗапроса, НачальнаяПозиция, Разделители);
	Пока Лев(Ответ.Слово, 2)="//" или Лев(Ответ.Слово, 1)="{" Цикл
		Ответ = СледующееСлово(ТекстЗапроса, Ответ.КонПозиция+1, Разделители);
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция НайтиЗакрывающуюСкобку(ТекстЗапроса, НачальнаяПозиция) Экспорт
	ОткрытыхСкобок = 1;
	флЭтоКомментарий = Ложь;
	флЭтоСтрока = Ложь;
	флЭтоДляПостроителя = Ложь;
	БукваСледующая = Сред(ТекстЗапроса, НачальнаяПозиция, 1);
	Для сч = НачальнаяПозиция + 1 По СтрДлина(ТекстЗапроса) + 1 Цикл
		Буква = БукваСледующая;
		БукваСледующая = Сред(ТекстЗапроса, сч, 1);
		Если Буква="""" и БукваСледующая="""" и флЭтоСтрока и (НЕ флЭтоКомментарий) Тогда
			сч = сч + 1;
			Буква = БукваСледующая;
			БукваСледующая = Сред(ТекстЗапроса, сч, 1);
			Продолжить;
		ИначеЕсли Буква="""" и (БукваСледующая<>"""" или (НЕ флЭтоСтрока)) и (НЕ флЭтоКомментарий) Тогда
			флЭтоСтрока = НЕ флЭтоСтрока;
			Продолжить;
		ИначеЕсли Буква="/" и БукваСледующая="/" и (НЕ флЭтоСтрока) Тогда
			флЭтоКомментарий = Истина;
		ИначеЕсли Буква=Символы.ПС и флЭтоКомментарий Тогда
			флЭтоКомментарий = Ложь;
		ИначеЕсли Буква="{" Тогда
			флЭтоДляПостроителя = Истина;
		ИначеЕсли Буква="}" Тогда
			флЭтоДляПостроителя = Ложь;
		ИначеЕсли Буква="(" и (не флЭтоСтрока) и (не флЭтоКомментарий) и (не флЭтоДляПостроителя) Тогда
			ОткрытыхСкобок = ОткрытыхСкобок + 1;
		ИначеЕсли Буква=")" и (не флЭтоСтрока) и (не флЭтоКомментарий) и (не флЭтоДляПостроителя) Тогда
			ОткрытыхСкобок = ОткрытыхСкобок - 1;
			Если ОткрытыхСкобок<=0 Тогда
				Возврат сч; // надо бы (сч-1) - это BUG, но боюсь править - много где уже завязано...
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции

// Основные функции разбора текста запроса

Функция ЭтоПакетЗапросов(Знач ТекстЗапроса, Очищать=Истина) Экспорт	
	Перем ЧислоДелителей;
	ТекстЗапроса = ?(Очищать, ОчиститьТекстЗапроса(ТекстЗапроса), ТекстЗапроса);
	ЧислоДелителей = СтрЧислоВхождений(ТекстЗапроса, ";");
	Если ЧислоДелителей=0 Тогда
		Возврат Ложь;
	ИначеЕсли ЧислоДелителей>1 Тогда
		Возврат Истина;
	Иначе
		ТекстЗапроса = СтрЗаменить(СтрЗаменить(ТекстЗапроса, Символы.ПС, " "), ";", Символы.ПС);
		Возврат НЕ (ПустаяСтрока(СтрПолучитьСтроку(ТекстЗапроса, 1)) или ПустаяСтрока(СтрПолучитьСтроку(ТекстЗапроса, 2)));
	КонецЕсли;
КонецФункции

Функция ЭтоОбъединенныйЗапрос(Знач ТекстЗапроса, Очищать=Истина) Экспорт	
	Перем ЧислоДелителей;
	ТекстЗапроса = ?(Очищать, ОчиститьТекстЗапроса(ТекстЗапроса), ТекстЗапроса);
	Слово = СледующееСлово(ТекстЗапроса, 1);
	Пока Слово.Слово<>"" Цикл
		Если ФорматСловаЗапроса(Слово.Слово)="ОБЪЕДИНИТЬ" Тогда
			Возврат Истина;
		КонецЕсли;
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьТипЗапроса(знач ТекстЗапроса) Экспорт
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат "Нет данных";
	КонецЕсли;
	ИмяВременнойТаблицы = "";
	ТекстЗапроса = ОчиститьТекстЗапроса(ТекстЗапроса);
	Если ЭтоПакетЗапросов(ТекстЗапроса, Ложь) Тогда
		Возврат "Пакет";
	КонецЕсли;
	Слово = СледующееСлово(ТекстЗапроса, 1);
	Пока Слово.Слово<>"" Цикл
		Если Найти("""'/0123456789", Лев(Слово.Слово, 1))=0 Тогда
			ПервоеСлово=ВРег(Слово.Слово);
			Прервать;
		КонецЕсли;
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
	КонецЦикла;
	Если ПервоеСлово="ВЫБРАТЬ" Тогда
		Пока Слово.Слово<>"" Цикл
			Если ВРег(Слово.Слово)="ПОМЕСТИТЬ" Тогда
				Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
				Пока Слово.Слово<>"" Цикл
					Если Найти("""'/0123456789", Лев(Слово.Слово, 1))=0 Тогда
						ИмяВременнойТаблицы = Слово.Слово;
						Прервать;
					КонецЕсли;
					Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
				КонецЦикла;
				Возврат "+"+ИмяВременнойТаблицы;	// МА!
			КонецЕсли;
			Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
		КонецЦикла;
		Возврат "Выборка";
	ИначеЕсли ПервоеСлово="УНИЧТОЖИТЬ" Тогда
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
		Пока Слово.Слово<>"" Цикл
			Если Найти("""'/0123456789", Лев(Слово.Слово, 1))=0 Тогда
				ИмяВременнойТаблицы = Слово.Слово;
				Прервать;
			КонецЕсли;
			Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
		КонецЦикла;
		Возврат "-"+ИмяВременнойТаблицы;			// МА!
	КонецЕсли;
	Возврат "Ошибка при определении типа";
КонецФункции

Функция РазложитьПоРазделителям(ТекстЗапроса, Разделитель=",") Экспорт
	Перем Ответ, Слово, НачПозицияЗапроса, ПредыдущаяКонПозиция, ТекРазделитель, ТекТекстЗапроса, НС;
	Ответ = новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("Текст");	// Для ПарсераЗапросов.
	Ответ.Колонки.Добавить("НачПозиция");
	Ответ.Колонки.Добавить("КонПозиция");
	Слово = СледующееСлово(ТекстЗапроса, 1);
	НачПозицияЗапроса = 1;
	ПредыдущаяКонПозиция = 1;
	Пока Слово.Слово<>"" Цикл
		ТекРазделитель = Сред(ТекстЗапроса, ПредыдущаяКонПозиция, Слово.НачПозиция-ПредыдущаяКонПозиция);
		Если Найти(ТекРазделитель, Разделитель)>0 Тогда
			ТекТекстЗапроса = Сред(ТекстЗапроса, НачПозицияЗапроса, ПредыдущаяКонПозиция-НачПозицияЗапроса+1);
			Если не ПустаяСтрока(ТекТекстЗапроса) Тогда
				НС = Ответ.Добавить();
				НС.Текст = ТекТекстЗапроса;		// Для ПарсераЗапросов.
				НС.НачПозиция = НачПозицияЗапроса;
				НС.КонПозиция = ПредыдущаяКонПозиция;
			КонецЕсли;
			НачПозицияЗапроса = Слово.НачПозиция;
		КонецЕсли;
		ПредыдущаяКонПозиция = Слово.КонПозиция + 1;
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
	КонецЦикла;
	ПредыдущаяКонПозиция = СтрДлина(ТекстЗапроса);
	ТекТекстЗапроса = Сред(ТекстЗапроса, НачПозицияЗапроса, ПредыдущаяКонПозиция-НачПозицияЗапроса+1);
	Если не ПустаяСтрока(ТекТекстЗапроса) Тогда
		НС = Ответ.Добавить();
		НС.Текст = ТекТекстЗапроса;		// Для ПарсераЗапросов.
		НС.НачПозиция = НачПозицияЗапроса;
		НС.КонПозиция = ПредыдущаяКонПозиция;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция РазложитьПакетЗапросов(ТекстЗапроса) Экспорт
	Перем Ответ, Строчка;
	Ответ = РазложитьПоРазделителям(ТекстЗапроса, ";");
	Ответ.Колонки.Добавить("ТипЗапроса");
	Для каждого Строчка Из Ответ Цикл
		Строчка.ТипЗапроса = ПолучитьТипЗапроса(Сред(ТекстЗапроса, Строчка.НачПозиция, Строчка.КонПозиция-Строчка.НачПозиция+1));
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция РазложитьОбъединенныйЗапрос(ТекстЗапроса, НачПозиция, КонПозиция) Экспорт
	Перем Ответ, Слово, ТекСлово, НачПозицияЗапроса, ПредыдущаяКонПозиция, Разделитель, ТекТекстЗапроса, НС;
	Ответ = новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("Текст");	// Для ПарсераЗапросов.
	Ответ.Колонки.Добавить("НачПозиция");
	Ответ.Колонки.Добавить("КонПозиция");
	Ответ.Колонки.Добавить("БезДубликатов");
	Слово = СледующееСлово(ТекстЗапроса, НачПозиция);
	НачПозицияЗапроса = НачПозиция;
	ПредыдущаяКонПозиция = СтрДлина(ТекстЗапроса);
	флБезДубликатов = Ложь;
	Пока (Слово.Слово<>"") и (Слово.НачПозиция<КонПозиция) Цикл
		ТекСлово = ФорматСловаЗапроса(Слово.Слово);
		Если ТекСлово="ОБЪЕДИНИТЬ" Тогда
			ТекТекстЗапроса = Сред(ТекстЗапроса, НачПозицияЗапроса, ПредыдущаяКонПозиция-НачПозицияЗапроса+1);
			Если не ПустаяСтрока(ТекТекстЗапроса) Тогда
				НС = Ответ.Добавить();
				НС.Текст = ТекТекстЗапроса;		// Для ПарсераЗапросов.
				НС.НачПозиция = НачПозицияЗапроса;
				НС.КонПозиция = ПредыдущаяКонПозиция;
				НС.БезДубликатов = флБезДубликатов;
			КонецЕсли;
			флБезДубликатов=Истина;
			Пока ТекСлово<>"ВЫБРАТЬ" и Слово.Слово<>"" и Слово.НачПозиция<КонПозиция Цикл
				Если ТекСлово="ВСЕ" Тогда
					флБезДубликатов = Ложь;
				КонецЕсли;
				Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция + 1);
				ТекСлово = ФорматСловаЗапроса(Слово.Слово);
			КонецЦикла;
			НачПозицияЗапроса = Слово.НачПозиция;
		КонецЕсли;
		ПредыдущаяКонПозиция = Слово.КонПозиция + 1;
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
	КонецЦикла;
	ТекТекстЗапроса = Сред(ТекстЗапроса, НачПозицияЗапроса, ПредыдущаяКонПозиция-НачПозицияЗапроса+1);
	Если не ПустаяСтрока(ТекТекстЗапроса) Тогда
		НС = Ответ.Добавить();
		НС.Текст = ТекТекстЗапроса;		// Для ПарсераЗапросов.
		НС.НачПозиция = НачПозицияЗапроса;
		НС.КонПозиция = ПредыдущаяКонПозиция;
		НС.БезДубликатов = флБезДубликатов;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьИсточникиВыборки(Знач ТекстЗапроса, НачальнаяПозиция, КонечнаяПозиция) Экспорт	// МА!
	Перем Ответ, ПробельныеСимволы, РазделителиБезТочки, Слово, ТекСлово, НачПозицияИсточника, КонПозицияИсточника;
	Перем м_ТекстЗапроса, м_РазделителиБезЗапятой, м_ПослеСлово, м_ПолноеВнутреннееСоединение, Текст_1, Текст_2;	// МА!
	
	Ответ = новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("Текст");	// Для ПарсераЗапросов.
	Ответ.Колонки.Добавить("НачПозиция");
	Ответ.Колонки.Добавить("КонПозиция");
	Ответ.Колонки.Добавить("Имя");
	Ответ.Колонки.Добавить("ТипСоединения");
	Ответ.Колонки.Добавить("ЭтоПодзапрос");
	
	ПробельныеСимволы = " "+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ;
	ПробельныеСимволыИСкобки = ПробельныеСимволы + "()";
	РазделителиБезТочки = ".,;*-+=% "+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ;
	
	Слово = СледующееСловоБезКомментариев(ТекстЗапроса, НачальнаяПозиция);
	ТекСлово = ФорматСловаЗапроса(Слово.Слово);
	Если ТекСлово<>"ВЫБРАТЬ" Тогда
		Если ТекСлово<>"УНИЧТОЖИТЬ" Тогда	// МА!
			ВызватьИсключение "Ожидается ""ВЫБРАТЬ"" {("+Слово.НачПозиция+")}";
		КонецЕсли;
	КонецЕсли;
	Пока (ТекСлово<>"ИЗ") и (ТекСлово<>"") и (Слово.НачПозиция<КонечнаяПозиция) Цикл
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
		ТекСлово = ФорматСловаЗапроса(Слово.Слово);
	КонецЦикла;
	Если ТекСлово<>"ИЗ" Тогда
		Возврат Ответ;
	КонецЕсли;
	ТипСоединения = "";
	ТекСлово = "СОЕДИНЕНИЕ";
	
	Пока (Слово.Слово <> "") И (Слово.НачПозиция < КонечнаяПозиция) И (ТекСлово = "СОЕДИНЕНИЕ") Цикл
		СловоДляНП = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.КонПозиция+1, ПробельныеСимволы);
		Слово = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.КонПозиция+1, ПробельныеСимволыИСкобки);
		НачПозицияИсточника = СловоДляНП.НачПозиция;
		Если Сред(ТекстЗапроса, НачПозицияИсточника, 1)="(" Тогда
			НачПозицияИсточника = НачПозицияИсточника + 1;
		КонецЕсли;
		ТекСлово = ФорматСловаЗапроса(Слово.Слово);
		ЭтоВложенныйЗапрос = (ТекСлово="ВЫБРАТЬ");
		Если ЭтоВложенныйЗапрос Тогда
			КонПозицияИсточника = НайтиЗакрывающуюСкобку(ТекстЗапроса, Слово.НачПозиция+1)-1;
		Иначе
			СледСлово1 = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.КонПозиция+1);
			СледСлово2 = СледующееСловоБезКомментариев(ТекстЗапроса, СледСлово1.КонПозиция+1);
			Разделитель = Сред(ТекстЗапроса, СледСлово1.КонПозиция+1, СледСлово2.НачПозиция - СледСлово1.КонПозиция);
			Если Найти(Разделитель, ".")>0 Тогда
				Слово = СледующееСловоБезКомментариев(ТекстЗапроса, СледСлово2.КонПозиция+1, ПробельныеСимволы);
			Иначе
				Слово = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.КонПозиция+1, ПробельныеСимволы);
			КонецЕсли;
			ТекСлово = ФорматСловаЗапроса(Слово.Слово);
			Если Лев(Слово.Слово, 1)="(" Тогда
				КонПозицияИсточника = НайтиЗакрывающуюСкобку(ТекстЗапроса, Слово.НачПозиция+1);
			Иначе
				КонПозицияИсточника = ?(ТекСлово="КАК", Слово.НачПозиция-2, Слово.КонПозиция);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСлово<>"КАК" Тогда
			Слово = СледующееСловоБезКомментариев(ТекстЗапроса, КонПозицияИсточника+1);
			ТекСлово = ФорматСловаЗапроса(Слово.Слово);
		КонецЕсли;
		
		Если ТекСлово<>"КАК" Тогда
			ВызватьИсключение "Ожидается ""КАК"" {("+Слово.НачПозиция+")}";
			Возврат Неопределено;
		КонецЕсли;
		Слово = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.Конпозиция+1);
		ТекТекст = СокрЛП(Сред(ТекстЗапроса, НачПозицияИсточника, КонПозицияИсточника-НачПозицияИсточника+1));
		Если ЭтоВложенныйЗапрос Тогда
			ТекТекст = Сред(ТекТекст, 1, СтрДлина(ТекТекст)-2);	// МА!
		КонецЕсли;
		НС = Ответ.Добавить();
		НС.Текст = ТекТекст;	// Для ПарсераЗапросов.
		НС.НачПозиция = НачПозицияИсточника;
		НС.КонПозиция = Слово.КонПозиция; //КонПозицияИсточника;
		НС.Имя = Слово.Слово;
		НС.ТипСоединения = ?(ТипСоединения="", "---", ТипСоединения);
		НС.ЭтоПодзапрос = ЭтоВложенныйЗапрос;
		
		// МА!++
		// Поиск и замена при необходимости ЗАПЯТОЙ (во временном ТекстеЗапроса) после предыдущего источника.
		//
		// Например запрос:
		//
		//Выбрать
		//   Контрагенты.Ссылка Как Контрагент,
		//   Банки.Ссылка Как Банк
		//ИЗ
		//   Справочник.Контрагенты Как Контрагенты,
		//   Справочник.КлассификаторБанковРФ Как Банки
		
		м_РазделителиБезЗапятой = ".;*-+=)% "+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ;
		м_ПослеСлово = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.КонПозиция+1, м_РазделителиБезЗапятой);
		м_ПолноеВнутреннееСоединение = Ложь;
		Если м_ПослеСлово.Слово = "," Тогда
			м_ПолноеВнутреннееСоединение = Истина;
			
			Текст_1 = Лев(СокрП(ТекстЗапроса), м_ПослеСлово.НачПозиция-1);
			Текст_2 = Сред(ТекстЗапроса, м_ПослеСлово.НачПозиция+1);
			
			м_ТекстЗапроса = Текст_1 + " ПОЛНОЕ ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + Текст_2;	// О красоте не заботимся.
		Иначе	
			м_ТекстЗапроса = ТекстЗапроса;
		КонецЕсли;
		// ++МА!
		
		ТипСоединения = "";
		Слово = СледующееСловоБезКомментариев(м_ТекстЗапроса, Слово.КонПозиция+1);
		ТекСлово = ФорматСловаЗапроса(Слово.Слово);
		Пока (Слово.Слово<>"") и (Слово.НачПозиция<КонечнаяПозиция) и (ТекСлово<>"СОЕДИНЕНИЕ") Цикл
			Если (ТекСлово="ГДЕ") или (ТекСлово="СОРТИРОВАТЬ") или (ТекСлово="СГРУППИРОВАТЬ") или (ТекСлово="ИТОГИ") Тогда
				Прервать;
			ИначеЕсли ТекСлово="ЛЕВОЕ" или ТекСлово="ПРАВОЕ" или ТекСлово="ВНУТРЕННЕЕ" или ТекСлово="ПОЛНОЕ" Тогда
				ТипСоединения = ТекСлово;
			КонецЕсли;
			Слово = СледующееСловоБезКомментариев(м_ТекстЗапроса, Слово.КонПозиция+1);
			ТекСлово = ФорматСловаЗапроса(Слово.Слово);
		КонецЦикла;
		Если м_ПолноеВнутреннееСоединение Тогда		// МА!
			м_ПолноеВнутреннееСоединение = Ложь;
			// Возаращаем начальную и конечные позиции.
			Слово.НачПозиция = м_ПослеСлово.НачПозиция;
			Слово.КонПозиция = м_ПослеСлово.КонПозиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
КонецФункции

Функция ЭтоСоставнойЗапрос(ТекстЗапроса, НачПозиция, КонПозиция) Экспорт
	Слово = СледующееСлово(ТекстЗапроса, НачПозиция);
	Пока Слово.Слово<>"" и Слово.НачПозиция<КонПозиция Цикл
		Если ФорматСловаЗапроса(Слово.Слово)="СОЕДИНЕНИЕ" Тогда
			Возврат Истина;
		КонецЕсли;
		Слово = СледующееСлово(ТекстЗапроса, Слово.КонПозиция+1);
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПолучитьВложенныеВыборки(ТекстЗапроса, НачПозиция, КонПозиция) Экспорт
	Перем ТекТекст, Ответ, сч;
	ТекТекст = Сред(ТекстЗапроса, НачПозиция, КонПозиция-НачПозиция+1);
	Если ЭтоПакетЗапросов(ТекТекст) или ЭтоОбъединенныйЗапрос(ТекТекст) Тогда
		Ответ = Новый ТаблицаЗначений;
		Возврат Ответ;
	КонецЕсли;
	Ответ = ПолучитьИсточникиВыборки(ТекстЗапроса, НачПозиция, КонПозиция);
	сч = Ответ.Количество();
	Пока сч>0 Цикл
		сч = сч - 1;
		Если НЕ Ответ[сч].ЭтоПодзапрос Тогда
			Ответ.Удалить(сч);
		КонецЕсли;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция НомерПозицииВТексте(Текст, знач НомерСтроки, знач НомерКолонки) Экспорт
	Перем сч, Ответ;
	Если НомерСтроки>СтрЧислоСтрок(Текст) Тогда
		Возврат СтрДлина(Текст);
	ИначеЕсли НомерКолонки>СтрДлина(СтрПолучитьСтроку(Текст, НомерСтроки)) Тогда
		НомерКолонки = СтрДлина(СтрПолучитьСтроку(Текст, НомерСтроки));
	КонецЕсли;
	сч=0;
	Ответ = НомерКолонки;
	Для сч=1 По НомерСтроки-1 Цикл
		Ответ = Ответ + СтрДлина(СтрПолучитьСтроку(Текст, сч)) + 1; //+1 = Символы.ПС
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция НайтиКонецСлова(Текст, НачПозиция, Разделители="") Экспорт
	Перем Слово;
	Слово = СледующееСлово(Текст, НачПозиция, Разделители);
	Возврат Слово.КонПозиция;
	//Разделители = " /*-+=-\""''.,;*-+=()% "+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ;
	//Для сч=НачПозиция По СтрДлина(Текст) Цикл
	//	Буква = Сред(Текст, сч, 1);
	//	Если Найти(Разделители, Буква)>0 Тогда
	//		Возврат сч-1;
	//	КонецЕсли;
	//КонецЦикла;
	//Возврат СтрДлина(Текст);
КонецФункции

Функция ПолучитьГраницыЗапроса(ТекстЗапроса, Позиция, мПакет=Неопределено) Экспорт
	Ответ = Новый Структура("НачПозиция,КонПозиция,ТипЗапроса,НомерЗапроса", 0, 0, "?", -1);
	Если мПакет=Неопределено Тогда
		мПакет = РазложитьПакетЗапросов(ТекстЗапроса);
	КонецЕсли;
	НомерЗапроса = 0;
	Для каждого Запрос Из мПакет Цикл
		Если Позиция >= Запрос.НачПозиция и Позиция <= Запрос.КонПозиция Тогда			
			ЗаполнитьЗначенияСвойств(Ответ, Запрос);
			Ответ.НомерЗапроса = НомерЗапроса;
			Возврат Ответ;
		КонецЕсли;
		НомерЗапроса = НомерЗапроса + 1;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция НайтиКлючевоеСлово(знач КлючевоеСлово, ТекстЗапроса, НачПозиция, КонПозиция) Экспорт
	Перем Слово;
	ПредыдущаяКонПозиция = 0;
	КлючевоеСлово = ФорматСловаЗапроса(КлючевоеСлово);
	Слово = СледующееСлово(ТекстЗапроса, НачПозиция);
	Пока Слово.Слово<>"" и Слово.НачПозиция<КонПозиция Цикл		
		Если ФорматСловаЗапроса(Слово.Слово)=КлючевоеСлово Тогда
			Разделитель = Сред(ТекстЗапроса, ПредыдущаяКонПозиция+1, Слово.НачПозиция-ПредыдущаяКонПозиция-1);
			Если ПустаяСтрока(Разделитель) Тогда
				Возврат Слово;
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяКонПозиция = Слово.КонПозиция;
		Слово = СледующееСлово(ТекстЗапроса, ПредыдущаяКонПозиция+1);
	КонецЦикла;
	Слово = Неопределено;
	Возврат Слово;
КонецФункции

Функция ВложитьЗапрос(ТекстЗапроса, НачПозиция, КонПозиция, ИмяТаблицы, ОписаниеОшибки)	Экспорт
	ОписаниеОшибки = "";
	ТекТекстЗапроса = Сред(ТекстЗапроса, НачПозиция, КонПозиция-НачПозиция+1);
	ТекДлина = СтрДлина(ТекТекстЗапроса);
	ТипЗапроса = ПолучитьТипЗапроса(ТекТекстЗапроса);
	Если ТипЗапроса="Выборка" Тогда
		ТекстПоместить = "";
	ИначеЕсли Лев(ТипЗапроса, 1)="+" Тогда
		СловоПоместить 	 = НайтиКлючевоеСлово("ПОМЕСТИТЬ", ТекТекстЗапроса, 1, ТекДлина);
		Если СловоПоместить=Неопределено Тогда
			ОписаниеОшибки = "Не найдено ключевое слово ""ПОМЕСТИТЬ""";
			Возврат "";
		КонецЕсли;
		СловоИмяВТ = СледующееСловоБезКомментариев(ТекТекстЗапроса, СловоПоместить.КонПозиция+1);
		Если ПустаяСтрока(СловоИмяВТ.Слово) Тогда
			ОписаниеОшибки = "Не найдено имя таблицы, в которую будут помещены данные.";
			Возврат "";
		КонецЕсли;
		ТекстПоместить = "
		|ПОМЕСТИТЬ "+СловоИмяВТ.Слово;
		ТекТекстЗапроса = Лев(ТекТекстЗапроса, СловоПоместить.НачПозиция-1)+Сред(ТекТекстЗапроса, СловоИмяВТ.Конпозиция+1);
	Иначе
		ОписаниеОшибки = "Запрос не является выборкой данных";
		Возврат "";
	КонецЕсли;
	
	НП = ТекДлина;
	Для сч=1 По 3 Цикл
		ТекСлово = НайтиКлючевоеСлово(?(сч=1, "УПОРЯДОЧИТЬ", ?(сч=2, "ИТОГИ", ?(сч=3, "АВТОУПОРЯДОЧИВАНИЕ", "---"))), ТекТекстЗапроса, 1, ТекДлина);
		Если ТекСлово=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НП = Мин(НП, ТекСлово.НачПозиция);
	КонецЦикла;
	
	Дополнения = "";
	Если НП<ТекДлина Тогда
		Дополнения = Сред(ТекТекстЗапроса, НП);
		ТекТекстЗапроса = Лев(ТекТекстЗапроса, НП-1);
	КонецЕсли;
	
	ТекТекстЗапроса =
	"ВЫБРАТЬ 
	|*"+ТекстПоместить+"
	|ИЗ
	|("+ТекТекстЗапроса+") КАК "+ИмяТаблицы + "
	|"+Дополнения;
	
	ОписаниеОшибки = "";
	Возврат ТекТекстЗапроса;
КонецФункции

Функция ПолучитьПоляВыборки(ТекстЗапроса, НачПозиция, КонПозиция, ОписаниеОшибки) Экспорт
	Перем Ответ, ПорядковыйНомер, Слово, НП, КП, сч, Поле, ТекТекст, нпп;
	ОписаниеОшибки = "";
	Ответ = Новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("ПорядковыйНомер");
	Ответ.Колонки.Добавить("НачПозиция");
	Ответ.Колонки.Добавить("КонПозиция");
	//Ответ.Колонки.Добавить("Текст");
	Ответ.Колонки.Добавить("Псевдоним");
	Ответ.Колонки.Добавить("Источники");
	Слово = СледующееСловоБезКомментариев(ТекстЗапроса, НачПозиция);
	Если ФорматСловаЗапроса(Слово.Слово)<>"ВЫБРАТЬ" или Слово.НачПозиция>КонПозиция Тогда
		ОписаниеОшибки = "Запрос не является выборкой.";
		Возврат Ответ;
	КонецЕсли;
	НП = Слово.КонПозиция+1;
	КП = КонПозиция;
	Для сч=1 По 5 Цикл
		Слово = НайтиКлючевоеСлово(?(сч=1, "ПОМЕСТИТЬ", ?(сч=2, "ИЗ", ?(сч=3, "ГДЕ", ?(сч=4, "УПОРЯДОЧИТЬ", "ИТОГИ")))), ТекстЗапроса, НП, КонПозиция);
		Если Слово<>Неопределено Тогда
			КП = Мин(КП, Слово.НачПозиция-1);
		КонецЕсли;
	КонецЦикла;
	// блок между НП и КП - это блок переменных запроса
	Ответ = РазложитьПоРазделителям(Сред(ТекстЗапроса, НП, КП), ",");
	Ответ.Колонки.Добавить("ПорядковыйНомер");
	Ответ.Колонки.Добавить("Псевдоним");
	Ответ.Колонки.Добавить("Источники");
	сч=0; нпп=0;
	Для каждого Поле Из Ответ Цикл
		//ТекТекст = Поле.Текст;
		ТекТекст = Сред(ТекстЗапроса, Поле.НачПозиция, Поле.КонПозиция-Поле.НачПозиция+1);
		Слово = НайтиКлючевоеСлово("КАК", ТекТекст, 1, СтрДлина(ТекТекст));
		Если Слово<>Неопределено Тогда
			Поле.Псевдоним = СокрЛП(СледующееСловоБезКомментариев(ТекТекст, Слово.КонПозиция+1));
		Иначе
			Поле.Псевдоним = "";
		КонецЕсли;
		Если Поле.Псевдоним = "" Тогда
			сч=сч+1;
			Поле.Псевдоним = "{Поле"+Формат(сч, "ЧН=; ЧГ=")+"}";
		КонецЕсли;
		нпп = нпп + 1;
		Поле.ПорядковыйНомер = нпп;
		// попытка разобрать источники для поля
		//...
		//...
		//...
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция ОпределитьЗапросПоСлову(ДЗ, Слово)	
	Ответ = Неопределено;
	Для каждого Строчка Из ДЗ.Строки Цикл		
		Если Строчка.НачПозиция<=Слово.НачПозиция и Строчка.КонПозиция>=Слово.КонПозиция Тогда
			Ответ = ОпределитьЗапросПоСлову(Строчка, Слово);
			Если Ответ=Неопределено Тогда
				Ответ = Новый Структура("Вид,Тип,Имя,НачПозиция,КонПозиция,ЭтоПодзапрос");
				ЗаполнитьЗначенияСвойств(Ответ, Строчка);
			КонецЕсли;
			Возврат Ответ;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция НайтиВсеПараметрыЗапроса(знач ТекстЗапроса, НачПозиция, КонПозиция) Экспорт
	Перем Разделители, Ответ, Слово, ТекСлово, ВТекСлово, НС;
	//ТекстЗапроса = СтрЗаменить(СтрЗаменить(ТекстЗапроса, "(", " "), ")", " ");
	Разделители = "(.,;*-+=% )"+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ;
	мПакет = РазложитьПакетЗапросов(ТекстЗапроса);
	Ответ = Новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("ИмяПараметра");
	Ответ.Колонки.Добавить("ВРЕГ_ИмяПараметра");
	Ответ.Колонки.Добавить("ИмяЗапроса");
	Ответ.Колонки.Добавить("НачПозиция");
	Ответ.Колонки.Добавить("КонПозиция");
	Слово = СледующееСловоБезКомментариев(ТекстЗапроса, НачПозиция, Разделители);
	ПоследнийЗапрос = Неопределено;
	ДЗ = Неопределено;
	Пока (Слово.Слово<>"") и (Слово.НачПозиция<КонПозиция) Цикл
		ТекСлово = СокрЛП(Слово.Слово);
		Если Лев(ТекСлово, 1)="&" Тогда
			ТекСлово = Сред(ТекСлово, 2);
			ВТекСлово = ВРЕГ(ТекСлово);
			Если Ответ.Найти(ВТекСлово, "ВРЕГ_ИмяПараметра")=Неопределено Тогда
				НС = Ответ.Добавить();
				НС.ИмяПараметра = ТекСлово;
				НС.ВРЕГ_ИмяПараметра = ВТекСлово;
				НС.НачПозиция = Слово.НачПозиция;
				НС.КонПозиция = Слово.КонПозиция;
				
				ТекЗапрос = ПолучитьГраницыЗапроса(ТекстЗапроса, Слово.НачПозиция, мПакет);
				Если ТекЗапрос<>Неопределено Тогда
					ТипЗапроса = ТекЗапрос.ТипЗапроса;
					Если ТипЗапроса = "Выборка" Тогда
						ТипЗапроса = "< Выборка >";
					ИначеЕсли Лев(ТипЗапроса, 1)="+" или Лев(ТипЗапроса, 1)="-" Тогда
						ТипЗапроса = Лев(ТипЗапроса, 1) + " " + СокрЛП(Сред(ТипЗапроса, 2));
					КонецЕсли;
					НС.ИмяЗапроса = СтрЗаменить("" + (ТекЗапрос.НомерЗапроса+1), Символы.НПП, "") + ".) " + ТипЗапроса;
					Если ТекЗапрос.НомерЗапроса<>ПоследнийЗапрос или ДЗ=Неопределено Тогда
						ПоследнийЗапрос = ТекЗапрос.НомерЗапроса;
						ДЗ = РазложитьЗапросВДерево(ТекстЗапроса, ТекЗапрос.НачПозиция, ТекЗапрос.КонПозиция, Истина, Ложь);
					КонецЕсли;
					ТекЗапрос = ОпределитьЗапросПоСлову(ДЗ, Слово);
					Если ТекЗапрос<>Неопределено Тогда
						НС.ИмяЗапроса = СокрП(НС.ИмяЗапроса + " (" + ТекЗапрос.Имя+")");
					КонецЕсли;
				Иначе
					НС.ИмяЗапроса = "<unknown>";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Слово = СледующееСловоБезКомментариев(ТекстЗапроса, Слово.КонПозиция + 1, Разделители);
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокВТ(знач ТекстЗапроса, знач КонПозиция=0) Экспорт
	Перем тз, м, Ответ, нз, Запрос;
	тз = ?(КонПозиция=0, ТекстЗапроса, Лев(ТекстЗапроса, КонПозиция));
	м = РазложитьПакетЗапросов(тз);
	Ответ = Новый Соответствие;
	нз = 0;
	Для каждого Запрос Из м Цикл
		Если Лев(СокрЛ(Запрос.ТипЗапроса), 1)="+" Тогда
			Ответ.Вставить(СокрЛ(Сред(СокрЛП(Запрос.ТипЗапроса), 2)), нз);
		КонецЕсли;
		нз = нз + 1;
	КонецЦикла;
	Возврат Ответ;
КонецФункции

Функция ПолучитьГраницыЗапроса2(знач ТекстЗапроса, НомСтр, НомКол) Экспорт
	Перем НП, Ответ;
	НП = ПарсерТекстаЗапроса.НомерПозицииВТексте(ТекстЗапроса, НомСтр, НомКол);
	Ответ = ПолучитьГраницыЗапроса(ТекстЗапроса, НП);
	Возврат Ответ;
КонецФункции

Функция ОпределитьНовоеИмя(СтароеИмя) Экспорт
	Перем Числа, ТекИмя, ТекЧисло, ТекБуква;
	Числа = "0123456789";
	ТекИмя = СокрЛП(СтароеИмя);
	ТекЧисло="";
	ТекБуква = Прав(ТекИмя, 1);
	Пока ТекБуква<>"" и Найти(Числа, ТекБуква)>0 Цикл
		ТекИмя = СокрП(Лев(ТекИмя, СтрДлина(ТекИмя)-1));
		ТекЧисло = ТекБуква + ТекЧисло;
		ТекБуква = Прав(ТекИмя, 1);
	КонецЦикла;
	ТекЧисло = ?(ТекЧисло="", 0, Число(ТекЧисло));
	ТекЧисло = ТекЧисло + 1;
	Возврат ТекИмя + Формат(ТекЧисло, "ЧДЦ=0; ЧН=; ЧГ=");
КонецФункции

Функция РазложитьЗапросВДерево(ТекстЗапроса, НачПозиция=0, КонПозиция=0, БезПакета=Ложь, БезОбъединений=Ложь, ВТ=Неопределено, ДЗ=Неопределено) Экспорт
	Перем мЗапросы, Запрос, сч, НС, ТипЗапроса, ТипЗапроса1;
	Если ВТ=Неопределено Тогда
		ВТ = Новый Структура();
	КонецЕсли;
	Если ДЗ=Неопределено Тогда
		ДЗ = Новый ДеревоЗначений;
		глозСоздатьКолонки(ДЗ, "Вид,Тип,Имя,НачПозиция,КонПозиция,ЭтоПодзапрос");
	КонецЕсли;
	Если не БезПакета Тогда
		мЗапорсы = РазложитьПакетЗапросов(ТекстЗапроса);
		Если мЗапорсы.Количество()>1 Тогда
			Для каждого Запрос Из мЗапорсы Цикл
				НС = ДЗ.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Запрос, "НачПозиция,КонПозиция");
				НС.Вид = "Запрос";
				ТипЗапроса = Запрос.ТипЗапроса;
				ТипЗапроса1 = Лев(Запрос.ТипЗапроса, 1);
				НС.Тип = ?(ТипЗапроса1="+" или ТипЗапроса1="-", ТипЗапроса1, ТипЗапроса);
				НС.Имя = ТипЗапроса;
				НС.ЭтоПодзапрос = Ложь;
				РазложитьЗапросВДерево(ТекстЗапроса, Запрос.НачПозиция, Запрос.Конпозиция, Истина, Ложь, ВТ, НС);
			КонецЦикла;
			Возврат ДЗ;
		КонецЕсли;
	КонецЕсли;
	Если не БезОбъединений Тогда
		мЗапорсы = РазложитьОбъединенныйЗапрос(ТекстЗапроса, НачПозиция, КонПозиция);
		Если мЗапорсы.Количество()>1 Тогда
			сч = 0;
			Для каждого Запрос Из мЗапорсы Цикл
				сч = сч + 1;
				НС = ДЗ.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Запрос, "НачПозиция,КонПозиция");
				НС.Вид = "Объединение";
				НС.Тип = Запрос.БезДубликатов;
				НС.Имя = "(Запрос_"+Формат(сч, "ЧН=; ЧГ=")+")";
				НС.ЭтоПодзапрос = Ложь;
				РазложитьЗапросВДерево(ТекстЗапроса, Запрос.НачПозиция, Запрос.Конпозиция, Истина, Истина, ВТ, НС);
			КонецЦикла;
			Возврат ДЗ;
		КонецЕсли;
	КонецЕсли;
	мЗапорсы = ПолучитьИсточникиВыборки(ТекстЗапроса, НачПозиция, КонПозиция);
	Для каждого Запрос Из мЗапорсы Цикл
		НС = ДЗ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Запрос, "НачПозиция,КонПозиция,Имя,ЭтоПодзапрос");
		НС.Вид = "Источник";
		НС.Тип = Запрос.ТипСоединения;
		Если НС.ЭтоПодзапрос Тогда
			РазложитьЗапросВДерево(ТекстЗапроса, Запрос.НачПозиция, Запрос.Конпозиция, Истина, Ложь, ВТ, НС);
		КонецЕсли;
	КонецЦикла;
	Возврат ДЗ;
КонецФункции

// --------------------------------- TO-DO: ----------------------------------------------

Функция ПолучитьСписокУсловий(ТекстЗапроса, НачПозиция, КонПозиция)
	СловоГДЕ = НайтиКлючевоеСлово("ГДЕ", ТекстЗапроса, НачПозиция, КонПозиция);
	//Слово
КонецФункции

Функция ПолучитьУсловияСвязей(ТекстЗапроса, НачПозиция, КонПозиция, НомерВыборкиИзОбъединения=0)
	//
КонецФункции

Функция ПолучитьСписокПолейИсточника(ИмяИсточника, ТекстЗапроса, НачПозиция, КонПозиция, НомерВыборкиИзОбъединения=0)
	//
КонецФункции

//---------------------------------------------------------------------------------
Процедура ВывестиИсточникиВыборки(ТекстЗапроса, НачПозиция=1, КонПозиция=0, Отступ=0, КоличествоПредков=0, НеПерваяСтрока=Ложь)
	МассивОбъединений = РазложитьОбъединенныйЗапрос(ТекстЗапроса, НачПозиция, ?(КонПозиция=0, СтрДлина(ТекстЗапроса), КонПозиция));
	фл = ложь;
	счОбъединение = Отступ+1;
	Для каждого Запрос Из МассивОбъединений Цикл
		Источники = ПолучитьИсточникиВыборки(ТекстЗапроса, Запрос.НачПозиция, Запрос.КонПозиция);
		Если Источники.Количество()=0 Тогда
			НС = Источники.Добавить();
			НС.Текст ="";	// Для ПарсераЗапросов.
			НС.НачПозиция=0;
			НС.КонПозиция=0;
			НС.Имя = "<нет источника>";
			НС.ТипСоединения = "---";
			НС.ЭтоПодзапрос = ложь;
		КонецЕсли;
		Если НеПерваяСтрока Тогда
			ТабДок.Вывести(ОбластьОтступСлева, 2);
			Для сч=1 по КоличествоПредков Цикл
				Если сч>1 Тогда
					ТабДок.Присоединить(ОбластьОтступСоединение);
				КонецЕсли;
				Если ЕстьПодчиненные.Получить(сч)=Истина Тогда
					ТабДок.Присоединить(ОбластьСтрелкаВверх);
				ИначеЕсли сч=счОбъединение и фл Тогда
					ТабДок.Присоединить(?(Запрос.БезДубликатов, ОбластьОбъединить, ОбластьОбъединитьВсе));
				Иначе
					ТабДок.Присоединить(ОбластьОтступИсточникДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		фл = Истина;
		ТабДок.Вывести(ОбластьОтступСлева, 2);
		Для сч=1 по Отступ Цикл
				Если ЕстьПодчиненные.Получить(сч)=Истина Тогда
					ТабДок.Присоединить(ОбластьСтрелкаВверх);
				Иначе
					ТабДок.Присоединить(ОбластьОтступИсточникДанных);
				КонецЕсли;
			ТабДок.Присоединить(ОбластьОтступСоединение);
		КонецЦикла;
		сч = Отступ;
		Для каждого Источник Из Источники Цикл
			сч = сч + 1;
			ТипСоединения = СокрЛП(Источник.ТипСоединения);
			Если ТипСоединения="ЛЕВОЕ" Тогда
				ТабДок.Присоединить(ОбластьЛевоеСоединение);
			ИначеЕсли ТипСоединения="ПРАВОЕ" Тогда
				ТабДок.Присоединить(ОбластьПравоеСоединение);
			ИначеЕсли ТипСоединения="ПОЛНОЕ" Тогда
				ТабДок.Присоединить(ОбластьПолноеСоединение);
			ИначеЕсли ТипСоединения="ВНУТРЕННЕЕ" Тогда
				ТабДок.Присоединить(ОбластьВнутреннееСоединение);
			ИначеЕсли ТипСоединения<>"" и ТипСоединения<>"---" Тогда
				ТабДок.Присоединить(ОбластьОтступСоединение);
			КонецЕсли;
			Если Источник.ЭтоПодзапрос Тогда
				ИмяИсточникаДанных = "[Вложенный запрос]";
				ЕстьПодчиненные.Вставить(сч, Истина);
			Иначе
				ЕстьПодчиненные.Вставить(сч, Ложь);
				//ИмяИсточникаДанных = Источник.Текст+"(";
				ИмяИсточникаДанных = Сред(ТекстЗапроса, Источник.НачПозиция, Источник.КонПозиция-Источник.НачПозиция+1)+"(";
				СловоКАК = НайтиКлючевоеСлово("КАК", ИмяИсточникаДанных, 1, СтрДлина(ИмяИсточникаДанных));
				Если СловоКАК<>Неопределено Тогда
					ИмяИсточникаДанных = СокрП(Лев(ИмяИсточникаДанных, СловоКАК.НачПозиция-1))+"(";
				КонецЕсли;
				Врем = СтрЗаменить(Лев(ИмяИсточникаДанных, Найти(ИмяИсточникаДанных, "(")-1), ".", Символы.ПС);
				ИмяИсточникаДанных = "";
				Для НомерСтроки=1 По СтрЧислоСтрок(Врем) Цикл
					ИмяИсточникаДанных=?(ИмяИсточникаДанных="", "", ИмяИсточникаДанных+Символы.ПС)+СокрЛП(СтрПолучитьСтроку(Врем, НомерСтроки));
				КонецЦикла;
			КонецЕсли;
			Если Источник.Имя="<нет источника>" Тогда
				//ИмяИсточникаДанных="<нет источника>";
				//Источник.Имя = "(без имени)"
				ТабДок.Присоединить(ОбластьНетИсточникДанных);
			Иначе
				ОбластьИсточникДанных.Параметры.ИсточникДанных = ИмяИсточникаДанных;
				ОбластьИсточникДанных.Параметры.Псевдоним = СокрЛП(Источник.Имя);
				Расшифровка = Новый Структура("ЭтоПодзапрос,НачПозиция,КонПозиция", Источник.ЭтоПодзапрос, Источник.НачПозиция, Источник.КонПозиция);
				ОбластьИсточникДанных.Параметры.Расш = Расшифровка;
				ТабДок.Присоединить(ОбластьИсточникДанных);
			КонецЕсли;
		КонецЦикла;
		НовКоличествоПредков = сч;
		Для сч=НовКоличествоПредков+1 по КоличествоПредков Цикл
			ТабДок.Присоединить(ОбластьОтступСоединение);
			Если ЕстьПодчиненные.Получить(сч)=Истина Тогда
				ТабДок.Присоединить(ОбластьСтрелкаВверх);
			Иначе
				ТабДок.Присоединить(ОбластьОтступИсточникДанных);
			КонецЕсли;
		КонецЦикла;
		сч = Источники.Количество();
		Пока сч>0 Цикл
			сч = сч - 1;
			Источник = Источники[сч];
			Если Источник.ЭтоПодзапрос Тогда
				ВывестиИсточникиВыборки(ТекстЗапроса, Источник.НачПозиция, Источник.КонПозиция, сч, НовКоличествоПредков, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//---------------------------------------------------------------------------------
Процедура СформироватьОтчет(ТабДокРезультат) Экспорт
	ТабДок = ТабДокРезультат;
	ПрочитатьОбластиМакетаДереваЗапросов();
	Попытка
		ТабДок.Очистить();
		ТабДок.НачатьАвтогруппировкуСтрок();
		
		ПакетЗапросов = РазложитьПакетЗапросов(ТекстЗапроса);
		кол = ПакетЗапросов.Количество(); сч = 0;
		Для каждого Запрос Из ПакетЗапросов Цикл
			сч = сч + 1;
			ОбластьНачалоЗапроса.Параметры.ТекстНомерЗапроса = "№ "+сч+"("+кол+"): "+Запрос.ТипЗапроса+?(Запрос.ТипЗапроса="Выборка", " данных", "");	// МА!
			Если Запрос.ТипЗапроса="Выборка" или Лев(Запрос.ТипЗапроса, 1)="+" Тогда
				мОбъединения = РазложитьОбъединенныйЗапрос(ТекстЗапроса, Запрос.НачПозиция, Запрос.КонПозиция);
				фл = Истина;
				Для каждого Подзапрос Из мОбъединения Цикл
					Расш = Новый Структура("НачПозиция,КонПозиция", Подзапрос.НачПозиция-1, Подзапрос.КонПозиция);
					ОбластьОтступСлева.Параметры.РасшЗапроса = Расш;
					Если фл Тогда
						Расш = Новый Структура("НачПозиция,КонПозиция", Запрос.НачПозиция-1, Запрос.КонПозиция);
						ОбластьНачалоЗапроса.Параметры.Расш = Расш;
						ТабДок.Вывести(ОбластьНачалоЗапроса, 1);
						ТабДок.Вывести(ОбластьП03, 2);
						фл = Ложь;
					Иначе
						ОбластьОбъединение.Параметры.ТекстОбъединить = "ОБЪЕДИНИТЬ"+?(Подзапрос.БезДубликатов, "", " ВСЕ");
						ТабДок.Вывести(ОбластьОбъединение);
					КонецЕсли;
					ЕстьПодчиненные	= Новый Соответствие();
					ВывестиИсточникиВыборки(ТекстЗапроса, Подзапрос.НачПозиция, Подзапрос.КонПозиция);
					ТабДок.Вывести(ОбластьП03, 2);
				КонецЦикла;
			Иначе
				Расш = Новый Структура("НачПозиция,КонПозиция", Запрос.НачПозиция-1, Запрос.КонПозиция-1);
				ОбластьНачалоЗапроса.Параметры.Расш = Расш;
				ТабДок.Вывести(ОбластьНачалоЗапроса, 1);
			КонецЕсли;
		КонецЦикла;
		ТабДок.Область(4, 2).ШиринаКолонки = 0.5;
		ш = 0;
		Для сч=2 По ТабДок.ШиринаТаблицы Цикл
			ш = ш + ТабДок.Область(4, сч).ШиринаКолонки;
		КонецЦикла;
		ТабДок.Область(2, 2).ШиринаКолонки = ш;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
	Исключение
		тОш = ОписаниеОшибки();
		Сообщить(тОш, СтатусСообщения.Важное);
		//тОш = СокрЛП(СловоМежду(тОш, "Ожидается """, "{(", ")}"));
		//П = ВЧисло(тОш);
		//Если (П>0) и (П<СтрДлина(ТекстЗапроса)) Тогда
		//	ЭлементыФормы.ПолеТекстовогоДокумента1.УстановитьГраницыВыделения(П, П);
		//	ТекущийЭлемент = ЭлементыФормы.ПолеТекстовогоДокумента1;
		//КонецЕсли;		
	КонецПопытки;
КонецПроцедуры

Процедура ВывестиСтрокиСтруктуры(ДЗ, Отступ=0, КоличествоПредков=0, НеПерваяСтрока=Ложь)
	ПерваяСтрочка = Истина;
	Если ДЗ.Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Если ДЗ.Строки[0].Вид="Объединение" Тогда
		счОбъединение = 0;
		Для каждого Строчка Из ДЗ.Строки Цикл
			Если ПерваяСтрочка Тогда
				ПерваяСтрочка = Ложь;
			Иначе
				ТабДок.Вывести(ОбластьОтступСлева, 2);
				Для сч=1 по КоличествоПредков Цикл
					Если сч>1 Тогда
						ТабДок.Присоединить(ОбластьОтступСоединение);
					КонецЕсли;
					Если ЕстьПодчиненные.Получить(сч)=Истина Тогда
						ТабДок.Присоединить(ОбластьСтрелкаВверх);
					ИначеЕсли сч=счОбъединение Тогда
						ТабДок.Присоединить(?(Строчка.Тип, ОбластьОбъединить, ОбластьОбъединитьВсе));
					Иначе
						ТабДок.Присоединить(ОбластьОтступИсточникДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Для каждого Запрос Из Строчка.Строки Цикл
				ВывестиСтрокиСтруктуры(Запрос, Отступ, КоличествоПредков, НеПерваяСтрока);
			КонецЦикла;
			счОбъединение = счОбъединение + 1;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	фл = Истина;
	ТабДок.Вывести(ОбластьОтступСлева, 2);
	Для сч=1 по Отступ Цикл
		Если ЕстьПодчиненные.Получить(сч)=Истина Тогда
			ТабДок.Присоединить(ОбластьСтрелкаВверх);
		Иначе
			ТабДок.Присоединить(ОбластьОтступИсточникДанных);
		КонецЕсли;
		ТабДок.Присоединить(ОбластьОтступСоединение);
	КонецЦикла;
	сч = Отступ;
	Для каждого Источник Из ДЗ.Строки Цикл
		сч = сч + 1;
		ТипСоединения = СокрЛП(Источник.Тип);
		Если ТипСоединения="ЛЕВОЕ" Тогда
			ТабДок.Присоединить(ОбластьЛевоеСоединение);
		ИначеЕсли ТипСоединения="ПРАВОЕ" Тогда
			ТабДок.Присоединить(ОбластьПравоеСоединение);
		ИначеЕсли ТипСоединения="ПОЛНОЕ" Тогда
			ТабДок.Присоединить(ОбластьПолноеСоединение);
		ИначеЕсли ТипСоединения="ВНУТРЕННЕЕ" Тогда
			ТабДок.Присоединить(ОбластьВнутреннееСоединение);
		ИначеЕсли ТипСоединения<>"" и ТипСоединения<>"---" Тогда
			ТабДок.Присоединить(ОбластьОтступСоединение);
		КонецЕсли;
		Если Источник.ЭтоПодзапрос Тогда
			ИмяИсточникаДанных = "[Вложенный запрос]";
			ЕстьПодчиненные.Вставить(сч, Истина);
		Иначе
			ЕстьПодчиненные.Вставить(сч, Ложь);
			ИмяИсточникаДанных = Сред(ТекстЗапроса, Источник.НачПозиция, Источник.КонПозиция-Источник.НачПозиция+1)+"(";
			СловоКАК = НайтиКлючевоеСлово("КАК", ИмяИсточникаДанных, 1, СтрДлина(ИмяИсточникаДанных));
			Если СловоКАК<>Неопределено Тогда
				ИмяИсточникаДанных = СокрП(Лев(ИмяИсточникаДанных, СловоКАК.НачПозиция-1))+"(";
			КонецЕсли;
			Врем = СтрЗаменить(Лев(ИмяИсточникаДанных, Найти(ИмяИсточникаДанных, "(")-1), ".", Символы.ПС);
			ИмяИсточникаДанных = "";
			Для НомерСтроки=1 По СтрЧислоСтрок(Врем) Цикл
				ИмяИсточникаДанных=?(ИмяИсточникаДанных="", "", ИмяИсточникаДанных+Символы.ПС)+СокрЛП(СтрПолучитьСтроку(Врем, НомерСтроки));
			КонецЦикла;
		КонецЕсли;
		Если Источник.Имя="<нет источника>" Тогда
			//ИмяИсточникаДанных="<нет источника>";
			//Источник.Имя = "(без имени)"
			ТабДок.Присоединить(ОбластьНетИсточникДанных);
		Иначе
			ОбластьИсточникДанных.Параметры.ИсточникДанных = ИмяИсточникаДанных;
			ОбластьИсточникДанных.Параметры.Псевдоним = СокрЛП(Источник.Имя);
			Расшифровка = Новый Структура("НачПозиция,КонПозиция", Источник.НачПозиция, Источник.КонПозиция);
			ОбластьИсточникДанных.Параметры.Расш = Расшифровка;
			ТабДок.Присоединить(ОбластьИсточникДанных);
		КонецЕсли;
	КонецЦикла;
	НовКоличествоПредков = сч;
	Для сч=НовКоличествоПредков+1 по КоличествоПредков Цикл
		ТабДок.Присоединить(ОбластьОтступСоединение);
		Если ЕстьПодчиненные.Получить(сч)=Истина Тогда
			ТабДок.Присоединить(ОбластьСтрелкаВверх);
		Иначе
			ТабДок.Присоединить(ОбластьОтступИсточникДанных);
		КонецЕсли;
	КонецЦикла;
	сч = ДЗ.Строки.Количество();
	Пока сч>0 Цикл
		сч = сч - 1;
		Источник = ДЗ.Строки[сч];
		Если Источник.ЭтоПодзапрос Тогда
			ВывестиИсточникиВыборки(ТекстЗапроса, Источник.НачПозиция, Источник.КонПозиция, сч, НовКоличествоПредков, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьОтчетПоСтруктуреБезПакета(ТабДокРезультат) Экспорт
	ТабДок = ТабДокРезультат;
	ПрочитатьОбластиМакетаДереваЗапросов();
	Попытка
		ЕстьПодчиненные	= Новый Соответствие();
		ТабДок.Очистить();
		Если СтруктураЗапроса.Строки[0].Вид="Объединение" Тогда
			Первый = Истина;
			Для каждого Строчка Из СтруктураЗапроса.Строки Цикл
				Если Первый Тогда
					Первый = Ложь;
				Иначе
					ОбластьОбъединение.Параметры.ТекстОбъединить = "ОБЪЕДИНИТЬ"+?(Строчка.Тип, "", " ВСЕ");
					ТабДок.Вывести(ОбластьОбъединение);
				КонецЕсли;
				Расш = Новый Структура("НачПозиция,КонПозиция", Строчка.НачПозиция, Строчка.КонПозиция);
				ОбластьОтступСлева.Параметры.РасшЗапроса = Расш;
				ВывестиСтрокиСтруктуры(Строчка);
			КонецЦикла;
		Иначе
			ВывестиСтрокиСтруктуры(СтруктураЗапроса);
		КонецЕсли;
		ТабДок.Область(4, 2).ШиринаКолонки = 0.5;
	Исключение
		тОш = ОписаниеОшибки();
		Сообщить(тОш, СтатусСообщения.Важное);
	КонецПопытки;
КонецПроцедуры

Процедура ПрочитатьОбластиМакетаДереваЗапросов()
	Макет = ПолучитьМакет("МакетДереваЗапросов");
	ОбластьП01 = Макет.ПолучитьОбласть("Пустышка01|Заголовок");
	ОбластьП03 = Макет.ПолучитьОбласть("Пустышка03|Заголовок");
	ОбластьНачалоЗапроса	    = Макет.ПолучитьОбласть("Пустышка02|Заголовок");
	ОбластьОтступСлева      	= Макет.ПолучитьОбласть("Строка|ОтступСлева");
	ОбластьЛевоеСоединение      = Макет.ПолучитьОбласть("Строка|Левое");
	ОбластьПравоеСоединение 	= Макет.ПолучитьОбласть("Строка|Правое");
	ОбластьПолноеСоединение 	= Макет.ПолучитьОбласть("Строка|Полное");
	ОбластьВнутреннееСоединение = Макет.ПолучитьОбласть("Строка|Внутреннее");
	ОбластьОтступСоединение 	= Макет.ПолучитьОбласть("Строка|Отступ");
	ОбластьИсточникДанных 		= Макет.ПолучитьОбласть("Строка|ИсточникДанных");
	ОбластьНетИсточникДанных 	= Макет.ПолучитьОбласть("Строка|НетИсточникаДанных");
	ОбластьОтступИсточникДанных = Макет.ПолучитьОбласть("Строка|ОтступИсточникДанных");
	ОбластьСтрелкаВверх			= Макет.ПолучитьОбласть("Строка|СтрелкаВверх");
	ОбластьОбъединение			= Макет.ПолучитьОбласть("Объединение|Заголовок");
	ОбластьОбъединить           = Макет.ПолучитьОбласть("Строка|Объединить");
	ОбластьОбъединитьВсе        = Макет.ПолучитьОбласть("Строка|ОбъединитьВсе");
КонецПроцедуры

Процедура ДействияФормыСформироватьСтруктуруЗапроса(Кнопка)
	Если ТипЗнч(СтруктураЗапроса)=Тип("ДеревоЗначений") Тогда
		Если СтруктураЗапроса.Строки.Количество()>0 Тогда
			СформироватьОтчетПоСтруктуреБезПакета(ЭлементыФормы.ТабДок);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ТекстЗапроса<>"" Тогда
		СформироватьОтчет(ЭлементыФормы.ТабДок);
	КонецЕсли;
	ЭлементыФормы.ТабДок.ТолькоПросмотр = Истина;
	ТекущийЭлемент = ЭлементыФормы.ТабДок;
КонецПроцедуры

Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Расшифровка)=Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(СтруктураЗапроса)<>Тип("ДеревоЗначений") Тогда
			Расшифровка.НачПозиция = Мин(СтрДлина(ТекстЗапроса)+1, Макс(0, Расшифровка.НачПозиция));
			Расшифровка.КонПозиция = Мин(СтрДлина(ТекстЗапроса)+1, Макс(0, Расшифровка.КонПозиция+1));
		КонецЕсли;
		ЭтаФорма.Закрыть(Расшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	ДействияФормыСформироватьСтруктуруЗапроса(Неопределено);
КонецПроцедуры
