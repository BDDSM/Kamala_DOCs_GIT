Перем ИсходныйТекстЗапроса;

Процедура ДобавлениеПоказателей()
	Перем ТекРодитель, Поле, СписокПоказателей, ПС, СЗ, сч;
	Если ЭлементыФормы.Показатели.ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекРодитель = ЭлементыФормы.Показатели.ТекущаяСтрока.Родитель;
	ТекРодитель = ?(ТекРодитель=Неопределено, ЭлементыФормы.Показатели.ТекущаяСтрока, ТекРодитель);
	СписокПоказателей = новый СписокЗначений;
	Для каждого Поле Из ПостроительОтчета.ДоступныеПоля Цикл
		ПС = Показатели.Строки.Найти(Поле.Имя, "ИмяПоказателя", Истина);
		Если ПС<>Неопределено Тогда
			Если ПС.Родитель<>ТекРодитель Тогда
				Продолжить;;
			КонецЕсли;
		КонецЕсли;
		Если Поле.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			СписокПоказателей.Добавить(Поле.Имя, ?(ПустаяСтрока(Поле.Представление), Поле.Имя, Поле.Представление), (ПС<>Неопределено));
		КонецЕсли;
	КонецЦикла;
	СЗ = глозВыбратьИзСпискаНескольких(СписокПоказателей, "Выберите поля");
	Если СЗ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	//ЭлементыФормы.Показатели.ТекущаяСтрока = ТекРодитель;
	сч = ТекРодитель.Строки.Количество();
	Пока сч>0 Цикл
		сч = сч - 1;
		ПС = СЗ.НайтиПоЗначению(СокрЛП(ТекРодитель.Строки[сч].ИмяПоказателя));
		Если ПС<>Неопределено Тогда
			Если не ПС.Пометка Тогда
				ТекРодитель.Строки.Удалить(сч);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Поле Из СЗ Цикл
		ПС = ТекРодитель.Строки.Найти(Поле.Значение, "ИмяПоказателя");
		Если Поле.Пометка и ПС=Неопределено Тогда
			ПС = ТекРодитель.Строки.Добавить();
			ПС.ИмяПоказателя = Поле.Значение;
			ПС.ПредставлениеПоказателя = ?(Поле.Значение=Поле.Представление, глозПредставлениеПеременной(Поле), Поле.Представление);
			ПС.ВключенПоУмолчанию = Истина;
			ПС.Формат = "ЧЦ=18; ЧДЦ=2;";
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.Показатели.Развернуть(ТекРодитель);
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Закрыть(Истина);
КонецПроцедуры

Процедура ИнициализироватьКодЗаполненияДопПараметров()
	Перем Стр, Параметры, Парам, ВТекИмя, ВИменаДат;
	ВИменаДат = ВРег(",ДатаНач,ДатаКон,ДатаНачала,ДатаКонца,");
	Стр = "";
	Параметры = ПарсерТекстаЗапроса.НайтиВсеПараметрыЗапроса(ИсходныйТекстЗапроса, 1, СтрДлина(ИсходныйТекстЗапроса));
	Для каждого Парам Из Параметры Цикл
		Если НЕ (ПустаяСтрока(Парам.ИмяПараметра) или Найти(ВИменаДат, ВРег(Парам.ИмяПараметра))>0) Тогда
			Стр = Стр + Символы.ПС + "УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("""+Парам.ИмяПараметра+""", <значение>);";
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.КодЗаполненияДопПараметров.УстановитьТекст(СокрЛП(Стр));
КонецПроцедуры

Процедура Инициализировать(ТекстЗапроса) Экспорт
	ВыводитьОбщиеИтоги = Истина;
	ОтрицательныеКрасным = Истина;
	ИспользоватьСвойстваИКатегории = Ложь;
	ВыбиратьИспользованиеСвойствИКатегорий = Ложь;
	РежимВводаПериода = 0;
	ИсходныйТекстЗапроса = ТекстЗапроса;
	ИнициализироватьКодЗаполненияДопПараметров();
	ПостроительОтчета.Текст = ТекстЗапроса;
	ПостроительОтчета.ЗаполнитьНастройки();
	СтрГруппа = Показатели.Строки.Добавить();
	СтрГруппа.ИмяПоказателя = "Показатели";
	СтрГруппа.ПредставлениеПоказателя = "Показатели";
	ЭлементыФормы.Показатели.Развернуть(СтрГруппа);
	ПостроительОтчета.ИзмеренияКолонки.Очистить();
	ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ПостроительОтчета.Порядок.Очистить();
	сч1 = 1; сч2 = 1; сч3 = 1;
	Для каждого Поле Из ПостроительОтчета.ДоступныеПоля Цикл
		НС = ДоступныеПоля.Добавить();
		НС.Имя = Поле.Имя;
		ТекПредставление = ?(Поле.Представление=Поле.Имя, глозПредставлениеПеременной(Поле.Имя), Поле.Представление);
		НС.Представление = ?(ТекПредставление=Поле.Имя, "", ТекПредставление);
		Если НЕ (Поле.ТипЗначения.СодержитТип(Тип("Число")) и Поле.ТипЗначения.Типы().Количество()=1) Тогда
			Если Поле.Измерение и сч1<3 Тогда
				ПостроительОтчета.ИзмеренияСтроки.Добавить(Поле.Имя);
				сч1 = сч1 + 1;
			КонецЕсли;
			Если Поле.Порядок и сч2<3 Тогда
				ПостроительОтчета.Порядок.Добавить(Поле.Имя);
				сч2 = сч2 + 1;
			КонецЕсли;
			Если Поле.Отбор и сч3<6 Тогда
				ПостроительОтчета.Отбор.Добавить(Поле.Имя);
				сч3 = сч3 + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//ЭлементыФормы.;
КонецПроцедуры

Процедура ПоказателиФорматНачалоВыбора(Элемент, СтандартнаяОбработка)
	Перем Конструктор;
	Попытка
		Конструктор = Новый КонструкторФорматнойСтроки(Элемент.Знпачение);
	Исключение
		Конструктор = Новый КонструкторФорматнойСтроки();
	КонецПопытки;
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Если Конструктор.ОткрытьМодально() Тогда
		Элемент.Значение = Конструктор.Текст;
	КонецЕсли;
КонецПроцедуры

Процедура ПоказателиИмяПоказателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавлениеПоказателей();
КонецПроцедуры

Процедура ПередатьИзмерение(Источник, Приемник)
	
КонецПроцедуры

Процедура КоманднаяПанель4Действие(Кнопка)
	ПередатьИзмерение(ЭлементыФормы.ИзмеренияКолонки, ЭлементыФормы.ИзмеренияСтроки);
КонецПроцедуры

Процедура КоманднаяПанель4Действие1(Кнопка)
	ПередатьИзмерение(ЭлементыФормы.ИзмеренияСтроки, ЭлементыФормы.ИзмеренияКолонки);
КонецПроцедуры

Процедура КоманднаяПанель2ДобавитьГруппу(Кнопка)
	ЭлементыФормы.Показатели.ТекущаяСтрока = Показатели.Строки.Добавить();
	ЭлементыФормы.Показатели.Развернуть(ЭлементыФормы.Показатели.ТекущаяСтрока);
	ЭлементыФормы.Показатели.ИзменитьСтроку();
КонецПроцедуры

Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
	Если ЭлементыФормы.Показатели.ТекущаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДобавлениеПоказателей();
КонецПроцедуры

Процедура КоманднаяПанель6Очистить(Кнопка)
	Если Вопрос("Очистить текст кода заполнения доп. параметров?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
		ИнициализироватьКодЗаполненияДопПараметров();
	КонецЕсли;
КонецПроцедуры

Процедура ПоказателиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Цветфона = ?(ДанныеСтроки.Родитель=Неопределено, ЦветаСтиля.ЦветФонаПодсказки, ЦветаСтиля.ЦветФонаПоля);
КонецПроцедуры

Процедура ПоказателиПриАктивизацииСтроки(Элемент)
	Перем ТекСтрока, ЭУ;
	ТекСтрока = ЭлементыФормы.Показатели.ТекущаяСтрока;
	Если ТекСтрока<>Неопределено Тогда
		ЭУ = ЭлементыФормы.Показатели.Колонки.ИмяПоказателя.ЭлементУправления;
		ЭУ.РедактированиеТекста = (ТекСтрока.Родитель=Неопределено);
		ЭУ.КнопкаВыбора = НЕ ЭУ.РедактированиеТекста;
	КонецЕсли;
КонецПроцедуры

Процедура ПоказателиПередСворачиванием(Элемент, Строка, Отказ)
	Отказ = Истина
КонецПроцедуры

Функция ПолучитьКод() Экспорт
	Перем СтрПС, КодТекстЗапроса, Код, Строчка, СтрРодитель, Стр, ТекГр, ТекПредставлениеГр, ТекИмя, ТекПредставление, ТекВключен, ТекФормат;
	Код = СокрЛП(ЭлементыФормы.КодЗаполненияДопПараметров.ПолучитьТекст());
	Стр = "";
	Для Строчка=1 По СтрЧислоСтрок(Код) Цикл
		Стр = Стр + Символы.ПС+"	"+СокрЛП(СтрПолучитьСтроку(Код, Строчка));
	КонецЦикла;
	СтрПС = Символы.ПС+Символы.Таб+"|";
	КодТекстЗапроса = """"+СтрЗаменить(СтрЗаменить(ИсходныйТекстЗапроса, """",""""""), Символы.ПС, СтрПС)+"""";
	Код = СокрЛП(ПолучитьМакет("МакетКодаУниверсальногоОтчета").ПолучитьТекст());
	Код = СтрЗаменить(Код, "[{ТекстЗапроса}]", КодТекстЗапроса);
	Код = СтрЗаменить(Код, "[{УстановкаДополнительныхПараметров}]", Стр);
	//ПредставлениеПолей 
	Стр = "";
	Для каждого Строчка Из ДоступныеПоля Цикл
		Если НЕ (Строчка.Имя=Строчка.Представление или ПустаяСтрока(Строчка.Представление)) Тогда
			Стр = Стр + Символы.ПС + Символы.Таб + "УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("""+СокрЛП(Строчка.Имя)+""", """+СокрЛП(Строчка.Представление)+""");";
		КонецЕсли;
	КонецЦикла;
	Код = СтрЗаменить(Код, "[{ПредставлениеПолей}]", СокрЛ(Стр));
	//Показатели 
	Стр = "";
	Для каждого СтрРодитель Из Показатели.Строки Цикл
		ТекГр = СтрРодитель.ИмяПоказателя;
		ТекПредставлениеГр = СокрЛП(?(ПустаяСтрока(СтрРодитель.ПредставлениеПоказателя), СтрРодитель.ИмяПоказателя, СтрРодитель.ПредставлениеПоказателя));;
		Для каждого Строчка Из СтрРодитель.Строки Цикл
			ТекИмя = СокрЛП(Строчка.ИмяПоказателя);
			ТекПредставление = СокрЛП(?(ПустаяСтрока(Строчка.ПредставлениеПоказателя), Строчка.ИмяПоказателя, Строчка.ПредставлениеПоказателя));
			ТекВключен = ?(Строчка.ВключенПоУмолчанию, "Истина", "Ложь");
			ТекФормат = СокрЛП(Строчка.Формат);
			Стр = Стр + "
			|	УниверсальныйОтчет.ДобавитьПоказатель("""+ТекИмя+""", """+ТекПредставление+""", "+ТекВключен+", """+ТекФормат+""","""+ТекГр+""", """+ТекПредставлениеГр+""");";
		КонецЦикла;
	КонецЦикла;
	Код = СтрЗаменить(Код, "[{Показатели}]", СокрЛ(Стр));
	//Измерения строк	
	Стр = "";
	Для каждого Строчка Из ПостроительОтчета.ИзмеренияСтроки Цикл		
		Стр = Стр + Символы.ПС+"	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("""+Строчка.ПутьКДанным+""""+
		?(Строчка.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия, ", ТипИзмеренияПостроителяОтчета.Иерархия",
		  ?(Строчка.ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия, ", ТипИзмеренияПостроителяОтчета.ТолькоИерархия",
			""))+");";
	КонецЦикла;
	Код = СтрЗаменить(Код, "[{ИзмеренияСтрок}]", СокрЛ(Стр));
	//Измерения колонок
	Стр = "";
	Для каждого Строчка Из ПостроительОтчета.ИзмеренияКолонки Цикл
		Стр = Стр + Символы.ПС+"	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("""+Строчка.ПутьКДанным+""""+
		?(Строчка.ТипИзмерения = ТипИзмеренияПостроителяОтчета.Иерархия, ", ТипИзмеренияПостроителяОтчета.Иерархия",
		  ?(Строчка.ТипИзмерения = ТипИзмеренияПостроителяОтчета.ТолькоИерархия, ", ТипИзмеренияПостроителяОтчета.ТолькоИерархия",
			""))+");";
	КонецЦикла;
	Код = СтрЗаменить(Код, "[{ИзмеренияКолонок}]", СокрЛ(Стр));
	//Отборы
	// Функция ДобавитьОтбор(ПутьКДанным, Использование = Неопределено, ВидСравнения = Неопределено, Значение = Неопределено, ЗначениеС = Неопределено, ЗначениеПо = Неопределено, ИспользоватьВБыстрыхОтборах = Истина) Экспорт
	Стр = "";
	Для каждого Строчка Из ПостроительОтчета.Отбор Цикл
		Стр = Стр + Символы.ПС + Символы.Таб + "УниверсальныйОтчет.ДобавитьОтбор("""+СокрЛП(Строчка.ПутьКДанным)+""");";
	КонецЦикла;
	Код = СтрЗаменить(Код, "[{Отборы}]", СокрЛ(Стр));
	//Упорядочивание
	Стр = "";
	Для каждого Строчка Из ПостроительОтчета.Порядок Цикл
		Стр = Стр + Символы.ПС + Символы.Таб + "УниверсальныйОтчет.ДобавитьПорядок("""+СокрЛП(Строчка.ПутьКДанным)+""""+
			?(Строчка.Направление=НаправлениеСортировки.Убыв, ", НаправлениеСортировки.Убыв", "")+");";
	КонецЦикла;
	Код = СтрЗаменить(Код, "[{Упорядочивание}]", СокрЛП(Стр));
	// ---
	Код = СтрЗаменить(Код, "[{ВидПериода}]", "УниверсальныйОтчет.мРежимВводаПериода = "+РежимВводаПериода+";");
	Код = СтрЗаменить(Код, "[{ОтрицательноеКрасным}]", "УниверсальныйОтчет.ОтрицательноеКрасным = "+?(ОтрицательныеКрасным, "Истина", "Ложь")+";");
	Код = СтрЗаменить(Код, "[{ВыводитьОбщиеИтоги}]", "	УниверсальныйОтчет.ВыводитьОбщиеИтоги = "+?(ВыводитьОбщиеИтоги, "Истина", "Ложь")+";");
	Код = СтрЗаменить(Код, "[{ВыводитьДетальныеЗаписи}]", "	ВыводитьДетальныеЗаписи = "+?(ВыводитьДетальныеЗаписи, "Истина", "Ложь")+";");
	Код = СтрЗаменить(Код, "[{ВыбиратьИспользованиеСвойств}]", "УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = "+?(ВыбиратьИспользованиеСвойствИКатегорий, "Истина", "Ложь")+";");
	Код = СтрЗаменить(Код, "[{ИспользоватьСвойстваИКатегории}]", "УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = "+?(ИспользоватьСвойстваИКатегории, "Истина", "Ложь")+";");
	Код = СтрЗаменить(Код, "[{РежимФормыНастройкиБезГруппировокКолонок}]", "УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = "+?(мРежимФормыНастройкиБезГруппировокКолонок, "Истина", "Ложь")+";");
	Возврат Код;
КонецФункции

Функция ПолучитьКодПостроителя() Экспорт
	Перем Код, Элемент, Группа;
	Код = "	//ПостроительОтчета.ДоступныеПоля";
	Для каждого Элемент Из ДоступныеПоля Цикл
		Если НЕ (Элемент.Имя=Элемент.Представление или ПустаяСтрока(Элемент.Представление)) Тогда
			Код = Код + "
			|	ПостроительОтчета.ДоступныеПоля.Найти("""+СокрЛП(Элемент.Имя)+""").Представление = """+Элемент.Представление+""";";
		КонецЕсли;
	КонецЦикла;
	Код = Код + "
	|	//ПостроительОтчета.Отбор";
	Для каждого Элемент Из ПостроительОтчета.Отбор Цикл
		Код = Код + "
		|	НовОтбор = ПостроительОтчета.Отбор.Добавить("""+Элемент.ПутьКДанным+""", """+Элемент.Имя+""", """+Элемент.Представление+""");";
	КонецЦикла;
	Код = Код + Символы.ПС +"	//ПостроительОтчета.ИзмеренияСтроки";
	Для каждого Элемент Из ПостроительОтчета.ИзмеренияСтроки Цикл
		Код = Код + "
		|	ПостроительОтчета.ИзмеренияСтроки.Добавить("""+Элемент.ПутьКДанным+""", """+Элемент.Имя+""", ТипИзмеренияПостроителяОтчета."+Элемент.ТипИзмерения+");";
	КонецЦикла;
	Код = Код + Символы.ПС +"	//ПостроительОтчета.ИзмеренияКолонки";
	Для каждого Элемент Из ПостроительОтчета.ИзмеренияКолонки Цикл
		Код = Код + "
		|	ПостроительОтчета.ИзмеренияКолонки.Добавить("""+Элемент.ПутьКДанным+""", """+Элемент.Имя+""", ТипИзмеренияПостроителяОтчета."+Элемент.ТипИзмерения+");";
	КонецЦикла;
	Код = Код + Символы.ПС +"	//ПостроительОтчета.Порядок";
	Для каждого Элемент Из ПостроительОтчета.Порядок Цикл
		Код = Код + "
		|	ПостроительОтчета.Порядок.Добавить("""+Элемент.ПутьКДанным+""", """+Элемент.Имя+""", """+Элемент.Представление+""", НаправлениеСортировки."+Элемент.Направление+");";
	КонецЦикла;
	Код = Код + Символы.ПС +"	//ПостроительОтчета.ВыбранныеПоля";
	Для каждого Группа из Показатели.Строки Цикл
		Для каждого Элемент Из Группа.Строки Цикл
			Код = Код + "
			|	ПостроительОтчета.ВыбранныеПоля.Добавить("""+Элемент.ИмяПоказателя+""").Представление = """+Элемент.ПредставлениеПоказателя+""";";
		КонецЦикла;
	КонецЦикла;
	Возврат Код;
КонецФункции

РежимВводаПериода = 0;