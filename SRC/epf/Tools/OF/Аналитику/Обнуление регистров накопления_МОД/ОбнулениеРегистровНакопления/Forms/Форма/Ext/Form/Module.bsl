
Процедура КнопкаВыполнитьНажатие1(Кнопка)
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"Выбрать ";
	Первый = Истина;
	Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения Цикл
		
		ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
		| Остатки."+Измерение.Имя+" как " + Измерение.Имя+"";
		Первый = Ложь;
		
	КонецЦикла;
	Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
		
		ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
		| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"Остаток";
		Первый = Ложь;
		
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса+"
	| из РегистрНакопления."+ИмяРегистраНакопления+".Остатки(&Момент) как Остатки";
	
	Запрос.УстановитьПараметр("Момент", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	Если Корректировка.Пустая() Тогда
		Докум = Документы.КорректировкаЗаписейРегистровНакопления.СоздатьДокумент();
		
	Иначе
		Докум = Корректировка.ПолучитьОбъект();
		Для каждого Стр Из Корректировка.ТаблицаРегистровНакопления Цикл
			Докум.Движения[Стр.Имя].Очистить();
			Докум.Движения[Стр.Имя].Записать();
		КонецЦикла;
		Докум.ТаблицаРегистровНакопления.Очистить();
	КонецЕсли;
	Докум.Дата = КонецДня(Дата);
	Стр = Докум.ТаблицаРегистровНакопления.Добавить();
	Стр.Имя = ИмяРегистраНакопления;
	Стр.Представление = Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Синоним;
	Докум.Записать();
	
	Выборка = Результат.Выбрать();
	
	НаборЗаписей = Докум.Движения[ИмяРегистраНакопления];
	Пока Выборка.Следующий() Цикл
		
		Движение = НаборЗаписей.Добавить();
		Движение.Период = Докум.Дата;
		Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения Цикл
			
			Движение[Измерение.Имя] = Выборка[Измерение.Имя];
			
		КонецЦикла;
		Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
			
			Движение[Ресурс.Имя] = -Выборка[Ресурс.Имя+"Остаток"];
			
		КонецЦикла;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	Сообщить("Записан " + Докум);
	
КонецПроцедуры

Процедура ПриОткрытии()
	Спис = новый СписокЗначений;
	Для каждого Регистр Из Метаданные.РегистрыНакопления Цикл
		
		Спис.Добавить(Регистр.Имя,Регистр.Синоним);
		
	КонецЦикла;
	
	Для каждого Регистр Из Метаданные.РегистрыБухгалтерии Цикл
		
		Спис.Добавить(Регистр.Имя,Регистр.Синоним);
		
	КонецЦикла;
	
	СчетЗатрат = ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхРаботИУслуг;
	
	Дата = ТекущаяДата();//НачалоГода(ТекущаяДата())-1;
	ЭлементыФормы.ИмяРегистраНакопления.СписокВыбора = Спис;
	ИмяРегистраНакопления = Спис[0].Значение;
	ОтчетИнициализация();
КонецПроцедуры

Процедура ОтчетИнициализация()
 	
	//Ситис Вирич П.В.   Начало 2015-11-18
	Если Метаданные.РегистрыНакопления.найти(ИмяРегистраНакопления) <> Неопределено Тогда

		ТекстЗапроса = 
		"Выбрать ";
		Первый = Истина;
		Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Измерение.Имя+" как " + Измерение.Имя+"";
			Первый = Ложь;
			
		КонецЦикла;
		Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"Остаток";
			Первый = Ложь;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		| из РегистрНакопления."+ИмяРегистраНакопления+".Остатки(&Момент) как Остатки";
		ТекстЗапроса = ТекстЗапроса+"
		|{ГДЕ";
		Первый = Истина;
		Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Измерение.Имя+".* как " + Измерение.Имя+"";
			Первый = Ложь;
			
		КонецЦикла;
		Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"Остаток";
			Первый = Ложь;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		|}";
		ТекстЗапроса = ТекстЗапроса+"
		|ИТОГИ";
		
		Первый = Истина;
		Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Сумма("+Ресурс.Имя+"Остаток"+")";
			Первый = Ложь;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		|ПО
		|	ОБЩИЕ";
		
		ПостроительОтчетаОтчет.Параметры.Вставить("Момент", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
		
		ПостроительОтчетаОтчет.Текст =  ТекстЗапроса;
		//"ВЫБРАТЬ
		//|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо,
		//|	ПРЕДСТАВЛЕНИЕ(ВзаиморасчетыСРаботникамиОрганизацийОстатки.Физлицо),
		//|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация,
		//|	ПРЕДСТАВЛЕНИЕ(ВзаиморасчетыСРаботникамиОрганизацийОстатки.Организация),
		//|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.ПериодВзаиморасчетов,
		//|	ВзаиморасчетыСРаботникамиОрганизацийОстатки.СуммаВзаиморасчетовОстаток
		//|ИЗ
		//|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки КАК ВзаиморасчетыСРаботникамиОрганизацийОстатки";
		ПостроительОтчетаОтчет.ЗаполнитьНастройки();
		ОтборКоличество = ПостроительОтчетаОтчет.Отбор.Количество();
		Для Н = 1 По ОтборКоличество Цикл
			ПостроительОтчетаОтчет.Отбор.Удалить(ОтборКоличество - Н);
		КонецЦикла;
		Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения Цикл
			
			ПостроительОтчетаОтчет.Отбор.Добавить(Измерение.Имя);
			
		КонецЦикла;
		Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
			
			ПостроительОтчетаОтчет.Отбор.Добавить(Ресурс.Имя+"Остаток");
			
		КонецЦикла;
		ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
		ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";
		//Настройка = ВосстановитьЗначение("НастройкаВнешниеОбработкиВнешняяОбработка1Отчет_196f1134-5c49-4762-90e2-b1964c594202");
		//Если Настройка <> Неопределено Тогда
		//	ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
		//КонецЕсли;
		
	иначе

		ТекстЗапроса = 
		"Выбрать ";
		Первый = Истина;
		Для каждого Измерение Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Измерения Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Измерение.Имя+" как " + Измерение.Имя+"";
			Первый = Ложь;
			
		КонецЦикла;
		
		//Ситис Вирич П.В.   Начало 2015-11-18
		
		ТекстЗапроса  = ТекстЗапроса + 
		"  ,Остатки.Счет как Счет, Остатки.Субконто1 как Субконто1, Остатки.Субконто2 как Субконто2, Остатки.Субконто3 как Субконто3";
		//Ситис Вирич П.В.   Конец 2015-11-18 

		Для каждого Ресурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Ресурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"Остаток";
			
			Первый = Ложь;
			//Ситис Вирич П.В.   Начало 2015-11-18
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"ОстатокДт";
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"ОстатокКт";
			
			//Ситис Вирич П.В.   Конец 2015-11-18 

		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		| из РегистрБухгалтерии."+ИмяРегистраНакопления+".Остатки(&Момент) как Остатки";
		ТекстЗапроса = ТекстЗапроса+"
		|{ГДЕ";
		Первый = Истина;
		
		Для каждого Измерение Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Измерения Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Измерение.Имя+".* как " + Измерение.Имя+"";
			Первый = Ложь;
			
		КонецЦикла;
		
		//Ситис Вирич П.В.   Конец 2015-11-18 		
		ТекстЗапроса  = ТекстЗапроса + 
		"  ,Остатки.Счет.* как Счет";
		//Ситис Вирич П.В.   Конец 2015-11-18 

		Для каждого Ресурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Ресурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Остатки."+Ресурс.Имя+"Остаток как " + Ресурс.Имя+"Остаток";
			Первый = Ложь;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		|}";
		ТекстЗапроса = ТекстЗапроса+"
		|ИТОГИ";
		
		Первый = Истина;
		Для каждого Ресурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Ресурсы Цикл
			
			ТекстЗапроса = ТекстЗапроса+?(Первый,"",",")+"
			| Сумма("+Ресурс.Имя+"Остаток"+")";
			Первый = Ложь;
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса+"
		|ПО
		|	ОБЩИЕ";
		
		ПостроительОтчетаОтчет.Параметры.Вставить("Момент", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
		ПостроительОтчетаОтчет.Текст =  ТекстЗапроса;
		ПостроительОтчетаОтчет.ЗаполнитьНастройки();
		ОтборКоличество = ПостроительОтчетаОтчет.Отбор.Количество();
		Для Н = 1 По ОтборКоличество Цикл
			ПостроительОтчетаОтчет.Отбор.Удалить(ОтборКоличество - Н);
		КонецЦикла;
		Для каждого Измерение Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Измерения Цикл
			
			ПостроительОтчетаОтчет.Отбор.Добавить(Измерение.Имя);
			
		КонецЦикла;
		
		//Ситис Вирич П.В.   Начало 2015-11-18
		ПостроительОтчетаОтчет.Отбор.Добавить("Счет");
		//Ситис Вирич П.В.   Конец 2015-11-18 
		
		Для каждого Ресурс Из Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Ресурсы Цикл
			
			ПостроительОтчетаОтчет.Отбор.Добавить(Ресурс.Имя+"Остаток");
			
		КонецЦикла;
		ПостроительОтчетаОтчет.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
		ПостроительОтчетаОтчет.ТекстЗаголовка = "Отчет";

	КонецЕсли;
	//Ситис Вирич П.В.   Конец 2015-11-18 
	
 КонецПроцедуры

Процедура ИмяРегистраНакопленияПриИзменении(Элемент)
	ОтчетИнициализация();
КонецПроцедуры

Процедура ДействияФормыОтчетНастройка(Кнопка)
 	
	Форма = ОбработкаОбъект.ПолучитьФорму("ОтчетНастройка");
	Форма.ПостроительОтчета = ПостроительОтчетаОтчет;
	Настройка = ПостроительОтчетаОтчет.ПолучитьНастройки();
	Если Форма.ОткрытьМодально() = Истина Тогда
		ОтчетВывести();
	Иначе
		ПостроительОтчетаОтчет.УстановитьНастройки(Настройка);
	КонецЕсли;
	
 КонецПроцедуры

Процедура ДействияФормыОтчетСформировать(Кнопка)
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ОтчетВывести();
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПРОЦЕДУРА_ВЫЗОВА
КонецПроцедуры

Процедура ОтчетВывести()
	//{{КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ(Отчет)
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ЭлементыФормы.ПолеТабличногоДокумента.Очистить();
	
	ПостроительОтчетаОтчет.Параметры.Вставить("Момент", новый Граница(КонецДня(Дата),ВидГраницы.Включая));
	
	ПостроительОтчетаОтчет.Выполнить();
	ПостроительОтчетаОтчет.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.РазмещениеРеквизитовИзмеренийВКолонках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	ПостроительОтчетаОтчет.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	ПостроительОтчетаОтчет.Вывести(ЭлементыФормы.ПолеТабличногоДокумента);
	
	//}}КОНСТРУКТОР_ВЫХОДНЫХ_ФОРМ_ПОСТРОИТЕЛЬОТЧЕТА_ВЫПОЛНИТЬ
КонецПроцедуры

Процедура ДействияФормыСформироватьОтчет(Кнопка)
	ОтчетВывести();
КонецПроцедуры

Процедура ОсновныеДействияФормыОсновныеДействияФормыВыполнить(Кнопка)
	ПостроительОтчетаОтчет.Выполнить();
	Результат = ПостроительОтчетаОтчет.Результат;
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	Если Корректировка.Пустая() Тогда
		Докум = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	Иначе
		Докум = Корректировка.ПолучитьОбъект();
		
		Если ОчищатьДок Тогда

			Для каждого Стр Из Корректировка.ТаблицаРегистровНакопления Цикл
				Докум.Движения[Стр.Имя].Очистить();
				Докум.Движения[Стр.Имя].Записать();
			КонецЦикла;
			Докум.ТаблицаРегистровНакопления.Очистить();
			Докум.ТаблицаРегистровБухгалтерии.Очистить();
			
		КонецЕсли;
	КонецЕсли;
	Докум.Дата = КонецДня(Дата);
	
	//Ситис Вирич П.В.   Начало 2015-11-18
	Если Метаданные.РегистрыНакопления.найти(ИмяРегистраНакопления) <> Неопределено Тогда
		
		Стр = Докум.ТаблицаРегистровНакопления.Добавить();
		Стр.Имя = ИмяРегистраНакопления;
		Стр.Представление = Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Синоним;
	иначе
		
		Стр = Докум.ТаблицаРегистровБухгалтерии.Добавить();
		Стр.Имя = ИмяРегистраНакопления;
		Стр.Представление = Метаданные.РегистрыБухгалтерии[ИмяРегистраНакопления].Синоним;
		
	КонецЕсли;
	
	Докум.Записать();
	
	Корректировка =  Докум.ссылка;
	
	ВыборкаОбщие = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщие.Следующий();
	Выборка = ВыборкаОбщие.Выбрать();
	
	НаборЗаписей = Докум.Движения[ИмяРегистраНакопления];
	
	Пока Выборка.Следующий() Цикл
		
		Движение = НаборЗаписей.Добавить();
		Движение.Период = Докум.Дата;
		
		//Ситис Вирич П.В.   Начало 2015-11-18
		Если Метаданные.РегистрыНакопления.найти(ИмяРегистраНакопления) <> Неопределено Тогда

			Для каждого Измерение Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Измерения Цикл
				
				Движение[Измерение.Имя] = Выборка[Измерение.Имя];
				
			КонецЦикла;
			
			Для каждого Ресурс Из Метаданные.РегистрыНакопления[ИмяРегистраНакопления].Ресурсы Цикл
				
				Движение[Ресурс.Имя] = -Выборка[Ресурс.Имя+"Остаток"];
				
			КонецЦикла;
			
		иначе
			
			сХозрасчетный(Выборка, Движение);
			
		КонецЕсли;  //Ситис Вирич П.В.   Конец 2015-11-18
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	Сообщить("Записан " + Докум);
	
КонецПроцедуры

Процедура сХозрасчетный(ВыборкаПоСчетам, НоваяЗапись)

	Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Пассивный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
		И ((НЕ ВыборкаПоСчетам.СуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаПоСчетам.СуммаНУОстатокКт = 0) ИЛИ (НЕ ВыборкаПоСчетам.ВалютнаяСуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаПоСчетам.КоличествоОстатокКт = 0)) Тогда

		НоваяЗапись.Организация = ВыборкаПоСчетам.Организация;
		НоваяЗапись.Активность = истина;
		НоваяЗапись.Период = Дата;
		НоваяЗапись.СчетДт = ВыборкаПоСчетам.Счет;
		
		Если НЕ ВыборкаПоСчетам.Счет.Забалансовый Тогда
			
			НоваяЗапись.СчетКт = СчетЗатрат;
			
			Для каждого ЭлементСубконто Из НоваяЗапись.СубконтоКт Цикл
				ЭлементСубконто.Значение = Неопределено;
			КонецЦикла;

		КонецЕсли;
		
		НомерСубконто = 0;
		
		Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
			
			НомерСубконто = НомерСубконто + 1;
			
			Если ЗначениеЗаполнено(ВыборкаПоСчетам["Субконто" + Строка(НомерСубконто)]) Тогда
				НоваяЗапись.СубконтоДт[ТекВидСубконто.ВидСубконто] = ВыборкаПоСчетам["Субконто" + Строка(НомерСубконто)];
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяЗапись.ВалютаДт = ВыборкаПоСчетам.Валюта;
		НоваяЗапись.ВалютнаяСуммаДт = -ВыборкаПоСчетам.ВалютнаяСуммаОстатокДт;
		НоваяЗапись.НалоговоеНазначениеДт = ?(ВыборкаПоСчетам.НалоговоеНазначение <> null, ВыборкаПоСчетам.НалоговоеНазначение, Неопределено);
		
		НоваяЗапись.СуммаНУДт = -ВыборкаПоСчетам.СуммаНУОстатокДт;
		НоваяЗапись.КоличествоДт = -ВыборкаПоСчетам.КоличествоОстатокДт;
		НоваяЗапись.Сумма = -ВыборкаПоСчетам.СуммаОстатокДт;
		
	КонецЕсли;

	Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Активный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
		И ((НЕ ВыборкаПоСчетам.СуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаПоСчетам.СуммаНУОстатокДт = 0) ИЛИ (НЕ ВыборкаПоСчетам.ВалютнаяСуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаПоСчетам.КоличествоОстатокДт = 0)) Тогда
		
		//Нужно вводить остаток по ДТ  
		
		НоваяЗапись.Организация = ВыборкаПоСчетам.Организация;
		НоваяЗапись.Активность = Истина;
		НоваяЗапись.Период = Дата;
		НоваяЗапись.СчетКт = ВыборкаПоСчетам.Счет;
		
		Если НЕ ВыборкаПоСчетам.Счет.Забалансовый Тогда
			НоваяЗапись.СчетДт = СчетЗатрат;
			
			НоваяЗапись.СубконтоДт.очистить();
			
			Для каждого ЭлементСубконто Из НоваяЗапись.СубконтоДт Цикл
				//ЭлементСубконто.Значение = Неопределено;
			КонецЦикла;
			
		КонецЕсли;
		
		НомерСубконто = 0;
		
		Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
			
			НомерСубконто = НомерСубконто + 1;
			
			Если ЗначениеЗаполнено(ВыборкаПоСчетам["Субконто" + Строка(НомерСубконто)]) Тогда
				НоваяЗапись.СубконтоКт[ТекВидСубконто.ВидСубконто] = ВыборкаПоСчетам["Субконто" + Строка(НомерСубконто)];
				
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяЗапись.ВалютаКт = ВыборкаПоСчетам.Валюта;
		НоваяЗапись.ВалютнаяСуммаКт = ВыборкаПоСчетам.ВалютнаяСуммаОстатокКт;
		НоваяЗапись.НалоговоеНазначениеКт = ?(ВыборкаПоСчетам.НалоговоеНазначение <> null, ВыборкаПоСчетам.НалоговоеНазначение, Неопределено);
		
		НоваяЗапись.СуммаНУКт = ВыборкаПоСчетам.СуммаНУОстатокКт;
		НоваяЗапись.КоличествоКт = ВыборкаПоСчетам.КоличествоОстатокКт;
		НоваяЗапись.Сумма = ВыборкаПоСчетам.СуммаОстатокКт;
	КонецЕсли;
	
КонецПроцедуры

