#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
Перем COMConnector, Connection, ConnectionМетаданные;
Перем СтрокаРавно;
Перем RegExp;

////////////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ ОБРАБОТКИ.
// 

// Функция, позволяющая встроить ВнешнююОбработку в Справочник типа "Внешние Отчеты и Обработки".
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	СведенияОВнешнейОбработке = Новый Структура;
	
	//СведенияОВнешнейОбработке.Вставить("Вид", 		"ДополнительнаяОбработка");
	СведенияОВнешнейОбработке.Вставить("Вид", 			"ЗаполнениеОбъекта");	// Для вызова в формах списка и объектов справочников и документов по кнопке "Заполнить".
	
	СведенияОВнешнейОбработке.Вставить("Наименование",	МетаДанные().Синоним);
	СведенияОВнешнейОбработке.Вставить("Информация",	МетаДанные().Комментарий);
	СведенияОВнешнейОбработке.Вставить("Версия",		"8.3.7");
	
	// В безопасном режиме:
	// - игнорируется привилегированный режим;
	// - запрещены внешние по отношению к платформе 1С:Предприятия действия: 
	// 		- COM; 
	//		- Загрузка внешних компонент; 
	//		- Запуск внешних приложений и команд операционной системы; 
	//		- Доступ к файловой системе, кроме временных файлов; 
	//		- Доступ к интернет.
	// Платформа обеспечивает равенство значений счетчика безопасного режима при вызове произвольного метода встроенного языка и после возврата из него.
	
	СведенияОВнешнейОбработке.Вставить("БезопасныйРежим", Истина);
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Идентификатор");
	Команды.Колонки.Добавить("Представление");
	Команды.Колонки.Добавить("Модификатор");			// Для печатных форм.
	Команды.Колонки.Добавить("ПоказыватьОповещение");
	Команды.Колонки.Добавить("Использование");
	
	Команда = Команды.Добавить();
	Команда.Идентификатор			= ""+МетаДанные().Имя+"-ОткрытьФорму";
	Команда.Представление			= "Открыть обработку "+МетаДанные().Синоним;
	Команда.ПоказыватьОповещение 	= Истина;
	Команда.Использование 			= "ОткрытиеФормы";
	
	Команда = Команды.Добавить();
	Команда.Идентификатор			= ""+МетаДанные().Имя+"-ОткрытьОбъектВ";
	Команда.Представление			= "Открыть объект в "+МетаДанные().Синоним;
	Команда.ПоказыватьОповещение 	= Истина;
	Команда.Использование 			= "ВызовКлиентскогоМетода";
	
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Справочник.*");
	МассивНазначений.Добавить("Документ.*");
	СведенияОВнешнейОбработке.Вставить("Назначение", МассивНазначений);
	
	//
	//Для ВызовКлиентскогоМетода требуется в модуле формы типа:
	//
	////&НаКлиенте
	////Процедура ВыполнитьКоманду(ИдентификаторКоманды) Экспорт	// Для "ДополнительнаяОбработка".
	////Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// Для "ЗаполнениеОбъекта".
	////
	////Если ИдентификаторКоманды = "Администратор1С-ОткрытьОбъектВ" Тогда
	////	ОткрытьМодально();
	////КонецЕсли;	
	////
	////КонецПроцедуры	
	
	СведенияОВнешнейОбработке.Вставить("Команды", Команды);

	Возврат СведенияОВнешнейОбработке;
	
КонецФункции

Функция ЭтоОбработкаКонфигурации()
	Перем ОбработкаКонфигурации;
	
	ОбработкаКонфигурации = Ложь;
	Попытка
		ОбработкаКонфигурации = (ТипЗнч(ЭтотОбъект) = Тип("ОбработкаОбъект.Администратор1С"));
	Исключение
		ОбработкаКонфигурации = Ложь;
	КонецПопытки;
	
	Возврат ОбработкаКонфигурации;
	
КонецФункции

// Параметры сеанса выполнения Обработки (начальные).
//
Функция ОбработкаПолучитьПараметрыСеанса() Экспорт
	Перем ИспользуемоеИмяФайла;
	
	ИспользуемоеИмяФайла = Неопределено;
	Если ЭтоОбработкаКонфигурации() Тогда
		ИспользуемоеИмяФайла = "" + ТипЗнч(ЭтотОбъект);
	Иначе
		ИспользуемоеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	ПараметрыСеансаОбработки = Новый Структура;
	ПараметрыСеансаОбработки.Вставить("ИмяОбработки"							, МетаДанные().Имя);
	ПараметрыСеансаОбработки.Вставить("СинонимОбработки"						, МетаДанные().Синоним);
	ПараметрыСеансаОбработки.Вставить("КомментарийОбработки"					, МетаДанные().Комментарий);
	ПараметрыСеансаОбработки.Вставить("Конфигурация"							, МетаДанные.Имя);
	ПараметрыСеансаОбработки.Вставить("Версия"									, МетаДанные.Версия);
	ПараметрыСеансаОбработки.Вставить("КраткаяИнформация"						, МетаДанные.КраткаяИнформация);
	Попытка
		ПараметрыСеансаОбработки.Вставить("РежимСовместимости"					, Строка(МетаДанные.РежимСовместимости));	// Строка - Для возможности передачи между Сервером и Клиентом.
	Исключение
		ПараметрыСеансаОбработки.Вставить("РежимСовместимости"					, "ОшибкаОпределенияРежимаСовместимости");	// Строка - Для возможности передачи между Сервером и Клиентом.
	КонецПопытки;
	Попытка
		ПараметрыСеансаОбработки.Вставить("РежимСовместимостиИнтерфейса"		, Строка(МетаДанные.РежимСовместимостиИнтерфейса));	// Строка - Для возможности передачи между Сервером и Клиентом.
	Исключение
		ПараметрыСеансаОбработки.Вставить("РежимСовместимостиИнтерфейса"		, "ОшибкаОпределенияРежимаСовместимостиИнтерфейса");	// Строка - Для возможности передачи между Сервером и Клиентом.
	КонецПопытки;
	ПараметрыСеансаОбработки.Вставить("ОсновнойРежимЗапуска"					, МетаДанные.ОсновнойРежимЗапуска);
	ПараметрыСеансаОбработки.Вставить("ТекущийРежимЗапуска"						, ТекущийРежимЗапуска());
	ПараметрыСеансаОбработки.Вставить("ТонкийТолстый"							, ОбработкаПолучитьТонкийТолстый());
	Попытка
		ПараметрыСеансаОбработки.Вставить("РежимИспользованияМодальности"		, Строка(МетаДанные.РежимИспользованияМодальности));	// Строка - Для возможности передачи между Сервером и Клиентом.
	Исключение
		ПараметрыСеансаОбработки.Вставить("РежимИспользованияМодальности"		, "Использовать");	// Платформа 8.2 - использовать.
	КонецПопытки;
	ПараметрыСеансаОбработки.Вставить("ПривилегированныйРежим"					, ПривилегированныйРежим());
	ПараметрыСеансаОбработки.Вставить("СтрокаСоединенияИнформационнойБазы"		, СтрокаСоединенияИнформационнойБазы());
	ПараметрыСеансаОбработки.Вставить("ИмяФайлаОбработки"						, ИспользуемоеИмяФайла);
	ПараметрыСеансаОбработки.Вставить("ТекущийПользовательИБ"					, ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ПараметрыСеансаОбработки.Вставить("ПравоАдминистрирование"					, ПравоДоступа("Администрирование", Метаданные));
	ПараметрыСеансаОбработки.Вставить("ПолныеПрава"								, РольДоступна("ПолныеПрава"));
	
	// Следующие параметры должны быть последними.
	// Анализируется Параметр: "ТекущийРежимЗапуска".
	ПараметрыСеансаОбработки.Вставить("ИмяРегистраДатыЗапрета"					, ОбработкаПолучитьИмяРегистраДатыЗапретаИзмененийБД());
	
	// Управляемое и Обычное приложение.
	ПараметрыСеансаОбработки.Вставить("ИмяФормыМногоСтрочногоТекста"			, ОбработкаПолучитьИмяФормы("МногострочныйТекст"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыСтруктурыПодчиненности"			, ОбработкаПолучитьИмяФормы("СтруктураПодчиненности"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыКартаМаршрута"					, ОбработкаПолучитьИмяФормы("КартаМаршрута"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыНастройкиОбработки"				, ОбработкаПолучитьИмяФормы("Настройка"));
	
	// Управляемое приложение.
	ПараметрыСеансаОбработки.Вставить("ИмяФормыСпискаАктивныхПользователей"		, ОбработкаПолучитьИмяФормы("СписокАктивныхПользователей"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыЖурналаРегистрации"				, ОбработкаПолучитьИмяФормы("ЖурналРегистрации"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыВыборОбъектаМетаданных"			, ОбработкаПолучитьИмяФормы("ВыборОбъектаМетаданных"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыВариантыОтчетов"					, ОбработкаПолучитьИмяФормы("ВариантыОтчетов"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыРегистрацияИзменений"			, ОбработкаПолучитьИмяФормы("РегистрацияИзменений"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыВопрос"							, ОбработкаПолучитьИмяФормы("Вопрос"));
	ПараметрыСеансаОбработки.Вставить("ИмяФормыИмпорт"							, ОбработкаПолучитьИмяФормы("Импорт"));
	
	// На перспективу.
	//ПараметрыСеансаОбработки.Вставить("ИмяФормыПарсерЗапросов"					, ОбработкаПолучитьИмяФормы("ПарсерЗапросов"));
	
	Возврат ПараметрыСеансаОбработки;
	
КонецФункции

// Версия БСП.
//
Функция ПолучитьВерсиюБСП() Экспорт
	Перем ВерсияБСП;
	
	Попытка
		Выполнить("ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
	Исключение
		ВерсияБСП = "Х.Х.Х";
	КонецПопытки;
	
	Возврат ВерсияБСП;
	
КонецФункции

// Для работы с обработкой необходимо: ПравоАдминистрирование и ПолныеПрава.
//
Функция ОбработкаПроверитьПраваПользователяИРежимЗапуска() Экспорт

	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("Отказ", Ложь);
	
	Если (НЕ (ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение)
		И НЕ (ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение)) Тогда
		
		РезультатПроверки.ОписаниеОшибки = "Текущий режим запуска 1С:Предприятие:
		|
		|""" + ВРег(ПараметрыСеансаОбработки.ТекущийРежимЗапуска) + """.
		|
		|ВЫПОЛНЕНИЕ ОБРАБОТКИ ПРЕДУСМОТРЕНО В СЛЕДУЮЩИХ РЕЖИМАХ ЗАПУСКА 1С:ПРЕДПРИЯТИЕ:
		|
		|1. ОБЫЧНОЕ ПРИЛОЖЕНИЕ;
		|2. УПРАВЛЯЕМОЕ ПРИЛОЖЕНИЕ.
		|
		|ВОСПОЛЬЗОВАТЬСЯ ОБРАБОТКОЙ НЕВОЗМОЖНО.";
		
		РезультатПроверки.Отказ = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если НЕ ПараметрыСеансаОбработки.ПравоАдминистрирование И ПользователиИБ.Количество() > 0 Тогда
		
		РезультатПроверки.ОписаниеОшибки = "ОБРАБОТКА: """ + ПараметрыСеансаОбработки.СинонимОбработки + """.
		|
		|ПОЛЬЗОВАТЕЛЬ: " + ПараметрыСеансаОбработки.ТекущийПользовательИБ + ".
		|
		|Для входа администратору ТРЕБУЕТСЯ ПРАВО: ""Администрирование"".";
		
		РезультатПроверки.Отказ = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Если НЕ ПараметрыСеансаОбработки.ПолныеПрава И ПользователиИБ.Количество() > 0 Тогда
		
		РезультатПроверки.ОписаниеОшибки = "ОБРАБОТКА: """ + ПараметрыСеансаОбработки.СинонимОбработки + """.
		|
		|ПОЛЬЗОВАТЕЛЬ: " + ПараметрыСеансаОбработки.ТекущийПользовательИБ + ".
		|
		|Для входа администратору ТРЕБУЕТСЯ РОЛЬ: ""Полные права"".";
		
		РезультатПроверки.Отказ = Истина;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;

	Если ((ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение)
		И (ПараметрыСеансаОбработки.ТонкийТолстый = "Толстый клиент")) Тогда
		
		РезультатПроверки.ОписаниеОшибки = "Текущий режим запуска 1С:Предприятие:
		|
		|""УПРАВЛЯЕМОЕ ПРИЛОЖЕНИЕ (ТОЛСТЫЙ КЛИЕНТ)"".
		|
		|Некоторые действия могут завершаться с ошибкой.
		|
		|ЗАПУСТИТЕ ПРИЛОЖЕНИЕ В РЕЖИМЕ ТОНКОГО КЛИЕНТА.";
		
		РезультатПроверки.Отказ = Ложь;
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Форма Режим запуска 1С:Предприятие.
//
Функция ОбработкаПолучитьТонкийТолстый()

    ТонкийТолстый = "";
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение ИЗ МассивСоединений Цикл
		Если ТекСоединение.Пользователь.Имя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя Тогда
			Если ((ТекСоединение.ИмяПриложения = "1CV8") 
				ИЛИ (ТекСоединение.ИмяПриложения = "1CV8C")) Тогда		// Режим 1С:Предприятие ТолстыйКлиент или ТонкийКлиент.
				// ~ "ТонкийКлиент"	 = ПредставлениеПриложения("1CV8C")
				// ~ "ТолстыйКлиент" = ПредставлениеПриложения("1CV8")
				ТонкийТолстый = ПредставлениеПриложения(ТекСоединение.ИмяПриложения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТонкийТолстый;

КонецФункции

// Кнопка "Даты Запрета". Вспомогательная.
//
Функция ОбработкаПолучитьИмяРегистраДатыЗапретаИзмененийБД()
	
	ИмяРегистраДатыЗапрета = Неопределено;
	
	Для Каждого РС Из Метаданные.РегистрыСведений Цикл
		Если Найти(ВРег(РС.Имя),ВРег("Запрет")) > 0 Тогда
			
			Если ((Найти(ВРег(РС.Имя),ВРег("Дат")) > 0) 				
				ИЛИ (Найти(ВРег(РС.Имя),ВРег("Данн")) > 0)) Тогда
				
				Если ((Найти(ВРег(РС.Имя),ВРег("Измен")) > 0) 
					ИЛИ (Найти(ВРег(РС.Имя),ВРег("Коррект")) > 0)
					ИЛИ (Найти(ВРег(РС.Имя),ВРег("Редакт")) > 0)) Тогда
					
						ИмяРегистраДатыЗапрета = РС.Имя;
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяРегистраДатыЗапрета;
	
КонецФункции

Функция ОбработкаПолучитьИмяФормы(ИмяФормы)
	Перем ПолноеИмяФормы;
	
	ПолноеИмяФормы = Неопределено;
	
	Если ЭтоОбработкаКонфигурации() Тогда
		Если ЭтотОбъект.УправляемаяФорма Тогда
			ПолноеИмяФормы = "Обработка.Администратор1С.Форма." + ИмяФормы;
		Иначе
			ПолноеИмяФормы = ИмяФормы + "_О";
		КонецЕсли;
	Иначе
		Если ЭтотОбъект.УправляемаяФорма Тогда
			ПолноеИмяФормы = "ВнешняяОбработка.Администратор1С.Форма." + ИмяФормы;
		Иначе
			ПолноеИмяФормы = ИмяФормы + "_О";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолноеИмяФормы;
	
КонецФункции

Функция РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ОбъектДанных, Знач РежимЗаписиОбъектаДокумент = Неопределено)
	
	// Не все объекты имеют свойство "ОбменДанными".
	Если ОбъектБДЕстьРеквизит("ОбменДанными", ОбъектДанных) И ЭтотОбъект.ОбменДаннымиЗагрузка Тогда	// Проверим наличие реквизита объекта.
		Если РежимЗаписиОбъектаДокумент = Неопределено Тогда
			Возврат Истина;
		Иначе
			Если РежимЗаписиОбъектаДокумент = РежимЗаписиДокумента.Запись Тогда
				Возврат Истина;
			Иначе
				// Документ:Проведение/ОтменаПроведения. Если ОбъектИЗМ.ОбменДанными.Загрузка = Истина, то Ошибка при вызове метода контекста (Записать).
				// Действие не может выполняться в режиме загрузки данных.
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КНОПКИ ЗАПИСЬ/УДАЛЕНИЕ ОБЪЕКТА.
// 

// Кнопка "СоздатьКопрированием". Только Документ.
//
Функция НовыйОбъектБДСоздатьКопированиемНаСервере(ОбъектБД) Экспорт
	
	РезультатСоздания = Новый Структура;
	РезультатСоздания.Вставить("ОписаниеОшибки", "");
	РезультатСоздания.Вставить("Отказ", Ложь);

	Попытка
		
		мдОбъектаБД = ОбъектБД.Метаданные();
	
		Если ТипОбъектаБД = ИмяТипаСправочники() Тогда	// Заглушка.
			
			РезультатСоздания.Отказ = Истина;
			РезультатСоздания.ОписаниеОшибки = "Объект типа """ + ТипОбъектаБД + "." + мдОбъектаБД.Имя + """ не создан. НЕПРЕДУСМОТРЕНО.";
			
		ИначеЕсли ТипОбъектаБД = ИмяТипаДокументы() Тогда
			
			ОбъектНовый = Документы[мдОбъектаБД.Имя].СоздатьДокумент();
			
			// Реквизиты объектов.
			ЗаполнитьЗначенияСвойств(ОбъектНовый, ОбъектБД);
			
			ОбъектНовый.УстановитьНовыйНомер();
			
			// Установка даты документа в зависимости от Периодичности нумерации и Даты исходного документа.
			ОбъектНовый.Дата = ТекущаяДата();
			ТДокументДата_НАЧ_ПриИзмененииНаСервере(ОбъектБД, ОбъектБД.Дата, ОбъектНовый.Дата);
			
			// ТабличныеЧасти объектов.
			Для Каждого ТЧасть ИЗ мдОбъектаБД.ТабличныеЧасти Цикл
				
				ЗаполнитьТаблицу(ОбъектБД[ТЧасть.Имя], ОбъектНовый[ТЧасть.Имя]);
				
			КонецЦикла;
			
			ОбъектНовый.Дата = ?(ОбъектНовый.Дата > ТекущаяДата(), ТекущаяДата(), ОбъектНовый.Дата);
			
			ОбъектНовый.Записать(РежимЗаписиДокумента.Запись);
			ОбъектНовый.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
			ОбъектБД = ОбъектНовый.Ссылка;
			
			РезультатСоздания.Отказ = Ложь;
			РезультатСоздания.ОписаниеОшибки = "Объект типа """ + ТипОбъектаБД + "." + мдОбъектаБД.Имя + """ УСПЕШНО СОЗДАН.
			|
			|" + ОбъектБД;
			
			Возврат РезультатСоздания;
			
		ИначеЕсли ТипОбъектаБД = ИмяТипаПланыОбмена() Тогда	// Заглушка.
			
			РезультатСоздания.Отказ = Истина;
			РезультатСоздания.ОписаниеОшибки = "Объект типа """ + ТипОбъектаБД + "." + мдОбъектаБД.Имя + """ не создан. НЕПРЕДУСМОТРЕНО.";
			
		Иначе	// Заглушка.
			
			РезультатСоздания.Отказ = Истина;
			РезультатСоздания.ОписаниеОшибки = "Объект типа """ + ТипОбъектаБД + "." + мдОбъектаБД.Имя + """ не создан. НЕПРЕДУСМОТРЕНО.";
			
		КонецЕсли;
	
	Исключение
		
		РезультатСоздания.Отказ = Истина;
		РезультатСоздания.ОписаниеОшибки = "Объект не создан. ОШИБКА СОЗДАНИЯ.
		|
		|Повторите создание объекта копированием.
		|
		|""Авось кривая выведет."" (народная мудрость)";
		
	КонецПопытки;
	
	Возврат РезультатСоздания;

КонецФункции

// Вспомогательная процедура.
//
Процедура ЗаполнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник)
	
	Для Каждого СтрокаТаблицыИсточник ИЗ ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаТаблицыИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

// Возможно ли проведение документа.
//
Функция МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Экспорт
	
	Возврат ОбъектБД.Метаданные().Проведение = МетаДанные.СвойстваОбъектов.Проведение.Разрешить;
	
КонецФункции

Функция	МетаданныеСодержатСправочник(ИмяСправочника) Экспорт
	
	Возврат НЕ Метаданные.Справочники.Найти(ИмяСправочника) = Неопределено;
	
КонецФункции

// Имя реквизита типа "ДокументОснование" может быть другим. Каким ? - ...
//
Функция ОбъектБДПолучитьИмяДокументаОснование(ОбъектБД) Экспорт
	
	Для Каждого ЭлементТР ИЗ ЭтотОбъект.ТРеквизитыОбъекта Цикл
		Если Найти(ЭлементТР.Тип, "Документ.") > 0 Тогда
			Возврат ЭлементТР.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Количество возможных движений документа.
//
Функция ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД) Экспорт
	
	Возврат ОбъектБД.Метаданные().Движения.Количество()
	
КонецФункции

// Возвращает Объект типа СправочникОбъект/ДокументОбъект.
//
Функция ОбъектБДПолучитьОбъектИзСсылки(ОбъектБД) Экспорт
	
	ОбъектИЗМ = ОбъектБД.ПолучитьОбъект();
	Если ОбъектИЗМ.Заблокирован() Тогда
		Сообщить("МО: " + "Объект """ + ОбъектИЗМ + """ заблокирован и не может быть обработан.", СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъектИЗМ;
	
КонецФункции

// ОБЩАЯ ДЛЯ ТРеквизитыОбъекта, ТЧастей, ЗаписьОбъекта.
//
Функция ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ИзменяемоеЗначение, ПроверятьРеквизитСНеопределеннымТипом) Экспорт
	
	ТипОбъектаБД 	= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	мдОбъектаБД		= ОбъектБД.Метаданные();
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("Отказ", Ложь);
	
	Если (ТипИзменяемогоЗначения = Тип("Неопределено")) Тогда
	
		Если ПроверятьРеквизитСНеопределеннымТипом И НЕ ОбъектБДЕстьРеквизит(ИмяРеквизитаИзменяемогоЗначения, ОбъектБД) Тогда
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле объекта """ + ИмяРеквизитаИзменяемогоЗначения + """ отсутствует => недоступно для корректировки/записи.");
			РезультатПроверки.Вставить("Отказ", Истина);
			Возврат РезультатПроверки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипИзменяемогоЗначения = Тип("ХранилищеЗначения") Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
		РезультатПроверки = Новый Структура;
		РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле Объекта: """ + ИмяРеквизитаИзменяемогоЗначения + """ типа ""ХранилищеЗначения"" недоступно для корректировки/записи.");
		РезультатПроверки.Вставить("Отказ", Истина);
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		Если ТипИзменяемогоЗначения = Тип("Булево") Тогда
			Если мдОбъектаБД.Иерархический И ИмяРеквизитаИзменяемогоЗначения = "ЭтоГруппа" Тогда	// У Справочника ИЛИ ПВХ это Стандартный реквизит типа "Булево".
				РезультатПроверки = Новый Структура;
				РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле объекта """ + ИмяРеквизитаИзменяемогоЗначения + """ (признак группы) Справочника/ПВХ недоступно для корректировки/записи.");
				РезультатПроверки.Вставить("Отказ", Истина);
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыОбмена() Тогда
		Если ИмяРеквизитаИзменяемогоЗначения = "ОбъектБД" ИЛИ ИмяРеквизитаИзменяемогоЗначения = "НомерОтправленного" ИЛИ ИмяРеквизитаИзменяемогоЗначения = "НомерПринятого" Тогда
			Если мдОбъектаБД.РаспределеннаяИнформационнаяБаза Тогда
				ЭтотУзелПланаОбмена = ПланыОбмена[мдОбъектаБД.Имя].ЭтотУзел();
				БДвРИБ = "";
				Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда		// ГлавныйУзел Распределеной БД. Для ГлавногоУзла на ГлавномУзле: ПланыОбмена.ГлавныйУзел() = Неопределено.
					Если ЭтотУзелПланаОбмена = ОбъектБД Тогда			// Для ПланаОбмена такой Объект считается ПРЕДОПРЕДЕЛЕННЫМ.
						хУзел = "ЦЕНТРАЛЬНОМ";
						БДвРИБ = ОбъектБДПолучитьПоложениеБДвРИБ(ОбъектБД);
					КонецЕсли;
				Иначе													// ПодчиненныйУзел Распределеной БД.
					Если ЭтотУзелПланаОбмена = ОбъектБД Тогда			// Для ПланаОбмена такой Объект считается ПРЕДОПРЕДЕЛЕННЫМ.
						хУзел = "ПОДЧИНЕННОМ";
						БДвРИБ = ОбъектБДПолучитьПоложениеБДвРИБ(ОбъектБД);
					КонецЕсли;
				КонецЕсли;
				Если НЕ БДвРИБ = "" Тогда
					РезультатПроверки = Новый Структура;
					РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле объекта """ + ИмяРеквизитаИзменяемогоЗначения + """ недоступно для корректировки/записи.
					|Предопределенный (с точки зрения механизма обмена) ПланОбмена """ + мдОбъектаБД.Имя + "." + ОбъектБД + """
					//|(" + БДвРИБ + ": Узел """ + ЭтотУзелПланаОбмена + """ Распределенной БД).
					|Свойство не может быть изменено для предопределенного узла.");
					РезультатПроверки.Вставить("Отказ", Истина);
					Возврат РезультатПроверки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
		Если ИмяРеквизитаИзменяемогоЗначения = "Предопределенное" Тогда	// У ПланаСчетов в ТЧ ВидыСубконто.
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле объекта """ + ИмяРеквизитаИзменяемогоЗначения + """ (признак предопределенный) ПланаСчетов недоступно для корректировки/записи.");
			РезультатПроверки.Вставить("Отказ", Истина);
			Возврат РезультатПроверки;
		КонецЕсли;
		Если ОбъектБД.Предопределенный Тогда
			Если ИмяРеквизитаИзменяемогоЗначения = "Вид" ИЛИ ИмяРеквизитаИзменяемогоЗначения = "Забалансовый"  ИЛИ ИмяРеквизитаИзменяемогоЗначения = "Валютный" ИЛИ ИмяРеквизитаИзменяемогоЗначения = "Количественный" Тогда	// У ПлатаСчетов в таблице Реквизиты.
				РезультатПроверки = Новый Структура;
				РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле объекта """ + ИмяРеквизитаИзменяемогоЗначения + """ предопределенного Счета ПланаСчетов недоступно для корректировки/записи.");
				РезультатПроверки.Вставить("Отказ", Истина);
				Возврат РезультатПроверки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		Если ИмяРеквизитаИзменяемогоЗначения = "Предопределенный" Тогда	// У ПланаВидовРасчета в ТЧ.
			РезультатПроверки = Новый Структура;
			РезультатПроверки.Вставить("ОписаниеОшибки", ИмяТаблицы + ": Поле объекта """ + ИмяРеквизитаИзменяемогоЗначения + """ (признак предопределенный) ПланаВидовРасчета недоступно для корректировки/записи.");
			РезультатПроверки.Вставить("Отказ", Истина);
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Фактическая запись данных после изменения в Форме.
//
Процедура ОбъектБДЗаписатьНаСервере(ОбъектБД, Форма, Отказ, РежимЗаписи = Неопределено) Экспорт
	Перем ТипЗначения, ТипЗначенияХрЗн;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектИЗМ	= ОбъектБДПолучитьОбъектИзСсылки(ОбъектБД);
	мдОбъектаБД = ОбъектИЗМ.Метаданные();
	ТипОбъектаБД= ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);

	Если ОбъектИЗМ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПерваяОшибка = Неопределено;
	
	// Заполним реквизиты объекта из Таблицы Реквизиты
	Для Каждого Реквизит ИЗ ТРеквизитыОбъекта Цикл
		
		Попытка
			
			ИмяТаблицы = "Таблица ""Реквизиты""";	// см. проверку ХранилищеЗначения.
			ТипЗначения = ТипЗнч(Реквизит.Значение);
			Если ТипЗначения = Тип("Строка") И Реквизит.Значение = "ХранилищеЗначения" Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
				Если ОбъектБДЕстьРеквизит(Реквизит.Имя, ОбъектБД) Тогда
					ТипЗначенияХрЗн = мдОбъектаБД.Реквизиты[Реквизит.Имя].Тип.Типы()[0];
					ТипЗначения = ?(ТипЗначенияХрЗн = Тип("ХранилищеЗначения"), ТипЗначенияХрЗн, ТипЗначения);
				КонецЕсли;
			КонецЕсли;
			РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, Реквизит.Имя, ТипЗначения, Реквизит.Значение, Истина);
			
			Если НЕ РезультатПроверки.Отказ Тогда
				ОбъектИЗМ[Реквизит.Имя] = Реквизит.Значение;
			Иначе
				Если ПоказыватьСообщения Тогда
					Если ПерваяОшибка = Неопределено Тогда
						ПерваяОшибка = 1;
						Сообщить(СтрокаРавно);
					КонецЕсли;
					Сообщить("МО: " + РезультатПроверки.ОписаниеОшибки, СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			
			ЕстьОшибки = Истина;
			Если ПерваяОшибка = Неопределено Тогда
				ПерваяОшибка = 1;
				Сообщить(СтрокаРавно);
			КонецЕсли;
			Сообщить("МО: " + "Не удалось установить значение реквизита """ + Реквизит.Имя + """: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЦикла;
	
	// Заполним ТЧ из Таблиц на форме.
	Для Каждого мдТЧ ИЗ мдОбъектаБД.ТабличныеЧасти Цикл
		Попытка
			Если ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
				тчОбъектаФ = Форма[ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя)];
			Иначе
				тчОбъектаФ = Форма.ЭлементыФормы[ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя)].Значение;
			КонецЕсли;
		Исключение
			Если ПоказыватьСообщения Тогда
				Сообщить(СтрокаРавно);
				Сообщить("МО: " + "Невозможно получить данные ТабличнойЧасти: """ + мдТЧ.Имя + """ из элемента Формы: " + ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя) + ?(ЭтотОбъект.СкрыватьПустыеТабличныеЧасти, ", возможно табличная часть скрыта, т.к. пустая", ""), СтатусСообщения.ОченьВажное);
				Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
					Если (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И НЕ ОбъектБД.ЭтоГруппа)
						ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И ОбъектБД.ЭтоГруппа) Тогда
						ГруппаИлиЭлемент = ?(ОбъектБД.ЭтоГруппа, "Группа", "Элемент");
						Сообщить("МО: " + "ТабличнаяЧасть: """ + мдТЧ.Имя + """ не соответствует отбору: Объект """ + ОбъектБД + """ это """ + ГруппаИлиЭлемент + """, а ТабличнаяЧасть используется """ + мдТЧ.Использование + """.", СтатусСообщения.Важное);
						Сообщить("МО: " + "ЭТО ПРАВИЛЬНО. Данная ТабличнаяЧасть не отображается => не редактируется => не сохраняется.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		тчОбъектаБД = ОбъектИЗМ[мдТЧ.Имя];
		тчОбъектаБД.Очистить();
		Для Каждого СтрокаТЧОбъектаФ ИЗ тчОбъектаФ Цикл
			
			СтрокаТЧОбъектаБД = тчОбъектаБД.Добавить();
			Для Каждого мдКолонкаТЧ ИЗ мдТЧ.Реквизиты Цикл
				
				Попытка
					ИмяТаблицы = "Табличная Часть """ + мдТЧ.Имя + """";
					РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, мдКолонкаТЧ.Имя, ТипЗнч(СтрокаТЧОбъектаБД[мдКолонкаТЧ.Имя]), СтрокаТЧОбъектаБД[мдКолонкаТЧ.Имя], Ложь);
			
					Если НЕ РезультатПроверки.Отказ Тогда
						СтрокаТЧОбъектаБД[мдКолонкаТЧ.Имя] = СтрокаТЧОбъектаФ[мдКолонкаТЧ.Имя];
					Иначе
						Если ПоказыватьСообщения Тогда
							Сообщить("МО: № " + Формат(СтрокаТЧОбъектаФ.НомерСтроки, "ЧЦ=6; ЧВН=") + ". " + РезультатПроверки.ОписаниеОшибки, СтатусСообщения.Важное);
						КонецЕсли;
					КонецЕсли;
				Исключение
					ЕстьОшибки = Истина;
					Если ПерваяОшибка = Неопределено Тогда
						ПерваяОшибка = 1;
						Сообщить(СтрокаРавно);
					КонецЕсли;
					Сообщить("МО: " + "Не удалось установить значение реквизита """ + мдКолонкаТЧ.Имя + """: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ТипОбъектаБД = ИмяТипаПланыСчетов() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		ОбъектБДЗаписатьСтандартнуюТабличнуюЧатьНаСервере(ОбъектИЗМ, Форма, Отказ, ЕстьОшибки, ПерваяОшибка);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		Отказ = Истина;
		
		Сообщить(СтрокаРавно);
		Если РежимЗаписи = Неопределено Тогда
			Сообщить("МО: " + "При сохранении объекта произошли ошибки. Объект: """ + ОбъектИЗМ + """ не записан.", СтатусСообщения.ОченьВажное);
			Сообщить("МО: " + "Измените ошибочные данные и повторите запись Объекта " + ОбъектИЗМ + ".", СтатусСообщения.Внимание);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Сообщить("МО: " + "При сохранении объекта произошли ошибки. Документ: """ + ОбъектИЗМ + """ не проведен.", СтатусСообщения.ОченьВажное);
			Сообщить("МО: " + "Измените ошибочные данные и повторите проведение Документа " + ОбъектИЗМ + ".", СтатусСообщения.Внимание);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Сообщить("МО: " + "При сохранении объекта произошли ошибки. Объект: """ + ОбъектИЗМ + """ отмена проведения не произведена.", СтатусСообщения.ОченьВажное);
			Сообщить("МО: " + "Измените ошибочные данные и повторите отмену проведения Документа """ + ОбъектИЗМ + """.", СтатусСообщения.Внимание);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ОбъектИЗМ, РежимЗаписи) Тогда
		ОбъектИЗМ.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
	КонецЕсли;
		
	Попытка
		
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектБД)) Тогда
			ОбъектИЗМ.Записать(?(РежимЗаписи = Неопределено, РежимЗаписиДокумента.Запись, РежимЗаписи));
		Иначе
			ОбъектИЗМ.Записать();
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		Сообщить("МО: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Сообщить("МО: " + "Возможно объект не подлежит записи, например в МодулеОбъекта конфигурации в Процедуре ""ПередЗаписью"" написано: Отказ = Истина
		|см. также даты запрета изменения данных.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
	Возврат;
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьСтандартнуюТабличнуюЧатьНаСервере(ОбъектИЗМ, Форма, Отказ, ЕстьОшибки, ПерваяОшибка)
	
	мдОбъектаБД = ОбъектИЗМ.Метаданные();
	ТипОбъектаБД= ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);
	
	// Заполним ТЧ из Таблиц на форме.
	Для Каждого мдТЧ ИЗ мдОбъектаБД.СтандартныеТабличныеЧасти Цикл
		Попытка
			Если ПараметрыСеансаОбработки.ТекущийРежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
				тчОбъектаФ = Форма[ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя)];
			Иначе
				тчОбъектаФ = Форма.ЭлементыФормы[ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя)].Значение;
			КонецЕсли;
		Исключение
			Если ПоказыватьСообщения Тогда
				Сообщить(СтрокаРавно);
				Сообщить("МО: " + "Невозможно получить данные ТабличнойЧасти: """ + мдТЧ.Имя + """ из элемента Формы: " + ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя), СтатусСообщения.ОченьВажное);
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		тчОбъектаБД = ОбъектИЗМ[мдТЧ.Имя];
		
		ИмяРеквизита = Неопределено;
		Если ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
			ИмяРеквизита = "ВидСубконто";
		ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
			ИмяРеквизита = "ВидРасчета";
		КонецЕсли;
		
		МассивУдаляемыхСтрок = Новый Массив;
		МассивПредопределенныхСубконто = Новый Массив;	// Предопределенные ВидыСубконто должны быть ПЕРВЫМИ и НА СВОИХ МЕСТАХ !!!
		Для Каждого СтрокаТЧ ИЗ тчОбъектаБД Цикл
			Если ТипОбъектаБД = ИмяТипаПланыСчетов() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
				Если (ТипОбъектаБД = ИмяТипаПланыСчетов() И СтрокаТЧ.Предопределенное) 
					ИЛИ (ТипОбъектаБД = ИмяТипаПланыВидовРасчета() И СтрокаТЧ.Предопределенный) Тогда
					МассивПредопределенныхСубконто.Добавить(СтрокаТЧ[ИмяРеквизита]);
				Иначе
					МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ ИЗ МассивУдаляемыхСтрок Цикл
			тчОбъектаБД.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		Для Каждого СтрокаТЧОбъектаФ ИЗ тчОбъектаФ Цикл
			Если НЕ МассивПредопределенныхСубконто.Найти(СтрокаТЧОбъектаФ[ИмяРеквизита]) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧТмп = Неопределено;
			Если ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
				СтрокаТЧТмп = тчОбъектаБД.Найти(СтрокаТЧОбъектаФ.ВидСубконто, "ВидСубконто");
				Если НЕ СтрокаТЧТмп = Неопределено И СтрокаТЧТмп.Предопределенное Тогда
					Продолжить;
				ИначеЕсли НЕ СтрокаТЧТмп = Неопределено И НЕ СтрокаТЧТмп.Предопределенное Тогда
					СтрокаТЧОбъектаБД = СтрокаТЧТмп;
				Иначе
					Если тчОбъектаБД.Количество() < мдОбъектаБД.МаксКоличествоСубконто Тогда
						СтрокаТЧОбъектаБД = тчОбъектаБД.Добавить();
					Иначе
						Сообщить("МО: " + "Невозможно добавить строку ВидаСубконто """ + СтрокаТЧОбъектаФ.ВидСубконто + """, т.к. будет превышено максимальное количество " + мдОбъектаБД.МаксКоличествоСубконто + ".", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
				СтрокаТЧТмп = тчОбъектаБД.Найти(СтрокаТЧОбъектаФ.ВидРасчета, "ВидРасчета");
				Если НЕ СтрокаТЧТмп = Неопределено И СтрокаТЧТмп.Предопределенный Тогда
					Продолжить;
				ИначеЕсли НЕ СтрокаТЧТмп = Неопределено И НЕ СтрокаТЧТмп.Предопределенный Тогда
					СтрокаТЧОбъектаБД = СтрокаТЧТмп;
				Иначе
					СтрокаТЧОбъектаБД = тчОбъектаБД.Добавить();
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого мдКолонкаТЧ ИЗ мдТЧ.СтандартныеРеквизиты Цикл
				
				Если мдКолонкаТЧ.Имя = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					ИмяТаблицы = "Табличная Часть """ + мдТЧ.Имя + """";
					РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, мдКолонкаТЧ.Имя, ТипЗнч(СтрокаТЧОбъектаБД[мдКолонкаТЧ.Имя]), СтрокаТЧОбъектаБД[мдКолонкаТЧ.Имя], Ложь);
			
					Если НЕ РезультатПроверки.Отказ Тогда
						СтрокаТЧОбъектаБД[мдКолонкаТЧ.Имя] = СтрокаТЧОбъектаФ[мдКолонкаТЧ.Имя];
					Иначе
						Если ПоказыватьСообщения Тогда
							Сообщить("МО: № " + Формат(СтрокаТЧОбъектаФ.НомерСтроки, "ЧЦ=6; ЧВН=") + ". " + РезультатПроверки.ОписаниеОшибки, СтатусСообщения.Важное);
						КонецЕсли;
					КонецЕсли;
				Исключение
					ЕстьОшибки = Истина;
					Если ПерваяОшибка = Неопределено Тогда
						ПерваяОшибка = 1;
						Сообщить(СтрокаРавно);
					КонецЕсли;
					Сообщить("МО: " + "Не удалось установить значение реквизита """ + мдКолонкаТЧ.Имя + """: " + ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Выполнить Пометка на удаления / Снять пометку удаления / Удалить (НЕПОСРЕДСТВЕННО).
//
Процедура ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, Действие = "ПометкаНаУдаление") Экспорт
	
	ОбъектИЗМ = ОбъектБДПолучитьОбъектИзСсылки(ОбъектБД);
	Если ОбъектИЗМ = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
			
	Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ОбъектИЗМ) Тогда
		ОбъектИЗМ.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
	КонецЕсли;
	
	Попытка
		
		Если Действие = "ПометкаНаУдаление" Тогда
			
			Если ОбъектБД.ПометкаУдаления Тогда
				Если ПоказыватьСообщения Тогда
					Сообщить("МО: " + "Попытка выполнить действие <Пометка на удаление>.
					|""" + ОбъектБД + """ был помечен на удаление ранее. 
					|Действие не выполнено. см. Статус.", СтатусСообщения.Важное);
				КонецЕсли;
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ОбъектИЗМ.УстановитьПометкуУдаления(Истина);
			
		ИначеЕсли Действие = "Удалить" Тогда
			
			ОбъектИЗМ.Удалить();
			
		Иначе	// Снять пометку удаления.
			
			Если НЕ ОбъектБД.ПометкаУдаления Тогда
				Если ПоказыватьСообщения Тогда
					Сообщить("МО: " + "Попытка выполнить действие <Снять пометку на удаление>.
					|""" + ОбъектБД + """ не был помечен на удаление. 
					|Действие не выполнено. см. Статус.", СтатусСообщения.Важное);
				КонецЕсли;
				Отказ = Истина;
				Возврат;
			КонецЕсли;
	
			ОбъектИЗМ.УстановитьПометкуУдаления(Ложь);
			
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		Сообщить("МО: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Сообщить("МО: " + "см. также даты запрета изменения данных.", СтатусСообщения.ОченьВажное);
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ТАБЛИЦЫ РЕКВИЗИТОВ.
// 

// Вкладка "Свойства Объекта" и др. Сформировать Основные Таблицы выбранного ОбъектаБД.
// - Таблица Реквизитов.
// - Таблицы Табличных частей.
// - Таблицы Регистров Движений Документов.
//
Функция ОбъектБДСформироватьТРеквизиты(ОбъектБД) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипОбъектаБД 	= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	мдОбъектаБД 	= ОбъектБД.Метаданные();

	ТСвойстваОбъекта.Очистить();
	ТРеквизитыОбъекта.Очистить();
	
	СтруктураРеквизиты = Новый Структура;
	СписокРеквизиты = Новый СписокЗначений;
	
	БлокируемыеРеквизиты = ОбъектБДПолучитьБлокируемыеРеквизитыОбъектаНаСервере(ОбъектБД);
	НеРедактируемыеРеквизиты = ОбъектБДПолучитьНеРедактируемыеРеквизитыОбъектаНаСервере(ОбъектБД);
	
	Если ТипОбъектаБД = ИмяТипаСправочники() Тогда
		
		// Свойства Объекта.
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));				// 1-ой строкой !!!
		
		// Стандартные реквизиты.
		Если мдОбъектаБД.Владельцы.Количество() > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Владелец", "Владелец", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		Если мдОбъектаБД.Иерархический Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Родитель", "Родитель", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
			Если ОбъектБДЕстьРеквизит("ЭтоГруппа", ОбъектБД) Тогда
				
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "ЭтоГруппа", "ЭтоГруппа", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаКода > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Код", "Код", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаКода);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаНаименования > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Наименование", "Наименование", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			
			Если (Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ОбъектБД.ЭтоГруппа)
				ИЛИ (Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ ОбъектБД.ЭтоГруппа)
				ИЛИ (Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента) Тогда
				
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
			Иначе
				
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
				ТРеквизитыОбъекта.Удалить(СтрокаТРеквизиты);
				
				Если ПоказыватьСообщения Тогда
					ГруппаИлиЭлемент = ?(ОбъектБД.ЭтоГруппа, "Группа", "Элемент");
					Сообщить("МО: " + "Реквизит: """ + Реквизит.Имя + """ не включен в редактирование, т.к. не соответствует отбору: Реквизит - это """ + ГруппаИлиЭлемент + """, а Реквизит используется для: """ + Реквизит.Использование + """.", СтатусСообщения.Внимание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаДокументы() Тогда
		
		// Свойства Объекта.
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));				// 1-ой строкой !!!
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Последовательности", ОбъектБДПолучитьПоследовательностиДокумента(ОбъектБД));
		
		// Стандартные реквизиты.
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Номер", "Номер", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНомера);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Дата", "Дата", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыОбмена() Тогда
		
		// Свойства Объекта.
		БДвРИБ = ОбъектБДПолучитьПоложениеБДвРИБ(ОбъектБД);
		
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание"	, ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));			// 1-ой строкой !!!
		Если мдОбъектаБД.РаспределеннаяИнформационнаяБаза Тогда
			ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "УзелРИБ"	, БДвРИБ + ": " + ?(ОбъектБДПроверитьЭтоГлавныйУзелПланаОбмена(ОбъектБД), "ГлавныйУзел", "ПодчиненныйУзел"));
		Иначе
			ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "УзелРИБ"	, "");
		КонецЕсли;
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Состав"		, ОбъектБДПолучитьСоставПланаОбмена(ОбъектБД));
		
		// Стандартные реквизиты.
		Если мдОбъектаБД.ДлинаКода > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Код", "Код", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаКода);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаНаименования > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Наименование", "Наименование", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "НомерПринятого", "Номер принятого", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.СтандартныеРеквизиты.НомерПринятого.Тип.КвалификаторыЧисла.Разрядность);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "НомерОтправленного", "Номер отправленного", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.СтандартныеРеквизиты.НомерОтправленного.Тип.КвалификаторыЧисла.Разрядность);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
				
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		
		// Свойства Объекта.
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));				// 1-ой строкой !!!
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "ТипЗначенияХарактеристик", мдОбъектаБД.Тип);
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "ДополнительныеЗначенияХарактеристик", мдОбъектаБД.ДополнительныеЗначенияХарактеристик);
				
		// Стандартные реквизиты.
		Если мдОбъектаБД.Иерархический Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Родитель", "Родитель", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
			Если ОбъектБДЕстьРеквизит("ЭтоГруппа", ОбъектБД) Тогда
				
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "ЭтоГруппа", "ЭтоГруппа", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаКода > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Код", "Код", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаКода);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаНаименования > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Наименование", "Наименование", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			
			Если (Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ОбъектБД.ЭтоГруппа)
				ИЛИ (Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ ОбъектБД.ЭтоГруппа)
				ИЛИ (Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента) Тогда
				
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
			Иначе
				
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
				
				ТРеквизитыОбъекта.Удалить(СтрокаТРеквизиты);
				
				Если ПоказыватьСообщения Тогда
					ГруппаИлиЭлемент = ?(ОбъектБД.ЭтоГруппа, "Группа", "Элемент");
					Сообщить("МО: " + "Реквизит: """ + Реквизит.Имя + """ не включен в редактирование, т.к. не соответствует отбору: Реквизит - это """ + ГруппаИлиЭлемент + """, а Реквизит используется для: """ + Реквизит.Использование + """.", СтатусСообщения.Внимание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
		
		// Свойства Объекта.
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));				// 1-ой строкой !!!
		
		// Стандартные реквизиты.
		Если мдОбъектаБД.ДлинаНомера > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Номер", "Номер", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНомера);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Дата", "Дата", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "ВедущаяЗадача", "ВедущаяЗадача", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Стартован", "Стартован", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Завершен", "Завершен", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаЗадачи() Тогда
		
		// Свойства Объекта.
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));
	
		// Стандартные реквизиты.
		Если мдОбъектаБД.ДлинаНомера > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Номер", "Номер", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНомера);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Дата", "Дата", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		Если мдОбъектаБД.ДлинаНаименования > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Наименование", "Наименование", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "БизнесПроцесс", "БизнесПроцесс", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "ТочкаМаршрута", "ТочкаМаршрута", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Выполнена", "Выполнена", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		// Реквизиты Адресации.
		Для Каждого Реквизит ИЗ мдОбъектаБД.РеквизитыАдресации Цикл
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЦикла;
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
		
		// Свойства Объекта.
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));
			
		// Стандартные реквизиты.
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Родитель", "Родитель", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		Если мдОбъектаБД.ДлинаКода > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Код", "Код", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаКода);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаНаименования > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Наименование", "Наименование", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Вид", "Вид", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Забалансовый", "Забалансовый", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
		СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
		СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		
		// ПризнакиУчета.
		Для Каждого Реквизит ИЗ мдОбъектаБД.ПризнакиУчета Цикл
			СчитатьМДанные = Ложь;
			Попытка
				Значение = ОбъектБД[Реквизит.Имя];
				СчитатьМДанные = Истина;
			Исключение
				СчитатьМДанные = Ложь;
				//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
			Если СчитатьМДанные Тогда
				СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
				СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
				СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			КонецЕсли;
		КонецЦикла;
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		КонецЦикла;
		
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		
		ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Описание", ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД));
		
		Если мдОбъектаБД.ДлинаКода > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Код", "Код", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаКода);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		Если мдОбъектаБД.ДлинаНаименования > 0 Тогда
			
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, "Наименование", "Наименование", БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Ложь, мдОбъектаБД.ДлинаНаименования);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
			
		КонецЕсли;
		
		// Реквизиты.
		Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
			СтрокаТРеквизиты = ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, Реквизит.Имя, Реквизит.Представление(), БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Истина);
			СтруктураРеквизиты.Вставить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.ОписаниеТипов);
			СписокРеквизиты.Добавить(СтрокаТРеквизиты.Имя, СтрокаТРеквизиты.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура;
	СтруктураВозврат.Вставить("ТСвойстваОбъекта"		, ТСвойстваОбъекта);
	СтруктураВозврат.Вставить("ТРеквизитыОбъекта"		, ТРеквизитыОбъекта);
	СтруктураВозврат.Вставить("СтруктураРеквизиты"		, СтруктураРеквизиты);
	СтруктураВозврат.Вставить("СписокРеквизиты"			, СписокРеквизиты);
	СтруктураВозврат.Вставить("БлокируемыеРеквизиты"	, БлокируемыеРеквизиты);
	СтруктураВозврат.Вставить("НеРедактируемыеРеквизиты", НеРедактируемыеРеквизиты);
	
	Возврат СтруктураВозврат;
	
КонецФункции

// Вкладка "Дополнительно". Получение массива "Блокируемых" реквизитов: "Реквизит не рекомендуется/нельзя изменять, если объект участвует в документах."
//
Функция ОбъектБДПолучитьБлокируемыеРеквизитыОбъектаНаСервере(ОбъектБД)
	
	м_БлокируемыеРеквизиты = Неопределено;
	БлокируемыеРеквизиты = Новый СписокЗначений;
	Попытка
		м_БлокируемыеРеквизиты = МенеджерОбъектаПоСсылке(ОбъектБД).ПолучитьБлокируемыеРеквизитыОбъекта();
	Исключение
	КонецПопытки;
	
	Если м_БлокируемыеРеквизиты = Неопределено Тогда
		БлокируемыеРеквизиты = Новый СписокЗначений;
	Иначе
		БлокируемыеРеквизиты.ЗагрузитьЗначения(м_БлокируемыеРеквизиты);
	КонецЕсли;
	
	Возврат БлокируемыеРеквизиты;
	
КонецФункции

// Вкладка "Дополнительно". Получение массива "НеРедактируемых" реквизитов: "Реквизит, который не нужно редактировать с помощью обработки группового изменения объектов."
//
Функция ОбъектБДПолучитьНеРедактируемыеРеквизитыОбъектаНаСервере(ОбъектБД)
	
	м_НеРедактируемыеРеквизиты = Неопределено;
	НеРедактируемыеРеквизиты = Новый СписокЗначений;
	Попытка
		м_НеРедактируемыеРеквизиты = МенеджерОбъектаПоСсылке(ОбъектБД).РеквизитыНеРедактируемыеВГрупповойОбработке();
	Исключение
	КонецПопытки;
	
	Если м_НеРедактируемыеРеквизиты = Неопределено Тогда
		НеРедактируемыеРеквизиты = Новый СписокЗначений;
	Иначе
		НеРедактируемыеРеквизиты.ЗагрузитьЗначения(м_НеРедактируемыеРеквизиты);
	КонецЕсли;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает менеджер объекта по ссылке на объект
//
// Не обрабатываются точки маршрутов бизнес-процессов
//
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ...
// 
Функция МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	
	ИмяОбъекта = Ссылка.Метаданные().Имя;
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Справочники[ИмяОбъекта];
		//
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Документы[ИмяОбъекта];
		//
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат БизнесПроцессы[ИмяОбъекта];
		//
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовХарактеристик[ИмяОбъекта];
		//
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыСчетов[ИмяОбъекта];
		//
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыВидовРасчета[ИмяОбъекта];
		//
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Задачи[ИмяОбъекта];
		//
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат ПланыОбмена[ИмяОбъекта];
		//
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипСсылки) Тогда
		Возврат Перечисления[ИмяОбъекта];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Вкладка "Реквизиты бъекта". Сформировать Строку таблицы Реквизитов выбранного ОбъектаБД.
//
Процедура ОбъектБДСформироватьТСвойстваДобавитьСтроку(мдОбъектаБД, ОбъектБД, ИмяРеквизита, ЗначениеРеквизита)
	
	СтрокаТСвойства = ТСвойстваОбъекта.Добавить();
	СтрокаТСвойства.Свойство = ИмяРеквизита;
	СтрокаТСвойства.Значение = ЗначениеРеквизита;
	
КонецПроцедуры

// Вкладка "Реквизиты бъекта". Сформировать Строку таблицы Реквизитов выбранного ОбъектаБД.
//
Функция ОбъектБДСформироватьТРеквизитыДобавитьСтроку(мдОбъектаБД, ОбъектБД, ИмяРеквизита, Представление, БлокируемыеРеквизиты, НеРедактируемыеРеквизиты, Проверяемый, Длина = Неопределено)
	
	// Стандартные реквизиты: Справочника, Документа, ПланаОбмена.
	Мас = Новый Массив;
	Мас.Добавить("Код");					// Справочник, ПланОбмена.
	Мас.Добавить("Наименование");			// Справочник, ПланОбмена.
	Мас.Добавить("Номер");					// Документ.
	Мас.Добавить("НомерОтправленного");		// ПланОбмена.
	Мас.Добавить("НомерПринятого");			// ПланОбмена.
	
	СтрокаТРеквизиты				= ТРеквизитыОбъекта.Добавить();
	
	РезультатРеквизит 				= ОбъектБДПолучитьМДРеквизита(ИмяРеквизита, ОбъектБД);
	
	СтрокаТРеквизиты.Группа			= РезультатРеквизит.Группа;
	Реквизит 						= РезультатРеквизит.Реквизит;
	СтрокаТРеквизиты.Блокированный	= НЕ БлокируемыеРеквизиты.НайтиПоЗначению(ИмяРеквизита) = Неопределено;
	
	Если НеРедактируемыеРеквизиты.Количество() > 0 Тогда
		Если НЕ НеРедактируемыеРеквизиты.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
			Проверяемый = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Тип = Строка(ТипЗнч(ОбъектБД[ИмяРеквизита]));
	
	Если СтрокаТРеквизиты.Блокированный Тогда
		СтрокаТРеквизиты.Проверяемый	= Истина;
	Иначе
		Если Тип = "Дата" ИЛИ Тип = "Булево" ИЛИ Тип = "Хранилище значения" Тогда
			СтрокаТРеквизиты.Проверяемый= Ложь;
		Иначе
			СтрокаТРеквизиты.Проверяемый= Проверяемый;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТРеквизиты.Имя			= ИмяРеквизита;
	СтрокаТРеквизиты.Представление	= Представление;
	
	Если НЕ Реквизит = Неопределено Тогда
		СтрокаТРеквизиты.ОписаниеТипов = Реквизит.Тип;
	КонецЕсли;
	
	Если ОбъектБД[ИмяРеквизита] = Неопределено Тогда
		СтрокаТРеквизиты.Тип		= "<<Неопределено>>";
	ИначеЕсли (Тип = "Строка" ИЛИ Тип = "Дата" ИЛИ Тип = "Число" ИЛИ Тип = "Булево") Тогда
		СтрокаТРеквизиты.Тип		= Тип;
		Если (Тип = "Строка") ИЛИ (Тип = "Число") Тогда
			Если НЕ Длина = Неопределено Тогда
				СтрокаТРеквизиты.Тип = СтрокаТРеквизиты.Тип + " (" + Длина + ")";
			Иначе
				Если Мас.Найти(ИмяРеквизита) = Неопределено Тогда
					Если Тип = "Строка" Тогда
						Длина = мдОбъектаБД.Реквизиты[ИмяРеквизита].Тип.КвалификаторыСтроки.Длина;
						Длина = ?(Длина = 0, "неограниченная", Длина);
						СтрокаТРеквизиты.Тип = СтрокаТРеквизиты.Тип + " (" + Длина + ")";
						Если Длина = "неограниченная" Тогда
							СтрокаТРеквизиты.Проверяемый= Ложь;
						КонецЕсли;
					Иначе
						Если мдОбъектаБД.Реквизиты[ИмяРеквизита].Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти > 0 Тогда
							СтрокаТРеквизиты.Тип = СтрокаТРеквизиты.Тип + " (" + мдОбъектаБД.Реквизиты[ИмяРеквизита].Тип.КвалификаторыЧисла.Разрядность + "." + мдОбъектаБД.Реквизиты[ИмяРеквизита].Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")";
						Иначе
							СтрокаТРеквизиты.Тип = СтрокаТРеквизиты.Тип + " (" + мдОбъектаБД.Реквизиты[ИмяРеквизита].Тип.КвалификаторыЧисла.Разрядность + ")";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаТРеквизиты.Тип = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД[ИмяРеквизита]);
	КонецЕсли;
	
	Если ИмяРеквизита = "Описание" ИЛИ ИмяРеквизита = "Комментарий" ИЛИ ИмяРеквизита = "ФайлКартинки" ИЛИ Найти(ИмяРеквизита, "Удалить") = 1 Тогда
		СтрокаТРеквизиты.Проверяемый= Ложь;
	ИначеЕсли ИмяРеквизита = "НаименованиеПолное" Тогда
		СтрокаТРеквизиты.Проверяемый= Истина;
	КонецЕсли;
	
	СтрокаТРеквизиты.Значение = ОбъектБД[ИмяРеквизита];	// ХранилищеЗначения. см. ОбъектБДЗаписатьНаСервере().
	
	Возврат СтрокаТРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "МЕТАДАННЫЕ".
// 

// Вкладка "Метаданные" - "Регистры".
// - Имя Регистра.
// - Измерение/Ресурс/Реквизит Регистра.
// - Признак Ведущщее (только для Регистра Сведений).
//
Функция ПолучитьСписокРегистровСвязанныхСОбъектомМД(ОбъектБД) Экспорт
	
	СписокУникальныхИменРегистров = Новый СписокЗначений;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	ТипОбъектаБД= ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);
	
	ПорядковыйНомер = 0;
	ТМетаданныеРегистрыОбъекта.Очистить();
	Если ТипОбъектаБД = ИмяТипаДокументы() Тогда
		Для Каждого мдРегистратор ИЗ мдОбъектаБД.Движения Цикл
			НоваяСтрока = ТМетаданныеРегистрыОбъекта.Добавить();
			ПорядковыйНомер		= ПорядковыйНомер + 1;
			НоваяСтрока.НПП		= ПорядковыйНомер;
			НоваяСтрока.Регистр	= "" + ИмяБазовогоТипаПоОбъектуМетаданных(мдРегистратор) + "." + мдРегистратор.Имя;
			НоваяСтрока.Позиция	= "[рег] " + мдОбъектаБД.ПолноеИмя();
			Если СписокУникальныхИменРегистров.НайтиПоЗначению(НоваяСтрока.Регистр) = Неопределено Тогда
				СписокУникальныхИменРегистров.Добавить(НоваяСтрока.Регистр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	сзРегистры = Новый СписокЗначений;
	сзРегистры.Добавить("РегистрыСведений");
	сзРегистры.Добавить("РегистрыНакопления");
	сзРегистры.Добавить("РегистрыБухгалтерии");
	сзРегистры.Добавить("РегистрыРасчета");
	
	Для Каждого ТипРегистра ИЗ сзРегистры Цикл

		Для Каждого мдРегистр ИЗ Метаданные[ТипРегистра.Значение] Цикл
			
			Для Каждого мдИзмерение ИЗ мдРегистр.Измерения Цикл
				
				Для Каждого мдТип ИЗ мдИзмерение.Тип.Типы() Цикл
					Если мдОбъектаБД = Метаданные.НайтиПоТипу(мдТип) тогда
						НоваяСтрока = ТМетаданныеРегистрыОбъекта.Добавить();
						ПорядковыйНомер		= ПорядковыйНомер + 1;
						НоваяСтрока.НПП		= ПорядковыйНомер;
						НоваяСтрока.Регистр	= "" + мдРегистр.ПолноеИмя();
						НоваяСтрока.Позиция	= "[изм] " + мдИзмерение.Имя;
						Если ((ТипРегистра.Значение = "РегистрыСведений") И мдИзмерение.Ведущее) Тогда
							НоваяСтрока.Ведущее = Истина;
						КонецЕсли;
						Если СписокУникальныхИменРегистров.НайтиПоЗначению(НоваяСтрока.Регистр) = Неопределено Тогда
							СписокУникальныхИменРегистров.Добавить(НоваяСтрока.Регистр);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого мдРесурс ИЗ мдРегистр.Ресурсы Цикл
				
				Для Каждого мдТип ИЗ мдРесурс.Тип.Типы() Цикл
					Если мдОбъектаБД = Метаданные.НайтиПоТипу(мдТип) тогда
						НоваяСтрока			= ТМетаданныеРегистрыОбъекта.Добавить();
						ПорядковыйНомер		= ПорядковыйНомер + 1;
						НоваяСтрока.НПП		= ПорядковыйНомер;
						НоваяСтрока.Регистр	= "" + мдРегистр.ПолноеИмя();
						НоваяСтрока.Позиция	= "[рес] " + мдРесурс.Имя;
						Если СписокУникальныхИменРегистров.НайтиПоЗначению(НоваяСтрока.Регистр) = Неопределено Тогда
							СписокУникальныхИменРегистров.Добавить(НоваяСтрока.Регистр);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого мдРеквизит ИЗ мдРегистр.Ресурсы Цикл
				
				Для Каждого мдТип ИЗ мдРеквизит.Тип.Типы() Цикл
					Если мдОбъектаБД = Метаданные.НайтиПоТипу(мдТип) тогда
						НоваяСтрока = ТМетаданныеРегистрыОбъекта.Добавить();
						ПорядковыйНомер		= ПорядковыйНомер + 1;
						НоваяСтрока.НПП		= ПорядковыйНомер;
						НоваяСтрока.Регистр	= "" + мдРегистр.ПолноеИмя();
						НоваяСтрока.Позиция	= "[рек] " + мдРеквизит.Имя;
						Если СписокУникальныхИменРегистров.НайтиПоЗначению(НоваяСтрока.Регистр) = Неопределено Тогда
							СписокУникальныхИменРегистров.Добавить(НоваяСтрока.Регистр);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;	// мдРегистр ИЗ Метаданные[ТипРегистра.Значение] Цикл
		
	КонецЦикла;	// ТипРегистра ИЗ сзРегистры Цикл
	
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Таблица", ТМетаданныеРегистрыОбъекта);
	стрВозврат.Вставить("Заголовок","Количество уникальных регистров: " + СписокУникальныхИменРегистров.Количество());
	
	Возврат стрВозврат;
	
КонецФункции

// Вкладка "Метаданные" - "Подписки".
// - Имя Подписки.
// - Обработчик.
// - Событие.
//
Функция ПолучитьСписокПодписокНаСобытияОбъектаМД(ОбъектБД) Экспорт

	мдОбъектаБД = ОбъектБД.Метаданные();

	ТМетаданныеПодпискиНаСобытия.Очистить();
	
	ТипОбъекта = Тип(ЭтотОбъект.ТипОбъектаБД + "Объект." + мдОбъектаБД.Имя);
	ПорядковыйНомер = 0;
	Для Каждого Подписка ИЗ Метаданные.ПодпискиНаСобытия Цикл
		Если Подписка.Источник.СодержитТип(ТипОбъекта) Тогда
			НоваяСтрока = ТМетаданныеПодпискиНаСобытия.Добавить();
			ПорядковыйНомер			= ПорядковыйНомер + 1;
			НоваяСтрока.НПП			= ПорядковыйНомер;
			НоваяСтрока.Подписка	= Подписка.Имя;
			НоваяСтрока.Обработчик  = Подписка.Обработчик;
			НоваяСтрока.Событие  	= Подписка.Событие;
		КонецЕсли;
	КонецЦикла;
	
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Таблица", ТМетаданныеПодпискиНаСобытия);
	стрВозврат.Вставить("Заголовок","Количество подписок: " + ТМетаданныеПодпискиНаСобытия.Количество());
	
	Возврат стрВозврат;

КонецФункции

// Вкладка "Метаданные" - "Планы обмена".
// - Имя Плана обмена.
//
Функция ПолучитьСписокПлановОбменаОбъектаМД(ОбъектБД) Экспорт
	
	мдОбъектаБД = ОбъектБД.Метаданные();

	ТМетаданныеПланыОбмена.Очистить();
	ПорядковыйНомер = 0;
	Для Каждого ПланОбмена ИЗ Метаданные.ПланыОбмена Цикл
		СоставПланаОбмена = ПланОбмена.Состав;
		Для Каждого ЭлементСостава ИЗ СоставПланаОбмена Цикл
			Если ЭлементСостава.Метаданные = мдОбъектаБД Тогда
				НоваяСтрока = ТМетаданныеПланыОбмена.Добавить();
				ПорядковыйНомер			= ПорядковыйНомер + 1;
				НоваяСтрока.НПП			= ПорядковыйНомер;
				НоваяСтрока.ПланОбмена	= ПланОбмена.Имя;
				НоваяСтрока.ПредставлениеОбъекта = ?(ЗначениеЗаполнено(ПланОбмена.ПредставлениеОбъекта), ПланОбмена.ПредставлениеОбъекта, ПланОбмена.РасширенноеПредставлениеОбъекта);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Таблица", ТМетаданныеПланыОбмена);
	стрВозврат.Вставить("Заголовок","Количествово планов обмена: " + ТМетаданныеПланыОбмена.Количество());
	
	Возврат стрВозврат;

КонецФункции

// Вкладка "Метаданные" - "Ввод на основании".
// - Объект.
//
Функция ПолучитьСписокВводНаОснованииОъектаМД(ОбъектБД) Экспорт
	Перем СписокКоллекцийМД;

	СписокКоллекцийМД = ФолучитьМассивКоллекцийОбъектовМетаданных();
	
	мдОбъектаБД = ОбъектБД.Метаданные();

	ТМетаданныеВводитсяНаОсновании.Очистить();
	ТМетаданныеЯвляетсяОснованиемДля.Очистить();
	
	// Вводится на основани ...
	ПорядковыйНомер = 0;
	Для Каждого ОбъектОснование ИЗ мдОбъектаБД.ВводитсяНаОсновании Цикл
		НоваяСтрока = ТМетаданныеВводитсяНаОсновании.Добавить();
		ПорядковыйНомер		= ПорядковыйНомер + 1;
		НоваяСтрока.НПП		= ПорядковыйНомер;
		НоваяСтрока.Объект	= ОбъектОснование.Имя;
	КонецЦикла;
	
	// Является основанием для ...
	ПорядковыйНомер = 0;
	Для Каждого КоллекцияОбъектовМетаданных ИЗ СписокКоллекцийМД Цикл
		Для Каждого ОбъектОснование ИЗ Метаданные[КоллекцияОбъектовМетаданных] Цикл
			Если ОбъектОснование.ВводитсяНаОсновании.Содержит(мдОбъектаБД) Тогда
				НоваяСтрока = ТМетаданныеЯвляетсяОснованиемДля.Добавить();
				ПорядковыйНомер		= ПорядковыйНомер + 1;
				НоваяСтрока.НПП		= ПорядковыйНомер;
				НоваяСтрока.Объект	= ОбъектОснование.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Таблица_1", ТМетаданныеВводитсяНаОсновании);
	стрВозврат.Вставить("Таблица_2", ТМетаданныеЯвляетсяОснованиемДля);
	
	Возврат стрВозврат;

КонецФункции

Функция ФолучитьМассивКоллекцийОбъектовМетаданных()
	Перем СписокКоллекцийМД;

	СписокКоллекцийМД = Новый Массив;	// Метаданные
	СписокКоллекцийМД.Добавить("БизнесПроцессы");
	СписокКоллекцийМД.Добавить("Документы");
	СписокКоллекцийМД.Добавить("Задачи");
	СписокКоллекцийМД.Добавить("ПланыВидовРасчета");
	СписокКоллекцийМД.Добавить("ПланыВидовХарактеристик");
	СписокКоллекцийМД.Добавить("ПланыСчетов");
	СписокКоллекцийМД.Добавить("Справочники");
	
	Возврат СписокКоллекцийМД;
	
КонецФункции

// Вкладка "Метаданные" - "Функциональные опции".
// - Имя Функциональной опции.
// - Имя Реквизита.
//
Функция ПолучитьСписокФункциональныхОпцийОбъектаМД(ОбъектБД) Экспорт

	мдОбъектаБД = ОбъектБД.Метаданные();
	
	ТМетаданныеФункциональныеОпции.Очистить();
	
	ПорядковыйНомер = 0;
	Для Каждого ФОпция ИЗ Метаданные.ФункциональныеОпции Цикл
		Для Каждого ЭлементСостава ИЗ ФОпция.Состав Цикл
			Если ЭлементСостава.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементСостава.Объект = мдОбъектаБД Тогда
				НоваяСтрока = ТМетаданныеФункциональныеОпции.Добавить();
				ПорядковыйНомер		= ПорядковыйНомер + 1;
				НоваяСтрока.НПП		= ПорядковыйНомер;
				НоваяСтрока.ФОпция	= ПолучитьВидОбъектаХраненияФункциональнойОпции(ФОпция) + ФОпция.Имя;
				НоваяСтрока.Тип		= ФОпция.Хранение.Тип;
				НоваяСтрока.ПривилегированныйРежимПриПолучении = ФОпция.ПривилегированныйРежимПриПолучении;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Таблица", ТМетаданныеФункциональныеОпции);
	
	Возврат стрВозврат;

КонецФункции

// Вкладка "Метаданные" - "Функциональные опции".
// - Имя Функциональной опции.
// - Имя Реквизита.
//
Процедура ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, Таблица, ТЧасть = Неопределено, Управляемая = Истина) Экспорт

	мдОбъектаБД = ОбъектБД.Метаданные();
	Если НЕ ТЧасть = Неопределено И мдОбъектаБД.ТабличныеЧасти.Количество() > 0 Тогда
		мдТЧасти = мдОбъектаБД.ТабличныеЧасти[ТЧасть];
	Иначе
		мдТЧасти = Неопределено;
	КонецЕсли;
	
	Для Каждого ФОпция ИЗ Метаданные.ФункциональныеОпции Цикл
		Для Каждого ЭлементСостава ИЗ ФОпция.Состав Цикл
			Если ЭлементСостава.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если (ТЧасть = Неопределено И ЭлементСостава.Объект.Родитель() = мдОбъектаБД) Тогда
				МассивСтрок = Таблица.НайтиСтроки(Новый Структура("Имя", ЭлементСостава.Объект.Имя));
				Если МассивСтрок.Количество() > 0 Тогда
					МассивСтрок[0].ФОпция = ПолучитьВидОбъектаХраненияФункциональнойОпции(ФОпция) + ФОпция.Имя;
				КонецЕсли;
			ИначеЕсли (НЕ ТЧасть = Неопределено И ЭлементСостава.Объект.Родитель() = мдТЧасти И ЭлементСостава.Объект.Родитель().Родитель() = мдОбъектаБД) Тогда
				Если Управляемая Тогда
					КолонкаТЧ = Таблица.ПодчиненныеЭлементы["ТФормыТЧасти"+ТЧасть].ПодчиненныеЭлементы["ТФормыТЧасти"+ТЧасть+ЭлементСостава.Объект.Имя];
					Если Найти(КолонкаТЧ.Заголовок, "ФОпция:") = 0 Тогда
						КолонкаТЧ.Заголовок = КолонкаТЧ.Заголовок + Символы.ПС + "(ФОпция:" + ПолучитьВидОбъектаХраненияФункциональнойОпции(ФОпция) + ФОпция.Имя + ")";
					КонецЕсли;
				Иначе
					КолонкаТЧ = Таблица.Колонки[ЭлементСостава.Объект.Имя];
					Если Найти(КолонкаТЧ.ТекстШапки, "ФОпция:") = 0 Тогда
						КолонкаТЧ.ТекстШапки = КолонкаТЧ.ТекстШапки + Символы.ПС + "(ФОпция:" + ПолучитьВидОбъектаХраненияФункциональнойОпции(ФОпция) + ФОпция.Имя + ")";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат;

КонецПроцедуры

Функция ПолучитьВидОбъектаХраненияФункциональнойОпции(Знач ФОпция)
	
	Если Строка(ФОпция.Хранение.Тип) = "Число" ИЛИ Строка(ФОпция.Хранение.Тип) = "Строка" ИЛИ Строка(ФОпция.Хранение.Тип) = "Дата" ИЛИ Строка(ФОпция.Хранение.Тип) = "Булево" Тогда
		Если НЕ Метаданные.НайтиПоПолномуИмени("Константа." + ФОпция.Хранение.Имя) = Неопределено Тогда
			Возврат "[Константа:]";
		ИначеЕсли НЕ Метаданные.НайтиПоПолномуИмени("Справочник." + ФОпция.Хранение.Имя) = Неопределено Тогда
			Возврат "[Справочник:]";
		ИначеЕсли НЕ Метаданные.НайтиПоПолномуИмени("РегистрСведений." + ФОпция.Хранение.Имя) = Неопределено Тогда
			Возврат "[РСведений:]";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО" - "ССЫЛКИ НА ОБЪЕКТ".

// Вкладка "Ссылки на Объект". Поиск ссылок на выбранный ОбъектБД.
//
Функция ТСсылкиНайтиСсылкиНаОбъектНаСервере(ОбъектБД) Экспорт
	
	МассивЗаменяемых = Новый Массив;
	МассивЗаменяемых.Добавить(ОбъектБД);
	
	ТСсылкиСписок = НайтиПоСсылкам(МассивЗаменяемых);
	ТСсылкиСписок.Колонки.Вставить(0, "Включено", Новый ОписаниеТипов("Булево"), , 3);
	
	Возврат ТСсылкиСписок;
 
КонецФункции

// Вкладка "Ссылки на Объект". Произвести Замену ссылок Выбранного ОбъектаБД на Заменяющий ОбъектБД.
//
Процедура ТСсылкиПроизвестиЗаменуСсылокНаСервере(ОбъектБДЗаменяющий) Экспорт
	
	Заменяемые = Новый Соответствие;
	Заменяемые.Вставить(ОбъектБД, ОбъектБДЗаменяющий);
	
	ТСсылкиСписок = ТСсылкиПодготовитьТаблицуНайденныеСсылки(ТСсылкиСписок);
	
	Если ((ТСсылкиСписок <> Неопределено) И (ТСсылкиСписок.Количество() > 0)) Тогда
		ТСсылкиПроизвестиЗаменуСсылокНаСервереВыполнение(Заменяемые, ТСсылкиСписок, ВыполнятьВТранзакции);
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". 1С:ИТС. ВыпольнитьЗамену.
//
Функция ТСсылкиПроизвестиЗаменуСсылокНаСервереВыполнение(Заменяемые, ТаблицаСсылок, ВыполнятьВТранзакции)
	// 1С:ИТС.
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	ПараметрыЗамены = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		ПараметрыЗамены.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		ПараметрыЗамены.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);
	КонецЦикла;
	
	ПараметрыЗамены.Вставить("Объект", Неопределено);
	
    ЗначениеИндикатора = 0;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаСсылок Цикл
		Если НЕ СтрокаТаблицы.Включено Тогда
			Продолжить;
		КонецЕсли;
		ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ссылка];
		
		ЗначениеИндикатора = ЗначениеИндикатора + 1;
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и ПараметрыЗамены.Объект <> Неопределено Тогда
				
				Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ПараметрыЗамены.Объект) Тогда
					ПараметрыЗамены.Объект.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
				КонецЕсли;
				
				Попытка
					ПараметрыЗамены.Объект.Записать();
				Исключение
					СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Перейти ~ОТКАТ;
					КонецЕсли;
				КонецПопытки;
				ПараметрыЗамены.Объект = Неопределено;
				
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыЗамены.Объект = Неопределено Тогда
				ПараметрыЗамены.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит ИЗ СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыЗамены.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыЗамены.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии И ПараметрыЗамены[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = ПараметрыЗамены.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Если ТаблицаНабора.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				масИменКолонок = Новый Массив;
				
				// Получим имена измерений, которые могут содержать ссылку
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						
						Если ЭтоДвижениеРегистраБухгалтерии Тогда
							
							Если Измерение.ПризнакУчета <> Неопределено Тогда
								
								масИменКолонок.Добавить(Измерение.Имя + "Дт");
								масИменКолонок.Добавить(Измерение.Имя + "Кт");
								
							Иначе
								масИменКолонок.Добавить(Измерение.Имя);
							КонецЕсли;
							
						Иначе
							масИменКолонок.Добавить(Измерение.Имя);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
						
				// Получим имена ресурсов, которые могут содержать ссылку
				Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							масИменКолонок.Добавить(Ресурс.Имя);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
						
				// Получим имена ресурсов, которые могут содержать ссылку
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						масИменКолонок.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
				
				// Произведем замены в таблице
				Для Каждого ИмяКолонки ИЗ масИменКолонок Цикл
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти[ИмяКолонки] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
					КонецЦикла;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 ПО ПараметрыЗамены[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
						Для Каждого СтрокаТабЧасти ИЗ ТаблицаНабора Цикл
							Если ЕстьКорреспонденция Тогда
								Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
									СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
								Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
									СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							Иначе
								Если СтрокаТабЧасти.Счет = Ссылка Тогда
									СтрокаТабЧасти.Счет = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					КонецЦикла;
				КонецЕсли;
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					
					Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(НаборЗаписей) Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
					КонецЕсли;
					
					Попытка
						НаборЗаписей.Записать();
					Исключение
						СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Перейти ~ОТКАТ;
						КонецЕсли;
					КонецПопытки;
					
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						
						Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;
						
						Если НадоЗаписывать Тогда
							
							Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(НаборЗаписи) Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
							КонецЕсли;
							
							Попытка
								НаборЗаписи.Записать();
							Исключение
								СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
								БылиИсключения = Истина;
								Если ВыполнятьВТранзакции Тогда
									Перейти ~ОТКАТ;
								КонецЕсли;
							КонецПопытки;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыЗамены.Объект = Неопределено Тогда
				ПараметрыЗамены.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И ПараметрыЗамены.Объект.Владелец = Ссылка Тогда
				ПараметрыЗамены.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И ПараметрыЗамены.Объект.Родитель = Ссылка Тогда
				ПараметрыЗамены.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит ИЗ СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыЗамены.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыЗамены.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если ПараметрыЗамены.Объект = Неопределено Тогда
				ПараметрыЗамены.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит ИЗ СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И ПараметрыЗамены.Объект[Реквизит.Имя] = Ссылка Тогда
					ПараметрыЗамены.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = ПараметрыЗамены.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(НаборЗаписей) Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
			КонецЕсли;
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли;
				
			Исключение
				
				СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Перейти ~ОТКАТ;
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Сообщить("МО: " + "Ссылки типа """ + СтрокаТаблицы.Метаданные + """ не заменяются.");
		КонецЕсли;
		//ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Если ПараметрыЗамены.Объект <> Неопределено Тогда
		
		Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ПараметрыЗамены.Объект) Тогда
			ПараметрыЗамены.Объект.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
		КонецЕсли;
		
		Попытка
			ПараметрыЗамены.Объект.Записать();
		Исключение
			СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке());
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Перейти ~ОТКАТ;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
~ОТКАТ:
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			//ОтменитьТранзакцию();	// .- МА! Для Отладки.
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;

	Возврат НЕ БылиИсключения;
	
КонецФункции

// Вкладка "Ссылки на Объект". Подготовить Таблицу НайденныеСсылки для последующей обработки.
// - Удалить Колонку Метаданные с Типом "Строка".
// - Добавить Колонку Метаданные с Типом "Метаданные".
// Это необходимо для обработки в функции ВыполнитьЗаменуЭлементов(...).
// 
Функция ТСсылкиПодготовитьТаблицуНайденныеСсылки(ТСсылкиСписок)
	
	ТСсылкиСписок.Колонки.Удалить("Метаданные");
	ТСсылкиСписок.Колонки.Добавить("Метаданные");
	Для Каждого Стр ИЗ ТСсылкиСписок Цикл
		мдДанных = Метаданные.НайтиПоТипу(ТипЗнч(Стр.Данные));
		Если Метаданные.НайтиПоТипу(ТипЗнч(Стр.Данные)) <> Неопределено Тогда
			Стр.Метаданные = мдДанных;
		Иначе
			Сообщить("МО: " + "МетаДанные для """ + Стр.Данные + """ не найдены. Обработка прервана.", СтатусСообщения.Важное);
			ТСсылкиСписок = Новый ТаблицаЗначений;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТСсылкиСписок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО" - "СПРАВОЧНИК (ДОПОЛНИТЕЛЬНО)".
//

// Вкладка "Справочник (Дополнительно)". Выполнить ЦИКЛ УдалитьЛишнее/Наименование=Артикул+Наименование/НаименованиеПолное=Наименование.
//
Функция ТСправочникВыполнитьОбработкуСправочникаНаСервере(ТСправочникСписок, СправочникИзменяемыйРеквизит, СправочникНовоеЗначениеРеквизита, Действие) Экспорт
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
		
	Если Действие = "Наименования_ПоОКОПФ" Тогда
		ОКОПФ = ТСправочникСформироватьСписокОКОПФ();
	КонецЕсли;
	
	Отказ = Ложь;
	ЗначениеИндикатора = 0;
	КоличествоИзмененных = 0;
			
	Если Действие = "ИсключитьНеЧитаемыеСимволыИзСтроки" Тогда
		RegEXP_Инициализация();
	КонецЕсли;
	
	Для Каждого СтрокаСписка ИЗ ТСправочникСписок Цикл
			
		ЗначениеИндикатора = ЗначениеИндикатора + 1;
		
		Если НЕ СтрокаСписка.Включено Тогда
			Продолжить;
		КонецЕсли;
		
		Изменен = Ложь;
		ЗначениеРеквизита = ТСправочникВыполнитьОбработкуСправочникаНаСервереОднаСтрока(СтрокаСписка, СправочникИзменяемыйРеквизит, СправочникНовоеЗначениеРеквизита, Действие, Изменен, Отказ, ОКОПФ);
		
		Если Отказ Тогда
			Прервать;
		Иначе
			СтрокаСписка.Включено = Ложь;
			Если Изменен Тогда
				КоличествоИзмененных = КоличествоИзмененных + 1;
				СтрокаСписка.Изменен = Истина;
				СтрокаСписка.РеквизитНовоеЗначение = ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
	Если Действие = "ИсключитьНеЧитаемыеСимволыИзСтроки" Тогда
		RegExp = Неопределено;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если НЕ Отказ Тогда
			//ОтменитьТранзакцию();	// .- МА! Отладка.
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура;
	Если НЕ Отказ Тогда
		РезультатВыполнения.Вставить("Отказ", Ложь);
		РезультатВыполнения.Вставить("ЭлементОтказ", Неопределено);
	Иначе	
		РезультатВыполнения.Вставить("Отказ", Истина);
		РезультатВыполнения.Вставить("ЭлементОтказ", "№: " + ЗначениеИндикатора + ": " + СтрокаСписка.Элемент);
	КонецЕсли;
	
	РезультатВыполнения.Вставить("Изменено", КоличествоИзмененных);
	РезультатВыполнения.Вставить("Всего", ТСправочникСписок.Количество());
	РезультатВыполнения.Вставить("ТСправочникСписок", ТСправочникСписок);
		
	Возврат РезультатВыполнения;

КонецФункции

// Вкладка "Справочник (Дополнительно)". Выполнить СТРОКА ЦИКЛА УдалитьЛишнее/Наименование=Артикул+Наименование/НаименованиеПолное=Наименование.
//
Функция ТСправочникВыполнитьОбработкуСправочникаНаСервереОднаСтрока(СтрокаСписка, СправочникИзменяемыйРеквизит, СправочникНовоеЗначениеРеквизита, Действие, Изменен, Отказ, ОКОПФ)
	
	ОбъектИЗМ = ОбъектБДПолучитьОбъектИзСсылки(СтрокаСписка.Ссылка);
	Если ОбъектИЗМ = Неопределено Тогда
		Отказ = Истина;
		Изменен = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Действие = "ЧистыйСтроковыйРеквизит_БезЛишнихСимволов" Тогда
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		
		ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ТСправочникОчиститьОтЛишнегоОднаСтрока(ОбъектИЗМ[СправочникИзменяемыйРеквизит]);
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "УдалитьНедопустимыеСимволыXML" Тогда
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		
		ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗаменитьНедопустимыеСимволыXML(ОбъектИЗМ[СправочникИзменяемыйРеквизит]);
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "ИсключитьНеЧитаемыеСимволыИзСтроки" Тогда
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		
		Если RegExp = Неопределено Тогда
			Value = ИсключитьНеЧитаемыеСимволыИзСтроки(ОбъектИЗМ[СправочникИзменяемыйРеквизит]);			// Вариант "НЕТИПОВОЙ 1С".
		Иначе
			Value = ИсключитьНеЧитаемыеСимволыИзСтроки_REGEXP(ОбъектИЗМ[СправочникИзменяемыйРеквизит]);		// Вариант "НЕТИПОВОЙ RegExp".
		КонецЕсли;
		ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗаменитьНедопустимыеСимволыXML(Value);					// Вариант "ТИПОВОЙ 1С". КОНТРОЛЬНЫЙ ВЫСТРЕЛ.
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "Реквизит_Значение" Тогда
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		
		ОбъектИЗМ[СправочникИзменяемыйРеквизит] = СправочникНовоеЗначениеРеквизита;
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "НаименованиеПолное_НаименованиеИОписание" Тогда
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		
		ОбъектИЗМ[СправочникИзменяемыйРеквизит] = СокрЛП(ОбъектИЗМ.Наименование + " " + ОбъектИЗМ.Описание);
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "Наименование_АртикулВНаименование" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбъектИЗМ.Артикул) Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		СледующийСимвол = "";
		
		Если (Найти(ОбъектИЗМ.Наименование, СокрЛП(ОбъектИЗМ.Артикул)) <> 1 ) Тогда
			
			хНаименование = СтрЗаменить(ОбъектИЗМ.Наименование, СокрЛП(ОбъектИЗМ.Артикул), "");
			СледующийСимвол = Лев(хНаименование, 1);
			хНаименование = СокрЛП(хНаименование);
			
			Если СледующийСимвол = " " Тогда
				
				ОбъектИЗМ[СправочникИзменяемыйРеквизит] = СокрЛП(ОбъектИЗМ.Артикул) + " " + хНаименование;
				
			Иначе
				Если СледующийСимвол = "*" ИЛИ СледующийСимвол = "+" ИЛИ СледующийСимвол = "-" ИЛИ СледующийСимвол = "_" ИЛИ СледующийСимвол = "=" ИЛИ СледующийСимвол = "/" ИЛИ СледующийСимвол = "\" 
					ИЛИ СледующийСимвол = "@" ИЛИ СледующийСимвол = "№" ИЛИ СледующийСимвол = "$" ИЛИ СледующийСимвол = "%" ИЛИ СледующийСимвол = "&" ИЛИ СледующийСимвол = "(" ИЛИ СледующийСимвол = ")" 
					ИЛИ СледующийСимвол = "!" ИЛИ СледующийСимвол = ":" ИЛИ СледующийСимвол = ";" ИЛИ СледующийСимвол = "'" ИЛИ СледующийСимвол = "?" ИЛИ СледующийСимвол = "," ИЛИ СледующийСимвол = "." 
					ИЛИ СледующийСимвол = "<" ИЛИ СледующийСимвол = ">" ИЛИ СледующийСимвол = "|" Тогда
					
					ОбъектИЗМ[СправочникИзменяемыйРеквизит] = СокрЛП(ОбъектИЗМ.Артикул) + хНаименование;
					
				Иначе
					
					ОбъектИЗМ[СправочникИзменяемыйРеквизит] = СокрЛП(ОбъектИЗМ.Артикул) + " " + хНаименование;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "Наименование_НаименованиеБезАртикула" Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбъектИЗМ.Артикул) Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];
		
		Если (Найти(ОбъектИЗМ.Наименование, СокрЛП(ОбъектИЗМ.Артикул)) > 0 ) Тогда
			ОбъектИЗМ[СправочникИзменяемыйРеквизит] = СокрЛП(СтрЗаменить(ОбъектИЗМ.Наименование, СокрЛП(ОбъектИЗМ.Артикул), ""));
		КонецЕсли;
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие = "Наименования_ПоОКОПФ" Тогда	// Справочники "Контрагенты" и "Организации".
		
		ЗначениеДоИзменения = ОбъектИЗМ[СправочникИзменяемыйРеквизит];

		ОбъектИЗМ.Наименование = ТСправочникОчиститьОтЛишнегоОднаСтрока(ОбъектИЗМ.Наименование);

		хНаименование = СокрЛП(ОбъектИЗМ.Наименование);
		
		ПозПервыйПробел = Найти(хНаименование, " ");
		Слово1 = ВРег(СокрЛП(Лев(хНаименование, ПозПервыйПробел)));
		
		хНаименованиеБезСлово1 = СокрЛП((СтрЗаменить(хНаименование, Слово1, "")));
		Для Каждого Элемент ИЗ ОКОПФ Цикл
			
			Если Слово1 = Элемент.Ключ Тогда
				
				хНаименованиеБезСлово1 = СокрЛП(СтрЗаменить(хНаименованиеБезСлово1, " "+Элемент.Ключ+" ", " "));
				
				хНаименование = хНаименованиеБезСлово1 + " " + Элемент.Ключ;
				ОбъектИЗМ[СправочникИзменяемыйРеквизит] = хНаименование;
				
				Попытка
					ОбъектИЗМ.НаименованиеПолное = Элемент.Значение + " " + хНаименованиеБезСлово1;
				Исключение
				КонецПопытки;
				
				Попытка
					ОбъектИЗМ.НаименованиеСокращенное = Элемент.Ключ + " " + хНаименованиеБезСлово1;
				Исключение
				КонецПопытки;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбъектИЗМ[СправочникИзменяемыйРеквизит] = ЗначениеДоИзменения Тогда
			Изменен = Ложь;
			Возврат Неопределено;
		Иначе	
			Изменен = Истина;
		КонецЕсли;
		
		Попытка
			СтрокаСписка.НаименованиеПолное = ОбъектИЗМ.НаименованиеПолное;
		Исключение
		КонецПопытки;
		
		Попытка
			СтрокаСписка.НаименованиеСокращенное = ОбъектИЗМ.НаименованиеСокращенное;
		Исключение
		КонецПопытки;
		
	ИначеЕсли Действие = "НеиспользуемыеЭлементы_ПоискИУдаление" Тогда
			
		ОбъектИЗМ.УстановитьПометкуУдаления(Истина);
		Изменен = Истина;
		
	КонецЕсли;
		
	Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ОбъектИЗМ) Тогда
		ОбъектИЗМ.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
	КонецЕсли;
	
	Попытка
		
		ОбъектИЗМ.Записать();
		СтрокаСписка.Элемент = Строка(ОбъектИЗМ.Ссылка);
		СтрокаСписка.Ссылка = ОбъектИЗМ.Ссылка;
		
	Исключение
		
		Отказ = Истина;
		Изменен = Ложь;
		Сообщить("МО: " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		СтрокаСписка.НаименованиеПолное = Неопределено;
		СтрокаСписка.НаименованиеСокращенное = Неопределено;
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ОбъектИЗМ[СправочникИзменяемыйРеквизит];
	
КонецФункции

// Вкладка "Справочник (Дополнительно)". Очистка Наименования. Одна строка.
//
Функция ТСправочникОчиститьОтЛишнегоОднаСтрока(хРеквизит)
	
	Попытка
	
		хРеквизит = СтрЗаменить(хРеквизит,Символы.Таб," ");		// Табуляция.
		хРеквизит = СтрЗаменить(хРеквизит,Символы.ВК," ");		// Возврат Каретки.
		хРеквизит = СтрЗаменить(хРеквизит,Символы.ВТаб," ");		// Табуляция (вертикальной).
		хРеквизит = СтрЗаменить(хРеквизит,Символы.НПП," ");		// Неразрывный пробел.
		хРеквизит = СтрЗаменить(хРеквизит,Символы.ПС," ");		// Перевод Строки.
		хРеквизит = СтрЗаменить(хРеквизит,Символы.ПФ," ");		// Перевод Формы (страницы).
		хРеквизит = СтрЗаменить(хРеквизит,"      "," ");
		хРеквизит = СтрЗаменить(хРеквизит,"     "," ");
		хРеквизит = СтрЗаменить(хРеквизит,"    "," ");
		хРеквизит = СтрЗаменить(хРеквизит,"   "," ");
		хРеквизит = СтрЗаменить(хРеквизит,"  "," ");
		хРеквизит = СтрЗаменить(хРеквизит," х ","х");
		хРеквизит = СтрЗаменить(хРеквизит," x ","x");
		хРеквизит = СтрЗаменить(хРеквизит," * ","*");
		хРеквизит = СтрЗаменить(хРеквизит," = ","=");
		хРеквизит = СтрЗаменить(хРеквизит," - ","-");
		хРеквизит = СтрЗаменить(хРеквизит," ,",",");
		хРеквизит = СтрЗаменить(хРеквизит," .",".");
		хРеквизит = СтрЗаменить(хРеквизит,"( ","(");
		хРеквизит = СтрЗаменить(хРеквизит," )",")");
		//хРеквизит = СтрЗаменить(хРеквизит,"""","");
		
		хРеквизит = СокрЛП(хРеквизит);
		
	Исключение
	КонецПопытки;
	
	Возврат хРеквизит;
		
КонецФункции

// Функция (ТИПОВАЯ 1С), оставляющая в строке только допустимые для XML символы и цифры.
// 
// Возвращаемое значение:
//	Строка.
//
Функция ЗаменитьНедопустимыеСимволыXML(Знач Текст, СимволЗамены = " ")
	
	Позиция = НайтиНедопустимыеСимволыXML(Текст);
	Пока Позиция > 0 Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		Если КодСимвола(ТекущийСимвол) = 21 Тогда	// Параграф.
			Текст = СтрЗаменить(Текст, ТекущийСимвол, Символ(167));
			Позиция = НайтиНедопустимыеСимволыXML(Текст);
			Продолжить;
		КонецЕсли;
		Текст = СтрЗаменить(Текст, ТекущийСимвол, СимволЗамены);
		Позиция = НайтиНедопустимыеСимволыXML(Текст);
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Функция (НЕТИПОВАЯ 1С), оставляющая в строке только читаемые(допустимые) для XML символы и цифры.
// 
// Возвращаемое значение:
//	Строка.
//
Функция ИсключитьНеЧитаемыеСимволыИзСтроки(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ")

	// Читаемые символы.
	Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	Кирилица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Греческие = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω";
	Цифры = "0123456789";
	СпециальныеСимволы = "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» ";
	ДвойнаяКавычка = """";
	ОдинарнаяКавычка = "'";
	АпострофОбратный = "́";		// КодСимвола 769. Обратный для символа на букве "Ё".
	АвторскоеПраво = "©";		// КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право.
	Зарезервировано = "®"; 		// КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак.
	ТоварныйЗнак = "™";			// Верхний  индекс ТМ.
	ШирокоеТире = "—";			// КодСимвола 8212.
	ДенежныеСимволы = "¤¢€£¥";	// Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань.
	ДробныеСимволы = "½¼¾";		// Дроби: 1/2, 1/4, 3/4.
	СимволыСтепени = "¹²³";		// Степени: 1, 2, 3
	ПрочиеСимволы = "°±×÷Øƒµ"+Символ(167);	// Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф.
	
	ЧитаемыеСимволы = Латиница + Кирилица + Греческие + Цифры + СпециальныеСимволы + ШирокоеТире
	+ ДвойнаяКавычка + ОдинарнаяКавычка + АпострофОбратный + АвторскоеПраво + Зарезервировано + ТоварныйЗнак
	+ ДенежныеСимволы + ДробныеСимволы + СимволыСтепени + ПрочиеСимволы;
	
	// Формирование результирующей строки.
	ИтоговаяСтрока = "";
	Для НомерСимвола = 1 ПО СтрДлина(АнализируемыйТекст) Цикл
		ТекущийСимвол = Сред(АнализируемыйТекст, НомерСимвола, 1);
		// Заменяемые символы. Системный набор значений: "Символы":
		Если ТекущийСимвол = Символы.ВК ИЛИ ТекущийСимвол = Символы.ВТаб ИЛИ ТекущийСимвол = Символы.НПП 
			ИЛИ ТекущийСимвол = Символы.ПС ИЛИ ТекущийСимвол = Символы.ПФ ИЛИ ТекущийСимвол = Символы.Таб Тогда
			ТекущийСимвол = СимволЗамены;
		КонецЕсли;
		Если КодСимвола(ТекущийСимвол) = 21 Тогда	// Параграф.
			ТекущийСимвол = Символ(167);
		КонецЕсли;
		Если Найти(ЧитаемыеСимволы, ТекущийСимвол) > 0 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + ТекущийСимвол;
		Иначе
			Если ЗаменятьСимволы Тогда
				ИтоговаяСтрока = ИтоговаяСтрока + СимволЗамены;
			Иначе
				// Сокращение строки на символ.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

// Функция (НЕТИПОВАЯ REGEXP), инициализация.
// 
// Возвращаемое значение:
//	Строка.
//
Функция RegEXP_Инициализация()

	// Читаемые символы.
	Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	Кирилица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Греческие = "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω";
	Цифры = "0123456789";
	СпециальныеСимволы = "~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» ";
	ДвойнаяКавычка = "^""";
	ОдинарнаяКавычка = "^'";
	АпострофОбратный = "^" + Символ(769);	// КодСимвола 769. Обратный для символа на букве "Ё".
	АвторскоеПраво = "^©";					// КодСимвола 169. "Copyright" - латинская буква C в окружности - авторское право.
	Зарезервировано = "^®"; 				// КодСимвола 174. "Registered" - латинская буква R в окружности - товарный знак.
	ТоварныйЗнак = "^™";					// Верхний  индекс ТМ.
	ШирокоеТире = "^—";						// КодСимвола 8212.
	ДенежныеСимволы = "^¤^¢^€^£^¥";			// Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань.
	ДробныеСимволы = "^½^¼^¾";				// Дроби: 1/2, 1/4, 3/4.
	СимволыСтепени = "^¹^²^³";				// Степени: 1, 2, 3
	ПрочиеСимволы = "^°^±^×^÷^Ø^ƒ^µ^"+Символ(167);	// Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф.
	
	ЧитаемыеСимволы = "[";
	ЧитаемыеСимволы = ЧитаемыеСимволы + "^a-z^A-Z^а-я^А-Я^0-9^Ё^ё^Α-Ω^α-ω";	// Латиница + Кирилица + Цифры + Греческие.
	ЧитаемыеСимволы = ЧитаемыеСимволы + "^~^`^!^@^#^\$^%^\^^&^\*^\(^\)^\{^\}^\[^\]^_^\-^=^\+^\\^\|^/^\*^:^;^\.^<^>^\?^,^№^«^»^ ";	// СпециальныеСимволы.
	ЧитаемыеСимволы = ЧитаемыеСимволы + ДвойнаяКавычка + ОдинарнаяКавычка + АпострофОбратный + АвторскоеПраво + Зарезервировано + ТоварныйЗнак;
	ЧитаемыеСимволы = ЧитаемыеСимволы + ШирокоеТире + ДенежныеСимволы + ДробныеСимволы + СимволыСтепени + ПрочиеСимволы;
	ЧитаемыеСимволы = ЧитаемыеСимволы + "]";
	
	ПолучитьCOMОбъектREGEXP(ЧитаемыеСимволы, Ложь, Истина, Ложь);
	
КонецФункции

// Evg-Lylyk: http://infostart.ru/public/64222/
//
Процедура ПолучитьCOMОбъектREGEXP(Шаблон, ИскатьДоПервогоСовпадения = Истина, МногоСтрок = Истина, ИгнорироватьРегистр = Истина)

	Если RegExp = Неопределено Тогда //Нужна инициализация
		Попытка
	        RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
		Исключение
		    RegExp = Неопределено;
			Возврат;
		КонецПопытки;
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = НЕ ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)
	
КонецПроцедуры

// Функция (НЕТИПОВАЯ REGEXP), оставляющая в строке только читаемые(допустимые) для XML символы и цифры.
// 
// Возвращаемое значение:
//	Строка.
//
Функция ИсключитьНеЧитаемыеСимволыИзСтроки_REGEXP(Знач АнализируемыйТекст, ЗаменятьСимволы = Истина, СимволЗамены = " ")
	
	РезультатПроверки = Истина;
	Если НЕ RegExp.Test(АнализируемыйТекст) Тогда
		Возврат АнализируемыйТекст;
	КонецЕсли;
	
	// Формирование результирующей строки.
	ИтоговаяСтрока = АнализируемыйТекст;
	
	РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);
	
	Для Каждого Результат ИЗ РезультатАнализаСтроки Цикл
		ТекущийСимвол = Результат.Value;
		Если КодСимвола(ТекущийСимвол) = 21 Тогда	// Параграф.
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, ТекущийСимвол, Символ(167));
			Продолжить;
		КонецЕсли;
		Если ЗаменятьСимволы Тогда
			// Замена символа в строке.
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, ТекущийСимвол, СимволЗамены);
		Иначе
			// Сокращение строки на символ.
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, ТекущийСимвол, "");
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

// Вкладка "Справочник (Дополнительно)". Формирование структуры ОКОПФ.
//
Функция ТСправочникСформироватьСписокОКОПФ()
	
	ОКОПФ = Новый Структура;
	ОКОПФ.Вставить("АО",	"Акционерное Общество");
	ОКОПФ.Вставить("АУ",	"Автономное учреждение");
	ОКОПФ.Вставить("ГОУ",	"Государственное образовательное учреждение");
	ОКОПФ.Вставить("ГУ",	"Государственное учреждение");
	ОКОПФ.Вставить("ГУП",	"Государственное унитарное предприятие");
	ОКОПФ.Вставить("ЗАО",	"Закрытое акционерное общество");
	ОКОПФ.Вставить("ИП",	"Индивидуальный предприниматель");
	ОКОПФ.Вставить("ИЧП",	"Индивидуально-частный предприниматель");
	ОКОПФ.Вставить("МУП",	"Муниципальное унитарное предприятие");
	ОКОПФ.Вставить("НКО",	"Некоммерческая организация");
	ОКОПФ.Вставить("НОУ",	"Негосударственное образовательное учреждение");
	ОКОПФ.Вставить("ПБОЮЛ",	"Предприниматель без образования юридического лица");
	ОКОПФ.Вставить("ПИФ",	"Паевой инвестиционный фонд");
	ОКОПФ.Вставить("ОАО",	"Открытое акционерное общество");
	ОКОПФ.Вставить("ООО",	"Общество с ограниченной ответственностью");
	ОКОПФ.Вставить("ТОО",	"Полное товарищество");
	ОКОПФ.Вставить("ТСЖ",	"Товарищество собственников жилья");
	ОКОПФ.Вставить("ФГУ",	"Федеральное государственное учреждение");
	ОКОПФ.Вставить("ФГУП",	"Федеральное государственное унитарное предприятие");
	ОКОПФ.Вставить("ЧП",	"Частный предприниматель");
	
	Возврат ОКОПФ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО" - "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО)".
//

// Вкладка "Документ дополнительно". Поле ДадаНач.
//
Функция ТДокументДата_НАЧ_ПриИзмененииНаСервере(ОбъектБД, ДатаНач, ДатаКон) Экспорт
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	Если мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		
		ДатаКон = КонецГода(ДатаНач);
		
		Если ДатаНач <> НачалоГода(ДатаНач) Тогда
			Возврат "Выбрана начальная дата: " + ДатаНач + "
			|Это не соответствует начальной дате Периодичности документов: " + НачалоГода(ДатаНач) + "
			|
			|БУДЬТЕ ВНИМАТЕЛЬНЫ ПРИ НАЗНАЧЕНИИ НОВОГО ПРЕФИКСА И НАЧАЛЬНОГО НОМЕРА ДОКУМЕНТОВ.
			|
			|Рекомендуется Префикс, не используемый при штатной нумерации документов.";
		КонецЕсли;
		
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		
		ДатаКон = КонецКвартала(ДатаНач);
		
		Если ДатаНач <> НачалоКвартала(ДатаНач) Тогда
			Возврат "Выбрана начальная дата: " + ДатаНач + "
			|Это не соответствует начальной дате Периодичности документов: " + НачалоКвартала(ДатаНач) + "
			|
			|БУДЬТЕ ВНИМАТЕЛЬНЫ ПРИ НАЗНАЧЕНИИ НОВОГО ПРЕФИКСА И НАЧАЛЬНОГО НОМЕРА ДОКУМЕНТОВ.
			|
			|Рекомендуется Префикс, не используемый при штатной нумерации документов.";
		КонецЕсли;
		
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		
		ДатаКон = КонецМесяца(ДатаНач);
		
		Если ДатаНач <> НачалоМесяца(ДатаНач) Тогда
			Возврат "Выбрана начальная дата: " + ДатаНач + "
			|Это не соответствует начальной дате Периодичности документов: " + НачалоМесяца(ДатаНач) + "
			|
			|БУДЬТЕ ВНИМАТЕЛЬНЫ ПРИ НАЗНАЧЕНИИ НОВОГО ПРЕФИКСА И НАЧАЛЬНОГО НОМЕРА ДОКУМЕНТОВ.
			|
			|Рекомендуется Префикс, не используемый при штатной нумерации документов.";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вкладка "Документ дополнительно". Получить начальное значение Номера.
//
Функция ТДокументПрефиксНомерНовыйНаСервере(ОбъектБД, Знач ПрефиксНовый, Знач ДатаНач, Знач ДатаКон) Экспорт
	
	Номер = 0;
	ПрефиксНовыйДлина = СтрДлина(СокрЛП(ПрефиксНовый));
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	Если мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		ДатаНачЗапроса = НачалоГода(ДатаНач);
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		ДатаНачЗапроса = НачалоКвартала(ДатаНач);
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		ДатаНачЗапроса = НачалоМесяца(ДатаНач);
	КонецЕсли;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Номер КАК Номер,
		|	ПОДСТРОКА(Документ.Номер,1," + ПрефиксНовыйДлина + ") КАК ПРЕФИКСНОМЕРА
		|ИЗ
		|	Документ." + ОбъектБД.МетаДанные().Имя + " КАК Документ
		|ГДЕ
		|	Документ.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И Номер ПОДОБНО &ПрефиксНовый
		|УПОРЯДОЧИТЬ ПО
		|	Номер УБЫВ";

	Запрос.УстановитьПараметр("ДатаНач", ДатаНачЗапроса);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("ПрефиксНовый", ПрефиксНовый+"%");

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Найти(СокрЛП(ВРег(ВыборкаДетальныеЗаписи.Номер)), СокрЛП(ВРег(ПрефиксНовый))) > 0 Тогда
			Номер = Сред(СокрЛП(ВыборкаДетальныеЗаписи.Номер), ПрефиксНовыйДлина + 2);
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	Попытка
		Номер = Число(Номер);
	Исключение
		Номер = 0;
	КонецПопытки;

	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Если Номер < 0 Тогда
		Номер = 0
	КонецЕсли;
	
	Возврат Номер;
	
КонецФункции

// Вкладка "Документ дополнительно". Проверка существования документа с НомерНач.
//
Функция ТДокументПроверитьСуществованиеДокументаСНомеромНач(ОбъектБД, НомерНач, ПрефиксНовый, ДатаКон) Экспорт
	
	ДокументСНомеромНач = Неопределено;
	
	НомерСтрокой = СокрЛП(СтрЗаменить(Формат(НомерНач,"ЧЦ=10; ЧВН="), Символы.НПП, ""));
	НомерСтрокой = ""+ПрефиксНовый+Сред(НомерСтрокой,СтрДлина(ПрефиксНовый));
	
	ДокументСНомеромНач = Документы[ОбъектБД.МетаДанные().Имя].НайтиПоНомеру(НомерСтрокой, ДатаКон);
	
	Если НЕ ЗначениеЗаполнено(ДокументСНомеромНач) Тогда
		ДокументСНомеромНач = Неопределено;
	КонецЕсли;
	
	Возврат ДокументСНомеромНач;
	
КонецФункции

// Вкладка "Документ дополнительно". Найти Документы.
//
Функция ТДокументНайтиДокументыНаСервере(ОбъектБД, Знач ПрефиксОрганизация, Знач ПрефиксТекущий, Знач ПрефиксИсключение, Знач ДатаНач, Знач ДатаКон) Экспорт
	
	Если ДатаКон = Дата("00010101") Тогда
		ДатаКон = ТекущаяДата();
	КонецЕсли;
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОбъектБазы.Ссылка
		|ИЗ
		|Документ."+ОбъектБД.Метаданные().Имя+" КАК ОбъектБазы
		|ГДЕ
		|	ОбъектБазы.Дата МЕЖДУ &ДатаНач И &ДатаКон";

	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТДокументСписок.Очистить();
	
	мПрефиксыИсключения = Новый Массив;
	мПрефиксыИсключения = РазложитьСтрокуВМассивПодстрок(ПрефиксИсключение, ";");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если Найти(ВыборкаДетальныеЗаписи.Ссылка.Номер, ПрефиксТекущий) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ЗначениеЗаполнено(ПрефиксОрганизация) И НЕ ВыборкаДетальныеЗаписи.Ссылка.Организация  = ПрефиксОрганизация Тогда		// Префиксы документов используются (как правило) для организаций.
				Продолжить;
			КонецЕсли;
		Исключение
			// Нет реквизита "Организация".
			// Поэтому в качестве вспомогательного средства фильтрации необходимо использовать "ПрефиксИсключение".
			// см. Модуль Формы.
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ПрефиксИсключение) Тогда
			
			Найдено = Ложь;
			Для Каждого ЭлементМассива ИЗ мПрефиксыИсключения Цикл
				
				Если Найти(ВыборкаДетальныеЗаписи.Ссылка.Номер, ЭлементМассива) > 0 Тогда
					Найдено = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Найдено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТ = ТДокументСписок.Добавить();
		СтрокаТ.ДокументТек = ВыборкаДетальныеЗаписи.Ссылка;
		СтрокаТ.ПредставлениеТек = Строка(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Возврат ТДокументСписок;
	
КонецФункции

// Вкладка "Документ дополнительно". Перенумеровать документы.
//
Функция ТДокументПеренумероватьДокументыНаСервере(ОбъектБД, ДатаНач, ДатаКон, ПрефиксНовый, НомерНач) Экспорт
	
	мдОбъектаБД	= ОбъектБД.Метаданные();
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Отказ = Ложь;
	ИзменениеОбъектаБД = Ложь;

	ПрефиксНовый = СокрЛП(ПрефиксНовый);
	Номер = НомерНач;
	Если мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		ПериодНач = НачалоГода(ДатаНач);
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		ПериодНач = НачалоКвартала(ДатаНач);
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		ПериодНач = НачалоМесяца(ДатаНач);
	КонецЕсли;
	Для Каждого Стр ИЗ ТДокументСписок Цикл
		Если НЕ Стр.Включено Тогда
			Продолжить;
		КонецЕсли;
		
		Было = Строка(Стр.ДокументТек);
		Если Стр.ДокументТек = ОбъектБД Тогда
			ИзменениеОбъектаБД = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектБД.Номер) = Тип("Строка") Тогда
			Если мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
				Если ПериодНач <> НачалоГода(Стр.ДокументТек.Дата) Тогда
					ПериодНач = НачалоГода(Стр.ДокументТек.Дата);
					Номер = 1;
				КонецЕсли;
			ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
				ПериодНач = НачалоКвартала(Стр.ДокументТек.Дата);
				Если ПериодНач <> НачалоКвартала(Стр.ДокументТек.Дата) Тогда
					ПериодНач = НачалоКвартала(Стр.ДокументТек.Дата);
					Номер = 1;
				КонецЕсли;
			ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
				ПериодНач = НачалоМесяца(Стр.ДокументТек.Дата);
				Если ПериодНач <> НачалоМесяца(Стр.ДокументТек.Дата) Тогда
					ПериодНач = НачалоМесяца(Стр.ДокументТек.Дата);
					Номер = 1;
				КонецЕсли;
			КонецЕсли;
			НомерСтрокой = СокрЛП(СтрЗаменить(Формат(Номер,"ЧЦ=10; ЧВН="), Символы.НПП, ""));
			
			Док = Стр.ДокументТек.ПолучитьОбъект();
			Док.Номер = ""+ПрефиксНовый+Сред(НомерСтрокой,СтрДлина(ПрефиксНовый));
			
			Номер = Номер + 1;
		Иначе
			Сообщить("МО: " + "Для """ + Стр.ДокументТек + """ новый номер не установлен.", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(Док) Тогда
			Док.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
		КонецЕсли;
			
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Отказ = Истина;
			Сообщить("МО: " + ОписаниеОшибки()+"
			|- Возможно в Периоде Нумерации документа существует документ с формируемым № "+Док.Номер+".
			|1. Исправьте период;
			|2. Произведите поиск документов;
			|3. Попытайтесь вновь перенумеровать документы.
			|или используйте другой Префикс.
			|
			|- Возможно установлена дата запрета изменения данных.
			|1. Необходимо изменить дату запрета;
			|2. Произвести поиск документов;
			|3. Попытайтесь вновь перенумеровать документы.");
			Прервать;
		КонецПопытки;
		
		Стр.Включено = Ложь;
		Стр.ДокументБыло = Было;
		Стр.ДокументТек = Док.Ссылка;
		Стр.ПредставлениеТек = Строка(Док.Ссылка);
		
	КонецЦикла;
	
	Если ВыполнятьВТранзакции Тогда
		Если НЕ Отказ Тогда
			//ОтменитьТранзакцию();	// .- МА! Отладка.
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли
	КонецЕсли;
	
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Таблица", ТДокументСписок);
	стрВозврат.Вставить("ИзменениеОбъектаБД",ИзменениеОбъектаБД);
	
	Возврат стрВозврат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО) ПРОВЕДЕНИЕ".
//

// Вкладка "Документ дополнительно". Проведение документов. Заполнение списка видов документов.
//
Функция ТДокументПроведениеЗаполнитьСписокВидовДокументов(ДокументСписокВидов, Организация) Экспорт
	
	ДокументСписокВидов.Очистить();
	
	ФильтрПоОрганизации = НЕ Метаданные.Справочники.Найти("Организации") = Неопределено И ЗначениеЗаполнено(Организация);
	
	Для Каждого мдДокумента ИЗ Метаданные.Документы Цикл
		
		Если НЕ мдДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДокументСписокВидов.Добавить();
		
		НоваяСтрока.Пометка = Истина;
		Если ФильтрПоОрганизации И мдДокумента.Реквизиты.Найти("Организация") = Неопределено Тогда
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		Если мдДокумента.Реквизиты.Найти("Организация") = Неопределено Тогда
			НоваяСтрока.Комментарий = "Реквизит 'Организация' отсутствует";
		КонецЕсли;
		
		// Документы, у которых проведение разрешено или ЧекККМ.
		Если мдДокумента.Имя = "ЧекККМ" ИЛИ мдДокумента.Имя = "ЧекККМВозврат" Тогда	// Чеки ККМ не проводить! Нецелесобразно. ФИСКАЛЬНЫЙ РЕГИСТРАТОР.
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Значение = мдДокумента.Имя;
		НоваяСтрока.Представление = мдДокумента.Представление();
		
	КонецЦикла;
	ДокументСписокВидов.Сортировать("Представление");
	
	Возврат ДокументСписокВидов;
	
КонецФункции

// Вкладка "Документ дополнительно". Проведение документов. Формирование таблицы документов для проведения по выбранным видам документов.
//
Функция ТДокументПолучитьТаблицуДокументовДляПроведения(ДатаНачала, ДатаОкончания, Организация, ТДокументСписокВидов, Проводить)
	
	тзДокументов = Новый ТаблицаЗначений;
	
	ФильтрПоОрганизации = НЕ Метаданные.Справочники.Найти("Организации") = Неопределено И ЗначениеЗаполнено(Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	НПП = 0;
	Для Каждого ВидДокумента ИЗ ТДокументСписокВидов Цикл
		
		Если НЕ ВидДокумента.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФильтрПоОрганизации И Метаданные.Документы[ВидДокумента.Значение].Реквизиты.Найти("Организация") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НПП > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
		КонецЕсли;
		
		НПП = НПП + 1;
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	ДокументПроведенный.Ссылка КАК Ссылка,
		|	ДокументПроведенный.МоментВремени КАК МоментВремени
		|ИЗ
		|	Документ." + ВидДокумента.Значение + " КАК ДокументПроведенный
		|ГДЕ";
		
		Если Проводить = "Проведенные" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ДокументПроведенный.Проведен = ИСТИНА
			|	И ДокументПроведенный.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		ИначеЕсли  Проводить = "НеПроведенные" Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ДокументПроведенный.Проведен = ЛОЖЬ
			|	И ДокументПроведенный.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Иначе
			// ВСЕ.
			Запрос.Текст = Запрос.Текст + "
			|	ДокументПроведенный.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ ДокументПроведенный.ПометкаУдаления";
		
		Запрос.Текст = Запрос.Текст + "
		|&ФильтрПоОрганизации";
		
	КонецЦикла;
	
	Если Запрос.Текст = "" Тогда
		Возврат тзДокументов;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Если ФильтрПоОрганизации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоОрганизации", "	И ДокументПроведенный.Организация = &Организация
		|");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоОрганизации", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала"		, ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"	, ДатаОкончания);
	Запрос.УстановитьПараметр("Организация"		, Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	тзДокументов = РезультатЗапроса.Выгрузить();
	
	Возврат тзДокументов;
	
КонецФункции

// Вкладка "Документ дополнительно". Проведение документов. Проведение документов из имеющегося списка.
//
Процедура ТДокументПровестиДокументыИзСпискаВыбранныхВидов(ДатаНачала, ДатаОкончания, ДокументПроведениеОрганизация, ТДокументСписокВидов, Проводить, КоличествоПроведенных, ОжидатьСнятиеБлокировки, ВремяОжиданияСнятияБлокировки, ЕстьБлокированные) Экспорт
	
	тзДокументов = ТДокументПолучитьТаблицуДокументовДляПроведения(ДатаНачала, ДатаОкончания, ДокументПроведениеОрганизация, ТДокументСписокВидов, Проводить);
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Если тзДокументов.Количество() = 0 Тогда
		Сообщить("Документы за данный период не найдены.");
		Возврат;
	КонецЕсли;
	
	ТДокументСписокВидов.ЗаполнитьЗначения(0, "Проведено");
	
	Отказ = Ложь;
	НПП = 0;
	КоличествоПроведенных = 0;
	ЕстьБлокированные = Ложь;
	Для Каждого Документ ИЗ тзДокументов Цикл
		НПП = НПП + 1;
		ДокументЗаблокированДругимПользователем = Ложь;
		СообщениеОБлокировкеДругимПользователем = "";
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
		
		Сообщить(""+НПП+"."+Документ.Ссылка);
		
		Попытка
			ДокументЗаблокированДругимПользователем = Ложь;
    		ДокументОбъект.Заблокировать();
		Исключение
			ДокументЗаблокированДругимПользователем = Истина;
			СообщениеОБлокировкеДругимПользователем = ОписаниеОшибки();
		КонецПопытки;
		
		Если ДокументЗаблокированДругимПользователем И НЕ ОжидатьСнятиеБлокировки Тогда
    		Сообщить("" + НПП + ". Невозможно заблокировать и провести документ: " + Документ.Ссылка);
			Продолжить;
		ИначеЕсли ДокументЗаблокированДругимПользователем И ОжидатьСнятиеБлокировки Тогда
			ЗадержкаВВыполненииДействия(ВремяОжиданияСнятияБлокировки);
			Если ДокументОбъект.Заблокирован() Тогда
	    		Сообщить("" + НПП + ". Ожидание: " + ВремяОжиданияСнятияБлокировки + " минут.
				|Документ по-прежнему заблокирован другим пользователем: " + Документ.Ссылка);
				Продолжить;
			Иначе
				// Заблокирован().
				// Примечание:
				// Следует учитывать, что этот метод используется для проверки блокировки объекта базы данных конкретным объектом встроенного языка. 
				// Он не может быть использован, чтобы проверить, заблокирован ли вообще объект базы данных. 
				Попытка
					ДокументЗаблокированДругимПользователем = Ложь;
    				ДокументОбъект.Заблокировать();
				Исключение
					ДокументЗаблокированДругимПользователем = Истина;
					СообщениеОБлокировкеДругимПользователем = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
				
		Попытка
			Если (ДокументОбъект.Заблокирован() И НЕ ДокументЗаблокированДругимПользователем) Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументОбъект.Разблокировать();
				СтрокаСписка = ТДокументСписокВидов.Найти(Документ.Ссылка.Метаданные().Имя, "Значение");
				Если НЕ СтрокаСписка = Неопределено Тогда
					СтрокаСписка.Проведено = СтрокаСписка.Проведено + 1;
				КонецЕсли;
				КоличествоПроведенных = КоличествоПроведенных + 1;
				Если ПоказыватьСообщения Тогда
					Сообщить("" + НПП + ". Проведен: " + ДокументОбъект);
				КонецЕсли;
			Иначе
				ЕстьБлокированные = Истина;
				ПозицияХ = Найти(ВРег(СообщениеОБлокировкеДругимПользователем), "КОМПЬЮТЕР");
				Сообщить("" + НПП + ". Не проведен: " + ДокументОбъект + ", т.к. блокирован:
				|" + ?(ПозицияХ > 0, Сред(СообщениеОБлокировкеДругимПользователем, ПозицияХ), СообщениеОБлокировкеДругимПользователем));
			КонецЕсли;
		Исключение
			Отказ = Истина;
			Сообщить("" + НПП + ". " + ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ВыполнятьВТранзакции Тогда
		Если НЕ Отказ Тогда
			//ОтменитьТранзакцию();	// .- МА! Отладка.
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
			Сообщить("Транзакция отменена. Проведение документов не осуществлено.");
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадержкаВВыполненииДействия(Знач ВремяОжидания)
	
	Попытка
		Задержка = ВремяОжидания*60;
		СтрокаЗапроса = "ping -n 1 -w "+Формат(1000*Задержка, "ЧГ=0")+" 127.255.255.255";
		WshShell = Новый COMОбъект("WScript.Shell");
		WshShell.Run(СтрокаЗапроса, 0, -1);
	Исключение
	КонецПопытки;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("Время ожидания истеко. " + ВремяОжидания + " минут(а).")
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНФОРМАЦИЯ ПО ОБЪЕКТУ.
//

// Возвращает для Объекта БД Дата+Время по GUID.
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
Функция GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(Знач ОбъектИсследуемый, ЭтоПредопределенный = Неопределено) Экспорт
	
	Если ОбъектИсследуемый = Неопределено ИЛИ Строка(ОбъектИсследуемый) = "COMОбъект" Тогда
		Возврат Дата("00010101000000");
	КонецЕсли;
	
	Если НЕ ТипЗнч(ОбъектИсследуемый) = Тип("УникальныйИдентификатор") Тогда
		
		Если ЭтоПредопределенный = Неопределено Тогда
			ЭтоПредопределенный = Ложь;
			Попытка
				ЭтоПредопределенный = ОбъектИсследуемый.Предопределенный;	// Создан конфигуратором.
			Исключение
				ЭтоПредопределенный = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектИсследуемый) ИЛИ ЭтоПредопределенный ИЛИ ЭтоПланОбмена(ОбъектИсследуемый.МетаДанные()) Тогда
			Возврат Дата("00010101000000");
		КонецЕсли;
		
		GUID = ОбъектИсследуемый.УникальныйИдентификатор();
		
	Иначе
		
		Если (НЕ ЭтоПредопределенный = Неопределено И ТипЗнч(ЭтоПредопределенный) = Тип("Булево") И ЭтоПредопределенный) Тогда		// Импорт из 1С:Предприятие 8.Х. Передается GUID с дополнительными флажками.
			Возврат Дата("00010101000000");
		КонецЕсли;
		
		GUID = ОбъектИсследуемый;
		
	КонецЕсли;
	
	Если Строка(GUID) = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Дата("00010101000000");
	КонецЕсли;
	
	Строка16 = Сред(GUID, 16, 3) + Сред(GUID, 10, 4) + Сред(GUID, 1, 8);
	
	Разрядность = СтрДлина(Строка16);
	
	ЧислоСекунд = 0;
	Для Позиция = 1 ПО Разрядность Цикл
		ЧислоСекунд = ЧислоСекунд + Найти("123456789abcdef", Сред(Строка16,Позиция,1)) * Pow(16,Разрядность - Позиция);
	КонецЦикла;
	ЧислоСекунд = ЧислоСекунд / 10000000;
	
	ДатаИВремяСозданияОбъекта = Дата(1582, 10, 15, 04, 00, 00) + ЧислоСекунд;
	
	// Созданы в Конфигураторе, потом удалены из Конфигуратора - даты фантастические.
	// Проверяем на невозможные даты.
	Если ДатаИВремяСозданияОбъекта <= Дата("19800101000000") ИЛИ ДатаИВремяСозданияОбъекта >= КонецГода(ТекущаяДата()) Тогда	// <=1980 ИЛИ >=Конец текущего года.
		Возврат Дата("00010101000000");
	КонецЕсли;
	
	Возврат ДатаИВремяСозданияОбъекта;

КонецФункции

// Возвращает GUID для удаленного Объекта БД типа "05dbe824-a4c6-11dd-bf56-00145e3710ab" ИЗ "<Объект не найден> (84:bf5600145e3710ab11dda4c605dbe824)".
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
Функция GUIDБитогоОбъектаНаСервере(Знач БитыйGUID) Экспорт
	
	// БитыйGUID = <Объект не найден> (84:bf5600145e3710ab11dda4c605dbe824)
	
	БитыйGUID = СокрЛП(БитыйGUID);
	
	Если Найти(БитыйGUID, "<Объект не найден> (") = 0 ИЛИ Найти(БитыйGUID, "<Объект не найден> (") > 1 ИЛИ Найти(БитыйGUID, ")") = 0 Тогда
		Сообщить("Неверный формат ""Битой"" ссылки.
		|""Битая"" ссылка должна иметь вид: 
		|<Объект не найден> (84:bf5600145e3710ab11dda4c605dbe824)");
		Возврат Неопределено;
	КонецЕсли;
	
	GUIDБитогоОбъектаСтрокой = СтрЗаменить(БитыйGUID, "<Объект не найден> (", "");
	GUIDБитогоОбъектаСтрокой = СтрЗаменить(GUIDБитогоОбъектаСтрокой, ")", "");
	GUIDБитогоОбъектаСтрокой = СтрЗаменить(GUIDБитогоОбъектаСтрокой, "0x", "");
	GUIDБитогоОбъектаСтрокой = Сред(GUIDБитогоОбъектаСтрокой, Найти(GUIDБитогоОбъектаСтрокой, ":") + 1, СтрДлина(GUIDБитогоОбъектаСтрокой));
	
	// Преобразуем GUID
	GUID = Сред(GUIDБитогоОбъектаСтрокой, 25,  8) + 
	 "-" + Сред(GUIDБитогоОбъектаСтрокой, 21,  4) + 
	 "-" + Сред(GUIDБитогоОбъектаСтрокой, 17,  4) + 
	 "-" + Сред(GUIDБитогоОбъектаСтрокой,  1,  4) +
	 "-" + Сред(GUIDБитогоОбъектаСтрокой,  5, 12);
	 
	Попытка
		GUID = Новый УникальныйИдентификатор(GUID);
	Исключение
		GUID = Новый УникальныйИдентификатор;
	КонецПопытки;
	
	Возврат GUID;

КонецФункции

// Возвращает Ссылку на Объект.
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
// ОбъектМенеджеры:
//
// 1. Справочники.
// 2. Документы.
// 3. ПланыВидовХарактеристик.
// 4. ПланыОбмена.
// 5. БизнесПроцессы.
// 6. Задачи.
// 7. ПланыВидовРасчета.
// 8. ПланыСчетов.
//
Функция GUIDПолучитьСсылкуНаОбъектНаСервере(GUID) Экспорт
	
	GUIDСсылкаНаОбъект = Неопределено;
	
	МассивОбъектыМенеджер = Новый Массив;
	МассивОбъектыМенеджер.Добавить(Справочники);
	МассивОбъектыМенеджер.Добавить(Документы);
	МассивОбъектыМенеджер.Добавить(ПланыВидовХарактеристик);
	МассивОбъектыМенеджер.Добавить(ПланыОбмена);
	МассивОбъектыМенеджер.Добавить(БизнесПроцессы);
	МассивОбъектыМенеджер.Добавить(Задачи);
	МассивОбъектыМенеджер.Добавить(ПланыВидовРасчета);
	МассивОбъектыМенеджер.Добавить(ПланыСчетов);
	
	Для Каждого ОбъектыМенеджер ИЗ МассивОбъектыМенеджер Цикл
		GUIDСсылкаНаОбъект = GUIDПолучитьСсылкуНаОбъектПоМенеджеруОбъектаОдногоВИДАиУникальномуИдентификатору(ОбъектыМенеджер, GUID);
		Если НЕ GUIDСсылкаНаОбъект = Неопределено И НЕ GUIDСсылкаНаОбъект.Пустая() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат GUIDСсылкаНаОбъект;
	
КонецФункции

// Возвращает Ссылку на Объект.
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
// ОбъектМенеджеры:
//
// 1. Справочники.
// 2. Документы.
// 3. ПланыВидовХарактеристик.
// 4. ПланыОбмена.
// 5. БизнесПроцессы.
// 6. Задачи.
// 7. ПланыВидовРасчета.
// 8. ПланыСчетов.
//
Функция GUIDПолучитьСсылкуНаОбъектПоМенеджеруОбъектаОдногоВИДАиУникальномуИдентификатору(ОбъектыМенеджер, GUID) Экспорт
	
	GUIDСсылкаНаОбъект = Неопределено;
	
	Для Каждого МенеджерОбъекта Из ОбъектыМенеджер Цикл
		
		GUIDСсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(GUID);
		
		Если Найти(Строка(GUIDСсылкаНаОбъект), "<Объект не найден>" ) > 0 Тогда
			GUIDСсылкаНаОбъект = Неопределено;
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если GUIDСсылкаНаОбъект.ПолучитьОбъект() <> Неопределено Тогда	// Монопольный режим ?!
				Прервать;
			КонецЕсли;
		Исключение
			GUIDСсылкаНаОбъект = Неопределено;
		    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат GUIDСсылкаНаОбъект;
	
КонецФункции

// Возвращает Ссылку на Объект.
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
// ОбъектМенеджеры:
//
// 1. Справочники.
// 2. Документы.
// 3. ПланыВидовХарактеристик.
// 4. ПланыОбмена.
// 5. БизнесПроцессы.
// 6. Задачи.
// 7. ПланыВидовРасчета.
// 8. ПланыСчетов.
//
Функция GUIDПолучитьСсылкуНаОбъектПоМенеджеруОбъектаОдногоТИПАиУникальномуИдентификатору(МенеджерОбъекта, GUID) Экспорт
	
	GUIDСсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(GUID);
	
	Если Найти(Строка(GUIDСсылкаНаОбъект), "Объект не найден") > 0 Тогда
		GUIDСсылкаНаОбъект = Неопределено;
	КонецЕсли;
	
	Попытка
		ПроверкаGUIDСсылкИНаОбъект = GUIDСсылкаНаОбъект.ПолучитьОбъект() <> Неопределено;	// Монопольный режим ?!
		Возврат GUIDСсылкаНаОбъект;
	Исключение
		GUIDСсылкаНаОбъект = Неопределено;
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Возврат GUIDСсылкаНаОбъект;
	
КонецФункции

// Восстановление Объекта БД по ссылке типа "<Объект не найден> (84:bf5600145e3710ab11dda4c605dbe824)".
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
// ОбъектМенеджеры:
//
// 1. Справочники.
// 2. Документы.
// 3. ПланыВидовХарактеристик.
// 4. ПланыОбмена.
// 5. БизнесПроцессы.
// 6. Задачи.
// 7. ПланыВидовРасчета.
// 8. ПланыСчетов.
//
Функция GUIDВосстановитьОбъектПоТипуИГУИД(БитыйОбъектТип, БитыйОбъектGUID, БитыйОбъектДатаИВремя, БитыйОбъектТекст) Экспорт

	ВосстановленныйОбъектСссылка = Неопределено;
	
	// Проверим существует ли Объект.
	
	GUIDСсылкаНаОбъект = GUIDПолучитьСсылкуНаОбъектНаСервере(БитыйОбъектGUID);
	
	Если НЕ GUIDСсылкаНаОбъект = Неопределено Тогда
		Если Найти(Строка(GUIDСсылкаНаОбъект), "<Объект не найден>" ) > 0 Тогда
			Сообщить("Возвращенное значение не является Объектом БД:
			|" + GUIDСсылкаНаОбъект + "
			|
			|Проверьте:
			|1. Значение ""Битый"" Объект: (ТЕКСТ);
			|2. Выбранный тип Объекта.");
		Иначе
			Сообщить("Объект с Уникальным идентификатором: 
			|" + БитыйОбъектGUID + "
			|уже сущенствует:
			|" + GUIDСсылкаНаОбъект);
		КонецЕсли;
		Возврат GUIDСсылкаНаОбъект;
	КонецЕсли;
	
	ОбъектМД = МетаДанные.НайтиПоТипу(БитыйОбъектТип);
	
	ОбъектМенеджер = Неопределено;
	
	Если ЭтоСправочник(ОбъектМД) Тогда
		
		ОбъектМенеджер = Справочники[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьЭлемент();
		
		Попытка
			ОбъектВоссоздаваемый.Наименование = БитыйОбъектТекст;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	ИначеЕсли ЭтоДокумент(ОбъектМД) Тогда
		
		ОбъектМенеджер = Документы[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьДокумент();
		
		Попытка
			ОбъектВоссоздаваемый.Комментарий = БитыйОбъектТекст;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	ИначеЕсли ЭтоПланВидовХарактеристик(ОбъектМД) Тогда
		
		ОбъектМенеджер = ПланыВидовХарактеристик[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьЭлемент();
		
		Попытка
			ОбъектВоссоздаваемый.Наименование = БитыйОбъектТекст;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	ИначеЕсли ЭтоПланОбмена(ОбъектМД) Тогда
		
		ОбъектМенеджер = ПланыОбмена[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьУзел();
		
		Попытка
			ОбъектВоссоздаваемый.Наименование = БитыйОбъектТекст;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	ИначеЕсли ЭтоБизнесПроцесс(ОбъектМД) Тогда
		
		ОбъектМенеджер = БизнесПроцессы[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьБизнесПроцесс();
		
		Попытка
			ОбъектВоссоздаваемый.Наименование = БитыйОбъектТекст;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	ИначеЕсли ЭтоЗадача(ОбъектМД) Тогда
		
		ОбъектМенеджер = Задачи[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьЗадачу();
		
		Попытка
			ОбъектВоссоздаваемый.Наименование = БитыйОбъектТекст;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
	ИначеЕсли ЭтоПланВидовРасчета(ОбъектМД) Тогда
		
		ОбъектМенеджер = ПланыВидовРасчета[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьВидРасчета();
		
	ИначеЕсли ЭтоПланСчетов(ОбъектМД) Тогда
		
		ОбъектМенеджер = ПланыСчетов[ОбъектМД.Имя];
		
		ОбъектВоссоздаваемый = ОбъектМенеджер.СоздатьСчет();
		
	Иначе	
		
		Сообщить("Для: " + БитыйОбъектТип + " неопределен объект Метаданных.");
		
		Возврат GUIDСсылкаНаОбъект;
		
	КонецЕсли;
	
	Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ОбъектВоссоздаваемый) Тогда
		ОбъектВоссоздаваемый.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
	КонецЕсли;
	
	ОбъектВоссоздаваемый.УстановитьСсылкуНового(ОбъектМенеджер.ПолучитьСсылку(БитыйОбъектGUID));
	
	Если НЕ ОбъектМД = Неопределено И ОбъектБДЕстьРеквизит("Дата", ОбъектВоссоздаваемый) Тогда
		ОбъектВоссоздаваемый.Дата = БитыйОбъектДатаИВремя;
	КонецЕсли;
	
	Если НЕ ОбъектМД = Неопределено И ОбъектБДЕстьРеквизит("Организация", ОбъектВоссоздаваемый) Тогда
		Попытка
			ОбъектВоссоздаваемый.Организация = ЭтотОбъект.ОбъектБД.Организация;
		Исключение
		    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ОбъектВоссоздаваемый.Записать();
		ВосстановленныйОбъектСссылка = ОбъектВоссоздаваемый.Ссылка;
	Исключение
	    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Если НЕ ОбъектМД = Неопределено И ЭтоДокумент(ОбъектМД) И ЭтотОбъект.ТипОбъектаБД = ИмяТипаДокументы() И ОбъектМД.Имя = ЭтотОбъект.ИмяОбъектаБД Тогда
		// Документы.
		ЗаполнитьЗначенияСвойств(ОбъектВоссоздаваемый, ЭтотОбъект.ОбъектБД);
		ОбъектВоссоздаваемый.Дата = БитыйОбъектДатаИВремя;
		ОбъектВоссоздаваемый.УстановитьНовыйНомер();
		ОбъектВоссоздаваемый.Проведен = Ложь;
	ИначеЕсли НЕ ОбъектМД = Неопределено И ЭтоБизнесПроцесс(ОбъектМД) ИЛИ ЭтоЗадача(ОбъектМД) Тогда
		// БизнесПроцессы и Задачи.
		Если ОбъектБДЕстьРеквизит("Номер", ОбъектВоссоздаваемый) Тогда
			Попытка
				ОбъектВоссоздаваемый.УстановитьНовыйНомер();
			Исключение
				//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОбъектВоссоздаваемый.Записать();
		ВосстановленныйОбъектСссылка = ОбъектВоссоздаваемый.Ссылка;
	Исключение
	    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
		
	Возврат ВосстановленныйОбъектСссылка;

КонецФункции

// Поиск по ИБ значений типа "<Объект не найден> (84:bf5600145e3710ab11dda4c605dbe824)".
// GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
//
Функция GUIDНайтиБитыеОбъектыНаСервере() Экспорт
	
	ЭтотОбъект.БитыеСсылки.Очистить();
	
	КоллекцияОбъектовМДТипаСсылка = ПолучитьКоллекциюОбъектовМДТипаСсылка();
	ТаблицаБитыеСсылки = GUIDНайтиБитыеВОбъектахТипаСсылка(КоллекцияОбъектовМДТипаСсылка);
	
	КоллекцияОбъектовМДТипаРегистр = ПолучитьКоллекциюОбъектовМДТипаРегистр();
	ТаблицаБитыеСсылки = GUIDНайтиБитыеВОбъектахТипаРегистр(КоллекцияОбъектовМДТипаРегистр);
	
	Возврат ТаблицаБитыеСсылки;
	
КонецФункции

Функция GUIDНайтиБитыеВОбъектахТипаСсылка(КоллекцияОбъектовМДТипаСсылка)
	
	Для Каждого ЭлементСЗ ИЗ КоллекцияОбъектовМДТипаСсылка Цикл
		
		Если НЕ ЭтотОбъект.СписокОбъектовТипаСсылка.НайтиПоЗначению(ЭлементСЗ.Представление).Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМД = ЭлементСЗ.Значение;
		хТипОбъекта = ЭлементСЗ.Представление;
		хИсточник = хТипОбъекта+"."+ОбъектМД.Имя;
		
		// Стандартные реквизиты.
		GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Ссылка", хТипОбъекта, хИсточник, ОбъектМД, "СтандартныеРеквизиты");
		
		// Реквизиты.
		GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Ссылка", хТипОбъекта, хИсточник, ОбъектМД, "Реквизиты");
		
		// Табличные части.
		Для Каждого ТЧасть ИЗ ОбъектМД.ТабличныеЧасти Цикл
			GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Ссылка", хТипОбъекта, хИсточник+"."+ТЧасть.Имя, ОбъектМД.ТабличныеЧасти[ТЧасть.Имя], "Реквизиты", Истина);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЭтотОбъект.БитыеСсылки;
	
КонецФункции

Функция GUIDНайтиБитыеВОбъектахТипаРегистр(КоллекцияОбъектовМДТипаРегистр)
	
	Для Каждого ЭлементСЗ ИЗ КоллекцияОбъектовМДТипаРегистр Цикл
		Если НЕ ЭтотОбъект.СписокОбъектовТипаРегистр.НайтиПоЗначению(ЭлементСЗ.Представление).Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМД = ЭлементСЗ.Значение;
		хТипОбъекта = ЭлементСЗ.Представление;
		хИсточник = хТипОбъекта+"."+ОбъектМД.Имя;
		
		GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Регистр", хТипОбъекта, хИсточник, ОбъектМД, "СтандартныеРеквизиты");
		
		// Измерения.
		GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Регистр", хТипОбъекта, хИсточник, ОбъектМД, "Измерения");
		
		// Ресурсы.
		Если хТипОбъекта = "РегистрСведений" Тогда	// Ресурсы Регистров: Накопления, Бухгалтерии, Расчета - Число.
			GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Регистр", хТипОбъекта, хИсточник, ОбъектМД, "Ресурсы");
		КонецЕсли;
		
		// Реквизиты.
		GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам("Регистр", хТипОбъекта, хИсточник, ОбъектМД, "Реквизиты");
		
	КонецЦикла;
	
	Возврат ЭтотОбъект.БитыеСсылки;
	
КонецФункции

Процедура GUIDНайтиБитыеОбходПоИзмерениямРесурсамРеквизитам(хВидОбъекта, хТипОбъекта, хИсточник, ОбъектМД, ИРР, ЭтоТЧ=Ложь)
	
	Для Каждого хРеквизит ИЗ ОбъектМД[ИРР] Цикл
		Для Каждого хТип ИЗ хРеквизит.Тип.Типы() Цикл
			Если ЭтоПримитивныйТип(хТип) ИЛИ (ИРР = "СтандартныеРеквизиты" И хРеквизит.Имя = "Ссылка") Тогда
				Продолжить;
			КонецЕсли;
			хТипМетаданные = Метаданные.НайтиПоТипу(хТип);
			Если НЕ хТипМетаданные = Неопределено И НЕ Метаданные.Перечисления.Содержит(хТипМетаданные) Тогда
				СоставнойТипПрерватьЦикл = Ложь;
				Если хРеквизит.Тип.Типы().Количество() > 1 Тогда
					СоставнойТипПрерватьЦикл = Истина;
				КонецЕсли;
				ТекстЗапроса = "";
				Если хВидОбъекта = "Регистр" Тогда
					Если (хТипОбъекта = "РегистрСведений" И Найти(Строка(хТип), "(точка маршрута)") > 0) Тогда
						ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит.Имя, хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", ".Точки");
					ИначеЕсли хТипОбъекта = "РегистрБухгалтерии" Тогда
						GUIDНайтиБитыеРеквизитыРегистраБухгалтерия(хВидОбъекта, хТипОбъекта, хИсточник, ОбъектМД, ИРР, хРеквизит, хТипМетаданные);
						Если СоставнойТипПрерватьЦикл Тогда
							Прервать;
						КонецЕсли;
						Продолжить;
					Иначе
						ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит.Имя, хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
					КонецЕсли;
				Иначе
					Если (ИРР = "СтандартныеРеквизиты" И (хТипОбъекта = "Задача" И Найти(Строка(хТип), "(точка маршрута)") > 0))
						ИЛИ (ЭтоТЧ И ИРР = "Реквизиты" И (хТипОбъекта = "БизнесПроцесс" И Найти(Строка(хТип), "(точка маршрута)") > 0)) 
						ИЛИ (ЭтоТЧ И ИРР = "Реквизиты" И (хТипОбъекта = "Справочник" И Найти(Строка(хТип), "(точка маршрута)") > 0)) Тогда
						ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит.Имя, хТипМетаданные.ПолноеИмя(), "хОбъект.Ссылка", ".Точки");
					Иначе
						ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит.Имя, хТипМетаданные.ПолноеИмя(), "хОбъект.Ссылка", "");
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
					тзРезультатаЗапроса = GUIDНайтиБитыеВыполнитьЗапрос(ТекстЗапроса);
					Если НЕ тзРезультатаЗапроса = Неопределено Тогда
						Если СоставнойТипПрерватьЦикл Тогда
							// Изменить содержимое тзРезультатаЗапроса.
							ОбъектНеНайденОписаниеТипа = ПолучитьСтрокуИзМассиваПодстрок(хРеквизит.Тип.Типы(), ";");
							Для Каждого СтрокаБитыхСсылок ИЗ тзРезультатаЗапроса Цикл
								СтрокаБитыхСсылок.ОбъектНеНайденОписаниеТипа = ОбъектНеНайденОписаниеТипа;
							КонецЦикла;
						КонецЕсли;
						ЗаполнитьТаблицу(тзРезультатаЗапроса, ЭтотОбъект.БитыеСсылки);
					КонецЕсли;
				КонецЕсли;
				Если СоставнойТипПрерватьЦикл Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура GUIDНайтиБитыеРеквизитыРегистраБухгалтерия(хВидОбъекта, хТипОбъекта, хИсточник, ОбъектМД, ИРР, хРеквизит, хТипМетаданные)
	
	ТекстЗапроса = "";
	Если ИРР = "СтандартныеРеквизиты" ИЛИ ИРР = "Измерения" Тогда
		Если хРеквизит.Имя = "Счет" Тогда
			ТекстЗапроса_Дт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, "СчетДт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса_Кт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, "СчетКт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса = ТекстЗапроса_Дт + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстЗапроса_Кт;
		ИначеЕсли Найти(ВРег(хРеквизит.Имя), "СУБКОНТО") > 0 Тогда
			ЦифраСправа = Прав(хРеквизит.Имя,1);
			ИмяБезЦифры = СтрЗаменить(хРеквизит.Имя, ЦифраСправа,"");
			ТекстЗапроса_Дт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", ИмяБезЦифры+"Дт"+ЦифраСправа, хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса_Кт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", ИмяБезЦифры+"Кт"+ЦифраСправа, хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса = ТекстЗапроса_Дт + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстЗапроса_Кт;
		ИначеЕсли хРеквизит.Имя = "Регистратор" Тогда
			ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, "Регистратор", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
		ИначеЕсли хРеквизит.Имя = "Организация" Тогда
			ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, "Организация", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
		ИначеЕсли хРеквизит.Имя = "Валюта" Тогда
			ТекстЗапроса_Дт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", "ВалютаДт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса_Кт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", "ВалютаКт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса = ТекстЗапроса_Дт + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстЗапроса_Кт;
		ИначеЕсли хРеквизит.Имя = "Подразделение" Тогда
			ТекстЗапроса_Дт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", "ПодразделениеДт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса_Кт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", "ПодразделениеКт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса = ТекстЗапроса_Дт + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстЗапроса_Кт;
		ИначеЕсли хРеквизит.Имя = "ПодразделениеОрганизации" Тогда
			ТекстЗапроса_Дт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", "ПодразделениеОрганизацииДт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса_Кт = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник+".ДвиженияССубконто", "ПодразделениеОрганизацииКт", хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
			ТекстЗапроса = ТекстЗапроса_Дт + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстЗапроса_Кт;
		Иначе
			ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит.Имя, хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
		КонецЕсли;
	Иначе	
		ТекстЗапроса = GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит.Имя, хТипМетаданные.ПолноеИмя(), """" + хИсточник + """", "");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		тзРезультатаЗапроса = GUIDНайтиБитыеВыполнитьЗапрос(ТекстЗапроса);
		Если НЕ тзРезультатаЗапроса = Неопределено Тогда
			ЗаполнитьТаблицу(тзРезультатаЗапроса, ЭтотОбъект.БитыеСсылки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция GUIDНайтиБитыеТекстЗапросаПоОбъектуМД(хИсточник, хРеквизит, ОбъектНеНайденОписаниеТипа, ИсточникОбъект = "хОбъект.Ссылка", Точки = "")
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	хОбъект." + хРеквизит + " КАК ОбъектНеНайденСсылка,
	|	""" + ОбъектНеНайденОписаниеТипа + """ КАК ОбъектНеНайденОписаниеТипа,
	|	""" + хИсточник + "." + хРеквизит + """ КАК ИсточникРеквизит,
	|	" + ИсточникОбъект + " КАК ИсточникОбъект
	|ИЗ
	|	" + хИсточник + " КАК хОбъект
	|ГДЕ
	|	((хОбъект." + хРеквизит + " ССЫЛКА " + ОбъектНеНайденОписаниеТипа + Точки + ")
	|	И (НЕ хОбъект." + хРеквизит + " = Значение(" + ОбъектНеНайденОписаниеТипа + ".ПустаяСсылка))
	|	И (хОбъект." + хРеквизит + ".Ссылка ЕСТЬ NULL))";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция GUIDНайтиБитыеВыполнитьЗапрос(ТекстЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка 
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			тзРезультатаЗапроса = ЭтотОбъект.БитыеСсылки.ВыгрузитьКолонки();
			ЗаполнитьТаблицу(РезультатЗапроса.Выгрузить(), тзРезультатаЗапроса);
			Возврат тзРезультатаЗапроса;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
	    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСписокОбъектовТипаСсылка() Экспорт
	
	// Значение ВАЖНО!
	СписокОбъектовТипаСсылка = Новый СписокЗначений;
	СписокОбъектовТипаСсылка.Добавить("Справочник"				, "Справочники ("+Метаданные.Справочники.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("Документ"				, "Документы ("+Метаданные.Документы.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("ПланСчетов"				, "Планы счетов ("+Метаданные.ПланыСчетов.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("ПланВидовРасчета"		, "Планы видов расчета ("+Метаданные.ПланыВидовРасчета.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("ПланВидовХарактеристик"	, "Планы видов характеристик ("+Метаданные.ПланыВидовХарактеристик.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("ПланОбмена"				, "Планы обмена ("+Метаданные.ПланыОбмена.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("БизнесПроцесс"			, "Бизнес-Процессы ("+Метаданные.БизнесПроцессы.Количество()+")");
	СписокОбъектовТипаСсылка.Добавить("Задача"					, "Задачи ("+Метаданные.Задачи.Количество()+")");
	
	Возврат СписокОбъектовТипаСсылка;
	
КонецФункции

Функция ПолучитьКоллекциюОбъектовМДТипаСсылка()
	
	КоллекцияОбъектовМДТипаСсылка = Новый СписокЗначений;
	
	// Представление ВАЖНО! СЛИТНО!
	СписокОбъектовМДТипаСсылка = Новый СписокЗначений;
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.Справочники				, "Справочник");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.Документы				, "Документ");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.ПланыСчетов				, "ПланСчетов");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.ПланыВидовРасчета		, "ПланВидовРасчета");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.ПланыВидовХарактеристик	, "ПланВидовХарактеристик");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.ПланыОбмена				, "ПланОбмена");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.БизнесПроцессы			, "БизнесПроцесс");
	СписокОбъектовМДТипаСсылка.Добавить(Метаданные.Задачи					, "Задача");
	
	// Считываются ВСЕ.
	Для Каждого ЭлементСписка ИЗ СписокОбъектовМДТипаСсылка Цикл
		КоллекцияОбъектовМД = ЭлементСписка.Значение;
		Для Каждого ОбъектМД ИЗ КоллекцияОбъектовМД Цикл
			КоллекцияОбъектовМДТипаСсылка.Добавить(ОбъектМД, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КоллекцияОбъектовМДТипаСсылка;
	
КонецФункции

Функция ПолучитьСписокОбъектовТипаРегистр() Экспорт
	
	// Значение ВАЖНО!
	СписокОбъектовТипаРегистр = Новый СписокЗначений;
	СписокОбъектовТипаРегистр.Добавить("РегистрСведений"	, "Регистры сведений ("+Метаданные.РегистрыСведений.Количество()+")");
	СписокОбъектовТипаРегистр.Добавить("РегистрНакопления"	, "Регистры накопления ("+Метаданные.РегистрыНакопления.Количество()+")");
	СписокОбъектовТипаРегистр.Добавить("РегистрБухгалтерии"	, "Регистры бухгалтерии ("+Метаданные.РегистрыБухгалтерии.Количество()+")");
	СписокОбъектовТипаРегистр.Добавить("РегистрРасчета"		, "Регистры расчета ("+Метаданные.РегистрыРасчета.Количество()+")");
	
	Возврат СписокОбъектовТипаРегистр;
	
КонецФункции

Функция ПолучитьКоллекциюОбъектовМДТипаРегистр()
	
	КоллекцИЯОбъектовМДТипаРегистр = Новый СписокЗначений;
	
	// Представление ВАЖНО! СЛИТНО!
	СписокОбъектовМДТипаРегистр = Новый СписокЗначений;
	СписокОбъектовМДТипаРегистр.Добавить(Метаданные.РегистрыСведений	, "РегистрСведений");
	СписокОбъектовМДТипаРегистр.Добавить(Метаданные.РегистрыНакопления	, "РегистрНакопления");
	СписокОбъектовМДТипаРегистр.Добавить(Метаданные.РегистрыБухгалтерии	, "РегистрБухгалтерии");
	СписокОбъектовМДТипаРегистр.Добавить(Метаданные.РегистрыРасчета		, "РегистрРасчета");
	
	// Считываются ВСЕ.
	Для Каждого ЭлементСписка ИЗ СписокОбъектовМДТипаРегистр Цикл
		КоллекцияОбъектовМД = ЭлементСписка.Значение;
		Для Каждого ОбъектМД ИЗ КоллекцияОбъектовМД Цикл
			КоллекцИЯОбъектовМДТипаРегистр.Добавить(ОбъектМД, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КоллекцИЯОбъектовМДТипаРегистр;
	
КонецФункции

// Возвращает для Значение строку типа "Справочник.Номенклатура".
// Используется при формировании Таблицы Реквизитов.
//
Функция ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Значение) Экспорт
	
	ИмяТипа = "";
	
	мдЗначения = МетаДанные.НайтиПоТипу(ТипЗнч(Значение));
	Если НЕ мдЗначения = Неопределено Тогда
		Тип = ИмяБазовогоТипаПоОбъектуМетаданных(мдЗначения);
		ИмяТипа = "" + Тип + "." + мдЗначения.Имя;
	ИначеЕсли Строка(Значение) = "ХранилищеЗначения" Тогда
		ИмяТипа = "ХранилищеЗначения";
	ИначеЕсли Строка(ТипЗнч(Значение)) = "Уникальный идентификатор" Тогда
		ИмяТипа = "УникальныйИдентификатор";
	ИначеЕсли Строка(ТипЗнч(Значение)) = "ВидСчета" Тогда
		ИмяТипа = "ВидСчета";
	КонецЕсли;
	
	Возврат ИмяТипа;
	
КонецФункции

// Возвращает для Значение строку типа "Справочник".
//
Функция ОбъектБДПолучитьТипОбъекта(ОбъектБД) Экспорт
	
	Если ОбъектБД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	мдОбъектаБД		= ОбъектБД.Метаданные();
	ТипОбъектаБД	= ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);
	
	Возврат ТипОбъектаБД;
	
КонецФункции

// Возвращает для Значение строку типа "Номенклатура".
// Используется при формировании Таблицы Реквизитов.
//
Функция ОбъектБДПолучитьИмяОбъекта(Значение) Экспорт
	
	ИмяОбъекта = "";
	
	мдЗначения = МетаДанные.НайтиПоТипу(ТипЗнч(Значение));
	Если НЕ мдЗначения = Неопределено Тогда
		ИмяОбъекта = мдЗначения.Имя;
	ИначеЕсли Строка(Значение) = "ХранилищеЗначения" Тогда
		ИмяОбъекта = "ХранилищеЗначения";
	ИначеЕсли Строка(ТипЗнч(Значение)) = "Уникальный идентификатор" Тогда
		ИмяОбъекта = "УникальныйИдентификатор";
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

// Возвращает для Описание ОбъектаБД.
//
Функция ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД) Экспорт
	
	Если ОбъектБД = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	мдОбъектаБД		= ОбъектБД.Метаданные();
	ТипОбъектаБД	= ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);
	
	ОписаниеОбъектаБД	= "";
	Если ТипОбъектаБД = ИмяТипаСправочники() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + "," + ?(мдОбъектаБД.Автонумерация, "Автонумерация", "Без автонумерации") + ",Серии кодов: " + мдОбъектаБД.СерииКодов + "," + ?(мдОбъектаБД.Владельцы.Количество() > 0, "Подчиненный,", "") + ?(мдОбъектаБД.Иерархический, мдОбъектаБД.ВидИерархии, "Неиерархический");
	ИначеЕсли ТипОбъектаБД = ИмяТипаДокументы() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + "," + ?(мдОбъектаБД.Автонумерация, "Автонумерация", "Без автонумерации") + "," + ?(НЕ СокрЛП(мдОбъектаБД.Нумератор) = "", "Нумератор: " + мдОбъектаБД.Нумератор, "Без нумератора") + ",Период: " + СокрЛП(мдОбъектаБД.ПериодичностьНомера) + ",Проведение: " + ?(мдОбъектаБД.Проведение = МетаДанные.СвойстваОбъектов.Проведение.Разрешить, "Разрешено", "ЗАПРЕЩЕНО");
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыОбмена() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.РаспределеннаяИнформационнаяБаза, "Распределенная БД", "НЕРаспределенная БД") + "," + "Режим блокировки: " + мдОбъектаБД.РежимУправленияБлокировкойДанных;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + "," + ?(мдОбъектаБД.Автонумерация, "Автонумерация", "Без автонумерации") + ",Серии кодов: " + мдОбъектаБД.СерииКодов + "," + ?(мдОбъектаБД.Иерархический, "Иерархический", "Неиерархический");
	ИначеЕсли ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + "," + ?(мдОбъектаБД.Автонумерация, "Автонумерация", "Без автонумерации") + ",ПериодичностьНомера: " + мдОбъектаБД.ПериодичностьНомера;
	ИначеЕсли ТипОбъектаБД = ИмяТипаЗадачи() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + "," + ?(мдОбъектаБД.Автонумерация, "Автонумерация", "Без автонумерации") + ",Автопрефикс: " + мдОбъектаБД.АвтоПрефиксНомераЗадачи + ",Адресация: " + мдОбъектаБД.Адресация + ",Основной реквизит адресации: " + мдОбъектаБД.ОсновнойРеквизитАдресации + ",Текущий исполнитель: " + мдОбъектаБД.ТекущийИсполнитель;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + "," + "Серии кодов: " + мдОбъектаБД.СерииКодов + "," + ?(мдОбъектаБД.АвтопорядокПоКоду, "АвтопорядокПоКоду", "Без АвтопорядкаПоКоду") + "," + "МаскаКода: """ + мдОбъектаБД.МаскаКода + """(" + мдОбъектаБД.ДлинаПорядка + "),MAX субконто: " + мдОбъектаБД.МаксКоличествоСубконто + ",ВидыСубконто: " + мдОбъектаБД.ВидыСубконто;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		ОписаниеОбъектаБД = ""+?(мдОбъектаБД.ИспользованиеПериодаДействия, "Использует Период Действия", "Ни использует Период Действия") + "," + "Зависимость от базы: " + мдОбъектаБД.ЗависимостьОтВидовРасчета + ",Базовые виды расчета:,";
		Для Каждого БазовыйВидРасчета ИЗ мдОбъектаБД.БазовыеВидыРасчета Цикл
			ОписаниеОбъектаБД = ОписаниеОбъектаБД + БазовыйВидРасчета.Синоним + ",";
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеОбъектаБД;
	
КонецФункции

// Возвращает для Выбранного ОбъектаБД значение Свойства Предопределенный, Удаленный, Проведенный.
//
Функция ОбъектБДПолучитьСостояниеОбъекта(ОбъектБД) Экспорт
	Перем ИмяПредопределенного;
	
	Если ОбъектБД = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	мдОбъектаБД  = ОбъектБД.МетаДанные();
	ТипОбъектаБД = ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);
	
	СостояниеОбъектаБД = "";
	Если ТипОбъектаБД = ИмяТипаСправочники() Тогда
		ИмяПредопределенного = ОбъектБДПолучитьИмяПредопределенного(ОбъектБД, ТипОбъектаБД, мдОбъектаБД.Имя);
		ИмяПредопределенного = ?(ИмяПредопределенного = "", "", "(Имя:" + ИмяПредопределенного + ")");
		СостояниеОбъектаБД = ?(ОбъектБД.Предопределенный, "(*) - Предопределенный " + ИмяПредопределенного , "Непредопределенный");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаДокументы() Тогда
		СостояниеОбъектаБД = ?(ОбъектБД.Проведен,"Проведен","Не проведен");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыОбмена() Тогда
		СостояниеОбъектаБД = ?(ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД), "(*) ~Предопределенный", "~Непредопределенный");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		ИмяПредопределенного = ОбъектБДПолучитьИмяПредопределенного(ОбъектБД, ТипОбъектаБД, мдОбъектаБД.Имя);
		ИмяПредопределенного = ?(ИмяПредопределенного = "", "", "(Имя:" + ИмяПредопределенного + ")");
		СостояниеОбъектаБД = ?(ОбъектБД.Предопределенный, "(*) - Предопределенный " + ИмяПредопределенного, "Непредопределенный");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
		СостояниеОбъектаБД = ?(ОбъектБД.Завершен, "Завершен", ?(ОбъектБД.Стартован, "Стартован", "Не стартован"));
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаЗадачи() Тогда
		СостояниеОбъектаБД = ?(ОбъектБД.Выполнена, "Выполнена", "Не выполнена");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
		ИмяПредопределенного = ОбъектБДПолучитьИмяПредопределенного(ОбъектБД, ТипОбъектаБД, мдОбъектаБД.Имя);
		ИмяПредопределенного = ?(ИмяПредопределенного = "", "", "(Имя:" + ИмяПредопределенного + ")");
		СостояниеОбъектаБД = ?(ОбъектБД.Предопределенный, "(*) - Предопределенный " + ИмяПредопределенного, "Непредопределенный");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		ИмяПредопределенного = ОбъектБДПолучитьИмяПредопределенного(ОбъектБД, ТипОбъектаБД, мдОбъектаБД.Имя);
		ИмяПредопределенного = ?(ИмяПредопределенного = "", "", "(Имя:" + ИмяПредопределенного + ")");
		СостояниеОбъектаБД = ?(ОбъектБД.Предопределенный, "(*) - Предопределенный " + ИмяПредопределенного, "Непредопределенный");
		СостояниеОбъектаБД = СостояниеОбъектаБД + ?(ОбъектБД.ПометкаУдаления, ", ~Удаленный", "");
	КонецЕсли;
	
	Возврат СостояниеОбъектаБД;
	
КонецФункции

// Возвращает для Выбранного ОбъектаБД значение Свойства Предопределенный, Удаленный, Проведенный.
//
Функция ОбъектБДПолучитьИмяПредопределенного(ОбъектБД, ТипОбъектаБД, мдИмяОбъекта) Экспорт
	
	Если ТипОбъектаБД = ИмяТипаСправочники() Тогда
		Возврат Справочники[мдИмяОбъекта].ПолучитьИмяПредопределенного(ОбъектБД);
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		Возврат ПланыВидовХарактеристик[мдИмяОбъекта].ПолучитьИмяПредопределенного(ОбъектБД);
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыСчетов() Тогда
		Возврат ПланыСчетов[мдИмяОбъекта].ПолучитьИмяПредопределенного(ОбъектБД);
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		Возврат ПланыВидовРасчета[мдИмяОбъекта].ПолучитьИмяПредопределенного(ОбъектБД);
	Иначе
		ВызватьИсключение НСтр("ru='Недопустимый тип объекта: %'" + ТипОбъектаБД);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПЛАНЫ ОБМЕНА.
//

Функция ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД) Экспорт
	Перем мдПланыОбмена, мдПланаОбмена, СоставПланаОбмена, ЭлементСостава, мдОбъектаБД;
	Перем ВыборкаУзлаОбмена, УзелОбмена, СписокУзловОбмена;
	Перем ГлавныйУзел;
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();	// Если Неопределено - то это ГлавныйУзел.
	
	мдПланыОбмена = Метаданные.ПланыОбмена;
	мдОбъектаБД = ОбъектБД.Метаданные();
	СписокУзловОбмена = Новый СписокЗначений;
	
	Для Каждого мдПланаОбмена ИЗ мдПланыОбмена Цикл
		
		СоставПланаОбмена = мдПланаОбмена.Состав;
		
		Для Каждого ЭлементСостава ИЗ СоставПланаОбмена Цикл
			
			Если НЕ ЭлементСостава.Метаданные = мдОбъектаБД Тогда
				Продолжить;
			КонецЕсли;

			ВыборкаУзлаОбмена = ПланыОбмена[мдПланаОбмена.Имя].Выбрать();
			Пока ВыборкаУзлаОбмена.Следующий() Цикл
				
				УзелОбмена = ВыборкаУзлаОбмена.Ссылка;
				
				Если мдПланаОбмена.РаспределеннаяИнформационнаяБаза Тогда
					Если ГлавныйУзел = Неопределено И ПланыОбмена[мдПланаОбмена.Имя].ЭтотУзел() = УзелОбмена Тогда	// Исключена возможность регистрации в ЦБ для ГлавногоУзла.
						Если ЭтотОбъект.ПоказыватьСообщения Тогда
							Сообщить("Центральная БД: План обмена """ + мдПланаОбмена.Имя + """
							|Исключен ГлавныйУзел: """ + УзелОбмена + """.");
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					Если НЕ ГлавныйУзел = Неопределено И ПланыОбмена[мдПланаОбмена.Имя].ЭтотУзел() = УзелОбмена Тогда	// Исключена возможность регистрации в ПБ для самой себя.
						Если ЭтотОбъект.ПоказыватьСообщения Тогда
							Сообщить("Периферийная БД: План обмена """ + мдПланаОбмена.Имя + """
							|Исключен ЭтотУзел: """ + УзелОбмена + """.");
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				Иначе	
					Если ПланыОбмена[мдПланаОбмена.Имя].ЭтотУзел() = УзелОбмена Тогда	// Исключена возможность регистрации в ПБ для самой себя.
						Если ЭтотОбъект.ПоказыватьСообщения Тогда
							Сообщить("План обмена """ + мдПланаОбмена.Имя + """
							|Исключен ЭтотУзел: """ + УзелОбмена + """.");
						КонецЕсли;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СписокУзловОбмена.Добавить(УзелОбмена, "План обмена: [" + мдПланаОбмена.Имя + "]  Узел: [" + УзелОбмена + "]");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокУзловОбмена;
		
КонецФункции

Функция ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, Действие = "ЗарегистрироватьИзменения") Экспорт
	Перем мдПланаОбмена, мдОбъектаБД, ЭтоДокумент;
	Перем ЭлементУзелОбмена, УзелОбмена;
	Перем ИзменениеЗарегистрировано;
	Перем ДействиеПроизведено, Отказ;
	
	УстановитьПривилегированныйРежим(Истина);
	
	мдОбъектаБД = ОбъектБД.МетаДанные();
	ЭтоДокумент = ЭтоДокумент(мдОбъектаБД);
	
	Если ЭтоПланОбмена(мдОбъектаБД) Тогда
		Сообщить("План обмена - нерегистрируемый объект.");
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	НачатьТранзакцию();
	
	ДействиеПроизведено = Истина;
	Для Каждого ЭлементУзелОбмена ИЗ СписокУзловОбмена Цикл
		
		Если НЕ ЭлементУзелОбмена.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		УзелОбмена = ЭлементУзелОбмена.Значение;
		мдПланаОбмена = УзелОбмена.МетаДанные();
		
		ИзменениеЗарегистрировано = Ложь;
		
		Попытка
			Если Действие = "ЗарегистрироватьИзменения" Тогда
				
				Если НЕ ПолучитьРазрешениеНаВыполнениеДействияДляОбъектаВУзлеОбмена(мдПланаОбмена, УзелОбмена, ОбъектБД, "ЗарегистрироватьИзменения") Тогда
					Продолжить;
				КонецЕсли;
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ОбъектБД);
				ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ОбъектБД);
				Если НЕ ИзменениеЗарегистрировано Тогда
					Сообщить("Узел: """ + УзелОбмена + """
					|Объект: """ + ОбъектБД + """
					|Регистрация изменений не произведена.");
					Если ДействиеПроизведено Тогда
						ДействиеПроизведено = Ложь;
					КонецЕсли;
				Иначе
					ЗарегистрироватьИзмененияРеквизитовОбъектаВУзлахОбмена(ОбъектБД, УзелОбмена, Отказ);
					Если Отказ Тогда
						Сообщить("При регистрации подчиненных объектов основного объекта:
						|""" + ОбъектБД + """
						|на УзлеОбмена: """ + УзелОбмена + """
						|произошла ошибка.");
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Действие = "УдалитьРегистрациюИзменений" Тогда
				
				Если НЕ ПолучитьРазрешениеНаВыполнениеДействияДляОбъектаВУзлеОбмена(мдПланаОбмена, УзелОбмена, ОбъектБД, "УдалитьРегистрациюИзменений") Тогда
					Продолжить;
				КонецЕсли;
				
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ОбъектБД);
				ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ОбъектБД);
				Если ИзменениеЗарегистрировано Тогда
					Сообщить("Узел: """ + УзелОбмена + """
					|Объект: """ + ОбъектБД + """
					|Отмена регистрации изменений не произведена.");
					Если ДействиеПроизведено Тогда
						ДействиеПроизведено = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Иначе	// Проверка регистрациии изменений.
				
				Если НЕ ПолучитьРазрешениеНаВыполнениеДействияДляОбъектаВУзлеОбмена(мдПланаОбмена, УзелОбмена, ОбъектБД, "ИзменениеЗарегистрировано") Тогда
					Продолжить;
				КонецЕсли;
				
				ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ОбъектБД);
				Если ИзменениеЗарегистрировано Тогда
					Сообщить("Узел: """ + УзелОбмена + """
					|Объект: """ + ОбъектБД + """
					|Изменения объекта зарегистрированы.");
				Иначе
					Сообщить("Узел: """ + УзелОбмена + """
					|Объект: """ + ОбъектБД + """
					|Изменения объекта не зарегистрированы.");
				КонецЕсли;
			КонецЕсли;
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе	
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ДействиеПроизведено;
	
КонецФункции

Функция ЗарегистрироватьИзмененияРеквизитовОбъектаВУзлахОбмена(ОбъектБД, УзелОбмена, Отказ)
	Перем мдОбъектаБД, мдПланаОбмена;
	Перем Реквизит, ТЧасть, ЗначениеРеквизита;
	
	мдПланаОбмена = УзелОбмена.МетаДанные();
	мдОбъектаБД = ОбъектБД.Метаданные();
	мдТЧасти = мдОбъектаБД.ТабличныеЧасти;
	
	Для Каждого Реквизит ИЗ мдОбъектаБД.Реквизиты Цикл
		
		ЗначениеРеквизита = ОбъектБД[Реквизит.Имя];
		Если НЕ ПолучитьРазрешениеНаВыполнениеДействияДляОбъектаВУзлеОбмена(мдПланаОбмена, УзелОбмена, ЗначениеРеквизита, "ЗарегистрироватьИзменения") Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЗначениеРеквизита);
		ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ЗначениеРеквизита);
		Если НЕ ИзменениеЗарегистрировано Тогда
			Сообщить("Узел: """ + УзелОбмена + """
			|Объект: """ + ЗначениеРеквизита + """
			|Регистрация изменений не произведена.");
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТЧасть ИЗ мдТЧасти Цикл
		
		Для Каждого СтрокаТЧ ИЗ ОбъектБД[ТЧасть.Имя] Цикл
			
			Для Каждого Реквизит ИЗ ТЧасть.Реквизиты Цикл
				
				ЗначениеРеквизита = СтрокаТЧ[Реквизит.Имя];
				Если НЕ ПолучитьРазрешениеНаВыполнениеДействияДляОбъектаВУзлеОбмена(мдПланаОбмена, УзелОбмена, ЗначениеРеквизита, "ЗарегистрироватьИзменения") Тогда
					Продолжить;
				КонецЕсли;
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЗначениеРеквизита);
				ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбмена, ЗначениеРеквизита);
				Если НЕ ИзменениеЗарегистрировано Тогда
					Сообщить("Узел: """ + УзелОбмена + """
					|Объект: """ + ЗначениеРеквизита + """
					|Регистрация изменений не произведена.");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

Функция СоставПланаОбменаСодержитТип(ИмяПланаОбмена, Тип)
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Содержит(Метаданные.НайтиПоТипу(Тип));
	
КонецФункции

Функция ПолучитьРазрешениеНаВыполнениеДействияДляОбъектаВУзлеОбмена(мдПланаОбмена, УзелОбмена, Значение, Действие = "ЗарегистрироватьИзменения")
	
	Если НЕ ЗначениеЗаполнено(Значение) ИЛИ НЕ ЗначениеСсылочногоТипа(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СоставПланаОбменаСодержитТип(мдПланаОбмена.Имя, ТипЗнч(Значение)) Тогда
		Если ЭтотОбъект.ПоказыватьСообщения ИЛИ Действие = "ИзменениеЗарегистрировано" Тогда
			Сообщить("В состав Плана обмена """ + мдПланаОбмена.Имя + """
			|не входит объект: """ + ИмяБазовогоТипаПоОбъектуМетаданных(Значение.Метаданные()) + "." + ТипЗнч(Значение) + """.");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если мдПланаОбмена.РаспределеннаяИнформационнаяБаза Тогда
		Если ЭтоПеречисление(Значение.Метаданные()) Тогда
			Если ЭтотОбъект.ПоказыватьСообщения ИЛИ Действие = "ИзменениеЗарегистрировано" Тогда
				Если Действие = "ЗарегистрироватьИзменения" Тогда
					Сообщить("Узел РИБ: """ + УзелОбмена + """
					|Для перечисления [тип """ + ТипЗнч(Значение) + """] = """ + Значение + """
					|в РИБ регистрация изменений в планах обмена не требуется.");
				ИначеЕсли Действие = "УдалитьРегистрациюИзменений" Тогда
					Сообщить("Узел РИБ: """ + УзелОбмена + """
					|Для перечисления [тип """ + ТипЗнч(Значение) + """] = """ + Значение + """
					|в РИБ удаление регистрациии изменений в планах обмена невозможно.");
				Иначе
					Сообщить("Узел РИБ: """ + УзелОбмена + """
					|Для перечисления [тип """ + ТипЗнч(Значение) + """] = """ + Значение + """
					|в РИБ Регистрациия/Удаление регистрации изменений в планах обмена не требуется.");
				КонецЕсли;
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		// Обмен между различными ИБ.
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает для ПланаОбмена Состав.
//
Функция ОбъектБДПолучитьСоставПланаОбмена(ОбъектБД) Экспорт
	
	Если ОбъектБД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мдОбъектаБД	 = ОбъектБД.МетаДанные();
	
	Список = Новый СписокЗначений;
	
	Для Каждого Элемент ИЗ мдОбъектаБД.Состав Цикл
		Список.Добавить(""+ИмяБазовогоТипаПоОбъектуМетаданных(Элемент.Метаданные)+"."+Элемент.Метаданные.Имя);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат Список;
	
КонецФункции

// Возвращает для БД: "Центральная БД"/"Периферийная БД" .
//
Функция ОбъектБДПолучитьПоложениеБДвРИБ(ОбъектБД) Экспорт
	
	мдОбъектаБД	 = ОбъектБД.МетаДанные();
	
	Если НЕ мдОбъектаБД.РаспределеннаяИнформационнаяБаза Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БДвРИБ = ?(ПланыОбмена.ГлавныйУзел() = Неопределено И НЕ ЗначениеЗаполнено(ГлавныйУзелПредыдущий), "Центральная БД", "Периферийная БД");
	
	Возврат БДвРИБ;
	
КонецФункции

// Возвращает для ПланаОбмена Главный Узел.
//
Функция ОбъектБДПолучитьГлавныйУзелВРИБ() Экспорт
	
	Если ЗначениеЗаполнено(ГлавныйУзелПредыдущий) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	мдОбъектаБД	 = ОбъектБД.МетаДанные();
	
	Если НЕ мдОбъектаБД.РаспределеннаяИнформационнаяБаза Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = ПланыОбмена[мдОбъектаБД.Имя].Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если ОбъектБДПроверитьЭтоГлавныйУзелПланаОбмена(Выборка.Ссылка) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает для ПланаОбмена Признак ГлавныйУзел().
//
Функция ОбъектБДПроверитьЭтоГлавныйУзелПланаОбмена(ОбъектБД) Экспорт
	
	Если ОбъектБД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГлавныйУзелПредыдущий) Тогда		// В Периферийной БД ОТКЛЮЧЕН ГлавнйУзел.
		Если ОбъектБД = ГлавныйУзелПредыдущий Тогда			// ГлавныйУзелПредыдущий - Сохраненное значение отключенного ГлавногоУзла.
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Если Значение ГлавныйУзелПредыдущий НЕ заполнено, то - СТАНДАРТНАЯ ПРОВЕРКА.
	
	мдОбъектаБД	 = ОбъектБД.МетаДанные();
	
	Если НЕ мдОбъектаБД.РаспределеннаяИнформационнаяБаза Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипОбъектаБД = ИмяБазовогоТипаПоОбъектуМетаданных(мдОбъектаБД);
	
	ЭтотУзелПланаОбмена = ПланыОбмена[мдОбъектаБД.Имя].ЭтотУзел();
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда		// ГлавныйУзел Распределеной БД. Для ГлавногоУзла на ГлавномУзле: ПланыОбмена.ГлавныйУзел() = Неопределено.
		Если ЭтотУзелПланаОбмена = ОбъектБД Тогда			// Для ПланаОбмена такой Объект считается ПРЕДОПРЕДЕЛЕННЫМ.
			Возврат Истина;									// ГлавныйУзел.
		КонецЕсли;
	Иначе													// ПодчиненныйУзел Распределеной БД.
		Возврат ПланыОбмена.ГлавныйУзел() = ОбъектБД;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает для Справочника/ПВХ/ПланаОбмена значение Свойства Предопределенный.
//
Функция ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Экспорт
	
	Если ОбъектБД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипОбъектаБД = ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектБД.МетаДанные());
	
	Предопределенный = Ложь;
	
	Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() ИЛИ ТипОбъектаБД = ИмяТипаПланыСчетов() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
		Предопределенный = ОбъектБД.Предопределенный;
	ИначеЕсли ТипОбъектаБД = ИмяТипаПланыОбмена() Тогда
		ТипИзменяемогоЗначения			= ТипЗнч(ОбъектБД);
		ИмяРеквизитаИзменяемогоЗначения = "ОбъектБД";
		ИмяТаблицы						= ":)";
		РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ОбъектБД, Истина);
		Предопределенный = РезультатПроверки.Отказ;
	КонецЕсли;
	
	Возврат Предопределенный;
	
КонецФункции

// Возвращает для Документа Свойство Проведение = Разрешено/Неразрешено.
//
Функция ОбъектБДПолучитьПризнакПроведениеРазрешено(ОбъектБД) Экспорт
	
	Возврат ОбъектБД.Метаданные().Проведение;
	
КонецФункции

// Возвращает для Документа Список Документов, для которых является Основанием.
//
Функция ОбъектБДПолучитьСписокДокументовДляКоторыхОбъектЯвляетсяОснованием(Знач мдДокумента)
	Перем мдДок;
	Перем СписокДокументов;
	
	Если НЕ ТипЗнч(мдДокумента) = Тип("ОбъектМетаданных") Тогда
		мдДокумента = мдДокумента.Метаданные();
	КонецЕсли;
	
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого мдДок ИЗ Метаданные.Документы Цикл
		
		Если мдДок.ВводитсяНаОсновании.Содержит(мдДокумента) Тогда
			СписокДокументов.Добавить(мдДок.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ОбъектБДПолучитьСписокДокументовПоКритериюОтбора(ЗначениеКритерияОтбора, ВозвращаемаяКоллекция = "Таблица", ИсключитьПомеченныеНаУдаление = Ложь)
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеДокументы.Ссылка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
		
		Если ИсключитьПомеченныеНаУдаление Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|ГДЕ
			|	НЕ СвязанныеДокументы.Ссылка.ПометкаУдаления";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора",ЗначениеКритерияОтбора);
		Если ВозвращаемаяКоллекция = "Таблица" Тогда
			Возврат Запрос.Выполнить().Выгрузить();
		Иначе
			Возврат Запрос.Выполнить().Выбрать();
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск подчиненных документов текущего документа.
//
Функция ОбъектБДПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора.СтруктураПодчиненности.Состав Цикл
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = РазобратьПутьКОбъектуМетаданных(ПутьКДанным);
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + СтруктураПутьКДанным.ВидОбъекта + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, Найти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ОБЪЕДИНИТЬ
		|ВЫБРАТЬ") + "
		|" + СтруктураПутьКДанным.ВидОбъекта +".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + СтруктураПутьКДанным.ВидОбъекта + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|";
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументОснование);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает путь к объекту метаданных
// ТипОбъектаМетаданных.ИмяДокумента.ТабличнаяЧасть.ИмяТабличнойЧасти.Реквизит.ИмяРеквизита.
// ТипОбъектаМетаданных должен быть Справочник или Документ.
//
// Параметры:
//  ПутьКДанным - строка.
//
// Возвращаемое значение:
//  Структура - путь к объекту метаданных
//
Функция РазобратьПутьКОбъектуМетаданных(ПутьКДанным) Экспорт
	
	Структура = Новый Структура;
	
	СоответствиеИмен = Новый Массив();
	СоответствиеИмен.Добавить("ТипОбъекта");
	СоответствиеИмен.Добавить("ВидОбъекта");
	СоответствиеИмен.Добавить("ПутьКДанным");
	СоответствиеИмен.Добавить("ИмяТаблЧасти");
	СоответствиеИмен.Добавить("ИмяРеквизита");
	
	Для индекс = 1 по 3 Цикл
		
		Точка = Найти(ПутьКДанным, ".");
		ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
		Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
		ПутьКДанным = Сред(ПутьКДанным, Точка+1);
		
	КонецЦикла;
	
	ПутьКДанным = СтрЗаменить(ПутьКДанным, "Реквизит.", "");
	
	Если Структура.ПутьКДанным = "ТабличнаяЧасть" Тогда
		
		Для индекс = 4 по 5  Цикл 
			
			Точка = Найти(ПутьКДанным, ".");
			Если Точка = 0 Тогда
				ТекущееЗначение = ПутьКДанным;
			Иначе
				ТекущееЗначение = Лев(ПутьКДанным, Точка-1);
			КонецЕсли;
			
			Структура.Вставить(СоответствиеИмен[индекс-1], ТекущееЗначение);
			ПутьКДанным = Сред(ПутьКДанным,  Точка+1);
			
		КонецЦикла;
		
	Иначе
		
		Структура.Вставить(СоответствиеИмен[3], "");
		Структура.Вставить(СоответствиеИмен[4], ПутьКДанным);
		
	КонецЕсли;
	
	Если Структура.ТипОбъекта = "Документ" Тогда
		Структура.Вставить("Метаданные", Метаданные.Документы[Структура.ВидОбъекта]);
	Иначе
		Структура.Вставить("Метаданные", Метаданные.Справочники[Структура.ВидОбъекта]);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // РазобратьПутьКОбъектуМетаданных()

// Возвращает для Документа Список Последовательностей, в которые он входит.
//
Функция ОбъектБДПолучитьПоследовательностиДокумента(ОбъектБД)
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	Список = Новый СписокЗначений;
	
	Для Каждого Последовательность ИЗ МетаДанные.Последовательности Цикл
		Если Последовательность.Документы.Содержит(мдОбъектаБД) Тогда
			Список.Добавить(Последовательность.Имя);
		КонецЕсли;
	КонецЦикла;
		
	Возврат Список;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ИЗМЕНЕНИЙ В ПЛАНАХ ОБМЕНА. ПРОГРАММНЫЙ ИНТЕРФЕЙС
//

// Возвращает дерево значений, заполненное данными для выбора узла обмена. В дереве 2 уровня: 
// план обмена->узлы обмена. Служебные узлы выброшены. 
//
// Параметры:
//    ОбъектДанных - Ссылка или структура со значениями измерений набор записей. Для этих данных 
//                   которых  анализируются узлы обмена. Если не указано, то для всех
//    ИмяТаблицы   - Если ОбъектДанных - структура, то имя таблицы для набора записей
//
// Колонки в результате:
//    - Наименование                  - Представление плана обмена или узла обмена
//    - ИндексКартинки                - 1=план обмена, 2=узел , 3=помеченный для удаления узел
//    - ИндексКартинкиАвторегистрация - Если не указан параметр ОбъектДанных, то Неопределено 
//                                      Иначе: 0=нет, 1=запрещена, 2=разрешена.
//                                      Неопределено для плана обмена
//    - ПланОбменаИмя                 - Имя плана обмена узла
//    - Ссылка                        - Ссылка узла, Неопределено для плана обмена
//    - Код                           - Код узла, Неопределено для плана обмена
//    - НомерОтправленного            - Данные узла
//    - НомерПринятого                - Данные узла
//    - НомерСообщения                - Если указан объект, то номер сообщения для него, иначе NULL
//    - НеВыгружалось                 - Если указан объект, то флаг выгрузки, иначе NULL
//    - Пометка                       - Если указан объект, то 0 = нет регистрации, 1 - есть, иначе всегда 0
//    - ИсходнаяПометка               - Копия "Пометка"
//    - ИдентификаторСтроки           - Индекс добавленной строки (обход дерева сверху вниз слева направо)
//
Функция СформироватьДеревоУзлов(ОбъектДанных=Неопределено, ИмяТаблицы=Неопределено) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Колонки = Дерево.Колонки;
	Строки  = Дерево.Строки;
	
	Колонки.Добавить("Наименование");
	Колонки.Добавить("ИндексКартинки");
	Колонки.Добавить("ИндексКартинкиАвторегистрация");
	Колонки.Добавить("ПланОбменаИмя");
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("НомерОтправленного");
	Колонки.Добавить("НомерПринятого");
	Колонки.Добавить("НомерСообщения");
	Колонки.Добавить("НеВыгружалось");
	Колонки.Добавить("Пометка");
	Колонки.Добавить("ИсходнаяПометка");
	Колонки.Добавить("ИдентификаторСтроки");
	
	Запрос = Новый Запрос;
	Если ОбъектДанных=Неопределено Тогда
		МетаОбъект = Неопределено;
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Ссылка) КАК Наименование,
			|	ВЫБОР 
			|		КОГДА ПометкаУдаления ТОГДА 2 ИНАЧЕ 1
			|	КОНЕЦ КАК ИндексКартинки,
			|
			|	""{0}""            КАК ПланОбменаИмя,
			|	Код                КАК Код,
			|	Ссылка             КАК Ссылка,
			|	НомерОтправленного КАК НомерОтправленного,
			|	НомерПринятого     КАК НомерПринятого,
			|	NULL               КАК НомерСообщения,
			|	NULL               КАК НеВыгружалось,
			|	0                  КАК Пометка,
			|	0                  КАК ИсходнаяПометка
			|ИЗ
			|	ПланОбмена.{0} КАК ПланОбмена
			|ГДЕ
			|	ПланОбмена.Ссылка<>&ФильтрУзлов
			|";
		
	Иначе
		Если ТипЗнч(ОбъектДанных)=Тип("Структура") Тогда
			ТекстЗапроса = "";
			Для Каждого КлючЗначение Из ОбъектДанных Цикл
				ТекИмя = КлючЗначение.Ключ;
				ТекстЗапроса = ТекстЗапроса + "
					|И ТаблицаИзменений." + ТекИмя + "=&" + ТекИмя;
				Запрос.УстановитьПараметр(ТекИмя, ОбъектДанных[ТекИмя]);
			КонецЦикла;
			ТекИмяТаблицы = ИмяТаблицы;
			МетаОбъект    = МетаданныеПоПолномуИмени(ИмяТаблицы);
			
		ИначеЕсли ТипЗнч(ОбъектДанных)=Тип("Строка") Тогда
			ТекстЗапроса  = "";
			ТекИмяТаблицы = ОбъектДанных;
			МетаОбъект    = МетаданныеПоПолномуИмени(ОбъектДанных);
			
		Иначе
			ТекстЗапроса = "
				|И ТаблицаИзменений.Ссылка=&ОбъектРегистрации";
			Запрос.УстановитьПараметр("ОбъектРегистрации", ОбъектДанных);
			
			МетаОбъект    = ОбъектДанных.Метаданные();
			ТекИмяТаблицы = МетаОбъект.ПолноеИмя();
		КонецЕсли;
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПланОбмена.Ссылка) КАК Наименование,
			|	ВЫБОР 
			|		КОГДА ПланОбмена.Ссылка.ПометкаУдаления ТОГДА 2 ИНАЧЕ 1
			|	КОНЕЦ КАК ИндексКартинки,
			|
			|	""{0}""                               КАК ПланОбменаИмя,
			|	ПланОбмена.Ссылка.Код                 КАК Код,
			|	ПланОбмена.Ссылка.Ссылка              КАК Ссылка,
			|	ПланОбмена.Ссылка.НомерОтправленного  КАК НомерОтправленного,
			|	ПланОбмена.Ссылка.НомерПринятого      КАК НомерПринятого,
			|	ТаблицаИзменений.НомерСообщения       КАК НомерСообщения,
			|	ВЫБОР 
			|		КОГДА ТаблицаИзменений.НомерСообщения ЕСТЬ NULL
			|		ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НеВыгружалось,
			|	ВЫБОР 
			|		КОГДА КОЛИЧЕСТВО(ТаблицаИзменений.Узел)>0 ТОГДА 1 
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Пометка,
			|	ВЫБОР 
			|		КОГДА КОЛИЧЕСТВО(ТаблицаИзменений.Узел)>0 ТОГДА 1 
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИсходнаяПометка
			|ИЗ
			|	ПланОбмена.{0} КАК ПланОбмена
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	" + ТекИмяТаблицы + ".Изменения КАК ТаблицаИзменений
			|ПО
			|	ТаблицаИзменений.Узел=ПланОбмена.Ссылка
			|	" + ТекстЗапроса + "
			|ГДЕ
			|	ПланОбмена.Ссылка<>&ФильтрУзлов
			|СГРУППИРОВАТЬ ПО 
			|	ПланОбмена.Ссылка, 
			|	ТаблицаИзменений.НомерСообщения
			|";
	КонецЕсли;
	
	ТекНомерСтроки = 0;
	Для Каждого Мета Из Метаданные.ПланыОбмена Цикл
		
		ИмяПлана = Мета.Имя;
		Попытка
			ЭтотУзелПланаОбмена = ПланыОбмена[ИмяПлана].ЭтотУзел();
		Исключение
			// Разделенный режим, пропускаем узел
			Продолжить;
		КонецПопытки;
		
		Авторегистрация = Неопределено;
		Если МетаОбъект<>Неопределено Тогда
			ЭлементСостава = Мета.Состав.Найти(МетаОбъект);
			Если ЭлементСостава=Неопределено Тогда
				// Не входит в текущий план обмена
				Продолжить;
			КонецЕсли;
			Авторегистрация = ?(ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Запретить, 1, 2);
		КонецЕсли;
		
		ИмяПлана = Мета.Имя;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "{0}", ИмяПлана);
		Запрос.УстановитьПараметр("ФильтрУзлов", ЭтотУзелПланаОбмена);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			СтрокаПлана = Строки.Добавить();
			СтрокаПлана.Наименование   = Мета.Представление();
			СтрокаПлана.ИндексКартинки = 0;
			СтрокаПлана.ПланОбменаИмя  = ИмяПлана;
			
			СтрокаПлана.ИдентификаторСтроки = ТекНомерСтроки;
			ТекНомерСтроки = ТекНомерСтроки + 1;
			
			// Сортировка по представлению, в запросе нельзя
			ВременнаяТаблица = Результат.Выгрузить();
			ВременнаяТаблица.Сортировать("Наименование");
			Для Каждого СтрокаУзла Из ВременнаяТаблица Цикл;
				НоваяСтрока = СтрокаПлана.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУзла);
				
				НоваяСтрока.ИндексКартинкиАвторегистрация = Авторегистрация;
				
				НоваяСтрока.ИдентификаторСтроки = ТекНомерСтроки;
				ТекНомерСтроки = ТекНомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Дерево;
КонецФункции

// Возвращает структуру, описывающую метаданные для плана обмена.
//
// Параметры:
//    ИмяПланаОбмена - Если передана строка, то она интерпретируется как имя метаданных 
//                     плана обмена, для которого строится дерево конфигурации.
//                   - Если передан узел обмена, то дерево конфигурации строится для его плана обмена.
//                   - Если параметр неопределен, то строится дерево всей конфигурации.
//
//    Возвращает структуру с полями "СтруктураИмен", "СтруктураПредставлений", "Дерево",
// описывающую метаданные. Объекты, не входящие в состав плана обмена, выбрасываются.  
//
//    "СтруктураИмен" - структура, где имя - группа метаданных (константы, справочники и т.п.),
// значение - массив полных имен.
//
//    "СтруктураПредставлений" - структура, где имя - группа метаданных (константы, справочники
// и т.п.), значение - массив представлений. Порядок представлений  в массиве совпадает с массивом 
// полных имен.
//
//    "СтруктураАвторегистрации" - структура, где имя - группа метаданных (константы, справочники
// и т.п.), значение - массив флагов авторегистрации на узле. Порядок данных в массиве совпадает 
// с массивом полных имен. Входят только те группы, которые не входят в дерево. 
//
//    "Дерево" - дерево значений, 3 уровня: конфигурация->вид объекта->объект. 
// Колонки дерева:
//    - Наименование        - Представление вида объекта метаданных
//    - МетаПолноеИмя       - Полное имя объекта метаданных
//    - ИндексКартинки      - Зависит от метаданных
//    - Пометка             - Неопределено
//    - ИдентификаторСтроки - Индекс добавленной строки (обход дерева сверху вниз слева направо)
//    - Авторегистрация     - Если указан ИмяПланаОбмена, то для листьев: 1-разрешена, 2-запрещена. Иначе Неопределено
//
//    - КоличествоИзменений        - Неопределено, нужно для дальнейшего расчета
//    - КоличествоВыгруженных      - Неопределено, нужно для дальнейшего расчета
//    - КоличествоНевыгруженных    - Неопределено, нужно для дальнейшего расчета
//    - КоличествоИзмененийСтрокой - Неопределено, нужно для дальнейшего расчета
//
Функция СформироватьСтруктуруМетаданных(ИмяПланаОбмена=Неопределено) Экспорт
	
	Дерево = Новый ДеревоЗначений;
	Колонки = Дерево.Колонки;
	Колонки.Добавить("Наименование");
	Колонки.Добавить("МетаПолноеИмя");
	Колонки.Добавить("ИндексКартинки");
	Колонки.Добавить("Пометка");
	Колонки.Добавить("ИдентификаторСтроки");
	
	Колонки.Добавить("Авторегистрация");
	Колонки.Добавить("КоличествоИзменений");
	Колонки.Добавить("КоличествоВыгруженных");
	Колонки.Добавить("КоличествоНевыгруженных");
	Колонки.Добавить("КоличествоИзмененийСтрокой");
	
	// Корень
	СтрокаКорень = Дерево.Строки.Добавить();
	СтрокаКорень.Наименование = Метаданные.Представление();
	СтрокаКорень.ИндексКартинки = 0;
	СтрокаКорень.ИдентификаторСтроки = 0;
	
	// Параметры
	ТекПараметры = Новый Структура("СтруктураИмен, СтруктураПредставлений, СтруктураАвторегистрации, Строки", 
		Новый Структура, Новый Структура, Новый Структура, СтрокаКорень.Строки);
	
	Если ИмяПланаОбмена=Неопределено Тогда
		ПланОбмена = Неопределено;
	ИначеЕсли ТипЗнч(ИмяПланаОбмена)=Тип("Строка") Тогда
		ПланОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена];
	Иначе
		ПланОбмена = ИмяПланаОбмена.Метаданные();
	КонецЕсли;
	ТекПараметры.Вставить("ПланОбмена", ПланОбмена);

	Результат = Новый Структура("Дерево, СтруктураИмен, СтруктураПредставлений, СтруктураАвторегистрации", 
		Дерево, ТекПараметры.СтруктураИмен, ТекПараметры.СтруктураПредставлений, ТекПараметры.СтруктураАвторегистрации);
	
	ТекНомерСтроки = 1;
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 1,  2,  Ложь,   "Константы",               НСтр("ru='Константы'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 3,  4,  Истина, "Справочники",             НСтр("ru='Справочники'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 5,  6,  Истина, "Последовательности",      НСтр("ru='Последовательности'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 7,  8,  Истина, "Документы",               НСтр("ru='Документы'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 9,  10, Истина, "ПланыВидовХарактеристик", НСтр("ru='Планы видов характеристик'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 11, 12, Истина, "ПланыСчетов",             НСтр("ru='Планы счетов'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 13, 14, Истина, "ПланыВидовРасчета",       НСтр("ru='Планы видов расчета'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 15, 16, Истина, "РегистрыСведений",        НСтр("ru='Регистры сведений'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 17, 18, Истина, "РегистрыНакопления",      НСтр("ru='Регистры накопления'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 19, 20, Истина, "РегистрыБухгалтерии",     НСтр("ru='Регистры бухгалтерии'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 21, 22, Истина, "РегистрыРасчета",         НСтр("ru='Регистры расчета'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 23, 24, Истина, "БизнесПроцессы",          НСтр("ru='Бизнес-процессы'"));
	СформироватьУровеньМетаданных(ТекНомерСтроки, ТекПараметры, 25, 26, Истина, "Задачи",                  НСтр("ru='Задачи'"));
	
	Возврат Результат;
КонецФункции

// Вычисляет количества изменений для объектов метаданных для узлов обмена.
//
// Параметры:
//    - СписокТаблиц - Или массив или коллекция "ключ/значение" где "значение" - массивы имен
//    - СписокУзлов  - Узел или массив списков узлов
//
// Возвращает таблицу значений. Колонки:
//    - МетаПолноеИмя           - Полное имя метаданных, для которых рассчитываем количество
//    - УзелОбмена              - Ссылка на узел обмена, для которого рассчитываем количество
//    - КоличествоИзменений     - Число
//    - КоличествоВыгруженных   - Число
//    - КоличествоНеВыгруженных - Число
//
Функция ПолучитьКоличествоИзменений(СписокТаблиц, СписокУзлов) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("МетаПолноеИмя");
	Колонки.Добавить("УзелОбмена");
	Колонки.Добавить("КоличествоИзменений");
	Колонки.Добавить("КоличествоВыгруженных");
	Колонки.Добавить("КоличествоНеВыгруженных");
	
	Результат.Индексы.Добавить("МетаПолноеИмя");
	Результат.Индексы.Добавить("УзелОбмена");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокУзлов", СписокУзлов);
	
	// На входе или массив или структура/соответствие со многими массивами
	Если СписокТаблиц=Неопределено Тогда
		Возврат Результат;
	ИначеЕсли ТипЗнч(СписокТаблиц)=Тип("Массив") Тогда
		Источник = Новый Структура("_", СписокТаблиц);
	Иначе
		Источник = СписокТаблиц;
	КонецЕсли;
	
	// Пачками по 200 таблиц в запросе
	Текст = "";
	Номер = 0;
	Для Каждого КлючЗначение Из Источник Цикл
		Если ТипЗнч(КлючЗначение.Значение)<>Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Элемент Из КлючЗначение.Значение Цикл
			Если ПустаяСтрока(Элемент) Тогда
				Продолжить;
			КонецЕсли;
			
			Текст = Текст + ?(Текст="", "", "ОБЪЕДИНИТЬ ВСЕ") + " 
				|ВЫБРАТЬ 
				|	""" + Элемент + """ КАК МетаПолноеИмя,
				|	Узел                КАК УзелОбмена,
				|	КОЛИЧЕСТВО(*)              КАК КоличествоИзменений,
				|	КОЛИЧЕСТВО(НомерСообщения) КАК КоличествоВыгруженных,
				|	КОЛИЧЕСТВО(*) - КОЛИЧЕСТВО(НомерСообщения) КАК КоличествоНеВыгруженных
				|ИЗ
				|	" + Элемент + ".Изменения
				|ГДЕ
				|	Узел В (&СписокУзлов)
				|СГРУППИРОВАТЬ ПО
				|	Узел
				|";
				
			Номер = Номер + 1;
			Если Номер=200	Тогда
				Запрос.Текст = Текст;
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
				КонецЦикла;
				Текст = "";
				Номер = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Дочитываем хвосты
	Если Текст<>"" Тогда
		Запрос.Текст = Текст;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции	

// Возвращает объект метаданных по его полному имени. Пустая строка обозначает конфигурацию.
//
// Параметры:
//    - ИмяМетаданных - Имя объекта метаданных, например "Справочник.Валюты" или "Константы"
//
Функция МетаданныеПоПолномуИмени(ИмяМетаданных) Экспорт
	
	Если ПустаяСтрока(ИмяМетаданных) Тогда
		// Вся конфигурация
		Возврат Метаданные;
	КонецЕсли;
		
	Значение = Метаданные.НайтиПоПолномуИмени(ИмяМетаданных);
	Если Значение=Неопределено Тогда
		Значение = Метаданные[ИмяМетаданных];
	КонецЕсли;
	
	Возврат Значение;
КонецФункции	

// Возвращает флаг регистрации объекта на узле
//
// Параметры:
//    - Узел              - Узел плана обмена для которого получаем информацию, 
//    - ОбъектРегистрации - Объект, для которого получаем информацию. Может быть строкой - 
//                          обрабатываем метаданные, ссылкой или структурой со значениями
//                          изменений набора записей
//    - ИмяТаблицы        - Если ОбъектРегистрации - структура, то содержит имя таблицы для набора измерений
//
Функция ОбъектЗарегистрированНаУзле(Узел, ОбъектРегистрации, ИмяТаблицы=Неопределено) Экспорт
	ТипПараметра = ТипЗнч(ОбъектРегистрации);
	Если ТипПараметра=Тип("Строка") Тогда
		// Константа как метаданные
		Описание = ХарактеристикиПоМетаданным(ОбъектРегистрации);
		ТекущийОбъект = Описание.Менеджер.СоздатьМенеджерЗначения();
		
	ИначеЕсли ТипПараметра=Тип("Структура") Тогда
		// Набор измерений, ИмяТаблицы - чего
		Описание = ХарактеристикиПоМетаданным(ИмяТаблицы);
		ТекущийОбъект = Описание.Менеджер.СоздатьНаборЗаписей();
		Для Каждого КлючЗначение Из ОбъектРегистрации Цикл
			ТекущийОбъект.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
		КонецЦикла;
		
	Иначе
		ТекущийОбъект = ОбъектРегистрации;
	КонецЕсли;
	
	Возврат ПланыОбмена.ИзменениеЗарегистрировано(Узел, ТекущийОбъект);
КонецФункции

// Изменяет регистрацию переданного.
//
// Параметры:
//    - Команда                 - Истина, если надо добавлять, Ложь, если удалять
//    - БезУчетаАвторегистрации - Истина, если не надо анализировать флаг авторегистрации
//    - Узел                    - Ссылка на узел плана обмена
//    - Данные                  - Ссылка, строка (полное имя метаданных), структура (измерения набора)
//                                или массив таких данных.
//    - ИмяТаблицы              - Если Данные является структурой, то содержит имя таблицы
//
// Возвращает структуру с общим числом объектов и числом успешно обработанных объектов
//
Функция ИзменитьРегистрациюНаСервере(Команда, БезУчетаАвторегистрации, Узел, Данные, ИмяТаблицы=Неопределено) Экспорт
	
	ПрочитатьНастройки();
	Результат = Новый Структура("Всего, Успешно", 0, 0);
	
	// Только при добавлении и работе в составе БСП
	НадоФильтрБСП = ТипЗнч(Команда)=Тип("Булево") И Команда И КонфигурацияПоддерживаетБСП И НастройкаКонтрольВыгрузкиОбъектов;
	
	Если ТипЗнч(Данные)=Тип("Массив") Тогда
		ДанныеРегистрации = Данные;
	Иначе
		ДанныеРегистрации = Новый Массив;
		ДанныеРегистрации.Добавить(Данные);
	КонецЕсли;
	
	Для Каждого Элемент Из ДанныеРегистрации Цикл
		
		Тип = ТипЗнч(Элемент);
		Значения = Новый Массив;
		
		Если Элемент=Неопределено Тогда
			// Вся конфигурация
			Если НадоФильтрБСП Тогда
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("Константы"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("Справочники"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("Документы"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("Последовательности"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("ПланыВидовХарактеристик"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("ПланыСчетов"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("ПланыВидовРасчета"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("РегистрыСведений"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("РегистрыНакопления"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("РегистрыБухгалтерии"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("РегистрыРасчета"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("БизнесПроцессы"), БезУчетаАвторегистрации) );
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ХарактеристикиПоМетаданным("Задачи"), БезУчетаАвторегистрации) );
				Продолжить;
				
			ИначеЕсли Не БезУчетаАвторегистрации Тогда
				// Регистрируем по группам с отсечением неподходящего
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "Константы", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "Справочники", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "Документы", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "Последовательности", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "ПланыВидовХарактеристик", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "ПланыСчетов", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "ПланыВидовРасчета", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "РегистрыСведений", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "РегистрыНакопления", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "РегистрыБухгалтерии", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "РегистрыРасчета", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "БизнесПроцессы", ИмяТаблицы) );
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, Ложь, Узел, "Задачи", ИмяТаблицы) );
				Продолжить;
			Иначе
				// Регистрируем сразу все
				Значения.Добавить(Неопределено);
			КонецЕсли;
			
		ИначеЕсли Тип=Тип("Строка") Тогда
			// Метаданные, возможно как коллекция, так и конкретный вид, на авторегистрацию смотрим
			Описание = ХарактеристикиПоМетаданным(Элемент);
			Если НадоФильтрБСП Тогда
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, Описание, БезУчетаАвторегистрации) );
				Продолжить;
				
			ИначеЕсли БезУчетаАвторегистрации Тогда
				Если Описание.ЭтоКоллекция Тогда
					Для Каждого Мета Из Описание.Метаданные Цикл
						ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, БезУчетаАвторегистрации, Узел, Мета.ПолноеИмя(), ИмяТаблицы) );
					КонецЦикла;
					Продолжить;
				Иначе
					Мета = Описание.Метаданные;
					ЭлементСостава = Узел.Метаданные().Состав.Найти(Мета);
					Если ЭлементСостава=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Описание.ЭтоКонстанта Тогда
						Значения.Добавить(Описание.Менеджер.СоздатьМенеджерЗначения());
					Иначе
						Значения.Добавить(Описание.Метаданные);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				// Отсеиваем неподходящие по авторегистрации
				Если Описание.ЭтоКоллекция Тогда
					// Регистрируем поодиночке
					Для Каждого Мета Из Описание.Метаданные Цикл
						ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, БезУчетаАвторегистрации, Узел, Мета.ПолноеИмя(), ИмяТаблицы) );
					КонецЦикла;
					Продолжить;
				Иначе
					Мета = Описание.Метаданные;
					ЭлементСостава = Узел.Метаданные().Состав.Найти(Мета);
					Если ЭлементСостава=Неопределено Или ЭлементСостава.Авторегистрация<>АвтоРегистрацияИзменений.Разрешить Тогда
						Продолжить;
					КонецЕсли;
					Если Описание.ЭтоКонстанта Тогда
						Значения.Добавить(Описание.Менеджер.СоздатьМенеджерЗначения());
					Иначе
						Значения.Добавить(Мета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Смотрим опциональные варианты, Значения[0] - метаданные конкретного вида с именем "Элемент"
			Для Каждого ТекЭлемент Из ПолучитьДополнительныеОбъектыРегистрации(Элемент, Узел, БезУчетаАвторегистрации) Цикл
				Значения.Добавить(ТекЭлемент);
			КонецЦикла;
			
		ИначеЕсли Тип=Тип("Структура") Тогда
			// Это или конкретный набор записей, или результат выбора ссылочного типа отбором
			Описание = ХарактеристикиПоМетаданным(ИмяТаблицы);
			Если Описание.ЭтоСсылка Тогда
				ДобавитьРезультаты(Результат, ИзменитьРегистрациюНаСервере(Команда, БезУчетаАвторегистрации, Узел, Элемент.Ссылка) );
				Продолжить;
			КонецЕсли;
			// Конкретный набор записей, на авторегистрацию уже не смотрим
			Если НадоФильтрБСП Тогда
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийНабора(Узел, Элемент, Описание) );
				Продолжить;
			КонецЕсли;
			
			Набор = Описание.Менеджер.СоздатьНаборЗаписей();
			Для Каждого КлючЗначение Из Элемент Цикл
				Если КлючЗначение.Ключ = "ОбластьДанныхОсновныеДанные" Тогда
					Продолжить;
				КонецЕсли;
				Набор.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
			КонецЦикла;
			Значения.Добавить(Набор);
			// Смотрим опциональные варианты
			Для Каждого ТекЭлемент Из ПолучитьДополнительныеОбъектыРегистрации(Элемент, Узел, БезУчетаАвторегистрации, ИмяТаблицы) Цикл
				Значения.Добавить(ТекЭлемент);
			КонецЦикла;
			
		Иначе
			// Конкретная ссылка, на авторегистрацию уже не смотрим
			Если НадоФильтрБСП Тогда
				ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийСсылки(Узел, Элемент) );
				Продолжить;
				
			КонецЕсли;
			Значения.Добавить(Элемент);
			// Смотрим опциональные варианты
			Для Каждого ТекЭлемент Из ПолучитьДополнительныеОбъектыРегистрации(Элемент, Узел, БезУчетаАвторегистрации) Цикл
				Значения.Добавить(ТекЭлемент);
			КонецЦикла;
			
		КонецЕсли;
		
		// Собственно регистрация, уже без фильтра
		Для Каждого ТекЗначение Из Значения Цикл
			ВыполнитьКомандуРегистрацииОбъекта(Команда, Узел, ТекЗначение);
			Результат.Успешно = Результат.Успешно + 1;
			Результат.Всего   = Результат.Всего   + 1;
		КонецЦикла;
		
	КонецЦикла; // Перебор объектов в массиве данных для регистрации
	
	Возврат Результат;
КонецФункции

// Возвращает начало полного имени формы для открытия по переданному объекту
//
Функция ПолучитьИмяФормы(ТекущийОбъект=Неопределено) Экспорт
	
	Тип = ТипЗнч(ТекущийОбъект);
	Если Тип=Тип("ДинамическийСписок") Тогда
		Возврат ТекущийОбъект.ОсновнаяТаблица + ".";
	ИначеЕсли Тип=Тип("Строка") Тогда
		Возврат ТекущийОбъект + ".";
	КонецЕсли;
	
	Мета = ?(ТекущийОбъект=Неопределено, Метаданные(), ТекущийОбъект.Метаданные());
	Возврат Мета.ПолноеИмя() + ".";
КонецФункции	

// Рекурсивное обслуживание иерархических пометок с тремя состояниями в дереве. 
//
// Параметры:
//    - ДанныеСтроки - ДанныеФормыЭлементДерева. Пометка хранится в числовой колонке "Пометка"  
//
Процедура ИзменениеПометки(ДанныеСтроки) Экспорт
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры

// Рекурсивное обслуживание иерархических пометок с тремя состояниями в дереве. 
//
// Параметры:
//    - ДанныеСтроки - ДанныеФормыЭлементДерева. Пометка хранится в числовой колонке "Пометка"  
//
Процедура ПроставитьПометкиВниз(ДанныеСтроки) Экспорт
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

// Рекурсивное обслуживание иерархических пометок с тремя состояниями в дереве. 
//
// Параметры:
//    - ДанныеСтроки - ДанныеФормыЭлементДерева. Пометка хранится в числовой колонке "Пометка"  
//
Процедура ПроставитьПометкиВверх(ДанныеСтроки) Экспорт
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	Если РодительСтроки<>Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Пометка);
		КонецЦикла;
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
		Иначе
			РодительСтроки.Пометка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
КонецПроцедуры

// Чтение реквизитов узла обмена.
//
// Параметры:
//    - Ссылка - Ссылка на узел обмена
//    - Данные - Список имен реквизитов для чтения через запятую
//
// Возвращает структуру с данными или Неопределено, если нет данных по переданной ссылке
//
Функция ПолучитьПараметрыУзлаОбмена(Ссылка, Данные) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ " + Данные + " ИЗ " + Ссылка.Метаданные().ПолноеИмя() + "
		|ГДЕ Ссылка=&Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Времянка = Запрос.Выполнить().Выгрузить();
	Если Времянка.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура(Данные);
	ЗаполнитьЗначенияСвойств(Результат, Времянка[0]);
	Возврат Результат;
КонецФункции	

// Запись реквизитов узла обмена.
//
// Параметры:
//    - Ссылка - Ссылка на узел обмена
//    - Данные - Список имен реквизитов для чтения через запятую
//
Процедура УстановитьПараметрыУзлаОбмена(Ссылка, Данные) Экспорт
	
	ОбъектУзла = Ссылка.ПолучитьОбъект();
	Если ОбъектУзла=Неопределено Тогда
		// Ссылка на удаленный объект
		Возврат;
	КонецЕсли;
	
	Изменен = Ложь;
	Для Каждого Элемент Из Данные Цикл
		Если ОбъектУзла[Элемент.Ключ]<>Элемент.Значение Тогда
			Изменен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Изменен Тогда
		ЗаполнитьЗначенияСвойств(ОбъектУзла, Данные);
		ОбъектУзла.Записать();
	КонецЕсли;
КонецПроцедуры

// Возвращает описание данных по имени таблицы/полному имени метаданных или метаданным
//
// Параметры:
//    - ИмяТаблицы - Имя таблицы, например "Справочник.Валюты"
//
Функция ХарактеристикиПоМетаданным(ИмяТаблицыМетаданных) Экспорт
	
	ЭтоПоследовательность = Ложь;
	ЭтоКоллекция          = Ложь;
	ЭтоКонстанта          = Ложь;
	ЭтоСсылка             = Ложь;
	ЭтоНабор              = Ложь;
	Менеджер              = Неопределено;
	ИмяТаблицы            = "";
	
	Если ТипЗнч(ИмяТаблицыМетаданных)=Тип("Строка") Тогда
		Мета = МетаданныеПоПолномуИмени(ИмяТаблицыМетаданных);
		ИмяТаблицы = ИмяТаблицыМетаданных;
	ИначеЕсли ТипЗнч(ИмяТаблицы)=Тип("Тип") Тогда
		Мета = Метаданные.НайтиПоТипу(ИмяТаблицыМетаданных);
		ИмяТаблицы = Мета.ПолноеИмя();
	Иначе 		
		Мета = ИмяТаблицыМетаданных;
		ИмяТаблицы = Мета.ПолноеИмя();
	КонецЕсли;
	
	Если Мета=Метаданные.Константы Тогда
		ЭтоКоллекция = Истина;
		ЭтоКонстанта = Истина;
		Менеджер     = Константы;
		
	ИначеЕсли Мета=Метаданные.Справочники Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер      = Справочники;
		
	ИначеЕсли Мета=Метаданные.Документы Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = Документы;
		
	ИначеЕсли Мета=Метаданные.Перечисления Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = Перечисления;
		
	ИначеЕсли Мета=Метаданные.ПланыВидовХарактеристик Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыВидовХарактеристик;
		
	ИначеЕсли Мета=Метаданные.ПланыСчетов Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыСчетов;
		
	ИначеЕсли Мета=Метаданные.ПланыВидовРасчета Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = ПланыВидовРасчета;
		
	ИначеЕсли Мета=Метаданные.БизнесПроцессы Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = БизнесПроцессы;
		
	ИначеЕсли Мета=Метаданные.Задачи Тогда
		ЭтоКоллекция = Истина;
		ЭтоСсылка    = Истина;
		Менеджер     = Задачи;
		
	ИначеЕсли Мета=Метаданные.Последовательности Тогда
		ЭтоНабор              = Истина;
		ЭтоПоследовательность = Истина;
		ЭтоКоллекция          = Истина;
		Менеджер              = Последовательности;
		
	ИначеЕсли Мета=Метаданные.РегистрыСведений Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер 	 = РегистрыСведений;
		
	ИначеЕсли Мета=Метаданные.РегистрыНакопления Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер     = РегистрыНакопления;
		
	ИначеЕсли Мета=Метаданные.РегистрыБухгалтерии Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер     = РегистрыБухгалтерии;
		
	ИначеЕсли Мета=Метаданные.РегистрыРасчета Тогда
		ЭтоКоллекция = Истина;
		ЭтоНабор     = Истина;
		Менеджер     = РегистрыРасчета;
		
	ИначеЕсли Метаданные.Константы.Содержит(Мета) Тогда
		ЭтоКонстанта = Истина;
		Менеджер     = Константы[Мета.Имя];
		
	ИначеЕсли Метаданные.Справочники.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Справочники[Мета.Имя];
		
	ИначеЕсли Метаданные.Документы.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Документы[Мета.Имя];
		
	ИначеЕсли Метаданные.Последовательности.Содержит(Мета) Тогда
		ЭтоНабор              = Истина;
		ЭтоПоследовательность = Истина;
		Менеджер              = Последовательности[Мета.Имя];
		
	ИначеЕсли Метаданные.Перечисления.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = Перечисления[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = ПланыВидовХарактеристик[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = ПланыСчетов[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер  = ПланыВидовРасчета[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыСведений[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыНакопления[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыБухгалтерии[Мета.Имя];
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(Мета) Тогда
		ЭтоНабор = Истина;
		Менеджер = РегистрыРасчета[Мета.Имя];
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = БизнесПроцессы[Мета.Имя];
		
	ИначеЕсли Метаданные.Задачи.Содержит(Мета) Тогда
		ЭтоСсылка = Истина;
		Менеджер = Задачи[Мета.Имя];
		
	Иначе
		МетаРодитель = Мета.Родитель();
		Если МетаРодитель<>Неопределено И Метаданные.РегистрыРасчета.Содержит(МетаРодитель) Тогда
			// Перерасчет
			ЭтоНабор = Истина;
			Менеджер = РегистрыРасчета[МетаРодитель.Имя].Перерасчеты[Мета.Имя];
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Новый Структура("ИмяТаблицы, Метаданные, Менеджер, ЭтоНабор, ЭтоСсылка, ЭтоКонстанта, ЭтоПоследовательность, ЭтоКоллекция",
		ИмяТаблицы, Мета, Менеджер, 
		ЭтоНабор, ЭтоСсылка, ЭтоКонстанта, ЭтоПоследовательность, ЭтоКоллекция);
	
КонецФункции

// Возвращает таблицу, описывающую измерения для регистрации изменений набора данных
//
// Параметры:
//    - ИмяТаблицы   - Имя таблицы, например "РегистрСведений.КурсыВалют"
//    - ВсеИзмерения - Флаг того, что для регистра сведений получаем все измерения, а не 
//                     только основные и ведущие
//
// Возвращает таблицу с колонками:
//    - Имя         - Строка имени измерения
//    - ТипЗначения - ОписаниеТипов
//    - Заголовок   - Представление для измерения
//
Функция ИзмеренияНабораЗаписей(ИмяТаблицы, ВсеИзмерения=Ложь) Экспорт
	
	Если ТипЗнч(ИмяТаблицы)=Тип("Строка") Тогда
		Мета = МетаданныеПоПолномуИмени(ИмяТаблицы);
	Иначе
		Мета = ИмяТаблицы;
	КонецЕсли;
	
	// Определяем ключевые поля
	Измерения = Новый ТаблицаЗначений;
	Колонки = Измерения.Колонки;
	Колонки.Добавить("Имя");
	Колонки.Добавить("ТипЗначения");
	Колонки.Добавить("Заголовок");
	
	Если Не ВсеИзмерения Тогда
		// Что-то регистрируемое
		НеУчитывать = "НомерСообщения, Узел,";
		
		Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + Мета.ПолноеИмя() + ".Изменения ГДЕ ЛОЖЬ");
		ПустойРезультат = Запрос.Выполнить();
		Для Каждого КолонкаРезультата Из ПустойРезультат.Колонки Цикл
			ИмяКолонки = КолонкаРезультата.Имя;
			Если Найти(НеУчитывать, ИмяКолонки + ",")=0 Тогда
				Строка = Измерения.Добавить();
				Строка.Имя         = ИмяКолонки;
				Строка.ТипЗначения = КолонкаРезультата.ТипЗначения;
				
				МетаИзм = Мета.Измерения.Найти(ИмяКолонки);
				Строка.Заголовок = ?(МетаИзм=Неопределено, ИмяКолонки, МетаИзм.Представление());
			КонецЕсли;
		КонецЦикла;
		
		Возврат Измерения;
	КонецЕсли;
	
	// Все измерения
	
	ЭтоРегистрСведений = Метаданные.РегистрыСведений.Содержит(Мета);
	
	// Регистратор
	Если Метаданные.РегистрыНакопления.Содержит(Мета)
	 Или Метаданные.РегистрыБухгалтерии.Содержит(Мета)
	 Или Метаданные.РегистрыРасчета.Содержит(Мета)
	 Или (ЭтоРегистрСведений И Мета.РежимЗаписи=Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору)
	 Или Метаданные.Последовательности.Содержит(Мета)
	Тогда
		Строка = Измерения.Добавить();
		Строка.Имя         = "Регистратор";
		Строка.ТипЗначения = Документы.ТипВсеСсылки();
		Строка.Заголовок   = "Регистратор";
	КонецЕсли;
	
	// Период
	Если ЭтоРегистрСведений И Мета.ОсновнойОтборПоПериоду Тогда
		Строка = Измерения.Добавить();
		Строка.Имя         = "Период";
		Строка.ТипЗначения = Новый ОписаниеТипов("Дата");
		Строка.Заголовок   = "Период";
	КонецЕсли;
	
	// Измерения
	Если ЭтоРегистрСведений Тогда
		Для Каждого МетаИзм Из Мета.Измерения Цикл
			Строка = Измерения.Добавить();
			Строка.Имя         = МетаИзм.Имя;
			Строка.ТипЗначения = МетаИзм.Тип;
			Строка.Заголовок   = МетаИзм.Представление();
		КонецЦикла;
	КонецЕсли;
	
	// Перерасчет
	Если Метаданные.РегистрыРасчета.Содержит(Мета.Родитель()) Тогда
		Строка = Измерения.Добавить();
		Строка.Имя         = "ОбъектПерерасчета";
		Строка.ТипЗначения = Документы.ТипВсеСсылки();
		Строка.Заголовок   = "Объект перерасчета";
	КонецЕсли;
	
	Возврат Измерения;
КонецФункции

// Модифицирует таблицу формы, добавляя туда колонки
//
// Параметры:
//    - ТаблицаФормы   - Элемент, связанный с данными, в который будут добавлены колонки данных
//    - СохранятьИмена - Список имен колонок, которые будут сохранены, через запятую.
//    - Добавлять      - Коллекция добавляемых колонок  или перечислимое с атрибутами Имя, ТипЗначения, Заголовок
//    - ГруппаКолонок  - Группа колонок, в которую происходит добавление
//
Процедура ДобавитьКолонкиВТаблицуФормы(ТаблицаФормы, СохранятьИмена, Добавлять, ГруппаКолонок=Неопределено) Экспорт
	
	Форма = ФормаЭлементаФормы(ТаблицаФормы);
	ЭлементыФормы = Форма.Элементы;
	ИмяРеквизитаТаблицы = ТаблицаФормы.ПутьКДанным;
	
	Сохраняемые = Новый Структура(СохранятьИмена);
	СохраняемыеПутиДанных = Новый Соответствие;
	Для Каждого Элемент Из Сохраняемые Цикл
		СохраняемыеПутиДанных.Вставить(ИмяРеквизитаТаблицы + "." + Элемент.Ключ, Истина);
	КонецЦикла;
	
	ЭтоДинамическийСписок = Ложь;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = ИмяРеквизитаТаблицы И Реквизит.ТипЗначения.СодержитТип(Тип("ДинамическийСписок")) Тогда
			ЭтоДинамическийСписок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Динамический пересоздает реквизиты сам
	Если Не ЭтоДинамическийСписок Тогда
		УдаляемыеИмена = Новый Массив;
		
		// Удаляем все реквизиты, которые не перечислены в СохранятьИмена
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты(ИмяРеквизитаТаблицы) Цикл
			ТекИмя = Реквизит.Имя;
			Если Не Сохраняемые.Свойство(ТекИмя) Тогда
				УдаляемыеИмена.Добавить(Реквизит.Путь + "." + ТекИмя);
			КонецЕсли;
		КонецЦикла;
		
		Добавляемые = Новый Массив;
		Для Каждого Колонка Из Добавлять Цикл
			ТекИмя = Колонка.Имя;
			Если Не Сохраняемые.Свойство(ТекИмя) Тогда
				Добавляемые.Добавить( Новый РеквизитФормы(ТекИмя, Колонка.ТипЗначения, ИмяРеквизитаТаблицы, Колонка.Заголовок) );
			КонецЕсли;
		КонецЦикла;
		
		Форма.ИзменитьРеквизиты(Добавляемые, УдаляемыеИмена);
	КонецЕсли;
	
	// Удаляем элементы
	Родитель = ?(ГруппаКолонок=Неопределено, ТаблицаФормы, ГруппаКолонок);
	
	Удалять = Новый Массив;
	Для Каждого Элемент Из Родитель.ПодчиненныеЭлементы Цикл
		Удалять.Добавить(Элемент);
	КонецЦикла;
	Для Каждого Элемент Из Удалять Цикл
		Если ТипЗнч(Элемент)<>Тип("ГруппаФормы") И СохраняемыеПутиДанных[Элемент.ПутьКДанным]=Неопределено Тогда
			ЭлементыФормы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	// Создаем элементы
	Префикс = ТаблицаФормы.Имя;
	Для Каждого Колонка Из Добавлять Цикл
		ТекИмя = Колонка.Имя;
		ЭлФормы = ЭлементыФормы.Вставить(Префикс + ТекИмя, Тип("ПолеФормы"), Родитель);
		ЭлФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлФормы.ПутьКДанным = ИмяРеквизитаТаблицы + "." + ТекИмя;
		ЭлФормы.Заголовок = Колонка.Заголовок;
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает подробное представление объекта.
//
// Параметры:
//    - ОбъектПредставления - Объект, представление которого получаем
//
Функция ПредставлениеСсылки(ОбъектПредставления) Экспорт
	
	Если ТипЗнч(ОбъектПредставления)=Тип("Строка") Тогда
		// Метаданные 
		Мета = Метаданные.НайтиПоПолномуИмени(ОбъектПредставления);
		Результат = Мета.Представление();
		Если Метаданные.Константы.Содержит(Мета) Тогда
			Результат = Результат + " (константа)";
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Ссылка
	Результат = "";
	Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения")<>Неопределено Тогда
		Попытка
			Результат = Вычислить("ОбщегоНазначения.ПредметСтрокой(ОбъектПредставления)");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) И ОбъектПредставления<>Неопределено И Не ОбъектПредставления.Пустая() Тогда
		Мета = ОбъектПредставления.Метаданные();
		Если Метаданные.Документы.Содержит(Мета) Тогда
			Результат = Строка(ОбъектПредставления);
		Иначе
			Представление = Мета.ПредставлениеОбъекта;
			Если ПустаяСтрока(Представление) Тогда
				Представление = Мета.Представление();
			КонецЕсли;
			Результат = Строка(ОбъектПредставления);
			Если Не ПустаяСтрока(Представление) Тогда
				Результат = Результат + " (" + Представление + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = НСтр("ru = 'не задано'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что работа происходит в файловой базе
//
Функция ЭтоФайловаяБаза() Экспорт
	Возврат Найти(СтрокаСоединенияИнформационнойБазы(), "File=")>0;
КонецФункции

//  Читает текущие данные из динамического списка по его настройкам и возвращает в виде таблицы значений
//
// Параметры:
//    - ИсточникДанных - ДинамическийСписок, реквизит формы
//
Функция ТекущиеДанныеДинамическогоСписка(ИсточникДанных) Экспорт
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник";
	Источник.ТипИсточникаДанных = "local";
	
	Набор = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Запрос = ИсточникДанных.ТекстЗапроса;
	Набор.АвтоЗаполнениеДоступныхПолей = Истина;
	Набор.ИсточникДанных = Источник.Имя;
	Набор.Имя = Источник.Имя;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникНастроек);
	
	ТекНастройки = Компоновщик.Настройки;
	
	// Выбранные поля
	Для Каждого Элемент из ТекНастройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если Не Элемент.Папка Тогда
			Поле = ТекНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Использование = Истина;
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	Группа = ТекНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	// Отбор
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.Отбор);

	// Выводим
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ТекНастройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(Макет);
	Вывод  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	Вывод.УстановитьОбъект(Результат);
	Вывод.Вывести(Процессор);
	
	Возврат Результат;
КонецФункции

// Читаем настройки из общего хранилища
//
Процедура ПрочитатьНастройки(КлючНастройки="") Экспорт
	
	КлючОбъекта = Метаданные().ПолноеИмя() + ".Форма.РегистрацияИзменений";
	
	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта);
	Если ТипЗнч(ТекущиеНастройки)<>Тип("Соответствие") Тогда
		// Умолчания
		ТекущиеНастройки = Новый Соответствие;
		ТекущиеНастройки.Вставить("НастройкаАвторегистрацияДвижений",            Ложь);
		ТекущиеНастройки.Вставить("НастройкаАвторегистрацияПоследовательностей", Ложь);
		ТекущиеНастройки.Вставить("НастройкаАдресВнешнейОбработкиЗапросов",      "");
		ТекущиеНастройки.Вставить("НастройкаКонтрольВыгрузкиОбъектов",           Истина); // Проверять через БСП
		ТекущиеНастройки.Вставить("НастройкаВариантНомераСообщения",              0);     // Регистрировать как новое
	КонецЕсли;
	
	НастройкаАвторегистрацияДвижений            = ТекущиеНастройки["НастройкаАвторегистрацияДвижений"];
	НастройкаАвторегистрацияПоследовательностей = ТекущиеНастройки["НастройкаАвторегистрацияПоследовательностей"];
	НастройкаАдресВнешнейОбработкиЗапросов      = ТекущиеНастройки["НастройкаАдресВнешнейОбработкиЗапросов"];
	НастройкаКонтрольВыгрузкиОбъектов           = ТекущиеНастройки["НастройкаКонтрольВыгрузкиОбъектов"];
	НастройкаВариантНомераСообщения             = ТекущиеНастройки["НастройкаВариантНомераСообщения"];

	КонфигурацияПоддерживаетБСП = БСП_ДоступнаТребуемаяВерсия();
	
	ПроверитьКорректностьНастроек(КлючНастройки);
КонецПроцедуры	

// Пишем настройки в общее хранилище
//
Процедура СохранитьНастройки(КлючНастройки="") Экспорт
	
	КлючОбъекта = Метаданные().ПолноеИмя() + ".Форма.РегистрацияИзменений";
	
	ТекущиеНастройки = Новый Соответствие;
	ТекущиеНастройки.Вставить("НастройкаАвторегистрацияДвижений",            НастройкаАвторегистрацияДвижений);
	ТекущиеНастройки.Вставить("НастройкаАвторегистрацияПоследовательностей", НастройкаАвторегистрацияПоследовательностей);
	ТекущиеНастройки.Вставить("НастройкаАдресВнешнейОбработкиЗапросов",      НастройкаАдресВнешнейОбработкиЗапросов);
	ТекущиеНастройки.Вставить("НастройкаКонтрольВыгрузкиОбъектов",           НастройкаКонтрольВыгрузкиОбъектов);
	ТекущиеНастройки.Вставить("НастройкаВариантНомераСообщения",             НастройкаВариантНомераСообщения);
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "", ТекущиеНастройки)
КонецПроцедуры	

// Проверяем настройки на корректность, сбрасываем в случае нарушения.
//    Возвращает структуру с ключом - именем настройки, значением содержит описанием ошибки или Неопределено
// при отсутствии ошибки для данного параметра
//
Функция ПроверитьКорректностьНастроек(КлючНастройки="") Экспорт
	
	Результат = Новый Структура("ЕстьОшибки,
		|НастройкаАвторегистрацияДвижений, НастройкаАвторегистрацияПоследовательностей, 
		|НастройкаАдресВнешнейОбработкиЗапросов, НастройкаКонтрольВыгрузкиОбъектов,
		|НастройкаВариантНомераСообщения",
		Ложь);
		
	// 1. НастройкаКонтрольВыгрузкиОбъектов возможно только если работам в нужной БСП
	Если НЕ	КонфигурацияПоддерживаетБСП Тогда
		НастройкаКонтрольВыгрузкиОбъектов = Ложь;
		Результат.НастройкаКонтрольВыгрузкиОбъектов = НСтр("ru='Текущая конфигурация не поддерживает БСП версии 2.1.2 или старше.'");
			
		Результат.ЕстьОшибки = Истина;
	КонецЕсли;
	
	// 2. Доступность внешней обработки
	Если ПустаяСтрока(НастройкаАдресВнешнейОбработкиЗапросов) Тогда
		// Убираем возможные пробелы, вариант отключен
		НастройкаАдресВнешнейОбработкиЗапросов = "";
		
	ИначеЕсли НРег(Прав(СокрЛП(НастройкаАдресВнешнейОбработкиЗапросов), 4))=".epf" Тогда
		// Файл обработки
		Файл = Новый Файл(НастройкаАдресВнешнейОбработкиЗапросов);
		Если Не Файл.Существует() Тогда
			Текст = НСтр("ru='Файл ""%1"" не доступен %2'");
				
			Текст = СтрЗаменить(Текст, "%1", НастройкаАдресВнешнейОбработкиЗапросов);
			Если ЭтоФайловаяБаза() Тогда
				РасположениеФайла = "";
			Иначе
				РасположениеФайла = НСтр("ru='на сервере'");
			КонецЕсли;
				
			Текст = СтрЗаменить(Текст, "%2", РасположениеФайла);
			Результат.НастройкаАдресВнешнейОбработкиЗапросов = Текст;
			
			Результат.ЕстьОшибки = Истина;
		КонецЕсли;
		
	Иначе
		// В составе конфигурации
		Если Метаданные.Обработки.Найти(НастройкаАдресВнешнейОбработкиЗапросов)=Неопределено Тогда
			Текст = НСтр("ru='Обработка ""%1"" не найдена в составе конфигурации'");
			Результат.НастройкаАдресВнешнейОбработкиЗапросов = СтрЗаменить(Текст, "%1", НастройкаАдресВнешнейОбработкиЗапросов);
			
			Результат.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ ИЗМЕНЕНИЙ В ПЛАНАХ ОБМЕНА. СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

//
// Копирует отбор компоновки данных
//
Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого Элемент Из КоллекцияИсточник Цикл
		ТипЭлемента  = ТипЗнч(Элемент);
		НовыйЭлемент = КоллекцияПриемник.Добавить(ТипЭлемента);
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		Если ТипЭлемента=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, Элемент) 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет непосредственное действие с конечным объектом
//
Процедура ВыполнитьКомандуРегистрацииОбъекта(Команда, Узел, ОбъектРегистрации)
	
	Если ТипЗнч(Команда)=Тип("Булево") Тогда
		Если Команда Тогда
			// Регистрация
			Если НастройкаВариантНомераСообщения=1 Тогда
				// Как отправленного
				Команда = 1 + Узел.НомерОтправленного;
			Иначе
				// Как нового
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, ОбъектРегистрации);
			КонецЕсли;
		Иначе
			// Отмена регистрации
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектРегистрации);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Команда)=Тип("Число") Тогда
		// Одиночная регистрация с указанным номером сообщения
		Если Команда = 0 Тогда
			// Аналогично регистрации нового
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, ОбъектРегистрации);
			ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(Узел, ОбъектРегистрации);
			Если НЕ ИзменениеЗарегистрировано Тогда
				Сообщить("Регистрация изменений на узле <" + Узел + "> объекта <" + ОбъектРегистрации + "> не произведена.");
			КонецЕсли;
		Иначе
			// Изменение номера регистрации, БСП не проверяем
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, ОбъектРегистрации);
			ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(Узел, ОбъектРегистрации);
			Если НЕ ИзменениеЗарегистрировано Тогда
				Сообщить("Регистрация изменений на узле <" + Узел + "> объекта <" + ОбъектРегистрации + "> не произведена.");
			КонецЕсли;
			Если Найти(ТипЗнч(ОбъектРегистрации), "Константа менеджер значения") = 0 Тогда
				Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Команда, ОбъектРегистрации);
			Иначе
				Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Команда, ОбъектРегистрации.Метаданные());
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				// Выбираем изменения для простановки номера сообщения обмена данными
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает управляемую форму, которой принадлежит элемент
//
Функция ФормаЭлементаФормы(ЭлементФормы)
	Результат = ЭлементФормы;
	ТипыФормы = Новый ОписаниеТипов("УправляемаяФорма");
	Пока Не ТипыФормы.СодержитТип(ТипЗнч(Результат)) Цикл
		Результат = Результат.Родитель;
	КонецЦикла;
	Возврат Результат;
КонецФункции	

// Внутренняя для формирования группы метаданных (например справочников) в дереве метаданных
//
Процедура СформироватьУровеньМетаданных(ТекущийНомерСтроки, Параметры, ИндексКартинки, ИндексКартинкиУзлов, ДобавлятьПодчиненные, ИмяМета, ПредставлениеМета)
	
	ПредставленияУровня = Новый Массив;
	Авторегистрации     = Новый Массив;
	ИменаУровня         = Новый Массив;
	
	ВсеСтроки = Параметры.Строки;
	МетаПлан  = Параметры.ПланОбмена;
	
	СтрокаГруппа = ВсеСтроки.Добавить();
	СтрокаГруппа.ИдентификаторСтроки = ТекущийНомерСтроки;
	
	СтрокаГруппа.МетаПолноеИмя  = ИмяМета;
	СтрокаГруппа.Наименование   = ПредставлениеМета;
	СтрокаГруппа.ИндексКартинки = ИндексКартинки;
	
	Строки = СтрокаГруппа.Строки;
	БылиПодчиненные = Ложь;
	
	Для Каждого Мета Из Метаданные[ИмяМета] Цикл
		
		Если МетаПлан=Неопределено Тогда
			// Без учета плана обмена
			БылиПодчиненные = Истина;
			МетаПолноеИмя   = Мета.ПолноеИмя();
			Наименование    = Мета.Представление();
			Если ДобавлятьПодчиненные Тогда
				НовСтрока = Строки.Добавить();
				НовСтрока.МетаПолноеИмя  = МетаПолноеИмя;
				НовСтрока.Наименование   = Наименование ;
				НовСтрока.ИндексКартинки = ИндексКартинкиУзлов;
				
				ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
				НовСтрока.ИдентификаторСтроки = ТекущийНомерСтроки;
			КонецЕсли;
			ИменаУровня.Добавить(МетаПолноеИмя);
			ПредставленияУровня.Добавить(Наименование);
			
		Иначе
			Элемент = МетаПлан.Состав.Найти(Мета);
			Если Элемент<>Неопределено Тогда
				БылиПодчиненные = Истина;
				МетаПолноеИмя   = Мета.ПолноеИмя();
				Наименование    = Мета.Представление();
				Авторегистрация = ?(Элемент.Авторегистрация=АвтоРегистрацияИзменений.Запретить, 1, 2);
				Если ДобавлятьПодчиненные Тогда
					НовСтрока = Строки.Добавить();
					НовСтрока.МетаПолноеИмя   = МетаПолноеИмя;
					НовСтрока.Наименование    = Наименование ;
					НовСтрока.ИндексКартинки  = ИндексКартинкиУзлов;
					НовСтрока.Авторегистрация = Авторегистрация;
					
					ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
					НовСтрока.ИдентификаторСтроки = ТекущийНомерСтроки;
				КонецЕсли;
				ИменаУровня.Добавить(МетаПолноеИмя);
				ПредставленияУровня.Добавить(Наименование);
				Авторегистрации.Добавить(Авторегистрация);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиПодчиненные Тогда
		Строки.Сортировать("Наименование");
		Параметры.СтруктураИмен.Вставить(ИмяМета, ИменаУровня);
		Параметры.СтруктураПредставлений.Вставить(ИмяМета, ПредставленияУровня);
		Если Не ДобавлятьПодчиненные Тогда
			Параметры.СтруктураАвторегистрации.Вставить(ИмяМета, Авторегистрации);
		КонецЕсли;
	Иначе
		// Виды объектов без регистрации не вставляем
		ВсеСтроки.Удалить(СтрокаГруппа);
	КонецЕсли;
	
КонецПроцедуры

// Накапливаем результаты регистраций
//
Процедура ДобавитьРезультаты(Приемник, Источник)
	Приемник.Успешно = Приемник.Успешно + Источник.Успешно;
	Приемник.Всего   = Приемник.Всего   + Источник.Всего;
КонецПроцедуры	

// Возвращает массив дополнительно регистрируемых объектов согласно флагам
//
Функция ПолучитьДополнительныеОбъектыРегистрации(ОбъектРегистрации, УзелКонтроляАвторегистрации, БезАвторегистрации, ИмяТаблицы=Неопределено)
	Результат = Новый Массив;
	
	// Смотрим на глобальные параметры
	Если (Не НастройкаАвторегистрацияДвижений) И (Не НастройкаАвторегистрацияПоследовательностей) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ОбъектРегистрации);
	НаВходеИмя = ТипЗначения=Тип("Строка");
	Если НаВходеИмя Тогда
		Описание = ХарактеристикиПоМетаданным(ОбъектРегистрации);
	ИначеЕсли ТипЗначения=Тип("Структура") Тогда
		Описание = ХарактеристикиПоМетаданным(ИмяТаблицы);
		Если Описание.ЭтоПоследовательность Тогда
			Возврат Результат;
		КонецЕсли;
	Иначе
		Описание = ХарактеристикиПоМетаданным(ОбъектРегистрации.Метаданные());
	КонецЕсли;
	
	МетаОбъект = Описание.Метаданные;
	
	// Коллекцию рекурсивно	
	Если Описание.ЭтоКоллекция Тогда
		Для Каждого Мета Из МетаОбъект Цикл
			ДополнительныйНабор = ПолучитьДополнительныеОбъектыРегистрации(Мета.ПолноеИмя(), УзелКонтроляАвторегистрации, БезАвторегистрации, ИмяТаблицы);
			Для Каждого Элемент Из ДополнительныйНабор Цикл
				Результат.Добавить(Элемент);
			КонецЦикла;
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
	
	// Одиночное
	СоставУзла = УзелКонтроляАвторегистрации.Метаданные().Состав;
	
	// Документы. Могут влиять на последовательности и движения
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		
		Если НастройкаАвторегистрацияДвижений Тогда
			Для Каждого Мета Из МетаОбъект.Движения Цикл
				
				ЭлементСостава = СоставУзла.Найти(Мета);
				Если ЭлементСостава<>Неопределено И (БезАвторегистрации Или ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Разрешить) Тогда
					Если НаВходеИмя Тогда
						Результат.Добавить(Мета);
					Иначе
						Описание = ХарактеристикиПоМетаданным(Мета);
						Набор = Описание.Менеджер.СоздатьНаборЗаписей();
						Набор.Отбор.Регистратор.Установить(ОбъектРегистрации);
						Набор.Прочитать();
						Результат.Добавить(Набор);
						// И проверим полученный набор рекурсивно
						ДополнительныйНабор = ПолучитьДополнительныеОбъектыРегистрации(Набор, УзелКонтроляАвторегистрации, БезАвторегистрации, ИмяТаблицы);
						Для Каждого Элемент Из ДополнительныйНабор Цикл
							Результат.Добавить(Элемент);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если НастройкаАвторегистрацияПоследовательностей Тогда
			Для Каждого Мета Из Метаданные.Последовательности Цикл
				
				Описание = ХарактеристикиПоМетаданным(Мета);
				Если Мета.Документы.Содержит(МетаОбъект) Тогда
					// Последовательность регистрируется для данного документа
					ЭлементСостава = СоставУзла.Найти(Мета);
					Если ЭлементСостава<>Неопределено И (БезАвторегистрации Или ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Разрешить) Тогда
						// Регистрируется на этом узле
						Если НаВходеИмя Тогда
							Результат.Добавить(Мета);
						Иначе
							Набор = Описание.Менеджер.СоздатьНаборЗаписей();
							Набор.Отбор.Регистратор.Установить(ОбъектРегистрации);
							Набор.Прочитать();
							Результат.Добавить(Набор);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	// Записи регистров. Могут влиять на последовательности
	ИначеЕсли НастройкаАвторегистрацияПоследовательностей И (
		Метаданные.РегистрыСведений.Содержит(МетаОбъект)
		Или Метаданные.РегистрыНакопления.Содержит(МетаОбъект)
		Или Метаданные.РегистрыБухгалтерии.Содержит(МетаОбъект)
		Или Метаданные.РегистрыРасчета.Содержит(МетаОбъект)
	) Тогда
		Для Каждого Мета Из Метаданные.Последовательности Цикл
			Если Мета.Движения.Содержит(МетаОбъект) Тогда
				// Последовательность регистрируется для набора записей
				ЭлементСостава = СоставУзла.Найти(Мета);
				Если ЭлементСостава<>Неопределено И (БезАвторегистрации Или ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Разрешить) Тогда
					Результат.Добавить(Мета);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает флаг того, что БСП в текущей конфигурации обеспечивает функционал
//
Функция БСП_ДоступнаТребуемаяВерсия()
	
	// Ищем в версии БСП: 2.1.2 и старше
	Попытка
		СтрокиВерсии = СтрЗаменить(
			Вычислить("СтандартныеПодсистемыСервер.ВерсияБиблиотеки()"),
			".", Символы.ПС);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	НужнаяВерсия = Новый Массив;
	НужнаяВерсия.Добавить(2);
	НужнаяВерсия.Добавить(1);
	НужнаяВерсия.Добавить(2);
	
	Для Индекс=0 ПО НужнаяВерсия.ВГраница() Цикл
		
		Попытка
			ТекЧисло = Число(СтрПолучитьСтроку(СтрокиВерсии, Индекс + 1));
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		ЧастьВерсии = НужнаяВерсия[Индекс];
		Если ТекЧисло > ЧастьВерсии Тогда
			Возврат Истина;
		ИначеЕсли ТекЧисло < ЧастьВерсии Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Возвращает флаг контроля объекта в БСП
//
Функция БСП_КонтрольВыгрузкиОбъекта(Узлы, ОбъектРегистрации)
	Отправка = ОтправкаЭлементаДанных.Авто;
	Выполнить("ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ОбъектРегистрации, Отправка, , Узлы)");
	Возврат Отправка<>ОтправкаЭлементаДанных.Удалить;
КонецФункции

// Проверяет ссылку на возможность регистрации изменения в БСП.
// Возвращает структуру с полями "Всего" и "Успешно", описывающей количества регистраций
//
Функция БСП_РегистрацияИзмененийСсылки(Узел, Ссылка, БезУчетаАвторегистрации=Истина)
	
	Результат = Новый Структура("Всего, Успешно", 0, 0);
	
	Если БезУчетаАвторегистрации Тогда
		СоставУзла = Неопределено;
	Иначе
		СоставУзла = Узел.Метаданные().Состав;
	КонецЕсли;
	
	ЭлементСостава = ?(СоставУзла=Неопределено, Неопределено, СоставУзла.Найти(Ссылка.Метаданные()));
	Если ЭлементСостава=Неопределено Или ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Разрешить Тогда
		// Сам объект
		Результат.Всего = 1;
		ОбъектРегистрации = Ссылка.ПолучитьОбъект();
		// Для битых ссылок ОбъектРегистрации будет Неопределено
		Если ОбъектРегистрации=Неопределено Или БСП_КонтрольВыгрузкиОбъекта(Узел, ОбъектРегистрации) Тогда
			ВыполнитьКомандуРегистрацииОбъекта(Истина, Узел, Ссылка);
			Результат.Успешно = 1;
		КонецЕсли;
		ОбъектРегистрации = Неопределено;
	КонецЕсли;
	
	// Смотрим опциональные варианты
	Если Результат.Успешно>0 Тогда
		Для Каждого Элемент Из ПолучитьДополнительныеОбъектыРегистрации(Ссылка, Узел, БезУчетаАвторегистрации) Цикл
			Результат.Всего = Результат.Всего + 1;
			Если БСП_КонтрольВыгрузкиОбъекта(Узел, Элемент) Тогда
				ВыполнитьКомандуРегистрацииОбъекта(Истина, Узел, Элемент);
				Результат.Успешно = Результат.Успешно + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверяет набор значений на возможность регистрации изменения в БСП.
// Возвращает структуру с полями "Всего" и "Успешно", описывающей количества регистраций
//
Функция БСП_РегистрацияИзмененийНабора(Узел, СтруктураПолей, Описание, БезУчетаАвторегистрации=Истина)
	
	Результат = Новый Структура("Всего, Успешно", 0, 0);
	
	Если БезУчетаАвторегистрации Тогда
		СоставУзла = Неопределено;
	Иначе
		СоставУзла = Узел.Метаданные().Состав;
	КонецЕсли;
	
	ЭлементСостава = ?(СоставУзла=Неопределено, Неопределено, СоставУзла.Найти(Описание.Метаданные));
	Если ЭлементСостава=Неопределено Или ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Разрешить Тогда
		Результат.Всего = 1;
		
		Набор = Описание.Менеджер.СоздатьНаборЗаписей();
		Для Каждого КлючЗначение Из СтруктураПолей Цикл
			Набор.Отбор[КлючЗначение.Ключ].Установить(КлючЗначение.Значение);
		КонецЦикла;
		Набор.Прочитать();
		
		Если БСП_КонтрольВыгрузкиОбъекта(Узел, Набор) Тогда
			ВыполнитьКомандуРегистрацииОбъекта(Истина, Узел, Набор);
			Результат.Успешно = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	// Смотрим опциональные варианты
	Если Результат.Успешно>0 Тогда
		Для Каждого Элемент Из ПолучитьДополнительныеОбъектыРегистрации(Набор, Узел, БезУчетаАвторегистрации) Цикл
			Результат.Всего = Результат.Всего + 1;
			Если БСП_КонтрольВыгрузкиОбъекта(Узел, Элемент) Тогда
				ВыполнитьКомандуРегистрацииОбъекта(Истина, Узел, Элемент);
				Результат.Успешно = Результат.Успешно + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверяет константу на возможность регистрации изменения в БСП.
// Возвращает структуру с полями "Всего" и "Успешно", описывающей количества регистраций
//
Функция БСП_РегистрацияИзмененийКонстанты(Узел, Описание, БезУчетаАвторегистрации=Истина)
	
	Результат = Новый Структура("Всего, Успешно", 0, 0);
	
	Если БезУчетаАвторегистрации Тогда
		СоставУзла = Неопределено;
	Иначе
		СоставУзла = Узел.Метаданные().Состав;
	КонецЕсли;
	
	ЭлементСостава = ?(СоставУзла=Неопределено, Неопределено, СоставУзла.Найти(Описание.Метаданные));
	Если ЭлементСостава=Неопределено Или ЭлементСостава.Авторегистрация=АвтоРегистрацияИзменений.Разрешить Тогда
		Результат.Всего = 1;
		ОбъектРегистрации = Описание.Менеджер.СоздатьМенеджерЗначения();
		Если БСП_КонтрольВыгрузкиОбъекта(Узел, ОбъектРегистрации) Тогда
			ВыполнитьКомандуРегистрацииОбъекта(Истина, Узел, ОбъектРегистрации);
			Результат.Успешно = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверяет набор метаданных на возможность регистрации изменения в БСП.
// Возвращает структуру с полями "Всего" и "Успешно", описывающей количества регистраций
//
Функция БСП_РегистрацияИзмененийМетаданных(Узел, Описание, БезУчетаАвторегистрации)
	
	Результат = Новый Структура("Всего, Успешно", 0, 0);
	
	Если Описание.ЭтоКоллекция Тогда
		Для Каждого МетаВид Из Описание.Метаданные Цикл
			ТекОписание = ХарактеристикиПоМетаданным(МетаВид);
			ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийМетаданных(Узел, ТекОписание, БезУчетаАвторегистрации) );
		КонецЦикла;
	Иначе;
		ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийОбъектаМетаданных(Узел, Описание, БезУчетаАвторегистрации) );
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Проверяет объект метаданных на возможность регистрации изменения в БСП.
// Возвращает структуру с полями "Всего" и "Успешно", описывающей количества регистраций
//
Функция БСП_РегистрацияИзмененийОбъектаМетаданных(Узел, Описание, БезУчетаАвторегистрации)
	
	Результат = Новый Структура("Всего, Успешно", 0, 0);
	
	ЭлементСостава = Узел.Метаданные().Состав.Найти(Описание.Метаданные);
	Если ЭлементСостава=Неопределено Тогда
		// Вообще не регистрируется
		Возврат Результат;
	КонецЕсли;
	
	Если (Не БезУчетаАвторегистрации) И ЭлементСостава.Авторегистрация<>АвтоРегистрацияИзменений.Разрешить Тогда
		// Отсечение по авторегистрации
		Возврат Результат;
	КонецЕсли;
	
	ТекИмяТаблицы = Описание.ИмяТаблицы;
	Если Описание.ЭтоКонстанта Тогда
		ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийКонстанты(Узел, Описание) );
		Возврат Результат;
		
	ИначеЕсли Описание.ЭтоСсылка Тогда
		ПоляИзмерений = "Ссылка";
		
	ИначеЕсли Описание.ЭтоНабор Тогда
		ПоляИзмерений = "";
		Для Каждого Строка Из ИзмеренияНабораЗаписей(ТекИмяТаблицы, Истина) Цикл
			ПоляИзмерений = ПоляИзмерений + "," + Строка.Имя
		КонецЦикла;
		ПоляИзмерений = Сред(ПоляИзмерений, 2);
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	" + ?(ПустаяСтрока(ПоляИзмерений), "*", ПоляИзмерений) + "
		|ИЗ 
		|	" + ТекИмяТаблицы + "
		|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Описание.ЭтоНабор Тогда
			Данные = Новый Структура(ПоляИзмерений);
			ЗаполнитьЗначенияСвойств(Данные, Выборка);
			ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийНабора(Узел, Данные, Описание) );
		ИначеЕсли Описание.ЭтоСсылка Тогда
			ДобавитьРезультаты(Результат, БСП_РегистрацияИзмененийСсылки(Узел, Выборка.Ссылка, БезУчетаАвторегистрации) );
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ С ТИПАМИ ОБЪЕКТОВ 1С.
//

// Возвращает объект ОписаниеТипов, содержащий Тип Значения.
//
// Параметры:
//  ЗначениеТипа - строка с именем типа или значение типа Тип.
//  
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция вОписаниеТипа(ЗначениеТипа) Экспорт

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = Тип("Строка") Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли;
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // вОписаниеТипа()

// Возвращает имя базового типа по переданному значению объекта метаданных
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Справочники"
//
// Тип: Строка
//
Функция ИмяТипаСправочники() Экспорт
	
	Возврат "Справочник";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Документы"
//
// Тип: Строка
//
Функция ИмяТипаДокументы() Экспорт
	
	Возврат "Документ";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "ПланыОбмена"
//
// Тип: Строка
//
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат "ПланОбмена";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы видов характеристик"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат "ПланВидовХарактеристик";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Бизнес процессы"
//
// Тип: Строка
//
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцесс";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Задачи"
//
// Тип: Строка
//
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задача";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы видов расчета"
//
// Тип: Строка
//
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланВидовРасчета";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы счетов"
//
// Тип: Строка
//
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланСчетов";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Константы"
//
// Тип: Строка
//
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат "Константа";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Перечисление"
//
// Тип: Строка
//
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат "Перечисление";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Регистры сведений"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат "РегистрСведений";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Регистры накопления"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат "РегистрНакопления";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Регистры бухгалтерии"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат "РегистрБухгалтерии";
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Регистры расчета"
//
// Тип: Строка
//
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат "РегистрРасчета";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРИТЬ ПРИНАДЛЕЖНОСТЬ К ТИПУ.
//

// Определяет принадлежность объекта метаданных к общему типу "Справочник"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаСправочники();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Документ"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаДокументы();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПланыВидовХарактеристик();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План обмена"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоПланОбмена(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПланыОбмена();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Бизнес-процесс"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаБизнесПроцессы();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Задачи"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаЗадачи();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Планы видов расчета"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоПланВидовРасчета(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПланыВидовРасчета();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Планы счетов"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоПланСчетов(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПланыСчетов();
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Перечисление"
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого необходимо определить принадлежность к заданному типу
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект метаданных принадлежит заданному типу; Ложь – нет.
//
Функция ЭтоПеречисление(ОбъектМетаданных) Экспорт
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПеречисления();
	
КонецФункции

Функция ЭтоПримитивныйТип(хТип)

	Если хТип = Тип("Строка") ИЛИ хТип = Тип("Число") ИЛИ хТип = Тип("Дата") ИЛИ хТип = Тип("Булево") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с типами, объектами метаданных и их строковыми представлениями.

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Булево       - Истина, если тип значения ссылочный.
//
Функция ЗначениеСсылочногоТипа(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных
//
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РОДИТЕЛЬ ВЕРХНЕГО УРОВНЯ.
//

Функция РодительВерхнегоУровняПоГруппе(ЭлементСправочника, ИскомыйРодитель)
    Если НЕ ИскомыйРодитель = Неопределено И ЭлементСправочника = ИскомыйРодитель Тогда
        Возврат ЭлементСправочника;
	Иначе
        Возврат РодительВерхнегоУровня(ЭлементСправочника.Родитель);
	КонецЕсли;
КонецФункции

Функция РодительВерхнегоУровня(ЭлементСправочника)
    Если ЭлементСправочника.Родитель.Пустая() Тогда
        Возврат ЭлементСправочника;
    Иначе
        Возврат РодительВерхнегоУровня(ЭлементСправочника.Родитель);
    КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РЕКВИЗИТЫ ОБЪЕКТА/ФОРМЫ.
//

// Проверить на существование Реквизита в Объекте без учета стандартных реквизитов.
//
Функция ОбъектБДЕстьРеквизит(ИмяРеквизита, ОбъектДанных) Экспорт
	
	Если ОбъектДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "ОбменДанными" Тогда	// Особый реквизит, отсутствует в Метаданных Объекта, но есть во время исполнения программного кода, а также совсем отсутствует у ПлановОбмена.
		Попытка
			ПопробуемПолучить = ОбъектДанных.ОбменДанными;	// Не все объекты имеют свойство "ОбменДанными".
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	мдОбъектаБД = ОбъектДанных.Метаданные();
	
	Если мдОбъектаБД.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Попытка
			Для Каждого Реквизит ИЗ мдОбъектаБД.СтандартныеРеквизиты Цикл
				Если ВРег(Реквизит.Имя) = СокрЛП(ВРег(ИмяРеквизита)) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			Возврат Ложь;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

// Получить Реквизит ОбъектаБД по Имени.
//
Функция ОбъектБДПолучитьМДРеквизита(ИмяРеквизита, ОбъектБД) Экспорт
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизит");
	Результат.Вставить("Группа");
	
	Группа = "реквизиты";
	Реквизит = мдОбъектаБД.Реквизиты.Найти(ИмяРеквизита);
	
	Если Реквизит = Неопределено Тогда
		
		Группа = "стдартные";
		Попытка
			Реквизит = мдОбъектаБД.СтандартныеРеквизиты[ИмяРеквизита];
		Исключение
			Группа = Неопределено;
			Реквизит = Неопределено;
		КонецПопытки;

		Если Реквизит = Неопределено Тогда
			Группа = "адресации";
			Попытка
				Реквизит = мдОбъектаБД.РеквизитыАдресации[ИмяРеквизита];
			Исключение
				Группа = Неопределено;
				Реквизит = Неопределено;
			КонецПопытки;
		КонецЕсли;

		Если Реквизит = Неопределено Тогда
			Группа = "общие";
			Попытка
				Реквизит = Метаданные.ОбщиеРеквизиты[ИмяРеквизита];
			Исключение
				Группа = Неопределено;
				Реквизит = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если ЭтотОбъект.ТипОбъектаБД = ИмяТипаПланыСчетов() И Реквизит = Неопределено Тогда
			Группа = "пр.учета";
			Попытка
				Реквизит = мдОбъектаБД.ПризнакиУчета[ИмяРеквизита];
			Исключение
				Группа = Неопределено;
				Реквизит = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Группа = Группа;
	Результат.Реквизит = Реквизит;
	
	Возврат Результат;
	
КонецФункции 

// Возвращает Имя Реквизита Формы, связанного с ТЧ.
//
Функция ФормаПолучитьИмяРеквизитаТабличнаяЧасть(ТЧИмя) Экспорт
	
	Возврат "ТЧасть" + ТЧИмя;
	
КонецФункции

// Возвращает Имя Реквизита Формы, связанного с Регистром.
//
Функция ФормаПолучитьИмяРеквизитаРегистр(ТЧИмя) Экспорт
	
	Возврат "ТДвижений" + ТЧИмя;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ.
//

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",")
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Удаляет цифры из строки, оставляя символы.
//
Функция УдалитьЦифрыВСтроке(НомерСЦифрами)
	
	Массив = Новый Массив;
	Массив.Добавить("0");
	Массив.Добавить("1");
	Массив.Добавить("2");
	Массив.Добавить("3");
	Массив.Добавить("4");
	Массив.Добавить("5");
	Массив.Добавить("6");
	Массив.Добавить("7");
	Массив.Добавить("8");
	Массив.Добавить("9");
	
	НомерБезЦифр = НомерСЦифрами;
	Для нМ = 0 По 9 Цикл
		Пока Найти(НомерБезЦифр, Массив[нМ]) > 0 Цикл
			НомерБезЦифр = СтрЗаменить(НомерБезЦифр, Массив[нМ], "");
		КонецЦикла;
	КонецЦикла;
	НомерБезЦифр = СокрЛП(НомерБезЦифр);
	
	Возврат НомерБезЦифр;
	
КонецФункции

// Сервисное сообщение.
//
Процедура СообщитьОбОшибкеПриЗаписи(Информация)
	
	Причина = ?(Информация.Причина = Неопределено, Информация, Информация.Причина);
	Сообщить("МО: " + Причина.Описание, СтатусСообщения.Важное);
	
КонецПроцедуры

// Удаляет из строки указанное количество символов справа.
//
// Параметры:
//  Текст         - Строка - строка, в которой необходимо удалить последние символы;
//  ЧислоСимволов - Число  - количество удаляемых символов.
//
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)
	
	Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ИМПОРТ ДАННЫХ 8.Х".
//

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Процедуры и функции для работы с внешним соединением.

// Возвращает имя COM-класса для работы с 1С:Предприятием 8 через COM-соединение.
//
Функция ИмяCOMСоединителя() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = РазложитьСтрокуВМассивПодстрок(СистемнаяИнфо.ВерсияПриложения, ".");
	Возврат "v" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + ".COMConnector";
	
КонецФункции	

// Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель на это соединение
// 
// Параметры:
//  Параметры - Структура - содержит параметры для установки внешнего соединения с информационной базой.
//  Структура должна содержать следующие ключи (см. функция ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения):
//
//	  ВариантРаботыИнформационнойБазы             - (Число)  Вариант работы информационной базы: 0 – файловый; 1 – клиент-серверный
//	  КаталогИнформационнойБазы                   - (Строка) Каталог информационной базы для файлового режима работы
//	  ИмяСервера1СПредприятия                     - (Строка) Имя Сервера1С:Предприятия
//	  ИмяИнформационнойБазыНаСервере1СПредприятия - (Строка) Имя информационной базы на Сервере1С:Предприятия
//	  АутентификацияОперационнойСистемы           - (Булево) Признак аутентификации операционной системы при создании внешнего подключения к информационной базе
//	  ИмяПользователя                             - (Строка) Имя пользователя информационной базы
//	  ПарольПользователя                          - (Строка) Пароль пользователя информационной базы
// 
//  СтрокаСообщенияОбОшибке (необязательный) – Строка – если в процессе установки внешнего соединения возникает ошибка,
//                                                     то подробное описание ошибки помещается в этот параметр
//
// Возвращаемое значение:
//  Тип: COM-объект, Неопределенно.
//  в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//  в случае ошибки возвращается Неопределенно.
//
Функция УстановитьВнешнееСоединение(Параметры, СтрокаСообщенияОбОшибке = "", ОшибкаПодключенияКомпоненты = Ложь) Экспорт
	
	// Возвращаемое значение функции (COM-объект)
	Connection = Неопределено;
	
	Попытка
		//COMConnector = Новый COMObject(ИмяCOMСоединителя()); // "V82.COMConnector"
		COMConnector = Новый COMObject(Параметры.ИмяCOMСоединителя + ".COMConnector"); // "V82.COMConnector"
	Исключение
		СтрокаСообщенияОбОшибке = НСтр("ru = 'При установке внешнего соединения произошла ошибка: %1'");
		СтрокаСообщенияОбОшибке = ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОшибкаПодключенияКомпоненты = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	Если Параметры.ВариантРаботыИнформационнойБазы = "Файл" Тогда
		
		Если ПустаяСтрока(Параметры.КаталогИнформационнойБазы) Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Не задано месторасположение каталога информационной базы.'");
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Параметры.АутентификацияОперационнойСистемы Тогда
			
			//СтрокаСоединения = "File = ""&КаталогИнформационнойБазы""";
			СтрокаСоединения = "File = ""&КаталогИнформационнойБазы""; Usr = ""&ИмяПользователя""";
			
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&КаталогИнформационнойБазы", Параметры.КаталогИнформационнойБазы);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяПользователя",           Параметры.ИмяПользователя);
			
		Иначе
			
			СтрокаСоединения = "File = ""&КаталогИнформационнойБазы""; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
			
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&КаталогИнформационнойБазы", Параметры.КаталогИнформационнойБазы);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяПользователя",           Параметры.ИмяПользователя);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ПарольПользователя",        Параметры.ПарольПользователя);
			
		КонецЕсли;
		
	Иначе // Клиент-серверный вариант работы информационной базы
		
		Если    ПустаяСтрока(Параметры.ИмяСервера1СПредприятия)
			ИЛИ ПустаяСтрока(Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Не заданы обязательные параметры подключения: ""Имя сервера""; ""Имя информационной базы на сервере"".'");
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Параметры.АутентификацияОперационнойСистемы Тогда
			
			СтрокаСоединения = "Srvr = &ИмяСервера1СПредприятия; Ref = &ИмяИнформационнойБазыНаСервере1СПредприятия";
			
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяСервера1СПредприятия",                     Параметры.ИмяСервера1СПредприятия);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяИнформационнойБазыНаСервере1СПредприятия", Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия);
			
		Иначе
			
			СтрокаСоединения = "Srvr = &ИмяСервера1СПредприятия; Ref = &ИмяИнформационнойБазыНаСервере1СПредприятия; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
			
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяСервера1СПредприятия",                     Параметры.ИмяСервера1СПредприятия);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяИнформационнойБазыНаСервере1СПредприятия", Параметры.ИмяИнформационнойБазыНаСервере1СПредприятия);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ИмяПользователя",                             Параметры.ИмяПользователя);
			СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "&ПарольПользователя",                          Параметры.ПарольПользователя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Connection = COMConnector.Connect(СтрокаСоединения);
		ConnectionМетаданные = Connection.Метаданные;
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'При установке внешнего соединения произошла ошибка: %1'");
		СтрокаСообщенияОбОшибке = ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ПодробноеПредставлениеОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Connection;
	
КонецФункции

Функция ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Экспорт
	
	СтрокаСообщенияОбОшибке = "";
	ОшибкаПодключенияКомпоненты = Ложь;
	УстановитьВнешнееСоединение(СтруктураПараметровСоединения, СтрокаСообщенияОбОшибке, ОшибкаПодключенияКомпоненты);
	
	Если Connection = Неопределено Тогда
		ОшибкаПодключенияКомпоненты = Истина;
	КонецЕсли;
	
	Если НЕ Connection = Неопределено И НЕ ОшибкаПодключенияКомпоненты Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ИмпортКонфигурацияИсточникаНаСервере(СтруктураПараметровСоединения) Экспорт
	
	Если ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Попытка
			Возврат ConnectionМетаданные.Name;
		Исключение
		    Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ИмпортВерсияИсточникаНаСервере(СтруктураПараметровСоединения) Экспорт
	
	Если ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Попытка
			Возврат ConnectionМетаданные.Version;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ИмпортОтключитьсяОтВнешнейБДНаСервере() Экспорт
	
	ConnectionМетаданные	= Неопределено;
	Connection		= Неопределено;
	COMConnector	= Неопределено;
	
	Возврат Ложь;

КонецФункции

Функция ConnectionGetGUID(Ссылка) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор(Connection.String(Ссылка.УникальныйИдентификатор()));
	
КонецФункции

Функция ConnectionGetReference(МенеджерОбъекта, GUID) Экспорт

	Возврат МенеджерОбъекта.ПолучитьСсылку(Connection.NewObject("УникальныйИдентификатор", СокрЛП(GUID)));
	
КонецФункции

// Аналог ОбъектБДПолучитьТипОбъекта(ОбъектБД).
//
Функция ConnectionПолучитьТипОбъекта(Знач ЗначениеИсследуемого)
	
	ConnectionМетаданные = Connection.Метаданные;
	
	Попытка
		мдЗначения = ЗначениеИсследуемого.Метаданные();
	Исключение
		//// Например:
		//// Источник: "СхемаКомпоновкиДанных" тип = "ХранилищеЗначения".
		//// Сюда попадает, если в Приемнике: "СхемаКомпоновкиДанных" тип = "Строка".
		////Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"' Значение, для которого не получены Метаданные: " + ЗначениеИсследуемого), СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецПопытки;
	
	Если 		ConnectionМетаданные.Константы.Содержит(мдЗначения) Тогда
		Возврат "Константы";
	ИначеЕсли 	ConnectionМетаданные.Перечисления.Содержит(мдЗначения) Тогда
		Возврат "Перечисления";
	ИначеЕсли 	ConnectionМетаданные.Справочники.Содержит(мдЗначения) Тогда
		Возврат "Справочники";
	ИначеЕсли 	ConnectionМетаданные.Документы.Содержит(мдЗначения) Тогда
		Возврат "Документы";
	ИначеЕсли 	ConnectionМетаданные.ПланыВидовХарактеристик.Содержит(мдЗначения) Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли 	ConnectionМетаданные.БизнесПроцессы.Содержит(мдЗначения) Тогда
		Возврат "БизнесПроцессы";
	ИначеЕсли 	ConnectionМетаданные.Задачи.Содержит(мдЗначения) Тогда
		Возврат "Задачи";
	ИначеЕсли 	ConnectionМетаданные.ПланыВидовРасчета.Содержит(мдЗначения) Тогда
		Возврат "ПланыВидовРасчета";
	ИначеЕсли 	ConnectionМетаданные.ПланыСчетов.Содержит(мдЗначения) Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли 	ConnectionМетаданные.ПланыОбмена.Содержит(мдЗначения) Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли 	Connection.XMLТипЗнч(ЗначениеИсследуемого).TypeName = "ValueStorage" Тогда
		Возврат "ХранилищеЗначения";
	ИначеЕсли 	Connection.XMLТипЗнч(ЗначениеИсследуемого).TypeName = "UUID" Тогда
		Возврат "УникальныйИдентификатор";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Начальные параметры.

Функция ИмпортПолучитьНачальныеПараметрыИмпортаНаСервере(СтруктураПараметровСоединения) Экспорт
	
	СтруктураНачальныхПараметровИсточника = Новый Структура;
	
	// Справочники.
	СтруктураНачальныхПараметровИсточника.Вставить("ЕстьСправочникОрганизации"	, Ложь);					// Конфигурация.
	СтруктураНачальныхПараметровИсточника.Вставить("СписокОрганизаций"			, Новый СписокЗначений);	// Конфигурация.
	
	Если НЕ ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Возврат СтруктураНачальныхПараметровИсточника;
	КонецЕсли;
	
	// Запорс к Источнику.
	Попытка
		МетаданныеИсточника = Connection.Метаданные;
	Исключение
		Возврат СтруктураНачальныхПараметровИсточника;
	КонецПопытки;
	
	СтруктураНачальныхПараметровИсточника.ЕстьСправочникОрганизации = НЕ МетаданныеИсточника.Справочники.Найти("Организации") = Неопределено;
	
	Если СтруктураНачальныхПараметровИсточника.ЕстьСправочникОрганизации Тогда
		
		// ПРИ ЗАПРОСЕ К ВНЕШНЕЙ БАЗЕ ПОЛУЧАЕМ COMОбъект-ы.
		
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Connection.NewObject("Запрос");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления <> &Истина
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование";
		
		Запрос.УстановитьПараметр("Истина", Истина);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураНачальныхПараметровИсточника.СписокОрганизаций.Добавить(ВыборкаДетальныеЗаписи.Ссылка.ИНН, ВыборкаДетальныеЗаписи.Ссылка.Description);
			
		КонецЦикла;
		
		//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		
	КонецЕсли;
	
	Возврат СтруктураНачальныхПараметровИсточника;
	
КонецФункции

Функция ИмпортСформироватьТаблицуМетаданныеИсточникаПриемника(СтруктураПараметровСоединения, ИмпортТМетаданныеИсточникаПриемника, ИмпортТипОбъектаБД) Экспорт
	
	Если НЕ ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Возврат ИмпортТМетаданныеИсточникаПриемника;
	КонецЕсли;
	
	// ОСНОВНЫЕ ИМПОРТИРУЕМЫЕ ОБЪЕКТЫ. ПО ТЕКУЩЕЙ ОРГАНИЗАЦИИ.
	
	Если ИмпортТипОбъектаБД = ИмяТипаСправочники() Тогда
		МетаданныеОбъектовПриемника = Метаданные.Справочники;
	ИначеЕсли ИмпортТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		МетаданныеОбъектовПриемника = Метаданные.ПланыВидовХарактеристик;
	ИначеЕсли ИмпортТипОбъектаБД = ИмяТипаДокументы() Тогда
		МетаданныеОбъектовПриемника = Метаданные.Документы;
	Иначе
		Возврат ИмпортТМетаданныеИсточникаПриемника;
	КонецЕсли;
	
	// ТАБЛИЦА СОПОСТАВЛЕНИЙ ОБЪЕКТОВ ИСТОЧНИКА И ПРИЕМНИКА.
	
	ИмпортТМетаданныеИсточникаПриемника.Строки.Очистить();
	
	// Импортируемые.
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "Справочники"				, "Справочник"				, "РежимПросмотраСписка");
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "Документы"					, "Документ"				, "РежимПросмотраСписка");
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "ПланыВидовХарактеристик"	, "ПланВидовХарактеристик"	, "РежимПросмотраСписка");
	
	//
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "Перечисления"				, "Перечисление"			, "РежимПросмотраСписка");
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "ПланыСчетов"				, "ПланСчетов"				, "РежимПросмотраСписка");
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "ПланыВидовРасчета"			, "ПланВидовРасчета"		, "РежимПросмотраСписка");
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "БизнесПроцессы"				, "БизнесПроцесс"			, "РежимПросмотраСписка");
	ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, "Задачи"						, "Задача"					, "РежимПросмотраСписка");
	
	Возврат ИмпортТМетаданныеИсточникаПриемника;

КонецФункции

Процедура ИмпортДобавитьТипОбъектаВДеревоМетаданных(ИмпортТМетаданныеИсточникаПриемника, ТипОбъекта, ИмяКартинкиТипаОбъекта, КартинкаРеквизита)
	Перем МетаданныеИсточника, МетаданныеОбъектаИсточника, СвойстваИсточника;
	Перем НайденыеОбъекты;
	
	НайденыеОбъекты = Новый Массив;
	
	МетаданныеИсточника = Connection.Метаданные;
	Для Каждого МетаданныеОбъектаИсточника ИЗ МетаданныеИсточника[ТипОбъекта] Цикл
		
		ЭлементСтволаДерева = ИмпортТМетаданныеИсточникаПриемника.Строки.Добавить();
		
		Попытка
			ЭлементСтволаДерева.Картинка = БиблиотекаКартинок[ИмяКартинкиТипаОбъекта];
		Исключение
		КонецПопытки;
		
		ЭлементСтволаДерева.КоллекцияИсточника	 	= ТипОбъекта;
		ЭлементСтволаДерева.ИмяВИсточнике	 		= МетаданныеОбъектаИсточника.Имя;
		ЭлементСтволаДерева.ТипРеквизитаИсточника 	= МетаданныеОбъектаИсточника.ПолноеИмя();
		
		Если ЭлементСтволаДерева.КоллекцияИсточника	= "Справочники" ИЛИ ЭлементСтволаДерева.КоллекцияИсточника	 = "ПланыВидовХарактеристик" Тогда
			Если МетаданныеОбъектаИсточника.Иерархический Тогда
				Если ЭлементСтволаДерева.КоллекцияИсточника	= "Справочники" Тогда
					СвойстваИсточника 				= Новый Структура;
					СвойстваИсточника.Вставить("Иерархический", Истина);
					СвойстваИсточника.Вставить("ВидИерархии", МетаданныеОбъектаИсточника.HierarchyType);
					СвойстваИсточника.Вставить("ИерархияГруппИЭлементов", МетаданныеОбъектаИсточника.HierarchyType = МетаданныеИсточника.ObjectProperties.HierarchyType.HierarchyFoldersAndItems);
					ЭлементСтволаДерева.Свойства	= СвойстваИсточника;
				Иначе
					СвойстваИсточника 				= Новый Структура;
					СвойстваИсточника.Вставить("Иерархический", Истина);
					СвойстваИсточника.Вставить("ВидИерархии", Неопределено);
					СвойстваИсточника.Вставить("ИерархияГруппИЭлементов", Неопределено);
					ЭлементСтволаДерева.Свойства	= СвойстваИсточника;
				КонецЕсли;
			Иначе
				ЭлементСтволаДерева.Свойства		= Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МетаданныеОбъектаПриемника = Метаданные[ТипОбъекта].Найти(МетаданныеОбъектаИсточника.Имя);
		Если НЕ МетаданныеОбъектаПриемника = Неопределено Тогда
			ЭлементСтволаДерева.КоллекцияПриемника		= ТипОбъекта;
			ЭлементСтволаДерева.ИмяВПриемнике		 	= МетаданныеОбъектаИсточника.Имя;
			ЭлементСтволаДерева.ТипРеквизитаПриемника	= МетаданныеОбъектаИсточника.ПолноеИмя();
			
			НайденыеОбъекты.Добавить(МетаданныеОбъектаИсточника.Имя);
			
		КонецЕсли;
		
		Попытка
			Если МетаданныеОбъектаИсточника.Реквизиты.Count() = 0 Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		    Продолжить;
		КонецПопытки;
		
		НайденныеРеквизиты = Новый Массив;
		
		Для Каждого РеквизитИсточника ИЗ МетаданныеОбъектаИсточника.Реквизиты Цикл
			
			ЭлементВетвьДерева = ЭлементСтволаДерева.Строки.Добавить();
			
			Попытка
				ЭлементВетвьДерева.Картинка = БиблиотекаКартинок[КартинкаРеквизита];
			Исключение
			КонецПопытки;
			
			ЭлементВетвьДерева.КоллекцияИсточника 		= "Реквизиты";
			ЭлементВетвьДерева.ИмяВИсточнике 			= РеквизитИсточника.Имя;
			ЭлементВетвьДерева.ТипРеквизитаИсточника	= РеквизитИсточника.Тип;
			
			ЭлементВетвьДерева.КоллекцияПриемника 		= "Реквизиты";
			
			Если НЕ Метаданные[ТипОбъекта].Найти(МетаданныеОбъектаИсточника.Имя) = Неопределено Тогда
				
				Если НЕ Метаданные[ТипОбъекта][МетаданныеОбъектаИсточника.Имя].Реквизиты.Найти(РеквизитИсточника.Имя) = Неопределено Тогда
					ЭлементВетвьДерева.ИмяВПриемнике		= РеквизитИсточника.Имя;
					ЭлементВетвьДерева.ТипРеквизитаПриемника= РеквизитИсточника.Тип;
					
					НайденныеРеквизиты.Добавить(РеквизитИсточника.Имя);
				КонецЕсли;
				
			КонецЕсли
			
		КонецЦикла;
		
		Если НЕ Метаданные[ТипОбъекта].Найти(МетаданныеОбъектаИсточника.Имя) = Неопределено Тогда
			
			Для Каждого РеквизитПриемника ИЗ Метаданные[ТипОбъекта][МетаданныеОбъектаИсточника.Имя].Реквизиты Цикл
				
				Если НЕ НайденныеРеквизиты.Найти(РеквизитПриемника.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			
				ЭлементВетвьДерева = ЭлементСтволаДерева.Строки.Добавить();
			
				Попытка
					ЭлементВетвьДерева.Картинка = БиблиотекаКартинок[КартинкаРеквизита];
				Исключение
				КонецПопытки;
				
				ЭлементВетвьДерева.КоллекцияИсточника 	= "Реквизиты";
				
				ЭлементВетвьДерева.КоллекцияПриемника 	= "Реквизиты";
				ЭлементВетвьДерева.ИмяВПриемнике		= РеквизитПриемника.Имя;
				ЭлементВетвьДерева.ТипРеквизитаПриемника= РеквизитПриемника.Тип;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаданыеОбъектаПриемника ИЗ Метаданные[ТипОбъекта] Цикл
		
		Если НЕ НайденыеОбъекты.Найти(МетаданыеОбъектаПриемника.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСтволаДерева = ИмпортТМетаданныеИсточникаПриемника.Строки.Добавить();
		
		Попытка
			ЭлементСтволаДерева.Картинка = БиблиотекаКартинок[ИмяКартинкиТипаОбъекта];
		Исключение
		КонецПопытки;
		
		ЭлементСтволаДерева.КоллекцияИсточника 		= ТипОбъекта;
		
		ЭлементСтволаДерева.КоллекцияПриемника 		= ТипОбъекта;
		ЭлементСтволаДерева.ИмяВПриемнике			= МетаданыеОбъектаПриемника.Имя;
		ЭлементСтволаДерева.ТипРеквизитаПриемника	= МетаданыеОбъектаПриемника.ПолноеИмя();
		
		Попытка
			Если МетаданыеОбъектаПриемника.Реквизиты.Count() = 0 Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		    Продолжить;
		КонецПопытки;
		
		Для Каждого РеквизитПриемника ИЗ МетаданыеОбъектаПриемника.Реквизиты Цикл
			
			ЭлементВетвьДерева = ЭлементСтволаДерева.Строки.Добавить();
			
			Попытка
				ЭлементВетвьДерева.Картинка = БиблиотекаКартинок[КартинкаРеквизита];
			Исключение
			КонецПопытки;
			
			ЭлементВетвьДерева.КоллекцияИсточника 	= "Реквизиты";
			
			ЭлементВетвьДерева.КоллекцияПриемника 	= "Реквизиты";
			ЭлементВетвьДерева.ИмяВПриемнике		= РеквизитПриемника.Имя;
			ЭлементВетвьДерева.ТипРеквизитаПриемника= РеквизитПриемника.Тип;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмпортПолучитьТаблицуГруппСправочникаИлиПВХ(СтруктураПараметровСоединения, КоллекцияИсточника, ИмяОбъектаИсточника) Экспорт
	Перем МетаданныеИсточника, МетаданныеОбъектаИсточника, ПустаяСсылка, ИерархияГруппИЭлементов, ТипРеквизитаЭтоГруппа;
	Перем Запрос, Результат, ВыборкаВИсточникеГрупп1, ВыборкаВИсточникеГрупп2, ВыборкаВИсточникеГрупп3, ОбходРезультатаЗапроса;
	Перем ТаблицаГрупп, СтрокаТГ, Ссылка;
	
	Если НЕ ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Возврат ИмпортТМетаданныеИсточникаПриемника;
	КонецЕсли;
	
	МетаданныеИсточника = Connection.Метаданные;	// Справочники.ВариантыОтчетов
	
	ПустаяСсылка = Неопределено;
	ИерархияГруппИЭлементов = Неопределено;
	Если КоллекцияИсточника = ИмяТипаСправочники() Тогда
		МетаданныеОбъектаИсточника = МетаданныеИсточника.Справочники[ИмяОбъектаИсточника];
		ПустаяСсылка = Connection.Справочники[ИмяОбъектаИсточника].ПустаяСсылка();
		ИерархияГруппИЭлементов = МетаданныеОбъектаИсточника.HierarchyType = МетаданныеИсточника.ObjectProperties.HierarchyType.HierarchyFoldersAndItems;
	ИначеЕсли КоллекцияИсточника = ИмяТипаПланыВидовХарактеристик() Тогда
		МетаданныеОбъектаИсточника = МетаданныеИсточника.ПланыВидовХарактеристик[ИмяОбъектаИсточника];
		ПустаяСсылка = Connection.ПланыВидовХарактеристик[ИмяОбъектаИсточника].ПустаяСсылка();
		ИерархияГруппИЭлементов = МетаданныеОбъектаИсточника.Hierarchical;
	КонецЕсли;
	
	Запрос = Connection.NewObject("Запрос");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + КоллекцияИсточника + ".Ссылка КАК Ссылка
	|ИЗ
	|	" + КоллекцияИсточника + "." + ИмяОбъектаИсточника + " КАК " + КоллекцияИсточника + "
	|ГДЕ
	|	&УсловиеПоГруппе
	|	И " + КоллекцияИсточника + ".ПометкаУдаления <> &Истина
//	|	И " + КоллекцияИсточника + ".Родитель = ЗНАЧЕНИЕ(" + КоллекцияИсточника + "." + ИмяОбъектаИсточника + ".ПустаяСсылка)	// Только 1-го уровня.
	|
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ИерархияГруппИЭлементов И НЕ ПустаяСсылка = Неопределено Тогда
		ТипРеквизитаЭтоГруппа = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(ПустаяСсылка, "СтандартныеРеквизиты", "ЭтоГруппа");
		Если НЕ ТипРеквизитаЭтоГруппа = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппе", "" + КоллекцияИсточника + ".ЭтоГруппа = &Истина");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппе", "ИСТИНА");
		КонецЕсли;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппе", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Истина", Истина);
	
	Результат = Запрос.Выполнить();
	
	ОбходРезультатаЗапроса = Connection.QueryResultIteration.ByGroupsWithHierarchy;
	ВыборкаВИсточникеГрупп1 = Результат.Выбрать(ОбходРезультатаЗапроса);
	
	ТаблицаГрупп = Новый ТаблицаЗначений;
	ТаблицаГрупп.Колонки.Добавить("ПолныйКод");
	ТаблицаГрупп.Колонки.Добавить("Наименование");
	Пока ВыборкаВИсточникеГрупп1.Следующий() Цикл
		Ссылка = ВыборкаВИсточникеГрупп1.Ссылка;
		ИмпортЗаполнитьСтрокуТаблицыГруппСправочникаИлиПВХ(ТаблицаГрупп.Добавить(), МетаданныеОбъектаИсточника, КоллекцияИсточника, Ссылка);
		
		ВыборкаВИсточникеГрупп2 = ВыборкаВИсточникеГрупп1.Выбрать(ОбходРезультатаЗапроса);
		Пока ВыборкаВИсточникеГрупп2.Следующий() Цикл 
			Ссылка = ВыборкаВИсточникеГрупп2.Ссылка;
			ИмпортЗаполнитьСтрокуТаблицыГруппСправочникаИлиПВХ(ТаблицаГрупп.Добавить(), МетаданныеОбъектаИсточника, КоллекцияИсточника, Ссылка);
			
			ВыборкаВИсточникеГрупп3 = ВыборкаВИсточникеГрупп2.Выбрать(ОбходРезультатаЗапроса);
			Пока ВыборкаВИсточникеГрупп3.Следующий() Цикл 
				Ссылка = ВыборкаВИсточникеГрупп3.Ссылка;
				ИмпортЗаполнитьСтрокуТаблицыГруппСправочникаИлиПВХ(ТаблицаГрупп.Добавить(), МетаданныеОбъектаИсточника, КоллекцияИсточника, Ссылка);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаГрупп;
	
КонецФункции

Процедура ИмпортЗаполнитьСтрокуТаблицыГруппСправочникаИлиПВХ(СтрокаТГ, МетаданныеОбъектаИсточника, КоллекцияИсточника, Ссылка)
	Если МетаданныеОбъектаИсточника.CodeLength > 0 Тогда
		Если КоллекцияИсточника = ИмяТипаСправочники() Тогда
			СтрокаТГ.ПолныйКод = Ссылка.ПолныйКод();
		ИначеЕсли КоллекцияИсточника = ИмяТипаПланыВидовХарактеристик() Тогда
			СтрокаТГ.ПолныйКод = Ссылка.Код;
		КонецЕсли;
	Иначе
		Если КоллекцияИсточника = ИмяТипаСправочники() Тогда
			СтрокаТГ.ПолныйКод = Ссылка.Наименование;
		ИначеЕсли КоллекцияИсточника = ИмяТипаПланыВидовХарактеристик() Тогда
			СтрокаТГ.ПолныйКод = Ссылка.Наименование;
		КонецЕсли;
	КонецЕсли;
	СтрокаТГ.Наименование = Ссылка.Наименование;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Процедуры и функции СОПОСТАВЛЕНИЯ данных Источника и Приемника.

Функция ИмпортСопоставитьИЗаполнитьТаблицуНаСервере(СтруктураПараметровСоединения, СтруктураПараметровСопоставления, ТаблицаИмпорта) Экспорт
	
	СтрокиМетаданных = ЭтотОбъект.ИмпортТМетаданныеИсточникаПриемника.Строки;
		
	ТипОсновногоОбъекта = СтруктураПараметровСопоставления.ИмпортТипОсновногоОбъекта;

	ДатаНач = СтруктураПараметровСопоставления.ИмпортДатаНач;
	ДатаКон = СтруктураПараметровСопоставления.ИмпортДатаКон;
	
	НомерОрганизацииИсточника = СтруктураПараметровСопоставления.ИмпортНомерОрганизацииИсточника;
	ИмпортОрганизацияИсточник = СтруктураПараметровСопоставления.ИмпортОрганизацияИсточник;	// Ссылка / Неопределено.
	
	ТаблицаИмпорта.Очистить();
	
	Если НЕ ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Возврат ТаблицаИмпорта;
	КонецЕсли;
	
	// Повторный запрос по Организации и Группам.
	// ПолучитьСсылки и УникальныеИдентификаторы.
	
	СтруктураНачальныхПараметровИсточника = ИмпортПолучитьНачальныеПараметрыИмпортаНаСервере(СтруктураПараметровСоединения);
	
	ИмпортСписокОрганизацийИсточника 	= СтруктураНачальныхПараметровИсточника.СписокОрганизаций;
	
	ОрганизацияИсточник = Неопределено;
	Если ИмпортСписокОрганизацийИсточника.Количество() > 0 И НЕ НомерОрганизацииИсточника = -1 Тогда
		ОрганизацияИсточник = ИмпортСписокОрганизацийИсточника.Получить(НомерОрганизацииИсточника).Значение;
	КонецЕсли;
	
	// Заполнение Данных Источника.
	
	Для Каждого ЭлементСписка ИЗ СтрокиМетаданных Цикл
		
		Если НЕ ЭлементСписка.Загрузить Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Метаданные.Справочники.Найти(ЭлементСписка.ИмяВПриемнике) = Неопределено Тогда
			
			// Для дальнейшей проработки.
			// Имена объектов в общем случае различаются.
			ИмяОбъектаИсточника = ЭлементСписка.ИмяВИсточнике;
			ИмяОбъектаПриемника = ЭлементСписка.ИмяВПриемнике;
			
			// БАЗА-ИСТОЧНИК.
			
			Если Connection.Метаданные.Справочники.Найти(ИмяОбъектаИсточника) = Неопределено Тогда
				Если ЭтотОбъект.ПоказыватьСообщения Тогда
					Сообщить("В конфигурации Источника Справочника типа """ + ИмяОбъектаИсточника + """ не существует.");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Источник_Метаданные				= Connection.Метаданные.Справочники[ИмяОбъектаИсточника];
			Источник_РеквизитыШапки			= Источник_Метаданные.Реквизиты;
			
			Если Источник_Метаданные.CodeLength > 0 Тогда
				ГруппаОбъектовИст = ?(ЗначениеЗаполнено(ЭлементСписка.ЗначениеОтбора), Connection.Справочники[ИмяОбъектаИсточника].НайтиПоКоду(ЭлементСписка.ЗначениеОтбора, Истина), Неопределено);
			Иначе
				ГруппаОбъектовИст = ?(ЗначениеЗаполнено(ЭлементСписка.ЗначениеОтбора), Connection.Справочники[ИмяОбъектаИсточника].НайтиПоНаименованию(ЭлементСписка.ЗначениеОтбора, Истина), Неопределено);
			КонецЕсли;
			
			Источник_ТаблицаСправочника		= ИмпортЗапросКСправочникуИсточнику(ИмяОбъектаИсточника, ГруппаОбъектовИст, ДатаНач, ДатаКон);
			
			// БАЗА-ПРИЕМНИК.
			Приемник_Метаданные				= Метаданные.Справочники[ИмяОбъектаПриемника];
			
			Приемник_РеквизитыШапки			= Приемник_Метаданные.Реквизиты;
			
			// Проверка списков реквизитов документов по именам.
			Источник_КоличествоРеквизитов 	= 0;
			Приемник_КоличествоРеквизитов 	= Приемник_РеквизитыШапки.Количество();
			
			СтруктураРезультатовСравнения	= ИмпортЭкспрессПроверкаРеквизитовШапкиИсточникаИПриемника(Источник_РеквизитыШапки, Приемник_РеквизитыШапки, Источник_КоличествоРеквизитов);
			
			Для Каждого КОМСправочникИсточник ИЗ Источник_ТаблицаСправочника Цикл
				
				// Сопоставить Группы/Элементы Источника и Приемника.
				СправочникИсточник			= КОМСправочникИсточник.Ссылка;
				СтруктураСправочник 		= ИмпортСопоставитьСсылкеСправочникаИсточникаСсылкуСправочникаПриемника(СправочникИсточник, ИмяОбъектаПриемника, ДатаНач, ДатаКон);	// СправочникИсточник - COMОбъект.
				
				НоваяСтрока = ТаблицаИмпорта.Добавить();
				НоваяСтрока.Комментарий 	= ?(ЭтотОбъект.ИмпортАрхивнаяКопияБазы, "Архивная БД:", "Сторонняя БД:");
				НоваяСтрока.НомерСтроки 	= ТаблицаИмпорта.Количество();
				НоваяСтрока.ТипОбъекта 		= ТипОсновногоОбъекта;
				
				НоваяСтрока.ИмяОбъектаИсточника	= ИмяОбъектаИсточника;
				
				НоваяСтрока.ИмяОбъектаПриемника	= ИмяОбъектаПриемника;
				
				// ИСТОЧНИК.
				
				НоваяСтрока.ОбъектИсточник 	= "" + ?(СправочникИсточник.Predefined, "Предопределенный " , "") + ?(СправочникИсточник.IsFolder, "Группа", "Элемент") + ":" + СокрЛП(СправочникИсточник.Code) + "_" + СокрЛП(СправочникИсточник.Description);
				
				НоваяСтрока.GUIDИсточника 	= СтруктураСправочник.GUIDИсточника;
				
				НоваяСтрока.ДатаИсточника 	= GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(НоваяСтрока.GUIDИсточника, СправочникИсточник.Predefined);	// Для COMОбъекта.
				
				Если НЕ Источник_Метаданные.ДлинаКода = 0 Тогда
					НоваяСтрока.НомерКодИсточника = СправочникИсточник.Code;
				КонецЕсли;
				
				Если НЕ Источник_Метаданные.ДлинаНаименования = 0 Тогда
					НоваяСтрока.НаименованиеДатаИсточника = СправочникИсточник.Description;
				КонецЕсли;
				
				НоваяСтрока.РодительИсточника 		= Неопределено;
				НоваяСтрока.РодительИсточникаGUID 	= Неопределено;
				Если Источник_Метаданные.Иерархический Тогда
					НоваяСтрока.РодительИсточника 		= СправочникИсточник.Parent.Description;
					НоваяСтрока.РодительИсточникаGUID 	= ConnectionGetGUID(СправочникИсточник.Parent);
				КонецЕсли;
				
				НоваяСтрока.ВладелецИсточника 		= Неопределено;
				НоваяСтрока.ВладелецИсточникаGUID 	= Неопределено;
				Если Источник_Метаданные.Владельцы.Количество() > 0 Тогда
					НоваяСтрока.ВладелецИсточника 		= СправочникИсточник.Owner.Description;		// Строка.
					НоваяСтрока.ВладелецИсточникаGUID 	= ConnectionGetGUID(СправочникИсточник.Owner);
				КонецЕсли;
				
				Попытка
					НоваяСтрока.ОписаниеИсточника = СправочникИсточник.Описание;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОписаниеИсточника) Тогда
					Попытка
						НоваяСтрока.ОписаниеИсточника = СправочникИсточник.Комментарий;
					Исключение
						//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
				
				// ПРИЕМНИК.
				
				НоваяСтрока.ОбъектПриемник = СтруктураСправочник.ОбъектПриемник;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОбъектПриемник) Тогда
					НоваяСтрока.Загрузить = Истина;
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока.GUIDПриемника = СтруктураСправочник.GUIDПриемника;
				
				НоваяСтрока.ПриемникНайденПО 		= СтруктураСправочник.ПриемникНайденПО;
				НоваяСтрока.ПриемникДругойПериод 	= СтруктураСправочник.ПриемникДругойПериод;
				
				НоваяСтрока.Загрузить = Истина;                                         // Только новые.
				Если НоваяСтрока.GUIDИсточника = НоваяСтрока.GUIDПриемника Тогда		// Существующие.
					НоваяСтрока.Загрузить = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПриемникНайденПО = "" Тогда
					НоваяСтрока.Загрузить = Ложь;
				КонецЕсли;
				
				Если СтруктураСправочник.ПриемникДругойПериод Тогда
					НоваяСтрока.Загрузить = Ложь;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ВНИМАНИЕ! Объект-Приемник находится в другом периоде./"
				КонецЕсли;
				
				НоваяСтрока.ДатаПриемника = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(НоваяСтрока.ОбъектПриемник);
				
				НоваяСтрока.ПриемникПредопределенный = НоваяСтрока.ОбъектПриемник.Предопределенный;
				НоваяСтрока.ПриемникПомеченНаУдаление = НоваяСтрока.ОбъектПриемник.ПометкаУдаления;
				
				НоваяСтрока.РодительПриемника 		= Неопределено;
				НоваяСтрока.РодительПриемникаGUID 	= Неопределено;
				Если Приемник_Метаданные.Иерархический Тогда
					НоваяСтрока.РодительПриемника 		= НоваяСтрока.ОбъектПриемник.Родитель;
					НоваяСтрока.РодительПриемникаGUID 	= НоваяСтрока.РодительПриемника.УникальныйИдентификатор();
				КонецЕсли;
				
				НоваяСтрока.ВладелецПриемника 		= Неопределено;
				НоваяСтрока.ВладелецПриемникаGUID 	= Неопределено;
				Если Приемник_Метаданные.Владельцы.Количество() > 0 Тогда
					НоваяСтрока.ВладелецПриемника 		= НоваяСтрока.ОбъектПриемник.Владелец;						// Ссылка.
					НоваяСтрока.ВладелецПриемникаGUID 	= НоваяСтрока.ВладелецПриемника.УникальныйИдентификатор();
				КонецЕсли;
				
				Попытка
					НоваяСтрока.ОписаниеПриемника = НоваяСтрока.ОбъектПриемник.Описание;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОписаниеПриемника) Тогда
					Попытка
						НоваяСтрока.ОписаниеПриемника = НоваяСтрока.ОбъектПриемник.Комментарий;
					Исключение
						//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
				
				// ОБЩЕЕ.

				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Реквизиты шапки Источника (" + СтруктураРезультатовСравнения.Источник_КоличествоРеквизитов + ?(НЕ СтруктураРезультатовСравнения.ЕстьРасхождение, ") нашли адресат в Приемнике (", ") не совпадают с реквизитами Приемника (") + Приемник_КоличествоРеквизитов + ")./";
				
				Если ЗначениеЗаполнено(СтруктураРезультатовСравнения.НеНайденыРеквизиты) Тогда
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Не найдены реквизиты: " + СтруктураРезультатовСравнения.НеНайденыРеквизиты + "/";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаИсточника) ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаПриемника) Тогда
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Время создания неопределено: Предопределенный или был таким или .../";
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли НЕ МетаДанные.ПланыВидовХарактеристик.Найти(ЭлементСписка.ИмяВПриемнике) = Неопределено Тогда
			
			// Для дальнейшей проработки.
			// Имена объектов в общем случае различаются.
			ИмяОбъектаИсточника = ЭлементСписка.ИмяВИсточнике;
			ИмяОбъектаПриемника = ЭлементСписка.ИмяВПриемнике;
			
			// БАЗА-ИСТОЧНИК.
			
			Если Connection.Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъектаИсточника) = Неопределено Тогда
				Если ЭтотОбъект.ПоказыватьСообщения Тогда
					Сообщить("В конфигурации Источника ПВХ типа """ + ИмяОбъектаИсточника + """ не существует.");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Источник_Метаданные				= Connection.Метаданные.ПланыВидовХарактеристик[ИмяОбъектаИсточника];
			Источник_РеквизитыШапки			= Источник_Метаданные.Реквизиты;
			
			Если Источник_Метаданные.CodeLength > 0 Тогда
				ГруппаОбъектовИст = ?(ЗначениеЗаполнено(ЭлементСписка.ЗначениеОтбора), Connection.ПланыВидовХарактеристик[ИмяОбъектаИсточника].НайтиПоКоду(ЭлементСписка.ЗначениеОтбора), Неопределено);
			Иначе
				ГруппаОбъектовИст = ?(ЗначениеЗаполнено(ЭлементСписка.ЗначениеОтбора), Connection.ПланыВидовХарактеристик[ИмяОбъектаИсточника].НайтиПоНаименованию(ЭлементСписка.ЗначениеОтбора), Неопределено);
			КонецЕсли;
			
			Источник_ТаблицаПВХ				= ИмпортЗапросКПВХИсточнику(ИмяОбъектаИсточника, ГруппаОбъектовИст, ДатаНач, ДатаКон);
			
			// БАЗА-ПРИЕМНИК.
			Приемник_Метаданные				= Метаданные.ПланыВидовХарактеристик[ИмяОбъектаПриемника];
			
			Приемник_РеквизитыШапки			= Приемник_Метаданные.Реквизиты;
			
			// Проверка списков реквизитов документов по именам.
			Источник_КоличествоРеквизитов 	= 0;
			Приемник_КоличествоРеквизитов 	= Приемник_РеквизитыШапки.Количество();
			
			СтруктураРезультатовСравнения	= ИмпортЭкспрессПроверкаРеквизитовШапкиИсточникаИПриемника(Источник_РеквизитыШапки, Приемник_РеквизитыШапки, Источник_КоличествоРеквизитов);
			
			Для Каждого КОМПВХИсточник ИЗ Источник_ТаблицаПВХ Цикл
				
				// Сопоставить Группы/Элементы Источника и Приемника.
				ПВХИсточник					= КОМПВХИсточник.Ссылка;
				СтруктураПВХ 				= ИмпортСопоставитьСсылкеПВХИсточникаСсылкуПВХПриемника(ПВХИсточник, ИмяОбъектаПриемника, ДатаНач, ДатаКон);	// ПВХИсточник - COMОбъект.
				
				НоваяСтрока = ТаблицаИмпорта.Добавить();
				НоваяСтрока.Комментарий 	= ?(ЭтотОбъект.ИмпортАрхивнаяКопияБазы, "Архивная БД:", "Сторонняя БД:");
				НоваяСтрока.НомерСтроки 	= ТаблицаИмпорта.Количество();

				НоваяСтрока.ТипОбъекта 		= ТипОсновногоОбъекта;
				
				НоваяСтрока.ИмяОбъектаИсточника = ИмяОбъектаИсточника;
				
				НоваяСтрока.ИмяОбъектаПриемника = ИмяОбъектаПриемника;
				
				// ИСТОЧНИК.
				
				НоваяСтрока.ОбъектИсточник 	= "" + ?(ПВХИсточник.Predefined, "Предопределенный " , "") + ?(ПВХИсточник.IsFolder, "Группа", "Элемент") + ":" + СокрЛП(ПВХИсточник.Code) + "_" + СокрЛП(ПВХИсточник.Description);
				
				НоваяСтрока.GUIDИсточника 	= СтруктураПВХ.GUIDИсточника;
				
				НоваяСтрока.ДатаИсточника 	= GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(НоваяСтрока.GUIDИсточника, ПВХИсточник.Predefined);	// Для COMОбъекта.
				
				Если НЕ Источник_Метаданные.ДлинаКода = 0 Тогда
					НоваяСтрока.НомерКодИсточника = ПВХИсточник.Code;
				КонецЕсли;
				
				Если НЕ Источник_Метаданные.ДлинаНаименования = 0 Тогда
					НоваяСтрока.НаименованиеДатаИсточника = ПВХИсточник.Description;
				КонецЕсли;
				
				НоваяСтрока.РодительИсточника 		= Неопределено;
				НоваяСтрока.РодительИсточникаGUID 	= Неопределено;
				Если Источник_Метаданные.Иерархический Тогда
					НоваяСтрока.РодительИсточника 		= ПВХИсточник.Parent.Description;
					НоваяСтрока.РодительИсточникаGUID 	= ConnectionGetGUID(ПВХИсточник.Parent);
				КонецЕсли;
				
				Попытка
					НоваяСтрока.ОписаниеИсточника = ПВХИсточник.Описание;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОписаниеИсточника) Тогда
					Попытка
						НоваяСтрока.ОписаниеИсточника = ПВХИсточник.Комментарий;
					Исключение
						//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
				
				// ПРИЕМНИК.
				
				НоваяСтрока.ОбъектПриемник = СтруктураПВХ.ОбъектПриемник;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОбъектПриемник) Тогда
					НоваяСтрока.Загрузить = Истина;
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока.GUIDПриемника = СтруктураПВХ.GUIDПриемника;
				
				НоваяСтрока.ПриемникНайденПО 		= СтруктураПВХ.ПриемникНайденПО;
				НоваяСтрока.ПриемникДругойПериод 	= СтруктураПВХ.ПриемникДругойПериод;
				
				НоваяСтрока.Загрузить = Истина;                                         // Только новые.
				Если НоваяСтрока.GUIDИсточника = НоваяСтрока.GUIDПриемника Тогда		// Существующие.
					НоваяСтрока.Загрузить = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПриемникНайденПО = "" Тогда
					НоваяСтрока.Загрузить = Ложь;
				КонецЕсли;
				
				Если СтруктураПВХ.ПриемникДругойПериод Тогда
					НоваяСтрока.Загрузить = Ложь;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ВНИМАНИЕ! Объект-Приемник находится в другом периоде./"
				КонецЕсли;
				
				НоваяСтрока.ДатаПриемника = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(НоваяСтрока.ОбъектПриемник);
				
				НоваяСтрока.ПриемникПредопределенный = НоваяСтрока.ОбъектПриемник.Предопределенный;
				НоваяСтрока.ПриемникПомеченНаУдаление = НоваяСтрока.ОбъектПриемник.ПометкаУдаления;
				
				НоваяСтрока.РодительПриемника 		= Неопределено;
				НоваяСтрока.РодительПриемникаGUID 	= Неопределено;
				Если Приемник_Метаданные.Иерархический Тогда
					НоваяСтрока.РодительПриемника 		= НоваяСтрока.ОбъектПриемник.Родитель;
					НоваяСтрока.РодительПриемникаGUID 	= НоваяСтрока.РодительПриемника.УникальныйИдентификатор();
				КонецЕсли;
				
				Попытка
					НоваяСтрока.ОписаниеПриемника = НоваяСтрока.ОбъектПриемник.Описание;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ОписаниеПриемника) Тогда
					Попытка
						НоваяСтрока.ОписаниеПриемника = НоваяСтрока.ОбъектПриемник.Комментарий;
					Исключение
						//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
				
				// ОБЩЕЕ.

				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Реквизиты шапки Источника (" + СтруктураРезультатовСравнения.Источник_КоличествоРеквизитов + ?(НЕ СтруктураРезультатовСравнения.ЕстьРасхождение, ") нашли адресат в Приемнике (", ") не совпадают с реквизитами Приемника (") + Приемник_КоличествоРеквизитов + ")./";
				
				Если ЗначениеЗаполнено(СтруктураРезультатовСравнения.НеНайденыРеквизиты) Тогда
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Не найдены реквизиты: " + СтруктураРезультатовСравнения.НеНайденыРеквизиты + "/";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаИсточника) ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаПриемника) Тогда
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Время создания неопределено: Предопределенный или был таким или .../";
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли НЕ МетаДанные.Документы.Найти(ЭлементСписка.ИмяВПриемнике) = Неопределено Тогда
			
			// Для дальнейшей проработки.
			// Имена объектов в общем случае различаются.
			ИмяОбъектаИсточника = ЭлементСписка.ИмяВИсточнике;
			ИмяОбъектаПриемника = ЭлементСписка.ИмяВПриемнике;
			
			// БАЗА-ИСТОЧНИК.
			
			Если Connection.Метаданные.Документы.Найти(ИмяОбъектаИсточника) = Неопределено Тогда
				Если ЭтотОбъект.ПоказыватьСообщения Тогда
					Сообщить("В конфигурации Источника документ типа """ + ИмяОбъектаИсточника + """ не существует.");
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Источник_РеквизитыШапки		= Connection.Метаданные.Документы[ИмяОбъектаИсточника].Реквизиты;
			Источник_ЕстьОрганизация 	= НЕ Источник_РеквизитыШапки.Найти("Организация") = Неопределено;
			
			Источник_ТаблицаДокументов	= ИмпортЗапросКДокументамИсточника(ИмяОбъектаИсточника, ОрганизацияИсточник, ДатаНач, ДатаКон);
			
			// БАЗА-ПРИЕМНИК.
			
			Приемник_РеквизитыШапки		= Метаданные.Документы[ИмяОбъектаПриемника].Реквизиты;
			Приемник_ЕстьОрганизация 	= НЕ Приемник_РеквизитыШапки.Найти("Организация") = Неопределено;
			
			// Проверка списков реквизитов документов по именам.
			Источник_КоличествоРеквизитов 	= 0;
			Приемник_КоличествоРеквизитов 	= Приемник_РеквизитыШапки.Количество();
			
			СтруктураРезультатовСравнения	= ИмпортЭкспрессПроверкаРеквизитовШапкиИсточникаИПриемника(Источник_РеквизитыШапки, Приемник_РеквизитыШапки, Источник_КоличествоРеквизитов);
			
			Для Каждого КОМДокументИсточник ИЗ Источник_ТаблицаДокументов Цикл
				
				// Сопоставить Документы Источника и Приемника.
				ДокументИсточник		= КОМДокументИсточник.Ссылка;
				СтруктураДокумент 		= ИмпортСопоставитьДокументуИсточникуДокументПриемник(ДокументИсточник, ИмяОбъектаПриемника, ДатаНач, ДатаКон);
				
				НоваяСтрока = ТаблицаИмпорта.Добавить();
				НоваяСтрока.Комментарий = ?(ЭтотОбъект.ИмпортАрхивнаяКопияБазы, "Архивная БД:", "Сторонняя БД:");
				НоваяСтрока.НомерСтроки = ТаблицаИмпорта.Количество();
				НоваяСтрока.ТипОбъекта 	= ТипОсновногоОбъекта;
				
				НоваяСтрока.ИмяОбъектаИсточника  = ИмяОбъектаИсточника;
				
				НоваяСтрока.ИмяОбъектаПриемника  = ИмяОбъектаПриемника;
				
				// ИСТОЧНИК.
				
				НоваяСтрока.ОбъектИсточник 		= "" + ИмяОбъектаИсточника + "_" + СокрЛП(ДокументИсточник.Номер) + "_от_" + ДокументИсточник.Дата;
				НоваяСтрока.GUIDИсточника 		= СтруктураДокумент.GUIDИсточника;
				НоваяСтрока.ДатаИсточника 		= GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(НоваяСтрока.GUIDИсточника);
				НоваяСтрока.НомерКодИсточника 	= ДокументИсточник.Номер;
				НоваяСтрока.НаименованиеДатаИсточника = ДокументИсточник.Дата;
				
				СуммаДокументаИсточника = 0;
				Попытка
					СуммаДокументаИсточника		= ДокументИсточник.СуммаДокумента;
				Исключение
					СуммаДокументаИсточника = 0;
				КонецПопытки;
				НоваяСтрока.СуммаИсточника = СуммаДокументаИсточника;
				
				Если СуммаДокументаИсточника = 0 Тогда
					СуммаДокументаИсточника = 0;
					Попытка
						СуммаДокументаИсточника		= ДокументИсточник.Сумма;
					Исключение
						СуммаДокументаИсточника = 0;
					КонецПопытки;
					НоваяСтрока.СуммаИсточника = СуммаДокументаИсточника;
				КонецЕсли;
				
				// ПРИЕМНИК.
				НоваяСтрока.ОбъектПриемник = СтруктураДокумент.ОбъектПриемник;
				Если НЕ ЗначениеЗаполнено(СтруктураДокумент.ОбъектПриемник) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока.GUIDПриемника = СтруктураДокумент.GUIDПриемника;
				
				НоваяСтрока.ПриемникНайденПО 		= СтруктураДокумент.ПриемникНайденПО;
				НоваяСтрока.ПриемникДругойПериод 	= СтруктураДокумент.ПриемникДругойПериод;
				
				НоваяСтрока.Загрузить = Истина;											// Только новые.
				Если НоваяСтрока.GUIDИсточника = НоваяСтрока.GUIDПриемника Тогда		// Существующие.
					НоваяСтрока.Загрузить = Ложь;
				КонецЕсли;
				Если НЕ НоваяСтрока.ПриемникНайденПО = "" Тогда
					НоваяСтрока.Загрузить = Ложь;
				КонецЕсли;
				
				СуммаДокументаПриемника = 0;
				Попытка
					СуммаДокументаПриемника		= НоваяСтрока.ОбъектПриемник.СуммаДокумента;
				Исключение
					СуммаДокументаПриемника = 0;
				КонецПопытки;
				НоваяСтрока.СуммаПриемника = СуммаДокументаПриемника;
				
				Если СуммаДокументаПриемника = 0 Тогда
					СуммаДокументаПриемника = 0;
					Попытка
						СуммаДокументаПриемника		= НоваяСтрока.ОбъектПриемник.Сумма;
					Исключение
						СуммаДокументаПриемника = 0;
					КонецПопытки;
					НоваяСтрока.СуммаПриемника = СуммаДокументаПриемника;
				КонецЕсли;
				
				Если НЕ СуммаДокументаИсточника = 0 И НЕ СуммаДокументаПриемника = 0 И НЕ СуммаДокументаИсточника = СуммаДокументаПриемника Тогда
					НоваяСтрока.Загрузить = Истина;
				КонецЕсли;
				
				НоваяСтрока.ПриемникПроведен = НоваяСтрока.ОбъектПриемник.Проведен;
				НоваяСтрока.ПриемникПомеченНаУдаление = НоваяСтрока.ОбъектПриемник.ПометкаУдаления;
				
				НоваяСтрока.ДатаПриемника = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(НоваяСтрока.ОбъектПриемник);
				
				Если СтруктураДокумент.ПриемникДругойПериод Тогда
					НоваяСтрока.Загрузить = Ложь;
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " ВНИМАНИЕ! Объект-Приемник находится в другом периоде./"
				КонецЕсли;
				
				НоваяСтрока.РодительИсточника 		= Неопределено;
				НоваяСтрока.РодительИсточникаGUID 	= Неопределено;
				
				НоваяСтрока.ВладелецИсточника 		= Неопределено;
				НоваяСтрока.ВладелецИсточникаGUID 	= Неопределено;
				
				НоваяСтрока.РодительПриемника 		= Неопределено;
				НоваяСтрока.РодительПриемникаGUID 	= Неопределено;
				
				НоваяСтрока.ВладелецПриемника 		= Неопределено;
				НоваяСтрока.ВладелецПриемникаGUID 	= Неопределено;
				
				Попытка
					НоваяСтрока.ОписаниеИсточника = ДокументИсточник.Комментарий;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				Попытка
					НоваяСтрока.ОписаниеПриемника = НоваяСтрока.ОбъектПриемник.Комментарий;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				
				НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Реквизиты шапки Источника (" + СтруктураРезультатовСравнения.Источник_КоличествоРеквизитов + ?(НЕ СтруктураРезультатовСравнения.ЕстьРасхождение, ") нашли адресат в Приемнике (", ") не совпадают с реквизитами Приемника (") + Приемник_КоличествоРеквизитов + ")./";
				
				Если ЗначениеЗаполнено(СтруктураРезультатовСравнения.НеНайденыРеквизиты) Тогда
					НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Не найдены реквизиты: " + СтруктураРезультатовСравнения.НеНайденыРеквизиты + "/";
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИмпорта;
	
КонецФункции

Функция ИмпортЭкспрессПроверкаРеквизитовШапкиИсточникаИПриемника(Источник_РеквизитыШапки, Приемник_РеквизитыШапки, Источник_КоличествоРеквизитов)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьРасхождение");
	СтруктураВозврата.Вставить("Источник_КоличествоРеквизитов");
	СтруктураВозврата.Вставить("НеНайденыРеквизиты");
	
	ЕстьРасхождение = Ложь;
	НеНайденыРеквизиты = "";
	Для Каждого Реквизит ИЗ Источник_РеквизитыШапки Цикл
		
		ИмяРеквизита = Неопределено;
		Попытка
			ИмяРеквизита = Реквизит.Name;
		Исключение
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
		Если ИмяРеквизита = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Источник_КоличествоРеквизитов = Источник_КоличествоРеквизитов + 1;
		
		Если Приемник_РеквизитыШапки.Найти(ИмяРеквизита) = Неопределено Тогда
			ЕстьРасхождение = Истина;
			НеНайденыРеквизиты = НеНайденыРеквизиты + ИмяРеквизита + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.ЕстьРасхождение = ЕстьРасхождение;
	СтруктураВозврата.Источник_КоличествоРеквизитов = Источник_КоличествоРеквизитов;
	СтруктураВозврата.НеНайденыРеквизиты = НеНайденыРеквизиты;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ИмпортЗапросКСправочникуИсточнику(ИмяОбъектаИсточника, ГруппаОбъектовИсточника, ДатаНач = Неопределено, ДатаКон = Неопределено)
	
	Запрос = Connection.NewObject("Запрос");
		
	Запрос.Текст = "ВЫБРАТЬ ТаблицаИсточника.Ссылка КАК Ссылка
	|ИЗ 
	| 	Справочник." + ИмяОбъектаИсточника + " КАК ТаблицаИсточника
	|ГДЕ 
	|	&УсловиеПоГруппеОбъектов
	|	И НЕ ТаблицаИсточника.Ссылка.ПометкаУдаления
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если НЕ ГруппаОбъектовИсточника = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппеОбъектов", "ТаблицаИсточника.Ссылка В ИЕРАРХИИ(&Ссылка)");
		Запрос.УстановитьПараметр("Ссылка", ГруппаОбъектовИсточника);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппеОбъектов", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() И ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта И НЕ ДатаНач = Неопределено И НЕ ДатаКон = Неопределено Тогда
		
		ТаблицаИсточника = Новый ТаблицаЗначений;
		ТаблицаИсточника.Колонки.Добавить("Ссылка");
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			GUIDИсточника = ConnectionGetGUID(Выборка.Ссылка);
			
			ДатаСоздания = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(GUIDИсточника, Выборка.Ссылка.Predefined);
			
			// ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта:
			// Для элемента Справочника-Источника - в таблицу добавляются только те, которые соответствуют условию по датам.
			// Для элемента Справочника-Приемника - Информационно. Добавляются все, соответствующие Источнику.
			
			Если ДатаСоздания = Дата("00010101000000") ИЛИ (ДатаСоздания >= НачалоДня(ДатаНач) И ДатаСоздания <= КонецДня(ДатаКон)) Тогда	// Предопределенный элемент - ПустаяДата, Обычный - Обычная.
				НоваяСтрока = ТаблицаИсточника.Добавить();
				НоваяСтрока.Ссылка = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаИсточника = Результат.Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаИсточника;
	
КонецФункции

Функция ИмпортСопоставитьСсылкеСправочникаИсточникаСсылкуСправочникаПриемника(Знач СправочникИсточник, Знач ИмяОбъектаПриемника, Знач ДатаНач = Неопределено, Знач ДатаКон = Неопределено)
	
	СтруктураСправочник = Новый Структура;
	СтруктураСправочник.Вставить("GUIDИсточника"		, Неопределено);
	
	СтруктураСправочник.Вставить("ПриемникДругойПериод"	, Ложь);
	СтруктураСправочник.Вставить("ПриемникНайденПО"		, Неопределено);
	СтруктураСправочник.Вставить("ОбъектПриемник"		, Неопределено);
	СтруктураСправочник.Вставить("GUIDПриемника"		, Неопределено);
	
	GUIDИсточника = ConnectionGetGUID(СправочникИсточник);	// СправочникИсточник - ССЫЛКА.
	СтруктураСправочник.GUIDИсточника = GUIDИсточника;
	
	НайденПОGUID = Ложь;
	СправочникПриемник = Неопределено;
	Если (ЭтотОбъект.ИмпортАрхивнаяКопияБазы ИЛИ (НЕ ЭтотОбъект.ИмпортАрхивнаяКопияБазы И ЭтотОбъект.ИмпортИспользоватьGUIDИсточника)) Тогда
		
		СправочникПриемник = GUIDПолучитьСсылкуНаОбъектПоМенеджеруОбъектаОдногоТИПАиУникальномуИдентификатору(Справочники[ИмяОбъектаПриемника], GUIDИсточника);
		
		НайденПОGUID = НЕ СправочникПриемник = Неопределено;
		
	КонецЕсли;
		
	Если НЕ НайденПОGUID ИЛИ СправочникПриемник = Неопределено Тогда	// ПОИСК по КОД+НАИМЕНОВАНИЕ.
	
		мдОбъектаПриемника = Метаданные.Справочники[ИмяОбъектаПриемника];
		
		КодИсточника = СправочникИсточник.Code;
		НаименованиеИсточника = СправочникИсточник.Description;
		ЭтоГруппаИсточника = СправочникИсточник.IsFolder;
		
		Если мдОбъектаПриемника.СерииКодов = Метаданные.СвойстваОбъектов.СерииКодовСправочника.ВПределахПодчинения Тогда
			// Родитель - в общем случае - сущность переменчивая.
			// Владелец - в общем случае - сущность постоянная.
			
			КодРодителяИсточника = СправочникИсточник.Parent.Code;
			НаименованиеРодителяИсточника = СправочникИсточник.Parent.Description;
			
			ЗапросЭлементаПодчинениеРодителю = Новый Запрос;
			ЗапросЭлементаПодчинениеРодителю.Текст = "ВЫБРАТЬ Ссылка 
			|	ИЗ Справочник." + ИмяОбъектаПриемника + "
			|	ГДЕ ИСТИНА 
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаКода = 0, " И Код=&Код ", "") + "
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаНаименования = 0, " И Наименование=&Наименование ","") + "
			|	&УсловиеПоГруппе
			|";
			
			Если мдОбъектаПриемника.Иерархический И мдОбъектаПриемника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ЗапросЭлементаПодчинениеРодителю.Текст = СтрЗаменить(ЗапросЭлементаПодчинениеРодителю.Текст, "&УсловиеПоГруппе", "И ЭтоГруппа = Истина");
			Иначе
				ЗапросЭлементаПодчинениеРодителю.Текст = СтрЗаменить(ЗапросЭлементаПодчинениеРодителю.Текст, "&УсловиеПоГруппе", "И ИСТИНА");
			КонецЕсли;
			
			ЗапросЭлементаПодчинениеРодителю.УстановитьПараметр("Код"			, КодИсточника);
			ЗапросЭлементаПодчинениеРодителю.УстановитьПараметр("Наименование"	, НаименованиеИсточника);
			ЗапросЭлементаПодчинениеРодителю.УстановитьПараметр("ЭтоГруппа"		, ЭтоГруппаИсточника);
			
			РезультатЗапросЭлементаПодчинениеРодителю = ЗапросЭлементаПодчинениеРодителю.Выполнить();
			Если НЕ РезультатЗапросЭлементаПодчинениеРодителю.Пустой() Тогда
				
				ВыборкаЗапросЭлементаПодчинениеРодителю = РезультатЗапросЭлементаПодчинениеРодителю.Выбрать();
				
				МассивВозможныхЭлементов = Новый Массив;
				Пока ВыборкаЗапросЭлементаПодчинениеРодителю.Следующий() Цикл
					
					Если СокрЛП(ВыборкаЗапросЭлементаПодчинениеРодителю.Ссылка.Родитель.Код) = СокрЛП(КодРодителяИсточника) 
						И СокрЛП(ВыборкаЗапросЭлементаПодчинениеРодителю.Ссылка.Родитель.Наименование) = СокрЛП(НаименованиеРодителяИсточника) Тогда
						
						МассивВозможныхЭлементов.Добавить(ВыборкаЗапросЭлементаПодчинениеРодителю.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивВозможныхЭлементов.Количество() = 0 Тогда
					СправочникПриемник = Неопределено;
				ИначеЕсли МассивВозможныхЭлементов.Количество() = 1 Тогда
					СправочникПриемник = МассивВозможныхЭлементов[0];
				Иначе
					Отказ = Истина;
					ВызватьИсключение НСтр("ru = 'Выбрано " + МассивВозможныхЭлементов.Количество() + " элементов (правильно - один) с Кодом=""" + КодИсточника + """ и Наименованием=""" + НаименованиеИсточника + """, у которых Родитель=""" + СокрЛП(НаименованиеРодителяИсточника) + """.'");
					Возврат СтруктураСправочник;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли мдОбъектаПриемника.СерииКодов = Метаданные.СвойстваОбъектов.СерииКодовСправочника.ВПределахПодчиненияВладельцу Тогда
			// Родитель - в общем случае - сущность переменчивая.
			// Владелец - в общем случае - сущность постоянная.
			
			////мдВладельцаИсточника = СправочникИсточник.Owner.Метаданные();
			////ИмяВладельцаИсточника = мдВладельцаИсточника.Имя;
			////ОбъектВладелецИсточник = СправочникИсточник.Owner;
			////GUIDВладельцаИсточника = ConnectionGetGUID(ОбъектВладелецИсточник);
			
			КодВладельцаИсточника = СправочникИсточник.Owner.Code;
			НаименованиеВладельцаИсточника = СправочникИсточник.Owner.Description;
			
			ЗапросЭлементаПодчинениеВладельцу = Новый Запрос;
			ЗапросЭлементаПодчинениеВладельцу.Текст = "ВЫБРАТЬ Ссылка 
			|	ИЗ Справочник." + ИмяОбъектаПриемника + "
			|	ГДЕ ИСТИНА 
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаКода = 0, " И Код=&Код ", "") + "
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаНаименования = 0, " И Наименование=&Наименование ","") + "
			|	&УсловиеПоГруппе
			|";
			
			Если мдОбъектаПриемника.Иерархический И мдОбъектаПриемника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ЗапросЭлементаПодчинениеВладельцу.Текст = СтрЗаменить(ЗапросЭлементаПодчинениеВладельцу.Текст, "&УсловиеПоГруппе", "И ЭтоГруппа = Истина");
			Иначе
				ЗапросЭлементаПодчинениеВладельцу.Текст = СтрЗаменить(ЗапросЭлементаПодчинениеВладельцу.Текст, "&УсловиеПоГруппе", "И ИСТИНА");
			КонецЕсли;
			
			ЗапросЭлементаПодчинениеВладельцу.УстановитьПараметр("Код"			, КодИсточника);
			ЗапросЭлементаПодчинениеВладельцу.УстановитьПараметр("Наименование"	, НаименованиеИсточника);
			ЗапросЭлементаПодчинениеВладельцу.УстановитьПараметр("ЭтоГруппа"	, ЭтоГруппаИсточника);
			
			РезультатЗапросЭлементаПодчинениеВладельцу = ЗапросЭлементаПодчинениеВладельцу.Выполнить();
			Если НЕ РезультатЗапросЭлементаПодчинениеВладельцу.Пустой() Тогда
				
				ВыборкаЗапросЭлементаПодчинениеВладельцу = РезультатЗапросЭлементаПодчинениеВладельцу.Выбрать();
				
				МассивВозможныхЭлементов = Новый Массив;
				Пока ВыборкаЗапросЭлементаПодчинениеВладельцу.Следующий() Цикл
					
					Если СокрЛП(ВыборкаЗапросЭлементаПодчинениеВладельцу.Ссылка.Владелец.Код) = СокрЛП(КодВладельцаИсточника) 
						И СокрЛП(ВыборкаЗапросЭлементаПодчинениеВладельцу.Ссылка.Владелец.Наименование) = СокрЛП(НаименованиеВладельцаИсточника) Тогда
						
						МассивВозможныхЭлементов.Добавить(ВыборкаЗапросЭлементаПодчинениеВладельцу.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивВозможныхЭлементов.Количество() = 0 Тогда
					СправочникПриемник = Неопределено;
				ИначеЕсли МассивВозможныхЭлементов.Количество() = 1 Тогда
					СправочникПриемник = МассивВозможныхЭлементов[0];
				Иначе
					Отказ = Истина;
					ВызватьИсключение НСтр("ru = 'Выбрано " + МассивВозможныхЭлементов.Количество() + " элементов (правильно - один) с Кодом=""" + КодИсточника + """ и Наименованием=""" + НаименованиеИсточника + """, у которых Владелец=""" + СокрЛП(НаименованиеВладельцаИсточника) + """.'");
					Возврат СтруктураСправочник;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗапросЭлементаОсновной = Новый Запрос;
			ЗапросЭлементаОсновной.Текст = "ВЫБРАТЬ Первые 1 Ссылка 
			|	ИЗ Справочник." + ИмяОбъектаПриемника + "
			|	ГДЕ ИСТИНА 
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаКода = 0, " И Код=&Код ", "") + "
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаНаименования = 0, " И Наименование=&Наименование ","") + "
			|	&УсловиеПоГруппе
			|";
			
			Если мдОбъектаПриемника.Иерархический И мдОбъектаПриемника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				ЗапросЭлементаОсновной.Текст = СтрЗаменить(ЗапросЭлементаОсновной.Текст, "&УсловиеПоГруппе", "И ЭтоГруппа = Истина");
			Иначе
				ЗапросЭлементаОсновной.Текст = СтрЗаменить(ЗапросЭлементаОсновной.Текст, "&УсловиеПоГруппе", "И ИСТИНА");
			КонецЕсли;
			
			ЗапросЭлементаОсновной.УстановитьПараметр("Код"			, КодИсточника);
			ЗапросЭлементаОсновной.УстановитьПараметр("Наименование", НаименованиеИсточника);
			ЗапросЭлементаОсновной.УстановитьПараметр("ЭтоГруппа"	, ЭтоГруппаИсточника);
			
			РезультатЗапросЭлементаОсновной = ЗапросЭлементаОсновной.Выполнить();
			Если НЕ РезультатЗапросЭлементаОсновной.Пустой() Тогда
				ВыборкаЗапросЭлементаОсновной = РезультатЗапросЭлементаОсновной.Выбрать();
				ВыборкаЗапросЭлементаОсновной.Следующий();
				СправочникПриемник = ВыборкаЗапросЭлементаОсновной.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникПриемник) Тогда
			
		ДатаИВремяСозданияОбъекта = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(СправочникПриемник);
		
		Если НЕ ДатаИВремяСозданияОбъекта = Дата("00010101000000") И (НЕ ДатаНач = Неопределено И НЕ ДатаКон = Неопределено) Тогда
			
			// ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта:
			// Для элемента Справочника-Источника - в таблицу добавляются только те, которые соответствуют условию по датам.
			// Для элемента Справочника-Приемника - Информационно. Добавляются все, соответствующие Источнику.
			// Отбор по дате - при Запросе к Источнику.
			
			Если ДатаИВремяСозданияОбъекта >= НачалоДня(ДатаНач) И ДатаИВремяСозданияОбъекта <= КонецДня(ДатаКон) Тогда
				
				СтруктураСправочник.ПриемникДругойПериод = Ложь;

				СтруктураСправочник.ПриемникНайденПО = ?(НайденПОGUID, "GUID+Период", "Код+Наименование+Период");
				СтруктураСправочник.ОбъектПриемник = СправочникПриемник;
				СтруктураСправочник.GUIDПриемника = СправочникПриемник.Ссылка.УникальныйИдентификатор();
				
				Возврат СтруктураСправочник;
				
			Иначе	// Для предопределенного элемента Дата - пустая - вне периода.
				
				СтруктураСправочник.ПриемникДругойПериод = Истина;
				
				СтруктураСправочник.ПриемникНайденПО = ?(НайденПОGUID, "GUID+Дата вне периода", "Код+Наименование+Дата вне периода");
				СтруктураСправочник.ОбъектПриемник = СправочникПриемник;
				СтруктураСправочник.GUIDПриемника = СправочникПриемник.Ссылка.УникальныйИдентификатор();
				
				Возврат СтруктураСправочник;
				
			КонецЕсли;
			
		Иначе
			
			СтруктураСправочник.ПриемникДругойПериод = Ложь;
			
			СтруктураСправочник.ПриемникНайденПО = ?(НайденПОGUID, "GUID", "Код+Наименование");
			СтруктураСправочник.ОбъектПриемник = СправочникПриемник;
			СтруктураСправочник.GUIDПриемника = СправочникПриемник.Ссылка.УникальныйИдентификатор();
			
			Возврат СтруктураСправочник;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураСправочник;
	
КонецФункции

Функция ИмпортЗапросКПВХИсточнику(ИмяОбъектаИсточника, ГруппаОбъектовИсточника, ДатаНач = Неопределено, ДатаКон = Неопределено)
	Перем Запрос, Результат, Выборка;
	Перем GUIDИсточника, ДатаСоздания;
	Перем ТаблицаИсточника, НоваяСтрока;
	
	Запрос = Connection.NewObject("Запрос");
		
	Запрос.Текст = "ВЫБРАТЬ ТаблицаИсточника.Ссылка КАК Ссылка
	|ИЗ 
	| 	ПланВидовХарактеристик." + ИмяОбъектаИсточника + " КАК ТаблицаИсточника
	|ГДЕ 
	|	&УсловиеПоГруппеОбъектов
	|	И НЕ ТаблицаИсточника.Ссылка.ПометкаУдаления
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если НЕ ГруппаОбъектовИсточника = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппеОбъектов", "ТаблицаИсточника.Ссылка В ИЕРАРХИИ(&Ссылка)");
		Запрос.УстановитьПараметр("Ссылка", ГруппаОбъектовИсточника);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоГруппеОбъектов", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() И ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта И НЕ ДатаНач = Неопределено И НЕ ДатаКон = Неопределено Тогда
		
		ТаблицаИсточника = Новый ТаблицаЗначений;
		ТаблицаИсточника.Колонки.Добавить("Ссылка");
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			GUIDИсточника = ConnectionGetGUID(Выборка.Ссылка);
			
			ДатаСоздания = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(GUIDИсточника, Выборка.Ссылка.Predefined);
			
			// ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта:
			// Для элемента ПВХ-Источника - в таблицу добавляются только те, которые соответствуют условию по датам.
			// Для элемента ПВХ-Приемника - Информационно. Добавляются все, соответствующие Источнику.
			
			Если ДатаСоздания = Дата("00010101000000") ИЛИ (ДатаСоздания >= НачалоДня(ДатаНач) И ДатаСоздания <= КонецДня(ДатаКон)) Тогда	// Предопределенный элемент - ПустаяДата, Обычный - Обычная.
				НоваяСтрока = ТаблицаИсточника.Добавить();
				НоваяСтрока.Ссылка = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаИсточника = Результат.Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаИсточника;
	
КонецФункции

Функция ИмпортСопоставитьСсылкеПВХИсточникаСсылкуПВХПриемника(Знач ПВХИсточник, Знач ИмяОбъектаПриемника, Знач ДатаНач = Неопределено, Знач ДатаКон = Неопределено)
	
	СтруктураПВХ = Новый Структура;
	СтруктураПВХ.Вставить("GUIDИсточника"		, Неопределено);
	
	СтруктураПВХ.Вставить("ПриемникДругойПериод", Ложь);
	СтруктураПВХ.Вставить("ПриемникНайденПО"	, Неопределено);
	СтруктураПВХ.Вставить("ОбъектПриемник"		, Неопределено);
	СтруктураПВХ.Вставить("GUIDПриемника"		, Неопределено);
	
	GUIDИсточника = ConnectionGetGUID(ПВХИсточник);	// ПВХИсточник - ССЫЛКА.
	СтруктураПВХ.GUIDИсточника = GUIDИсточника;
	
	НайденПОGUID = Ложь;
	ПВХПриемник = Неопределено;
	Если (ЭтотОбъект.ИмпортАрхивнаяКопияБазы ИЛИ (НЕ ЭтотОбъект.ИмпортАрхивнаяКопияБазы И ЭтотОбъект.ИмпортИспользоватьGUIDИсточника)) Тогда
		
		ПВХПриемник = GUIDПолучитьСсылкуНаОбъектПоМенеджеруОбъектаОдногоТИПАиУникальномуИдентификатору(ПланыВидовХарактеристик[ИмяОбъектаПриемника], GUIDИсточника);
		
		НайденПОGUID = НЕ ПВХПриемник = Неопределено;
		
	КонецЕсли;
		
	Если НЕ НайденПОGUID ИЛИ ПВХПриемник = Неопределено Тогда	// ПОИСК по КОД+НАИМЕНОВАНИЕ.
	
		мдОбъектаПриемника = Метаданные.ПланыВидовХарактеристик[ИмяОбъектаПриемника];
		
		КодИсточника = ПВХИсточник.Code;
		НаименованиеИсточника = ПВХИсточник.Description;
		ЭтоГруппаИсточника = ПВХИсточник.IsFolder;
		
		Если мдОбъектаПриемника.СерииКодов = Метаданные.СвойстваОбъектов.СерииКодовПланаВидовХарактеристик.ВПределахПодчинения Тогда
			// Родитель - в общем случае - сущность переменчивая.
			// Владелец - в общем случае - сущность постоянная.
			
			КодРодителяИсточника = ПВХИсточник.Parent.Code;
			НаименованиеРодителяИсточника = ПВХИсточник.Parent.Description;
			
			ЗапросЭлементаПодчинениеРодителю = Новый Запрос;
			ЗапросЭлементаПодчинениеРодителю.Текст = "ВЫБРАТЬ Ссылка 
			|	ИЗ ПланВидовХарактеристик." + ИмяОбъектаПриемника + "
			|	ГДЕ ИСТИНА 
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаКода = 0, " И Код=&Код ", "") + "
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаНаименования = 0, " И Наименование=&Наименование ","");
			
			ЗапросЭлементаПодчинениеРодителю.УстановитьПараметр("Код"			, КодИсточника);
			ЗапросЭлементаПодчинениеРодителю.УстановитьПараметр("Наименование"	, НаименованиеИсточника);
			
			РезультатЗапросЭлементаПодчинениеРодителю = ЗапросЭлементаПодчинениеРодителю.Выполнить();
			Если НЕ РезультатЗапросЭлементаПодчинениеРодителю.Пустой() Тогда
				
				ВыборкаЗапросЭлементаПодчинениеРодителю = РезультатЗапросЭлементаПодчинениеРодителю.Выбрать();
				
				МассивВозможныхЭлементов = Новый Массив;
				Пока ВыборкаЗапросЭлементаПодчинениеРодителю.Следующий() Цикл
					
					Если СокрЛП(ВыборкаЗапросЭлементаПодчинениеРодителю.Ссылка.Родитель.Код) = СокрЛП(КодРодителяИсточника) 
						И СокрЛП(ВыборкаЗапросЭлементаПодчинениеРодителю.Ссылка.Родитель.Наименование) = СокрЛП(НаименованиеРодителяИсточника) Тогда
						
						МассивВозможныхЭлементов.Добавить(ВыборкаЗапросЭлементаПодчинениеРодителю.Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если МассивВозможныхЭлементов.Количество() = 0 Тогда
					ПВХПриемник = Неопределено;
				ИначеЕсли МассивВозможныхЭлементов.Количество() = 1 Тогда
					ПВХПриемник = МассивВозможныхЭлементов[0];
				Иначе
					Отказ = Истина;
					ВызватьИсключение НСтр("ru = 'Выбрано " + МассивВозможныхЭлементов.Количество() + " элементов (правильно - один) с Кодом=""" + КодИсточника + """ и Наименованием=""" + НаименованиеИсточника + """, у которых Родитель=""" + СокрЛП(НаименованиеРодителяИсточника) + """.'");
					Возврат СтруктураПВХ;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ЗапросЭлементаОсновной = Новый Запрос;
			ЗапросЭлементаОсновной.Текст = "ВЫБРАТЬ Первые 1 Ссылка 
			|	ИЗ ПланВидовХарактеристик." + ИмяОбъектаПриемника + "
			|	ГДЕ ИСТИНА 
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаКода = 0, " И Код=&Код ", "") + "
			|	" + ?(НЕ мдОбъектаПриемника.ДлинаНаименования = 0, " И Наименование=&Наименование ","");
			
			ЗапросЭлементаОсновной.УстановитьПараметр("Код"			, КодИсточника);
			ЗапросЭлементаОсновной.УстановитьПараметр("Наименование", НаименованиеИсточника);
			
			РезультатЗапросЭлементаОсновной = ЗапросЭлементаОсновной.Выполнить();
			Если НЕ РезультатЗапросЭлементаОсновной.Пустой() Тогда
				ВыборкаЗапросЭлементаОсновной = РезультатЗапросЭлементаОсновной.Выбрать();
				ВыборкаЗапросЭлементаОсновной.Следующий();
				ПВХПриемник = ВыборкаЗапросЭлементаОсновной.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПВХПриемник) Тогда

		ДатаИВремяСозданияОбъекта = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ПВХПриемник);
		
		Если НЕ ДатаИВремяСозданияОбъекта = Дата("00010101000000") И (НЕ ДатаНач = Неопределено И НЕ ДатаКон = Неопределено) Тогда
			
			// ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта:
			// Для элемента ПВХ-Источника - в таблицу добавляются только те, которые соответствуют условию по датам.
			// Для элемента ПВХ-Приемника - Информационно. Добавляются все, соответствующие Источнику.
			// Отбор по дате - при Запросе к Источнику.
			
			Если ДатаИВремяСозданияОбъекта >= НачалоДня(ДатаНач) И ДатаИВремяСозданияОбъекта <= КонецДня(ДатаКон) Тогда
				
				СтруктураПВХ.ПриемникДругойПериод = Ложь;

				СтруктураПВХ.ПриемникНайденПО = ?(НайденПОGUID, "GUID+Период", "Код+Наименование+Период");
				СтруктураПВХ.ОбъектПриемник = ПВХПриемник;
				СтруктураПВХ.GUIDПриемника = ПВХПриемник.Ссылка.УникальныйИдентификатор();
				
				Возврат СтруктураПВХ;
				
			Иначе	// Для предопределенного элемента Дата - пустая - вне периода.
				
				СтруктураПВХ.ПриемникДругойПериод = Истина;
				
				СтруктураПВХ.ПриемникНайденПО = ?(НайденПОGUID, "GUID+Дата вне периода", "Код+Наименование+Дата вне периода");
				СтруктураПВХ.ОбъектПриемник = ПВХПриемник;
				СтруктураПВХ.GUIDПриемника = ПВХПриемник.Ссылка.УникальныйИдентификатор();
				
				Возврат СтруктураПВХ;
				
			КонецЕсли;
			
		Иначе
			
			СтруктураПВХ.ПриемникДругойПериод = Ложь;
			
			СтруктураПВХ.ПриемникНайденПО = ?(НайденПОGUID, "GUID", "Код+Наименование");
			СтруктураПВХ.ОбъектПриемник = ПВХПриемник;
			СтруктураПВХ.GUIDПриемника = ПВХПриемник.Ссылка.УникальныйИдентификатор();
			
			Возврат СтруктураПВХ;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураПВХ;
	
КонецФункции

Функция ИмпортЗапросКДокументамИсточника(ИмяОбъектаИсточника, ОрганизацияИсточник, ДатаНач, ДатаКон)
	Перем ОрганизацияИсточникСсылка;
	
	// Определение наличие реквизита "Организация" в конкретном виде документа.
	Источник_РеквизитыШапки		= Connection.Метаданные.Документы[ИмяОбъектаИсточника].Реквизиты;
	Источник_ЕстьОрганизация 	= НЕ Источник_РеквизитыШапки.Найти("Организация") = Неопределено;
	
	ОрганизацияИсточникСсылка = Неопределено;
	Если Источник_ЕстьОрганизация И ТипЗнч(ОрганизацияИсточник) = Тип("Строка") Тогда
		ОрганизацияИсточникСсылка = Connection.Справочники.Организации.НайтиПоРеквизиту("ИНН", ОрганизацияИсточник);
		ОрганизацияИсточникСсылка = ?(СокрЛП(ОрганизацияИсточникСсылка)="", Неопределено, ОрганизацияИсточникСсылка);
	КонецЕсли;
	
	Запрос = Connection.NewObject("Запрос");
	
	ТекстЗапроса = "ВЫБРАТЬ Документ.*
	|ИЗ 
	| 	Документ." + ИмяОбъектаИсточника + " КАК Документ
	|ГДЕ 
	| 	Документ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ Документ.ПометкаУдаления
	|	&УсловиеПоОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	// Организация = COMОбъект или Неопределено.
	Если Источник_ЕстьОрганизация И НЕ ОрганизацияИсточникСсылка = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "И Документ.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", ОрганизацияИсточникСсылка);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "И ИСТИНА");
		
	КонецЕсли;
	
	ТаблицаДокументовИсточника = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДокументовИсточника;
	
КонецФункции

Функция ИмпортСопоставитьДокументуИсточникуДокументПриемник(Знач ДокументИсточник, Знач ИмяОбъектаПриемника, Знач ДатаНач = Неопределено, Знач ДатаКон = Неопределено)
	
	СтруктураДокумент = Новый Структура;
	СтруктураДокумент.Вставить("GUIDИсточника"			, Неопределено);
	
	СтруктураДокумент.Вставить("ПриемникДругойПериод"	, Ложь);
	СтруктураДокумент.Вставить("ПриемникНайденПО"		, Неопределено);
	СтруктураДокумент.Вставить("ОбъектПриемник"			, Неопределено);
	СтруктураДокумент.Вставить("GUIDПриемника"			, Неопределено);
	
	GUIDИсточника = ConnectionGetGUID(ДокументИсточник);	// ДокументИсточник - ССЫЛКА.
	СтруктураДокумент.GUIDИсточника = GUIDИсточника;
	
	НомерИсточника 	= ДокументИсточник.Номер;
	ДатаИсточника	= ДокументИсточник.Дата;
	
	НайденПОGUID = Ложь;
	ДокументПриемник = Неопределено;
	Если (ЭтотОбъект.ИмпортАрхивнаяКопияБазы ИЛИ (НЕ ЭтотОбъект.ИмпортАрхивнаяКопияБазы И ЭтотОбъект.ИмпортИспользоватьGUIDИсточника)) Тогда
		
		ДокументПриемник = GUIDПолучитьСсылкуНаОбъектПоМенеджеруОбъектаОдногоТИПАиУникальномуИдентификатору(Документы[ИмяОбъектаПриемника], GUIDИсточника);
		
		НайденПОGUID = НЕ ДокументПриемник = Неопределено;
		
	КонецЕсли;
		
	Если НЕ НайденПОGUID ИЛИ ДокументПриемник = Неопределено Тогда	// ПОИСК по НОМЕР+ДАТА.
		
		ДокументПриемник = Документы[ИмяОбъектаПриемника].НайтиПоНомеру(НомерИсточника, ДатаИсточника);
		
	КонецЕсли;
	
	Если НЕ ДокументПриемник = Неопределено Тогда

		ДатаИВремяСозданияОбъекта = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ДокументПриемник);
		
		Если НЕ ДатаИВремяСозданияОбъекта = Дата("00010101000000") И (НЕ ДатаНач = Неопределено И НЕ ДатаКон = Неопределено) Тогда
			
			// ЭтотОбъект.ИмпортУчитыватьДатуСозданияОбъекта:
			// Для элемента Документа-Источника - в таблицу добавляются только те, которые соответствуют условию по датам.
			// Для элемента Документа-Приемника - Информационно. Добавляются все, соответствующие Источнику.
			// Отбор по дате - при Запросе к Источнику.
			
			Если ДокументПриемник.Дата = ДатаИсточника Тогда
				
				СтруктураДокумент.ПриемникДругойПериод = Ложь;
				
				СтруктураДокумент.ПриемникНайденПО = ?(НайденПОGUID, "GUID+Дата", "Номер+Дата");
				СтруктураДокумент.ОбъектПриемник = ДокументПриемник;
				СтруктураДокумент.GUIDПриемника = ДокументПриемник.УникальныйИдентификатор();
				
				Возврат СтруктураДокумент;
				
			ИначеЕсли ДокументПриемник.Дата >= ДатаНач И ДокументПриемник.Дата <= ДатаКон Тогда
				
				СтруктураДокумент.ПриемникДругойПериод = Ложь;
				
				СтруктураДокумент.ПриемникНайденПО = ?(НайденПОGUID, "GUID+Период", "Номер+Период");
				СтруктураДокумент.ОбъектПриемник = ДокументПриемник;
				СтруктураДокумент.GUIDПриемника = ДокументПриемник.УникальныйИдентификатор();
				
				Возврат СтруктураДокумент;
				
			КонецЕсли;
			
		Иначе
			
			СтруктураДокумент.ПриемникДругойПериод = Истина;
			
			СтруктураДокумент.ПриемникНайденПО = ?(НайденПОGUID, "GUID дата вне периода", "Номер+Дата вне периода");
			СтруктураДокумент.ОбъектПриемник = ДокументПриемник;
			СтруктураДокумент.GUIDПриемника = ДокументПриемник.УникальныйИдентификатор();
			
			Возврат СтруктураДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Процедуры и функции ЗАГРУКИ данных Источника в Приемник.

Функция ИмпортироватьДанныеИзВнешнегоИсточникаНаСервере(СтруктураПараметровСоединения, ТаблицаИмпорта) Экспорт
	
	Если НЕ ИмпортПроверитьВнешнееСоединениеНаСервере(СтруктураПараметровСоединения) Тогда
		Возврат ТаблицаИмпорта;
	КонецЕсли;
	
	Если ЭтотОбъект.ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ЭтотОбъект.ИмпортИзмененныеОбъекты = Новый Массив;
	ЭтотОбъект.ИмпортНеопределенныеВПриемнике = Новый Массив;
	
	Отказ = Ложь;
	Для Каждого СтрокаТИмпорта ИЗ ТаблицаИмпорта Цикл	// По Метаданным текущей конфигурации.
		
		Если НЕ СтрокаТИмпорта.Загрузить Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка существования Подчиненных объектов.
		// Если Отсутствуют - создать в соответствии с установленными параметрами;
		// "Архивная" и "Использовать GUID источника" - использование при создании объекта GUID.
		// Если ни один из этих флажков не установлен - объект с новым GUID.
		
		ЭтотОбъект.ИмпортОсновнойОбъектИсточник = СтрокаТИмпорта.ОбъектИсточник;	// Строка.

		Если НЕ МетаДанные.Справочники.Найти(СтрокаТИмпорта.ИмяОбъектаПриемника) = Неопределено Тогда

			СтрокаТИмпорта.Загружен = ИмпортироватьЭлементСправочникаИзВнешнегоИсточника(СтрокаТИмпорта, Отказ);
			
		ИначеЕсли НЕ МетаДанные.ПланыВидовХарактеристик.Найти(СтрокаТИмпорта.ИмяОбъектаПриемника) = Неопределено Тогда

			СтрокаТИмпорта.Загружен = ИмпортироватьЭлементПВХИзВнешнегоИсточника(СтрокаТИмпорта, Отказ);
			
		ИначеЕсли НЕ МетаДанные.Документы.Найти(СтрокаТИмпорта.ИмяОбъектаПриемника) = Неопределено Тогда
			
			СтрокаТИмпорта.Загружен = ИмпортироватьДокументИзВнешнегоИсточника(СтрокаТИмпорта, Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтотОбъект.ИмпортНеопределенныеВПриемнике = Новый Массив;
	ЭтотОбъект.ИмпортИзмененныеОбъекты = Новый Массив;
	
	Если ЭтотОбъект.ВыполнятьВТранзакции Тогда
		
		Если НЕ Отказ Тогда
			// //ОтменитьТранзакцию();	// МА! Отладка.
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаИмпорта;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Загрузка Справочника.

Функция ИмпортироватьЭлементСправочникаИзВнешнегоИсточника(СтрокаТИмпорта, Отказ)
	
	СправочникИсточник	= ConnectionGetReference(Connection.Справочники[СтрокаТИмпорта.ИмяОбъектаИсточника], СтрокаТИмпорта.GUIDИсточника);
	СправочникПриемник	= СтрокаТИмпорта.ОбъектПриемник;
	
	// СправочникПриемник - ССЫЛКА.
	СправочникПриемникСоздан = ИмпортСоздатьИзменитьЭлементГруппуСправочника(СправочникИсточник, СтрокаТИмпорта.ИмяОбъектаИсточника, СправочникПриемник, СтрокаТИмпорта.ИмяОбъектаПриемника, СтрокаТИмпорта.Комментарий);
	
	Если СправочникПриемникСоздан Тогда
		СтрокаТИмпорта.ОбъектПриемник 	= СправочникПриемник;
		СтрокаТИмпорта.GUIDПриемника	= СправочникПриемник.УникальныйИдентификатор();
		СтрокаТИмпорта.ДатаПриемника	= GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(СправочникПриемник);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИмпортСоздатьИзменитьЭлементГруппуСправочника(Знач СправочникИсточник, Знач ИмяОбъектаИсточника, СправочникПриемник, Знач ИмяОбъектаПриемника, СтрокаТИмпортаКомментарий)
	
	НовыйОбъект = СправочникПриемник = Неопределено ИЛИ СправочникПриемник.Пустая() ИЛИ Найти(Строка(СправочникПриемник), "Объект не найден") > 0;
	
	ИскомыйОбъект = СправочникПриемник;
	Если НЕ НовыйОбъект И НЕ ЭтотОбъект.ИмпортИзмененныеОбъекты.Найти(ИскомыйОбъект.УникальныйИдентификатор()) = Неопределено Тогда
		Возврат Истина;	// ОК.
	КонецЕсли;
	
	// СправочникПриемник - ССЫЛКА.
	СправочникИсточник = СправочникИсточник.Ссылка;
	
	// Метаданные Объекта-Справочник.
	мдСправочникаИсточника = Connection.Метаданные.Справочники[ИмяОбъектаИсточника];
	мдСправочникаПриемника = Метаданные.Справочники[ИмяОбъектаПриемника];
	
	РеквизитыШапкиПриемника = мдСправочникаПриемника.Реквизиты;
	ТабличныеЧастиПриемника	= мдСправочникаПриемника.ТабличныеЧасти;
	
	// Справочник-Объект.
	Если НовыйОбъект Тогда
		
		Если СправочникИсточник.IsFolder И мдСправочникаПриемника.Иерархический Тогда
			СправочникПриемникОбъект = Справочники[ИмяОбъектаПриемника].СоздатьГруппу();
		Иначе 
			СправочникПриемникОбъект = Справочники[ИмяОбъектаПриемника].СоздатьЭлемент();
		КонецЕсли;
		
		Если ЭтотОбъект.ИмпортАрхивнаяКопияБазы ИЛИ ЭтотОбъект.ИмпортИспользоватьGUIDИсточника Тогда
		
			GUIDИсточника = ConnectionGetGUID(СправочникИсточник);	// СправочникИсточник - ССЫЛКА.
			СправочникПриемникОбъект.УстановитьСсылкуНового(Справочники[ИмяОбъектаПриемника].ПолучитьСсылку(GUIDИсточника));
		
		КонецЕсли;
		
	Иначе
		СправочникПриемникОбъект = СправочникПриемник.ПолучитьОбъект();
	КонецЕсли;
	
	БлокируемыеРеквизитыПриемника = ОбъектБДПолучитьБлокируемыеРеквизитыОбъектаНаСервере(СправочникПриемникОбъект.Ссылка);
	
	Отказ = Ложь;
	
	Если НЕ мдСправочникаПриемника.ДлинаКода = 0 Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Код") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникИсточник			, "СтандартныеРеквизиты"	, "Код"			);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникПриемникОбъект	, "СтандартныеРеквизиты"	, "Код"			);
		Отказ = ИмпортироватьРеквизит(СправочникИсточник, отРеквизитаИсточника	, "Код"			,	СправочникПриемникОбъект	, отРеквизитаПриемника		, "Код"			, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	Если НЕ мдСправочникаПриемника.ДлинаНаименования = 0 Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Наименование") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникИсточник			, "СтандартныеРеквизиты"	, "Наименование");
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникПриемникОбъект	, "СтандартныеРеквизиты"	, "Наименование");
		Отказ = ИмпортироватьРеквизит(СправочникИсточник, отРеквизитаИсточника, "Наименование"	, 	СправочникПриемникОбъект	, отРеквизитаПриемника		, "Наименование", Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	// ИСКЛЮЧИТЬ ЗАЦИКЛИВАНИЕ !!!
	ЭтоНовыйЭлементГруппа = СправочникПриемникОбъект.ЭтоНовый();
	Записан = ИмпортЗаписатьОбъект("СПР:", Справочники, ИмяОбъектаПриемника, СправочникПриемникОбъект, СправочникПриемник, ЭтоНовыйЭлементГруппа, Истина, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если мдСправочникаПриемника.Иерархический Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Родитель") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникИсточник			, "СтандартныеРеквизиты"	, "Родитель"	);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникПриемникОбъект	, "СтандартныеРеквизиты"	, "Родитель"	);
		Отказ = ИмпортироватьРеквизит(СправочникИсточник, отРеквизитаИсточника	, "Родитель"	, 	СправочникПриемникОбъект	, отРеквизитаПриемника		, "Родитель"	, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	Если мдСправочникаПриемника.Владельцы.Количество() > 0 Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Владелец") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникИсточник			, "СтандартныеРеквизиты"	, "Владелец"	);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		СправочникПриемникОбъект	, "СтандартныеРеквизиты"	, "Владелец"	);
		Отказ = ИмпортироватьРеквизит(СправочникИсточник, отРеквизитаИсточника	, "Владелец"	,	СправочникПриемникОбъект	, отРеквизитаПриемника		, "Владелец"	, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	// ПРИНАДЛЕЖНОСТЬ ГРУППЕ ИЛИ ВЛАДЕЛЬЦУ !!!
	Записан = ИмпортЗаписатьОбъект("СПР:", Справочники, ИмяОбъектаПриемника, СправочникПриемникОбъект, СправочникПриемник, ЭтоНовыйЭлементГруппа, Ложь, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РеквизитПриемника ИЗ РеквизитыШапкиПриемника Цикл
		
		Если (СправочникПриемникОбъект.ЭтоГруппа И РеквизитПриемника.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			ИЛИ (НЕ СправочникПриемникОбъект.ЭтоГруппа И РеквизитПриемника.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			Продолжить;
		КонецЕсли;
		
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению(РеквизитПриемника.Name) = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(			СправочникИсточник			, "Реквизиты"			, РеквизитПриемника.Name);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(			СправочникПриемникОбъект	, "Реквизиты"			, РеквизитПриемника.Name);
		Отказ = ИмпортироватьРеквизит(СправочникИсточник, отРеквизитаИсточника, РеквизитПриемника.Name, СправочникПриемникОбъект	, отРеквизитаПриемника	, РеквизитПриемника.Name, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
		
	КонецЦикла;
	
	// ПЕРЕД ТАБЛИЧНЫМИ ЧАСТЯМИ !!!
	Записан = ИмпортЗаписатьОбъект("СПР:", Справочники, ИмяОбъектаПриемника, СправочникПриемникОбъект, СправочникПриемник, ЭтоНовыйЭлементГруппа, Ложь, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиПриемника Цикл
		Отказ = ИмпортироватьТабличнуюЧасть("Справочники", СправочникИсточник, ИмяОбъектаИсточника, СправочникПриемникОбъект, ИмяОбъектаПриемника, ТабличнаяЧасть.Name, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЦикла;
	
	// ФИНАЛЬНАЯ ЗАПИСЬ !!!
	Записан = ИмпортЗаписатьОбъект("СПР:", Справочники, ИмяОбъектаПриемника, СправочникПриемникОбъект, СправочникПриемник, ЭтоНовыйЭлементГруппа, Ложь, Истина);
	Возврат Записан;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Загрузка Реквизита.

Функция ИмпортироватьРеквизит(Знач ОбъектИсточник, Знач отРеквизитаИсточника, Знач ИмяРеквизитаИсточника, ОбъектПриемник, Знач отРеквизитаПриемника, Знач ИмяРеквизитаПриемника, Знач Блокированный, СтрокаТИмпортаКомментарий)
	
	// ============================================
	// МА!- ТОЧКА, ТРЕБУЮЩАЯ ДАЛЬНЕЙШЕЙ ПРОРАБОТКИ.
	
	// НЕИЗМЕНЯЕМЫЕ РКВИЗИТЫ.
	// Предопределенный - Признак формируется Конфигуратором.
	// Ссылка - ссылка на сам Объект-Источник.
	// ЭтоГруппа - Признак Группы Справочника - неизменяемый реквизит.
	// ПометкаУдаления - Состояние объекта не меняем.
	
	Если ИмяРеквизитаПриемника = "Предопределенный" ИЛИ ИмяРеквизитаПриемника = "Ссылка" ИЛИ ИмяРеквизитаПриемника = "ЭтоГруппа" ИЛИ ИмяРеквизитаПриемника = "ПометкаУдаления" Тогда
		Возврат Ложь;	// Отказ = Ложь - продолжить.
	КонецЕсли;
	
	Если отРеквизитаИсточника = Неопределено ИЛИ отРеквизитаПриемника = Неопределено Тогда	// Отсутствует пара Источник + Приемник.
		Возврат Ложь;	// Отказ = Ложь - продолжить.
	КонецЕсли;
	
	ЗначениеИсточника = Неопределено;
	Попытка
		ЗначениеИсточника 	= ОбъектИсточник[ИмяРеквизитаИсточника];			// В Источнике. Значение реквизита в Источнике.
		БазовыйТипЗначения	= ТипЗнч(ЗначениеИсточника);						// В Источнике. Тип. Типы
	Исключение
		Попытка
			ЗначениеИсточника 	= ОбъектИсточник.Ссылка[ИмяРеквизитаИсточника];	// В Источнике. Значение реквизита в Источнике.
			БазовыйТипЗначения	= ТипЗнч(ЗначениеИсточника);					// В Источнике. Тип.
		Исключение
			// Значение и/или Тип Источника получить невозможно.
		    // Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			Возврат Ложь;	// Отказ = Ложь - продолжить.
		КонецПопытки;
	КонецПопытки;
	
	Если БазовыйТипЗначения = Тип("NULL") ИЛИ БазовыйТипЗначения = Тип("Неопределено")  ИЛИ БазовыйТипЗначения = Тип("Файл")  
		ИЛИ ( БазовыйТипЗначения = Тип("COMОбъект") И Connection.XMLТипЗнч(ЗначениеИсточника).TypeName = "ValueStorage" )
		ИЛИ ( БазовыйТипЗначения = Тип("COMОбъект") И Connection.XMLТипЗнч(ЗначениеИсточника).TypeName = "UUID" ) 
		ИЛИ ( БазовыйТипЗначения = Тип("COMОбъект") И Connection.XMLТипЗнч(ЗначениеИсточника).TypeName = "File" ) Тогда
		
		Если БазовыйТипЗначения = Тип("NULL") Тогда
			//ОбъектПриемник[ИмяРеквизитаПриемника] = NULL;
			Сообщить("Источник: " + ИмяРеквизитаИсточника + " имеет значение ""NULL"".", СтатусСообщения.ОченьВажное);
			Возврат Ложь;	// Отказ = Ложь - продолжить.
		ИначеЕсли БазовыйТипЗначения = Тип("Неопределено") Тогда
			Сообщить("Приемник: " + ОбъектПриемник + " Реквизит Источника: " + ИмяРеквизитаИсточника + " имеет тип ""НЕОПРЕДЕЛЕНО"".", СтатусСообщения.ОченьВажное);
			Возврат Ложь;	// Отказ = Ложь - продолжить.
		ИначеЕсли ( БазовыйТипЗначения = Тип("COMОбъект") И Connection.XMLТипЗнч(ЗначениеИсточника).TypeName = "ValueStorage" ) Тогда		// ХранилищеЗначения
			хПроверяемое = ЗначениеИзСтрокиВнутр( Connection.ЗначениеВСтрокуВнутр( ЗначениеИсточника.Получить() ) );
			хЗначение = Новый ХранилищеЗначения( хПроверяемое );
			Если (хПроверяемое = Неопределено ИЛИ СокрЛП(Строка(хПроверяемое)) = "") И НЕ ЭтотОбъект.ИмпортЗаменятьПустымиЗначениями Тогда
				Возврат Ложь;
			КонецЕсли;
			////ОбъектПриемник[ИмяРеквизитаПриемника] = Неопределено;																		// МА! ОТЛАДКА.
			ОбъектПриемник[ИмяРеквизитаПриемника] = хЗначение;
			////хПолученное = ЗначениеИзСтрокиВнутр( ЗначениеВСтрокуВнутр( ОбъектПриемник[ИмяРеквизитаПриемника].Получить() ) );			// МА! ОТЛАДКА.
			Возврат Ложь;	// Отказ = Ложь - продолжить.
		ИначеЕсли ( БазовыйТипЗначения = Тип("COMОбъект") И Connection.XMLТипЗнч(ЗначениеИсточника).TypeName = "UUID" ) Тогда				// Уникальный Идентификатор
			хЗначение = ЗначениеИзСтрокиВнутр(Connection.ЗначениеВСтрокуВнутр(ЗначениеИсточника));
			Если (хЗначение = Неопределено ИЛИ Строка(хЗначение) = "00000000-0000-0000-0000-000000000000") И НЕ ЭтотОбъект.ИмпортЗаменятьПустымиЗначениями Тогда
				Возврат Ложь;
			КонецЕсли;
			ОбъектПриемник[ИмяРеквизитаПриемника] = хЗначение;
			Возврат Ложь;	// Отказ = Ложь - продолжить.
		ИначеЕсли ( БазовыйТипЗначения = Тип("COMОбъект") И Connection.XMLТипЗнч(ЗначениеИсточника).TypeName = "File" ) Тогда
			Сообщить("Источник имеет тип ""ФАЙЛ"".", СтатусСообщения.ОченьВажное);
			Возврат Ложь;	// Отказ = Ложь - продолжить.
		КонецЕсли;
		
	ИначеЕсли БазовыйТипЗначения = Тип("Число") ИЛИ БазовыйТипЗначения = Тип("Строка") ИЛИ БазовыйТипЗначения = Тип("Дата") ИЛИ БазовыйТипЗначения = Тип("Булево") Тогда
		
		// Простые типы.
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	ИначеЕсли НЕ БазовыйТипЗначения = Тип("COMОбъект") Тогда
		
		Возврат Ложь;	// Отказ = Ложь - продолжить.
		
	КонецЕсли;
	
	// COMОбъект: ОБЪЕКТНАЯ СУЩНОСТЬ.
	// В ИДЕАЛЕ ИмяОбъектаИсточника	= ИмяОбъектаПриемника.
	
	ТипЗначенияПриемника= ConnectionПолучитьТипОбъекта(ЗначениеИсточника);	// В Источнике. Строка: "Справочник", "Документ", и т.д.
	Если ТипЗначенияПриемника = Неопределено Тогда	// Тип Источника "ХранилищеЗначения", а Приемника "Строка".
		// Например:
		// Источник: "СхемаКомпоновкиДанных" тип = "ХранилищеЗначения".
		// Сюда попадает, если в Приемнике: "СхемаКомпоновкиДанных" тип = "Строка".
	    Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"' Значение, для которого не получены Метаданные: " + ЗначениеИсточника), СтатусСообщения.ОченьВажное);
		//ВызватьИсключение НСтр("ru='Неопределен Тип Объекта Источника у Реквизита:" + ИмяРеквизитаИсточника + " для Реквизита: " + ИмяРеквизитаПриемника + "'.");
		Возврат Ложь;
	КонецЕсли;
	
	ИмяОбъектаИсточника	= ЗначениеИсточника.Метаданные().Имя;			// Строка: "Склады", и др.
	
	Если Найти(Строка(отРеквизитаПриемника), ",") > 0 Тогда				// При составном типе значения реквизита можно ориентироваться только на тип значения Источника.
		ИмяОбъектаПриемника = ИмяОбъектаИсточника;						// Строка: "Склады", и др.
	Иначе
		ЗначениеПриемника 	= ОбъектПриемник[ИмяРеквизитаПриемника];
		ИмяОбъектаПриемника = ЗначениеПриемника.Метаданные().Имя;		// Строка: "Склады", и др.
	КонецЕсли;
	
	// ЕСТЬ ЛИ В ТЕКУЩЕЙ КОНФИГУРАЦИИ ОБЪЕКТ ТИПА ТипЗначенияПриемника И ИМЕНИ ИмяОбъектаПриемника.
	
	Если МетаДанные[ТипЗначенияПриемника].Найти(ИмяОбъектаПриемника) = Неопределено Тогда
		Сообщение = "Приемник: Не найдено " + ТипЗначенияПриемника + "[" + ИмяОбъектаПриемника + "], Источник: " + ТипЗначенияПриемника + "[" + ИмяОбъектаИсточника + "]
		|Данные из источника не копируются.";
		//Если ЭтотОбъект.ПоказыватьСообщения Тогда
			Сообщить(Сообщение, СтатусСообщения.ОченьВажное);
		//КонецЕсли;
		////ВызватьИсключение НСтр("ru='" + Сообщение + "'");
		Возврат Ложь;
	КонецЕсли;
	
	// -МА! ТОЧКА, ТРЕБУЮЩАЯ ДАЛЬНЕЙШЕЙ ПРОРАБОТКИ.
	// ============================================
	
	// Переопределяем ЗначениеИсточника для функции ИмпортИзменитьЗначениеРеквизита().
	
	Если ТипЗначенияПриемника = "Перечисления" Тогда
		
		Если ЗначениеИсточника.Пустая() Тогда
			ЗначениеИсточника = Перечисления[ИмяОбъектаПриемника].ПустаяСсылка();
		Иначе
			// ИСТОЧНИК.
			Индекс = Connection.Перечисления[ИмяОбъектаИсточника].Индекс(ЗначениеИсточника);
			Имя = Connection.Метаданные.Перечисления[ИмяОбъектаИсточника].EnumValues.Get(Индекс).Name;
			
			// ПРИЕМНИК.
			Попытка
				ЗначениеИсточника = Перечисления[ИмяОбъектаПриемника][Имя];
			Исключение
			    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				ЗначениеИсточника = Перечисления[ИмяОбъектаПриемника].ПустаяСсылка();
			КонецПопытки;
		КонецЕсли;
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	ИначеЕсли ТипЗначенияПриемника = "Справочники" Тогда
		
		Если ЗначениеИсточника.Пустая() Тогда 
			ЗначениеИсточника = Справочники[ИмяОбъектаПриемника].ПустаяСсылка();
		Иначе
			СправочникИсточник	= ЗначениеИсточника.Ссылка;
			
			СтруктураСправочник	= ИмпортСопоставитьСсылкеСправочникаИсточникаСсылкуСправочникаПриемника(СправочникИсточник, ИмяОбъектаПриемника);
			ЗначениеИсточника = СтруктураСправочник.ОбъектПриемник;
			
			СоздатьИзменить = Ложь;
			Если НЕ ЗначениеЗаполнено(ЗначениеИсточника) Тогда
				СоздатьИзменить = Истина;
				ЗначениеИсточника = Неопределено;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеИсточника) И ЭтотОбъект.ИмпортИзменятьПодчиненные Тогда
				СоздатьИзменить = Истина;
			КонецЕсли;
			
			Если СоздатьИзменить Тогда
				НовыйОбъектПриемник = ЗначениеИсточника;
				СозданИзменен = ИмпортСоздатьИзменитьЭлементГруппуСправочника(СправочникИсточник, ИмяОбъектаИсточника, НовыйОбъектПриемник, ИмяОбъектаПриемника, СтрокаТИмпортаКомментарий);
				Если НЕ СозданИзменен Тогда
					Возврат Истина;
				Иначе
					ЗначениеИсточника = НовыйОбъектПриемник;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	ИначеЕсли ТипЗначенияПриемника = "ПланыВидовХарактеристик" Тогда
		
		Если ЗначениеИсточника.Пустая() Тогда 
			ЗначениеИсточника = ПланыВидовХарактеристик[ИмяОбъектаПриемника].ПустаяСсылка();
		Иначе
			ПВХИсточник	= ЗначениеИсточника.Ссылка;
			
			СтруктураПВХ = ИмпортСопоставитьСсылкеПВХИсточникаСсылкуПВХПриемника(ПВХИсточник, ИмяОбъектаПриемника);
			ЗначениеИсточника = СтруктураПВХ.ОбъектПриемник;
			
			СоздатьИзменить = Ложь;
			Если НЕ ЗначениеЗаполнено(ЗначениеИсточника) Тогда
				СоздатьИзменить = Истина;
				ЗначениеИсточника = Неопределено;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеИсточника) И ЭтотОбъект.ИмпортИзменятьПодчиненные Тогда
				СоздатьИзменить = Истина;
			КонецЕсли;
			
			Если СоздатьИзменить Тогда
				НовыйОбъектПриемник = ЗначениеИсточника;
				СозданИзменен = ИмпортСоздатьИзменитьЭлементГруппуПВХ(ПВХИсточник, ИмяОбъектаИсточника, НовыйОбъектПриемник, ИмяОбъектаПриемника, СтрокаТИмпортаКомментарий);
				Если НЕ СозданИзменен Тогда
					Возврат Истина;
				Иначе
					ЗначениеИсточника = НовыйОбъектПриемник;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	ИначеЕсли ТипЗначенияПриемника = "ПланыВидовРасчета" Тогда	// ОБРАБОТКОЙ НЕ РЕДАКТИРУЕТСЯ. ПЛАН - ???
		
		Если ЗначениеИсточника.Пустая() Тогда 
			ЗначениеИсточника = ПланыВидовРасчета[ИмяОбъектаПриемника].ПустаяСсылка();
		Иначе
			ЗначениеИсточника = ПланыВидовРасчета[ИмяОбъектаПриемника].НайтиПоКоду(ЗначениеИсточника.Код);
		КонецЕсли;
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	ИначеЕсли ТипЗначенияПриемника = "ПланыСчетов" Тогда		// ОБРАБОТКОЙ НЕ РЕДАКТИРУЕТСЯ. ПЛАН - ???
		
		Если ЗначениеИсточника.Пустая() Тогда 
			ЗначениеИсточника = ПланыСчетов[ИмяОбъектаПриемника].ПустаяСсылка();
		Иначе
			ЗначениеИсточника = ПланыСчетов[ИмяОбъектаПриемника].НайтиПоКоду(ЗначениеИсточника.Код);
		КонецЕсли;
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	ИначеЕсли ТипЗначенияПриемника = "БизнесПроцессы" Тогда		// НЕ ПЛАНИРУЕТСЯ.
	ИначеЕсли ТипЗначенияПриемника = "Задачи" Тогда				// НЕ ПЛАНИРУЕТСЯ.
	ИначеЕсли ТипЗначенияПриемника = "ПланыОбмена" Тогда		// НЕ ПЛАНИРУЕТСЯ.
		
	ИначеЕсли ТипЗначенияПриемника = "Документы" Тогда			// Документ-Основание.
		
		Если ЗначениеИсточника.Пустая() Тогда 
			ЗначениеИсточника 	= Документы[ИмяОбъектаПриемника].ПустаяСсылка();
		Иначе
			ДокументИсточник	= ЗначениеИсточника.Ссылка;
			
			СтруктураДокумент = ИмпортСопоставитьДокументуИсточникуДокументПриемник(ДокументИсточник, ИмяОбъектаПриемника);
			ЗначениеИсточника = СтруктураДокумент.ОбъектПриемник;
			
			СоздатьИзменить = Ложь;
			Если НЕ ЗначениеЗаполнено(ЗначениеИсточника) Тогда
				СоздатьИзменить = Истина;
				ЗначениеИсточника = Неопределено;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеИсточника) И ЭтотОбъект.ИмпортИзменятьПодчиненные Тогда
				СоздатьИзменить = Истина;
			КонецЕсли;
			
			Если СоздатьИзменить Тогда
				НовыйОбъектПриемник = ЗначениеИсточника;
				СозданИзменен = ИмпортСоздатьИзменитьДокумент(ДокументИсточник, ИмяОбъектаИсточника, НовыйОбъектПриемник, ИмяОбъектаПриемника, СтрокаТИмпортаКомментарий);
				Если НЕ СозданИзменен Тогда
					Возврат Истина;
				Иначе
					ЗначениеИсточника = НовыйОбъектПриемник;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Возврат ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, ИмяРеквизитаПриемника, отРеквизитаПриемника, Блокированный, ЗначениеИсточника, СтрокаТИмпортаКомментарий);	// Отказ = Ложь - продолжить.
		
	КонецЕсли;
	
	Возврат Ложь;	// Отказ = Ложь - продолжить.
	
КонецФункции

Функция ИмпортИзменитьЗначениеРеквизита(ОбъектПриемник, Знач ИмяРеквизитаПриемника, Знач отРеквизитаПриемника, Знач Блокированный, Знач ЗначениеРеквизита, СтрокаТИмпортаКомментарий)
	
	// Если проблема с записью "Ключевого" реквизита - Ложь, Иначе - Истина.
	
	МассивКлючевыхРеквизитов = Новый Массив;
	
	// Справочники. Шапка элемента.
	МассивКлючевыхРеквизитов.Добавить("Код");
	МассивКлючевыхРеквизитов.Добавить("Наименование");
	МассивКлючевыхРеквизитов.Добавить("Родитель");
	МассивКлючевыхРеквизитов.Добавить("Владелец");
	
	// Документы. Шапка документа.
	МассивКлючевыхРеквизитов.Добавить("Номер");
	МассивКлючевыхРеквизитов.Добавить("Дата");
	
	// Документы. Табличная часть.
	МассивКлючевыхРеквизитов.Добавить("Номенклатура");
	МассивКлючевыхРеквизитов.Добавить("Количество");
	МассивКлючевыхРеквизитов.Добавить("Сумма");
	
	КлючевойРеквизит = НЕ МассивКлючевыхРеквизитов.Найти(ИмяРеквизитаПриемника) = Неопределено;
	
	Попытка
		
		Если отРеквизитаПриемника.СодержитТип(Тип("Строка")) ИЛИ отРеквизитаПриемника.СодержитТип(ТипЗнч(ЗначениеРеквизита)) Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) И НЕ ЭтотОбъект.ИмпортЗаменятьПустымиЗначениями Тогда
				Возврат Ложь;
			КонецЕсли;
			Если НЕ Блокированный ИЛИ (Блокированный И ЗначениеЗаполнено(ЗначениеРеквизита)) Тогда		// Для блокированных реквизитов значение на Пустое изменяться не должно.
				ОбъектПриемник[ИмяРеквизитаПриемника] = ЗначениеРеквизита;
			КонецЕсли;
			Возврат Ложь;		// Отказ = Ложь - продолжить.
			
		Иначе
			
			Сообщение = НСтр("ru = 'Источник: """ + ВРег(ЭтотОбъект.ИмпортОсновнойОбъектИсточник) + """: 
			|Несоответствие типов Источника и Приемника. 
			|Не удалось записать значение: """ + ОбъектПриемник +  "[" + ИмяРеквизитаПриемника + "]=""" + ЗначениеРеквизита + "
			|"" Тип реквизита Приемника:""" + ТипЗнч(ОбъектПриемник[ИмяРеквизитаПриемника]) + """ Тип значения Источника:""" + ТипЗнч(ЗначениеРеквизита) + """.'");
			
			СтрокаТИмпортаКомментарий = СтрокаТИмпортаКомментарий + Сообщение + "/";
			
			Если ЭтотОбъект.ПоказыватьСообщения Тогда
				Сообщить(Сообщение, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Если КлючевойРеквизит Тогда
				Возврат Истина;	// Отказ = Истина - прервать.
			Иначе
				Возврат Ложь;	// Отказ = Ложь - продолжить.
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Если КлючевойРеквизит Тогда
			
			Сообщение = НСтр("ru = 'Не удалось записать значение Объект: " + ОбъектПриемник + " Ключевой реквизит: " + ИмяРеквизитаПриемника + " Значение: " + ЗначениеРеквизита + " Тип: " + ТипЗнч(ЗначениеРеквизита) + ".
			|" +ОписаниеОшибки()+"'");
			
			СтрокаТИмпортаКомментарий = СтрокаТИмпортаКомментарий + Сообщение + "/";
			
			Если ЭтотОбъект.ПоказыватьСообщения Тогда
				Сообщить(Сообщение, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Истина;		// Отказ = Истина - прервать.
		Иначе
			Возврат Ложь;		// Отказ = Ложь - продолжить.
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Истина;				// Отказ = Истина - прервать.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Загрузка ТабличнойЧасти.

Функция ИмпортироватьТабличнуюЧасть(Знач ТипОбъекта, Знач ОбъектИсточник, Знач ИмяОбъектаИсточника, ОбъектПриемник, Знач ИмяОбъектаПриемника, Знач ИмяТабличнойЧасти, СтрокаТИмпортаКомментарий)
	
	// ============================================
	// МА!- ТОЧКА, ТРЕБУЮЩАЯ ДАЛЬНЕЙШЕЙ ПРОРАБОТКИ.
	
	Если НЕ ИмпортПроверитьНаличиеТабличнойЧастиОбъекта(ОбъектИсточник, ИмяТабличнойЧасти) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ИмпортПроверитьНаличиеТабличнойЧастиОбъекта(ОбъектПриемник, ИмяТабличнойЧасти) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// -МА! ТОЧКА, ТРЕБУЮЩАЯ ДАЛЬНЕЙШЕЙ ПРОРАБОТКИ.
	// ============================================
	
	Попытка
		ОбъектПриемник[ИмяТабличнойЧасти].Очистить();
	Исключение
		// Табличная часть не изменяется.
		Возврат Ложь;	// Отказ = Ложь - продолжить.
	КонецПопытки;
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ОбъектИсточник[ИмяТабличнойЧасти] Цикл
		
		НоваяСтрока = ОбъектПриемник[ИмяТабличнойЧасти].Добавить();
		
		РеквизитыТабличнойЧастиПриемника = Метаданные[ТипОбъекта][ИмяОбъектаПриемника].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
		
		Для Каждого РеквизитПриемника ИЗ РеквизитыТабличнойЧастиПриемника Цикл
			Блокированный = Ложь;
			отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(				ОбъектИсточник	, ИмяТабличнойЧасти		, РеквизитПриемника.Name);
			отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(				ОбъектПриемник	, ИмяТабличнойЧасти		, РеквизитПриемника.Name);
			Отказ = ИмпортироватьРеквизит(СтрокаТабличнойЧасти, отРеквизитаИсточника, РеквизитПриемника.Name , 	НоваяСтрока		, отРеквизитаПриемника	, РеквизитПриемника.Name, Блокированный, СтрокаТИмпортаКомментарий);
			Если Отказ Тогда Возврат Истина; КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;	// Отказ = Ложь - продолжить.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Загрузка ПланаВидовХарактеристик.

Функция ИмпортироватьЭлементПВХИзВнешнегоИсточника(СтрокаТИмпорта, Отказ)
	
	ПВХИсточник	= ConnectionGetReference(Connection.ПланыВидовХарактеристик[СтрокаТИмпорта.ИмяОбъектаИсточника], СтрокаТИмпорта.GUIDИсточника);
	ПВХПриемник	= СтрокаТИмпорта.ОбъектПриемник;
	
	// ПВХПриемник - ССЫЛКА.
	ПВХПриемникСоздан = ИмпортСоздатьИзменитьЭлементГруппуПВХ(ПВХИсточник, СтрокаТИмпорта.ИмяОбъектаИсточника, ПВХПриемник, СтрокаТИмпорта.ИмяОбъектаПриемника, СтрокаТИмпорта.Комментарий);
	
	Если ПВХПриемникСоздан Тогда
		СтрокаТИмпорта.ОбъектПриемник 	= ПВХПриемник;
		СтрокаТИмпорта.GUIDПриемника	= ПВХПриемник.УникальныйИдентификатор();
		СтрокаТИмпорта.ДатаПриемника	= GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ПВХПриемник);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИмпортСоздатьИзменитьЭлементГруппуПВХ(Знач ПВХИсточник, Знач ИмяОбъектаИсточника, ПВХПриемник, Знач ИмяОбъектаПриемника, СтрокаТИмпортаКомментарий)
	
	НовыйОбъект = ПВХПриемник = Неопределено ИЛИ ПВХПриемник.Пустая() ИЛИ Найти(Строка(ПВХПриемник), "Объект не найден") > 0;
	
	ИскомыйОбъект = ПВХПриемник;
	Если НЕ НовыйОбъект И НЕ ЭтотОбъект.ИмпортИзмененныеОбъекты.Найти(ИскомыйОбъект.УникальныйИдентификатор()) = Неопределено Тогда
		Возврат Истина;	// ОК.
	КонецЕсли;
	
	// ПВХПриемник - ССЫЛКА.
	ПВХИсточник = ПВХИсточник.Ссылка;
	
	// Метаданные Объекта-ПВХ.
	мдПВХИсточника = Connection.Метаданные.ПланыВидовХарактеристик[ИмяОбъектаИсточника];
	мдПВХПриемника = Метаданные.ПланыВидовХарактеристик[ИмяОбъектаПриемника];
	
	РеквизитыШапкиПриемника = мдПВХПриемника.Реквизиты;
	ТабличныеЧастиПриемника	= мдПВХПриемника.ТабличныеЧасти;
	
	// ПВХ-Объект.
	Если НовыйОбъект Тогда
		
		Если ПВХИсточник.IsFolder И мдПВХПриемника.Иерархический Тогда
			ПВХПриемникОбъект = ПланыВидовХарактеристик[ИмяОбъектаПриемника].СоздатьГруппу();
		Иначе 
			ПВХПриемникОбъект = ПланыВидовХарактеристик[ИмяОбъектаПриемника].СоздатьЭлемент();
		КонецЕсли;
		
		Если ЭтотОбъект.ИмпортАрхивнаяКопияБазы ИЛИ ЭтотОбъект.ИмпортИспользоватьGUIDИсточника Тогда
		
			GUIDИсточника = ConnectionGetGUID(ПВХИсточник);	// ПВХИсточник - ССЫЛКА.
			ПВХПриемникОбъект.УстановитьСсылкуНового(ПланыВидовХарактеристик[ИмяОбъектаПриемника].ПолучитьСсылку(GUIDИсточника));
		
		КонецЕсли;
		
	Иначе
		ПВХПриемникОбъект = ПВХПриемник.ПолучитьОбъект();
	КонецЕсли;
	
	БлокируемыеРеквизитыПриемника = ОбъектБДПолучитьБлокируемыеРеквизитыОбъектаНаСервере(ПВХПриемникОбъект.Ссылка);
	
	Отказ = Ложь;
	
	Если НЕ мдПВХПриемника.ДлинаКода = 0 Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Код") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХИсточник			, "СтандартныеРеквизиты"	, "Код"			);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХПриемникОбъект	, "СтандартныеРеквизиты"	, "Код"			);
		Отказ = ИмпортироватьРеквизит(ПВХИсточник, отРеквизитаИсточника, "Код"					, 	ПВХПриемникОбъект	, отРеквизитаПриемника		, "Код"			, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	Если НЕ мдПВХПриемника.ДлинаНаименования = 0 Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Наименование") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХИсточник			, "СтандартныеРеквизиты"	, "Наименование");
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХПриемникОбъект	, "СтандартныеРеквизиты"	, "Наименование");
		Отказ = ИмпортироватьРеквизит(ПВХИсточник, отРеквизитаИсточника, "Наименование"			, 	ПВХПриемникОбъект	, отРеквизитаПриемника		, "Наименование", Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	// ИСКЛЮЧИТЬ ЗАЦИКЛИВАНИЕ !!!
	ЭтоНовыйЭлементГруппа = ПВХПриемникОбъект.ЭтоНовый();
	Записан = ИмпортЗаписатьОбъект("ПВХ:", ПланыВидовХарактеристик, ИмяОбъектаПриемника, ПВХПриемникОбъект, ПВХПриемник, ЭтоНовыйЭлементГруппа, Истина, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если мдПВХПриемника.Иерархический Тогда
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Родитель") = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХИсточник			, "СтандартныеРеквизиты"	, "Родитель"	);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХПриемникОбъект	, "СтандартныеРеквизиты"	, "Родитель"	);
		Отказ = ИмпортироватьРеквизит(ПВХИсточник, отРеквизитаИсточника, "Родитель"				, 	ПВХПриемникОбъект	, отРеквизитаПриемника		, "Родитель"	, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЕсли;
	
	// ПРИНАДЛЕЖНОСТЬ ГРУППЕ !!!
	Записан = ИмпортЗаписатьОбъект("ПВХ:", ПланыВидовХарактеристик, ИмяОбъектаПриемника, ПВХПриемникОбъект, ПВХПриемник, ЭтоНовыйЭлементГруппа, Ложь, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РеквизитПриемника ИЗ РеквизитыШапкиПриемника Цикл
		
		Если (ПВХПриемникОбъект.ЭтоГруппа И РеквизитПриемника.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
			ИЛИ (НЕ ПВХПриемникОбъект.ЭтоГруппа И РеквизитПриемника.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
			Продолжить;
		КонецЕсли;
		
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению(РеквизитПриемника.Name) = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХИсточник			, "Реквизиты"				, РеквизитПриемника.Name);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ПВХПриемникОбъект	, "Реквизиты"				, РеквизитПриемника.Name);
		Отказ = ИмпортироватьРеквизит(ПВХИсточник, отРеквизитаИсточника, РеквизитПриемника.Name	, 	ПВХПриемникОбъект	, отРеквизитаПриемника		, РеквизитПриемника.Name, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
		
	КонецЦикла;
	
	// ПЕРЕД ТАБЛИЧНЫМИ ЧАСТЯМИ !!!
	Записан = ИмпортЗаписатьОбъект("ПВХ:", ПланыВидовХарактеристик, ИмяОбъектаПриемника, ПВХПриемникОбъект, ПВХПриемник, ЭтоНовыйЭлементГруппа, Ложь, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиПриемника Цикл
		Отказ = ИмпортироватьТабличнуюЧасть( "ПланыВидовХарактеристик", ПВХИсточник, ИмяОбъектаИсточника, ПВХПриемникОбъект, ИмяОбъектаПриемника, ТабличнаяЧасть.Name, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЦикла;
	
	// ФИНАЛЬНАЯ ЗАПИСЬ !!!
	Записан = ИмпортЗаписатьОбъект("ПВХ:", ПланыВидовХарактеристик, ИмяОбъектаПриемника, ПВХПриемникОбъект, ПВХПриемник, ЭтоНовыйЭлементГруппа, Ложь, Истина);
	Возврат Записан;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Загрузка Документа.

Функция ИмпортироватьДокументИзВнешнегоИсточника(СтрокаТИмпорта, Отказ)
	
	ДокументИсточник= ConnectionGetReference(Connection.Документы[СтрокаТИмпорта.ИмяОбъектаИсточника], СтрокаТИмпорта.GUIDИсточника);
	ДокументПриемник= СтрокаТИмпорта.ОбъектПриемник;
	
	// ДокументПриемник - ССЫЛКА.
	ДокументПриемникСоздан = ИмпортСоздатьИзменитьДокумент(ДокументИсточник, СтрокаТИмпорта.ИмяОбъектаИсточника, ДокументПриемник, СтрокаТИмпорта.ИмяОбъектаПриемника, СтрокаТИмпорта.Комментарий);
	
	Если ДокументПриемникСоздан Тогда
		СтрокаТИмпорта.ОбъектПриемник 	= ДокументПриемник;
		СтрокаТИмпорта.GUIDПриемника	= ДокументПриемник.УникальныйИдентификатор();
		СтрокаТИмпорта.ДатаПриемника	= GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ДокументПриемник);
		Попытка
			СтрокаТИмпорта.СуммаПриемника = ДокументПриемник.СуммаДокумента;
		Исключение
			Попытка
				СтрокаТИмпорта.СуммаПриемника = ДокументПриемник.Сумма;
			Исключение
			КонецПопытки;
		КонецПопытки;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ИмпортСоздатьИзменитьДокумент(Знач ДокументИсточник, Знач ИмяОбъектаИсточника, ДокументПриемник, Знач ИмяОбъектаПриемника, СтрокаТИмпортаКомментарий)
	
	НовыйОбъект = ДокументПриемник = Неопределено ИЛИ ДокументПриемник.Пустая() ИЛИ Найти(Строка(ДокументПриемник), "Объект не найден") > 0;
	
	ИскомыйОбъект = ДокументПриемник;
	Если НЕ НовыйОбъект И НЕ ЭтотОбъект.ИмпортИзмененныеОбъекты.Найти(ИскомыйОбъект.УникальныйИдентификатор()) = Неопределено Тогда
		Возврат Истина;	// ОК.
	КонецЕсли;
	
	// ДокументПриемник - ССЫЛКА.
	ДокументИсточник = ДокументИсточник.Ссылка;
	
	// Метаданные Объекта-Документ.
	мдДокументаПриемника 	= Метаданные.Документы[ИмяОбъектаПриемника];
	РеквизитыШапкиПриемника = мдДокументаПриемника.Реквизиты;
	ТабличныеЧастиПриемника = мдДокументаПриемника.ТабличныеЧасти;
	
	НовыйДокумент = ДокументПриемник = Неопределено ИЛИ ДокументПриемник.Пустая() ИЛИ Найти(Строка(ДокументПриемник), "Объект не найден") > 0;
	
	// Документ-Объект.
	Если НовыйОбъект Тогда
		
		ДокументПриемникОбъект = Документы[ИмяОбъектаПриемника].СоздатьДокумент();
	
		Если ЭтотОбъект.ИмпортАрхивнаяКопияБазы ИЛИ ЭтотОбъект.ИмпортИспользоватьGUIDИсточника Тогда
		
			GUIDИсточника = ConnectionGetGUID(ДокументИсточник);	// ДокументИсточник - ССЫЛКА.
			ДокументПриемникОбъект.УстановитьСсылкуНового(Документы[ИмяОбъектаПриемника].ПолучитьСсылку(GUIDИсточника));
			
		КонецЕсли;
		
	Иначе
		ДокументПриемникОбъект = ДокументПриемник.ПолучитьОбъект();
	КонецЕсли;
	
	БлокируемыеРеквизитыПриемника = ОбъектБДПолучитьБлокируемыеРеквизитыОбъектаНаСервере(ДокументПриемникОбъект.Ссылка);
	
	Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Номер") = Неопределено;
	отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ДокументИсточник		, "СтандартныеРеквизиты"	, "Номер");
	отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ДокументПриемникОбъект	, "СтандартныеРеквизиты"	, "Номер");
	Отказ = ИмпортироватьРеквизит(ДокументИсточник, отРеквизитаИсточника, "Номер"			, 	ДокументПриемникОбъект	, отРеквизитаПриемника		, "Номер", Блокированный, СтрокаТИмпортаКомментарий);
	Если Отказ Тогда Возврат Ложь; КонецЕсли;
	
	Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению("Дата") = Неопределено;
	отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ДокументИсточник		, "СтандартныеРеквизиты"	, "Дата");
	отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(		ДокументПриемникОбъект	, "СтандартныеРеквизиты"	, "Дата");
	Отказ = ИмпортироватьРеквизит(ДокументИсточник, отРеквизитаИсточника, "Дата"			,	ДокументПриемникОбъект	, отРеквизитаПриемника		, "Дата", Блокированный, СтрокаТИмпортаКомментарий);
	Если Отказ Тогда Возврат Ложь; КонецЕсли;
	
	// ИСКЛЮЧИТЬ ЗАЦИКЛИВАНИЕ !!!
	ЭтоНовыйДокументПриемникОбъект = ДокументПриемникОбъект.ЭтоНовый();
	Записан = ИмпортЗаписатьОбъект("ДОК:", Документы, ИмяОбъектаПриемника, ДокументПриемникОбъект, ДокументПриемник, ЭтоНовыйДокументПриемникОбъект, Истина, Ложь);
	Если НЕ Записан Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого РеквизитПриемника ИЗ РеквизитыШапкиПриемника Цикл
		Блокированный = НЕ БлокируемыеРеквизитыПриемника.НайтиПоЗначению(РеквизитПриемника.Name) = Неопределено;
		отРеквизитаИсточника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(			ДокументИсточник		, "Реквизиты"			, РеквизитПриемника.Name);
		отРеквизитаПриемника = ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(			ДокументПриемникОбъект	, "Реквизиты"			, РеквизитПриемника.Name);
		Отказ = ИмпортироватьРеквизит(ДокументИсточник, отРеквизитаИсточника, РеквизитПриемника.Name, 	ДокументПриемникОбъект	, отРеквизитаПриемника	, РеквизитПриемника.Name, Блокированный, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧастьПриемника ИЗ ТабличныеЧастиПриемника Цикл
		Отказ = ИмпортироватьТабличнуюЧасть("Документы", ДокументИсточник, ИмяОбъектаИсточника, ДокументПриемникОбъект, ИмяОбъектаПриемника, ТабличнаяЧастьПриемника.Name, СтрокаТИмпортаКомментарий);
		Если Отказ Тогда Возврат Ложь; КонецЕсли;
	КонецЦикла;
	
	// ФИНАЛЬНАЯ ЗАПИСЬ !!!
	Записан = ИмпортЗаписатьОбъект("ДОК:", Документы, ИмяОбъектаПриемника, ДокументПриемникОбъект, ДокументПриемник, ЭтоНовыйДокументПриемникОбъект, Ложь, Истина);
	Возврат Записан;
	
КонецФункции

Функция ИмпортЗаписатьОбъект(ТипОбъектаПриемника, МенеджерОбъектовПриемника, ИмяОбъектаПриемника, ПриемникОбъект, ПриемникСсылка, ЭтоНовыйОбъектПриемник, ПерваяЗапись = Ложь, ФинальнаяЗапись = Ложь)
	
	Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ПриемникОбъект) Тогда
		ПриемникОбъект.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
	КонецЕсли;
	
	Попытка
		ПриемникОбъект.Записать();					// Проведение в режиме обмена невозможно, поэтому и для документа - ТОЛЬКО ЗАПИСЬ.
		ПриемникСсылка = ПриемникОбъект.Ссылка;
		
		Если ПерваяЗапись Тогда
			ЭтотОбъект.ИмпортИзмененныеОбъекты.Добавить(ПриемникСсылка.УникальныйИдентификатор());
		ИначеЕсли ФинальнаяЗапись И ЭтотОбъект.ПоказыватьСообщения Тогда
			Сообщить(?(ЭтоНовыйОбъектПриемник, "+ Создан(а) новый(ая) ", "_ Изменен(а) существующий(ая) ") + ТипОбъектаПриемника + " " + ПриемникСсылка);
		КонецЕсли;

		Возврат Истина;
	Исключение
		Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.ОченьВажное);
		ПриемникСсылка = МенеджерОбъектовПриемника[ИмяОбъектаПриемника].ПустаяСсылка();
		Возврат Ложь;	// Отказ = Ложь - прервать.
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Проведение документов после загрузки.

Функция ИмпортПровестиДокументыНаСервере(ТаблицаИмпорта) Экспорт
	
	Для Каждого СтрокаТОбъектов ИЗ ТаблицаИмпорта Цикл
		
		Если НЕ СтрокаТОбъектов.Загрузить ИЛИ НЕ СтрокаТОбъектов.Загружен ИЛИ НЕ ЗначениеЗаполнено(СтрокаТОбъектов.ОбъектПриемник) ИЛИ СтрокаТОбъектов.ОбъектПриемник.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		мдОбъектаПриемника = СтрокаТОбъектов.ОбъектПриемник.Метаданные();
		
		Попытка
			ДокументОснование = СтрокаТОбъектов.ОбъектПриемник.Основание;
			Если ЗначениеЗаполнено(ДокументОснование) И НЕ ДокументОснование.ПометкаУдаления Тогда
				ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
				Если ЭтотОбъект.ПоказыватьСообщения Тогда
					Сообщить("Проведен документ: " + ДокументОснование);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Попытка
				ДокументОснование = СтрокаТОбъектов.ОбъектПриемник.ДокументОснование;
				Если ЗначениеЗаполнено(ДокументОснование) И НЕ ДокументОснование.ПометкаУдаления Тогда
					ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Проведен документ: " + ДокументОснование);
					КонецЕсли;
				КонецЕсли;
			Исключение
				Попытка
					ДокументОснование = СтрокаТОбъектов.ОбъектПриемник.ЗаказПоставщику;
					Если ЗначениеЗаполнено(ДокументОснование) И НЕ ДокументОснование.ПометкаУдаления Тогда
						ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
						Если ЭтотОбъект.ПоказыватьСообщения Тогда
							Сообщить("Проведен документ: " + ДокументОснование);
						КонецЕсли;
					КонецЕсли;
				Исключение
					//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				КонецПопытки;
				//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
			//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
		ДокументПриемникОбъект = СтрокаТОбъектов.ОбъектПриемник.ПолучитьОбъект();
		ДокументПриемникОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		СтрокаТОбъектов.ПриемникПерепроведен = ДокументПриемникОбъект.Проведен;
		
		Если ЭтотОбъект.ПоказыватьСообщения Тогда
			Сообщить("Проведен документ: " + ДокументПриемникОбъект);
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ТаблицаИмпорта;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Вспомогательные.

Функция ИмпортПолучитьОписаниеТиповРеквизитаОбъектаВГруппеРеквизитов(Знач ОбъектИсследуемый, Знач ГруппаРеквизитовИмяТЧ, Знач ИмяРеквизита)
	
	мдОбъектаИсследуемого = ОбъектИсследуемый.Метаданные();
	
	Попытка
		Если ГруппаРеквизитовИмяТЧ = "СтандартныеРеквизиты" Тогда
			ЕстьРеквизит = Ложь;
			Для Каждого Реквизит ИЗ мдОбъектаИсследуемого.СтандартныеРеквизиты Цикл
				Если ВРег(Реквизит.Имя) = СокрЛП(ВРег(ИмяРеквизита)) Тогда
					ЕстьРеквизит = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьРеквизит Тогда
				Возврат мдОбъектаИсследуемого.СтандартныеРеквизиты[ИмяРеквизита].Тип;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ГруппаРеквизитовИмяТЧ = "Реквизиты" Тогда
			Если НЕ мдОбъектаИсследуемого.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
				Возврат мдОбъектаИсследуемого.Реквизиты[ИмяРеквизита].Тип;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ГруппаРеквизитовИмяТЧ = "ОбщиеРеквизиты" Тогда
			Возврат Неопределено;
		Иначе	// ТабличнаяЧасть.
			ЕстьРеквизит = Ложь;
			Для Каждого Реквизит ИЗ мдОбъектаИсследуемого.ТабличныеЧасти[ГруппаРеквизитовИмяТЧ].Реквизиты Цикл
				Если ВРег(Реквизит.Имя) = СокрЛП(ВРег(ИмяРеквизита)) Тогда
					ЕстьРеквизит = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьРеквизит Тогда
				Возврат мдОбъектаИсследуемого.ТабличныеЧасти[ГруппаРеквизитовИмяТЧ].Реквизиты[ИмяРеквизита].Тип;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Исключение
		Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмпортПроверитьНаличиеТабличнойЧастиОбъекта(ИсследуемыйОбъект, ИмяТабличнойЧасти)
	
	мдОбъектаИсследуемого = ИсследуемыйОбъект.Метаданные();
	
	Для Каждого ТабличнаяЧасть ИЗ мдОбъектаИсследуемого.ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Имя = ИмяТабличнойЧасти Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ. Статистика документов.

Функция ПолучитьСтатистикуДокументовНаСервере(ТаблицаСтатистика, СтатДатаНач, СтатДатаКон, СтатОрганизация) Экспорт
	
	ТаблицаСтатистика.Очистить();
	
	Если СтатДатаКон = Дата("00010101") Тогда
		СтатДатаКон = ТекущаяДата();
	КонецЕсли;
	
	ИндексДокумента = 0;
	Для Каждого мдДокумента ИЗ Метаданные.Документы Цикл
		ИндексДокумента = ИндексДокумента + 1;
		
		Комментарий = "";
		ЕстьРеквизитОрганизация = НЕ мдДокумента.Реквизиты.Найти("Организация") = Неопределено;
		
		Периодичность = Строка(мдДокумента.ПериодичностьНомера);
		
		ПроведениеРазрешено = мдДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		КоличествоДвижений 	= мдДокумента.Движения.Количество();
		
		Комментарий = "" + ?(НЕ СокрЛП(мдДокумента.Нумератор) = "", "Нумератор: " + мдДокумента.Нумератор, "Без нумератора") + ", " + ?(мдДокумента.КонтрольУникальности, "Контроль уникальности", "Без контроля уникальности") + ", " + ?(мдДокумента.Автонумерация, "Автонумерация", "Без автонумерации");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	" + ИндексДокумента + " КАК Нпп,
		|	""" + МДдокумента.Имя + """ КАК Документ,
		|	""" + МДдокумента.Синоним + """ КАК Синоним,
		|	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК Количество,
		|	ЕСТЬNULL(МАКСИМУМ(ЗапросПоПроведенным.КоличествоПроведенных), 0) КАК КоличествоПроведенных,
		|	МИНИМУМ(ДокументОСНОВНОЙ.Дата) КАК ДатаПервого,
		|	МАКСИМУМ(ДокументОСНОВНОЙ.Дата) КАК ДатаПоследнего,
		|	РАЗНОСТЬДАТ(МИНИМУМ(ДокументОСНОВНОЙ.Дата),МАКСИМУМ(ДокументОСНОВНОЙ.Дата),ДЕНЬ)+1 КАК ПериодДни,
		|	ВЫРАЗИТЬ(КОЛИЧЕСТВО(*)/(РАЗНОСТЬДАТ(МИНИМУМ(ДокументОСНОВНОЙ.Дата),МАКСИМУМ(ДокументОСНОВНОЙ.Дата),ДЕНЬ)+1) КАК ЧИСЛО(15,3)) КАК СреднееЗаДень,
		|	""" + Комментарий + """ КАК Комментарий,
		|	""" + ПроведениеРазрешено + """ КАК ПроведениеРазрешено,
		|	""" + КоличествоДвижений + """ КАК КоличествоДвижений,
		|	""" + ЕстьРеквизитОрганизация + """ КАК ЕстьРеквизитОрганизация,
		|	""" + Периодичность + """ КАК Периодичность
		|ИЗ
		|	Документ." + МДдокумента.Имя + " КАК ДокументОСНОВНОЙ,
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КоличествоПроведенных
		|	ИЗ
		|		Документ." + МДдокумента.Имя + " КАК ДокументПРОВЕДЕННЫЙ
		|	ГДЕ
		|		ДокументПРОВЕДЕННЫЙ.Проведен
		|		И ДокументПРОВЕДЕННЫЙ.Дата Между &ДатаНач И &ДатаКон
		|		И &УсловиеПоОрганизацииПРОВЕДЕННЫЕ) КАК ЗапросПоПроведенным
		|ГДЕ
		|	ДокументОСНОВНОЙ.Дата Между &ДатаНач И &ДатаКон
		|	И &УсловиеПоОрганизацииОСНОВНОЙ";
		
		Если НЕ мдДокумента.Реквизиты.Найти("Организация") = Неопределено И ЗначениеЗаполнено(СтатОрганизация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизацииОСНОВНОЙ", "ДокументОСНОВНОЙ.Организация = &Организация");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизацииПРОВЕДЕННЫЕ", "ДокументПРОВЕДЕННЫЙ.Организация = &Организация");
			Запрос.УстановитьПараметр("Организация", СтатОрганизация);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизацииОСНОВНОЙ", "Истина");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизацииПРОВЕДЕННЫЕ", "Истина");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(СтатДатаНач));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(СтатДатаКон));
		
		Результат = Запрос.Выполнить().Выгрузить();
		ЗаполнитьЗначенияСвойств(ТаблицаСтатистика.Добавить(), Результат[0]);
	КонецЦикла;
	
	НоваяСтрока = ТаблицаСтатистика.Вставить(0);
	НоваяСтрока.Синоним = "ИТОГО:";
	НоваяСтрока.Количество = ТаблицаСтатистика.Итог("Количество");
	НоваяСтрока.КоличествоПроведенных = ТаблицаСтатистика.Итог("КоличествоПроведенных");
	
	Если ЗначениеЗаполнено(СтатОрганизация) Тогда
		МассивСтрокСОрганизацией = ТаблицаСтатистика.НайтиСтроки(Новый Структура("ЕстьРеквизитОрганизация", Истина));
		КВоДокументовОрганизацииОБЩЕЕ = 0;
		КВоДокументовОрганизацииПРОВЕДЕННЫХ = 0;
		Для Каждого СтрокаМассива ИЗ МассивСтрокСОрганизацией Цикл
			КВоДокументовОрганизацииОБЩЕЕ = КВоДокументовОрганизацииОБЩЕЕ + СтрокаМассива.Количество;
			КВоДокументовОрганизацииПРОВЕДЕННЫХ = КВоДокументовОрганизацииПРОВЕДЕННЫХ + СтрокаМассива.КоличествоПроведенных;
		КонецЦикла;
		НоваяСтрока.Количество = "" + НоваяСтрока.Количество + "/" + КВоДокументовОрганизацииОБЩЕЕ;
		НоваяСтрока.КоличествоПроведенных = "" + НоваяСтрока.КоличествоПроведенных + "/" + КВоДокументовОрганизацииПРОВЕДЕННЫХ;
	КонецЕсли;
	
	Возврат ТаблицаСтатистика;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО) ДВИЖЕНИЯ".
//

// Вкладка "Документ дополнительно". Движения документов. Заполнение списка видов документов.
//
Функция ДокументДвиженияЗаполнитьСписокВидовДокументов(ДокументСписокВидов, ДвОрганизация) Экспорт
	
	ДокументСписокВидов.Очистить();
	
	Для Каждого мдДокумента ИЗ Метаданные.Документы Цикл
		
		Если мдДокумента.Движения.Количество() = 0 Тогда	// Без возможных движений нецелесообразно.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДокументСписокВидов.Добавить();
		
		НоваяСтрока.Имя = мдДокумента.Имя;
		НоваяСтрока.ПроведениеРазрешено = мдДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		
		Попытка
			// Только документы, у которых проведение разрешено.
			Если НоваяСтрока.ПроведениеРазрешено Тогда
				НоваяСтрока.Картинка = БиблиотекаКартинок.Провести;
			Иначе
				НоваяСтрока.Картинка = БиблиотекаКартинок.Удалить;
			КонецЕсли;
		Исключение
		    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;
		
		// Только документы, у которых проведение разрешено.
		Если НоваяСтрока.ПроведениеРазрешено Тогда
			НоваяСтрока.Пометка = Истина;
		Иначе
			НоваяСтрока.Пометка = Ложь;
			НоваяСтрока.Комментарий = "Проведение запрещено.";
		КонецЕсли;
		
		Если мдДокумента.Имя = "ЧекККМ" ИЛИ мдДокумента.Имя = "ЧекККМВозврат" Тогда				// Чеки ККМ: По-умолчанию не рассматриваем.
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Значение = мдДокумента.Имя;
		НоваяСтрока.Представление = мдДокумента.Представление();
		
		НоваяСтрока.ЕстьРеквизитОрганизация = НЕ мдДокумента.Реквизиты.Найти("Организация") = Неопределено;
		Если НЕ НоваяСтрока.ЕстьРеквизитОрганизация Тогда
			НоваяСтрока.Комментарий = НоваяСтрока.Комментарий + " Отсутствует реквизит ""Организация"".";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДвОрганизация) И НЕ НоваяСтрока.ЕстьРеквизитОрганизация Тогда
			НоваяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		НоваяСтрока.ДвиженияКоличество = мдДокумента.Движения.Количество();
		
		ШаблонТекстаЗапросаНепроведенныеСДвижениями =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХРегистр.Регистратор КАК Регистратор
		|ИЗ
		|	&ТипРегистра.&ИмяРегистра КАК ХРегистр
		|ГДЕ
		|	ХРегистр.Регистратор В(&СписокДокументов)
		|	И &УсловиеАктивностьЗаписиРегистра";
		
		ШаблонТекстаЗапросаПроведенныеБезДвижений = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХДокумент.Ссылка КАК Регистратор
		|ИЗ
		|	Документ." + мдДокумента.Имя + " КАК ХДокумент
		|	&ЛевыеСоединенияКРегистрам
		|ГДЕ
		|	ХДокумент.Ссылка В(&СписокДокументов)
		|	&РегистраторЕстьNULL";
		
		ЗапросПоРегистрамНепроведенныеСДвижениями = "";
		ЗапросПоРегистрамПроведенныеБезДвижений = "";
		ЛевыеСоединенияКРегистрам = "";
		РегистраторЕстьNULL = "";
		Для Каждого мдРегистра ИЗ мдДокумента.Движения Цикл
			
			ТипРегистра = ИмяБазовогоТипаПоОбъектуМетаданных(мдРегистра);
			
			Если ТипРегистра = ИмяТипаРегистрыСведений() И мдРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = ШаблонТекстаЗапросаНепроведенныеСДвижениями;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипРегистра" , ТипРегистра);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра" , мдРегистра.Имя);
			ЗапросПоРегистрамНепроведенныеСДвижениями 	= ЗапросПоРегистрамНепроведенныеСДвижениями + ?(ЗапросПоРегистрамНепроведенныеСДвижениями = "", "", Символы.ПС + "ОБЪЕДИНИТЬ" + Символы.ПС) + ТекстЗапроса;
			
			ЛевыеСоединенияКРегистрам = ЛевыеСоединенияКРегистрам + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ &ТипРегистра.&ИмяРегистра
			|		ПО (&ТипРегистра.&ИмяРегистра.Регистратор = ХДокумент.Ссылка)";
			ЛевыеСоединенияКРегистрам = СтрЗаменить(ЛевыеСоединенияКРегистрам, "&ТипРегистра" , ТипРегистра);
			ЛевыеСоединенияКРегистрам = СтрЗаменить(ЛевыеСоединенияКРегистрам, "&ИмяРегистра" , мдРегистра.Имя);
			
			РегистраторЕстьNULL = РегистраторЕстьNULL + "
			|	И &ТипРегистра.&ИмяРегистра.Регистратор ЕСТЬ NULL";
			РегистраторЕстьNULL = СтрЗаменить(РегистраторЕстьNULL, "&ТипРегистра" , ТипРегистра);
			РегистраторЕстьNULL = СтрЗаменить(РегистраторЕстьNULL, "&ИмяРегистра" , мдРегистра.Имя);
			
		КонецЦикла;
		ЗапросПоРегистрамПроведенныеБезДвижений	= СтрЗаменить(ШаблонТекстаЗапросаПроведенныеБезДвижений, "&ЛевыеСоединенияКРегистрам", ЛевыеСоединенияКРегистрам);
		ЗапросПоРегистрамПроведенныеБезДвижений	= СтрЗаменить(ЗапросПоРегистрамПроведенныеБезДвижений, "&РегистраторЕстьNULL", РегистраторЕстьNULL);
		
		НоваяСтрока.ЗапросПоРегистрамНепроведенныеСДвижениями = ЗапросПоРегистрамНепроведенныеСДвижениями;
		НоваяСтрока.ЗапросПоРегистрамПроведенныеБезДвижений = ЗапросПоРегистрамПроведенныеБезДвижений;
		
	КонецЦикла;
	
	ДокументСписокВидов.Сортировать("Представление");
	
	Возврат ДокументСписокВидов;
	
КонецФункции

Функция ПолучитьНепроведенныеДокументыСДвижениямиНаСервере(ДокументСписокВидов, ТаблицаДокументыДвиженя, УчитыватьАктивностьЗаписейРегистров, ДвДатаНач, ДвДатаКон, ДвОрганизация) Экспорт
	Перем ТаблицаРезультат;
	
	ТаблицаРезультат = ПолучитьДокументыИДвиженияНаСервере("НепроведенныеДокументыСДвижениями", ДокументСписокВидов, ТаблицаДокументыДвиженя, УчитыватьАктивностьЗаписейРегистров, ДвДатаНач, ДвДатаКон, ДвОрганизация);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьПроведенныеДокументыБезДвиженийНаСервере(ДокументСписокВидов, ТаблицаДокументыДвиженя, УчитыватьАктивностьЗаписейРегистров, ДвДатаНач, ДвДатаКон, ДвОрганизация) Экспорт
	Перем ТаблицаРезультат;
	
	ТаблицаРезультат = ПолучитьДокументыИДвиженияНаСервере("ПроведенныеДокументыБезДвижений", ДокументСписокВидов, ТаблицаДокументыДвиженя, УчитыватьАктивностьЗаписейРегистров, ДвДатаНач, ДвДатаКон, ДвОрганизация);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьДокументыИДвиженияНаСервере(ВидВыборки, ДокументСписокВидов, ТаблицаДокументыДвиженя, УчитыватьАктивностьЗаписейРегистров, Знач ДвДатаНач, Знач ДвДатаКон, Знач ДвОрганизация)
	Перем ЭлементСписка;
	Перем Запрос, Результат, ТаблицаРезультата, ТекстЗапросаПоРегистрам, СписокДокументов;
	
	ТаблицаДокументыДвиженя.Очистить();
	
	Если ДвДатаКон = Дата("00010101") Тогда
		ДвДатаКон = ТекущаяДата();
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ ДокументСписокВидов Цикл
		
		Если НЕ ЭлементСписка.Пометка ИЛИ ЭлементСписка.ДвиженияКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидВыборки = "НепроведенныеДокументыСДвижениями" Тогда
		
			// Ищем Непроведенные + ПомеченныеНаУдаление документы.
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ХДокумент.Ссылка КАК Регистратор
			|ИЗ
			|	Документ." + ЭлементСписка.Значение + " КАК ХДокумент
			|ГДЕ
			|	(НЕ ХДокумент.Проведен ИЛИ ХДокумент.ПометкаУдаления)
			|	И ХДокумент.Дата Между &ДатаНач И &ДатаКон
			|	И &УсловиеПоОрганизации";
			
			ТекстЗапросаПоРегистрам = ЭлементСписка.ЗапросПоРегистрамНепроведенныеСДвижениями;
			
		ИначеЕсли ВидВыборки = "ПроведенныеДокументыБезДвижений" Тогда
		
			// Ищем Проведенные документы.
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ХДокумент.Ссылка КАК Регистратор
			|ИЗ
			|	Документ." + ЭлементСписка.Значение + " КАК ХДокумент
			|ГДЕ
			|	ХДокумент.Проведен
			|	И ХДокумент.Дата Между &ДатаНач И &ДатаКон
			|	И &УсловиеПоОрганизации";
			
			ТекстЗапросаПоРегистрам = ЭлементСписка.ЗапросПоРегистрамПроведенныеБезДвижений;
			
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестный вид Выборки: " + ВидВыборки + ".'");
		КонецЕсли;
		
		Если ЭлементСписка.ЕстьРеквизитОрганизация И ЗначениеЗаполнено(ДвОрганизация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "ХДокумент.Организация = &Организация");
			Запрос.УстановитьПараметр("Организация", ДвОрганизация);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации", "Истина");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДвДатаНач));
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДвДатаКон));
		
		Результат = Запрос.Выполнить();
		
		// Если Таблица пуста - переходим к следующему элементу списка видов документа.
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДокументов = Результат.Выгрузить().ВыгрузитьКолонку("Регистратор");
		
		// Ищем Непроведенные документы.
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПоРегистрам;
		
		Если УчитыватьАктивностьЗаписейРегистров Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАктивностьЗаписиРегистра", "ХРегистр.Активность");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеАктивностьЗаписиРегистра", "Истина");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
		
		Результат = Запрос.Выполнить();
		
		// Если Таблица пуста - переходим к следующему элементу списка видов документа.
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаРезультата = Результат.Выгрузить();
		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаРезультата Цикл
			НоваяСтрока = ТаблицаДокументыДвиженя.Добавить();
			НоваяСтрока.Нпп = ТаблицаДокументыДвиженя.Количество();
			НоваяСтрока.ПометкаУдаления = СтрокаТаблицы.Регистратор.ПометкаУдаления;
			НоваяСтрока.Регистратор = СтрокаТаблицы.Регистратор;
			НоваяСтрока.ЕстьРеквизитОрганизация = ЭлементСписка.ЕстьРеквизитОрганизация;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументыДвиженя;
	
КонецФункции

Функция ПровестиПроведенныеБезДвиженийНаСервере(ТаблицаДокументыПроведенныеБезДвижений, Отказ) Экспорт
	Перем мдДокумента, ДокументОбъект, СтрокаТаблицыДокументов;
	Перем КоличествоПроведенных;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаДокументыПроведенныеБезДвижений.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЭтотОбъект.ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	КоличествоПроведенных = 0;
	Для Каждого СтрокаТаблицыДокументов ИЗ ТаблицаДокументыПроведенныеБезДвижений Цикл
		
		мдДокумента = СтрокаТаблицыДокументов.Регистратор.Метаданные();
		Если НЕ мдДокумента.Проведение = МетаДанные.СвойстваОбъектов.Проведение.Разрешить Тогда	// Только документы, проведение которых возможно.
			Сообщить("Проведение документа запрещено: " + СтрокаТаблицыДокументов.Регистратор + "
			|Проведение не произведено.");
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = СтрокаТаблицыДокументов.Регистратор.ПолучитьОбъект();
		Исключение
			Если ЭтотОбъект.ВыполнятьВТранзакции Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение НСтр("ru='" + ОписаниеОшибки()+ ".'");
		КонецПопытки;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КоличествоПроведенных = КоличествоПроведенных+1;
		Исключение
			// Например: ЧекККМ, ПересчетТоваров (~ Инвентаризация).
			Отказ = Истина;
			Сообщить(НСтр("ru='" + ОписаниеОшибки()+ ".'"));
			Прервать;
		КонецПопытки;

	КонецЦикла;
	
	Если ЭтотОбъект.ВыполнятьВТранзакции И НЕ Отказ = Истина Тогда
		//ОтменитьТранзакцию();	// .- МА! Для Отладки.
		ЗафиксироватьТранзакцию();
		Возврат КоличествоПроведенных;
	Иначе
		Возврат КоличествоПроведенных;
	КонецЕсли;
	
	Возврат КоличествоПроведенных;
	
КонецФункции

Функция УдалитьДвиженияНепроведенныхСДвижениямиНаСервере(ТаблицаДокументыНеПроведенныеСДвижениями) Экспорт
	Перем мдДокумента, ДокументОбъект, СтрокаТаблицыДокументов;
	Перем КоличествоОчищенных;
	
	Если ТаблицаДокументыНеПроведенныеСДвижениями.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ЭтотОбъект.ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	КоличествоОчищенных = 0;
	Для Каждого СтрокаТаблицыДокументов ИЗ ТаблицаДокументыНеПроведенныеСДвижениями Цикл
		
		мдДокумента = СтрокаТаблицыДокументов.Регистратор.Метаданные();
		Если НЕ мдДокумента.Проведение = МетаДанные.СвойстваОбъектов.Проведение.Разрешить Тогда	// Например "Корректировка записей регистров".
			Сообщить("" + СтрокаТаблицыДокументов.Регистратор + "
			|Исключение: Документы типа: " + мдДокумента.Синоним + " - непроводимый документ, который может иметь движения.
			|Движения не удалены.");
			Продолжить;
		КонецЕсли;

		Попытка
			ДокументОбъект = СтрокаТаблицыДокументов.Регистратор.ПолучитьОбъект();
			УдалитьДвиженияУДокумента(ДокументОбъект);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КоличествоОчищенных = КоличествоОчищенных+1;
		Исключение
			// Например: ЧекККМ.
	    	Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
		КонецПопытки;

	КонецЦикла;
	
	Если ЭтотОбъект.ВыполнятьВТранзакции Тогда
		//ОтменитьТранзакцию();	// .- МА! Для Отладки.
		ЗафиксироватьТранзакцию();
		Возврат КоличествоОчищенных;
	Иначе
		Возврат КоличествоОчищенных;
	КонецЕсли;
	
	Возврат КоличествоОчищенных;
	
КонецФункции

// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	Перем ТаблицаДвижений, СтрокаДвижения;
	Перем ПозицияТочки, ТипРегистра, ИмяРегистра, МетаданныеНабора, Набор;
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// Возможно "сработал" RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
	// Удаление записей регистрации из всех последовательностей.
	УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);

КонецПроцедуры

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	Перем ТекстЗапроса, счетчик_таблиц, МетаданныеДокумента, Движение;
	Перем Запрос, ТаблицаЗапроса, Выборка;
	
	ТекстЗапроса = "";
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";

	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Процедура УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения = Ложь)
	Перем ТаблицаРегистраций, КоллекцияПоследовательностей, НаборЗаписейРегистрацииВПоследовательности;
	
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект);
	КонецЕсли;
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	Для Каждого НаборЗаписейРегистрацииВПоследовательности Из КоллекцияПоследовательностей Цикл
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
		  ИЛИ (ПроверятьДвижения И (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено)) Тогда
		   НаборЗаписейРегистрацииВПоследовательности.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект)
	Перем Запрос, ТекстЗапроса, ТаблицаЗапроса;
	Перем Последовательность;
	
	ТекстЗапроса = "";
	
	Для Каждого Последовательность Из ДокументОбъект.ПринадлежностьПоследовательностям Цикл
		// в запросе получаем имена последовательностей, в которых документ зарегистрирован
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя 
		+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()  
		+ " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат ТаблицаЗапроса;
	КонецЕсли;
	
КонецФункции

// Процедура очищает коллекцию движений документа
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
	Перем Движение;
		
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО) УДАЛЕНИЕ".
//

Функция ДокументУдалениеЗаполнитьСписокВидовДокументов(ДокументСписокВидов, Организация) Экспорт
	Перем мдДокумента, НоваяСтрока, ЯвляетсяОснованиемДля;
	
	ДокументСписокВидов.Очистить();
	
	ФильтрПоОрганизации = НЕ Метаданные.Справочники.Найти("Организации") = Неопределено И ЗначениеЗаполнено(Организация);
	
	Для Каждого мдДокумента ИЗ Метаданные.Документы Цикл
		
		НоваяСтрока = ДокументСписокВидов.Добавить();
		НоваяСтрока.Нпп = ДокументСписокВидов.Количество();
		
		НоваяСтрока.ЕстьРеквизитОрганизация = НЕ мдДокумента.Реквизиты.Найти("Организация") = Неопределено;
		НоваяСтрока.ЕстьРеквизитСклад = НЕ мдДокумента.Реквизиты.Найти("Склад") = Неопределено;
		НоваяСтрока.ЕстьРеквизитМагазин = НЕ мдДокумента.Реквизиты.Найти("Магазин") = Неопределено;
		НоваяСтрока.ЕстьРеквизитКасса = НЕ мдДокумента.Реквизиты.Найти("Касса") = Неопределено;
		НоваяСтрока.ЕстьРеквизитКассаККМ = НЕ мдДокумента.Реквизиты.Найти("КассаККМ") = Неопределено;
		
		НоваяСтрока.Пометка = НоваяСтрока.ЕстьРеквизитОрганизация;
		
		ЯвляетсяОснованиемДля = ОбъектБДПолучитьСписокДокументовДляКоторыхОбъектЯвляетсяОснованием(мдДокумента);
		НоваяСтрока.ЯвляетсяОснованиемДля = ЯвляетсяОснованиемДля;
		
		НоваяСтрока.ЕстьСвязанные = ЯвляетсяОснованиемДля.Количество() > 0;
		
		НоваяСтрока.Значение = мдДокумента.Имя;
		НоваяСтрока.Представление = мдДокумента.Представление();
		
	КонецЦикла;
	ДокументСписокВидов.Сортировать("Представление");
	
	Возврат ДокументСписокВидов;
	
КонецФункции

Функция ДокументУдалениеПолучитьСписокУдаляемыхДокументовНаСервере(ДокументУдалениеТСписокВидов, ТаблицаДокументыУдаление, ДатаНачала, ДатаОкончания, ДокументУдалениеОрганизации, ДокументУдалениеСклады, ДокументУдалениеМагазины, ДокументУдалениеКассы, ДокументУдалениеКассыККМ, ДокументУдалениеПодразделения, ДокументУдалениеПодразделенияОрганизаций, ПоискПоСвязанным, ПоискПоНоменклатуре, ДокументУдалениеГруппаНоменклатуры) Экспорт
	Перем ЭлементСписка, ЕстьРеквизитОрганизация, ЕстьРеквизитСклад, ЕстьРеквизитМагазин, ЕстьРеквизитКасса, ЕстьРеквизитКассаККМ, ЕстьРеквизитПодразделение, ЕстьРеквизитПодразделениеОрганизации;
	Перем Запрос, Результат;
	Перем СтрокаДокументУдаляемый, ИндекcСтрокиОснования, ДокументОснование, ВыборкаСвязанных, СвязанныйДокументСсылка, ДокументПоНоменклатуре, РеквизитыДокумента;
	Перем МассивСсылок, ТаблицаСсылок, СтрокаТЗСсылок, ТаблицаВременная, СтрокаДокументВременный, НоваяСтрока;
	
	ТаблицаДокументыУдаление.Очистить();

	Если ДатаНачала = Дата("00010101") Тогда
		ДатаНачала = Дата("00010101");
	КонецЕсли;
	Если ДатаОкончания = Дата("00010101") Тогда
		ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументУдалениеГруппаНоменклатуры)
		И
		(ЗначениеЗаполнено(ДокументУдалениеОрганизации)
		ИЛИ ЗначениеЗаполнено(ДокументУдалениеСклады)
		ИЛИ ЗначениеЗаполнено(ДокументУдалениеМагазины)
		ИЛИ ЗначениеЗаполнено(ДокументУдалениеКассы)
		ИЛИ ЗначениеЗаполнено(ДокументУдалениеКассыККМ)
		ИЛИ ЗначениеЗаполнено(ДокументУдалениеПодразделения)
		ИЛИ ЗначениеЗаполнено(ДокументУдалениеПодразделенияОрганизаций)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "";
		Для Каждого ЭлементСписка ИЗ ДокументУдалениеТСписокВидов Цикл
			
			Если НЕ ЭлементСписка.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Запрос.Текст = "" Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ"
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
			|	""Д"" КАК НайденПо,
			|	ХДокумент.Ссылка КАК Ссылка,
			|	ХДокумент.МоментВремени КАК МоментВремени,
			|	&РеквизитОрганизация,
			|	&ЕстьРеквизитОрганизация,
			|	&РеквизитСклад,
			|	&ЕстьРеквизитСклад,
			|	&РеквизитМагазин,
			|	&ЕстьРеквизитМагазин,
			|	&РеквизитКасса,
			|	&ЕстьРеквизитКасса,
			|	&РеквизитКассаККМ,
			|	&ЕстьРеквизитКассаККМ,
			|	&РеквизитПодразделение,
			|	&ЕстьРеквизитПодразделение,
			|	&РеквизитПодразделениеОрганизации,
			|	&ЕстьРеквизитПодразделениеОрганизации,
			|	&Пометка,
			|	&ЕстьСвязанные,
			|	Ложь КАК Удален
			|ИЗ
			|	Документ." + ЭлементСписка.Значение + " КАК ХДокумент
			|ГДЕ
			|	ХДокумент.ПометкаУдаления = ЛОЖЬ
			|	И ХДокумент.Дата Между &ДатаНачала И &ДатаОкончания
			|	И &УсловиеПоОрганизации
			|	И &УсловиеПоСкладу
			|	И &УсловиеПоМагазину
			|	И &УсловиеПоКассе
			|	И &УсловиеПоКассеККМ
			|	И &УсловиеПоПодразделению
			|	И &УсловиеПоПодразделениюОрганизации
			|";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Пометка", "Истина КАК Пометка");
			
			Если ЭлементСписка.ЕстьРеквизитОрганизация И ЗначениеЗаполнено(ДокументУдалениеОрганизации) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитОрганизация"		, "ХДокумент.Организация КАК Организация");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитОрганизация"	, "" + Формат(ЭлементСписка.ЕстьРеквизитОрганизация, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитОрганизация");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации"	, "ХДокумент.Организация В(&Организация)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитОрганизация"		, "Неопределено КАК Организация");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитОрганизация"	, "" + Формат(ЭлементСписка.ЕстьРеквизитОрганизация, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитОрганизация");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизации"	, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьРеквизитСклад И ЗначениеЗаполнено(ДокументУдалениеСклады) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитСклад"			, "ХДокумент.Склад КАК Склад");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитСклад"		, "" + Формат(ЭлементСписка.ЕстьРеквизитСклад, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитСклад");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСкладу"			, "ХДокумент.Склад В(&Склад)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитСклад"			, "Неопределено КАК Склад");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитСклад"		, "" + Формат(ЭлементСписка.ЕстьРеквизитСклад, "БЛ=Ложь; БИ=Истина") + "  КАК ЕстьРеквизитСклад");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСкладу"			, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьРеквизитМагазин И ЗначениеЗаполнено(ДокументУдалениеМагазины) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитМагазин"			, "ХДокумент.Магазин КАК Магазин");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитМагазин"		, "" + Формат(ЭлементСписка.ЕстьРеквизитМагазин, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитМагазин");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоМагазину"		, "ХДокумент.Магазин В(&Магазин)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитМагазин"			, "Неопределено КАК Магазин");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитМагазин"		, "" + Формат(ЭлементСписка.ЕстьРеквизитМагазин, "БЛ=Ложь; БИ=Истина") + "  КАК ЕстьРеквизитМагазин");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоМагазину"		, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьРеквизитКассаККМ И ЗначениеЗаполнено(ДокументУдалениеКассыККМ) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитКассаККМ"		, "ХДокумент.КассаККМ КАК КассаККМ");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитКассаККМ"	, "" + Формат(ЭлементСписка.ЕстьРеквизитКассаККМ, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитКассаККМ");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКассеККМ"		, "ХДокумент.КассаККМ В(&КассаККМ)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитКассаККМ"		, "Неопределено КАК КассаККМ");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитКассаККМ"	, "" + Формат(ЭлементСписка.ЕстьРеквизитКассаККМ, "БЛ=Ложь; БИ=Истина") + "  КАК ЕстьРеквизитКассаККМ");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКассеККМ"		, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьРеквизитКасса И ЗначениеЗаполнено(ДокументУдалениеКассы) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитКасса"			, "ХДокумент.Касса КАК Касса");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитКасса"		, "" + Формат(ЭлементСписка.ЕстьРеквизитКасса, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитКасса");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКассе"			, "ХДокумент.Касса В(&Касса)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитКасса"			, "Неопределено КАК Касса");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитКасса"		, "" + Формат(ЭлементСписка.ЕстьРеквизитКасса, "БЛ=Ложь; БИ=Истина") + "  КАК ЕстьРеквизитКасса");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКассе"			, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьРеквизитПодразделениеОрганизации И ЗначениеЗаполнено(ДокументУдалениеПодразделенияОрганизаций) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитПодразделениеОрганизации"		, "ХДокумент.ПодразделениеОрганизации КАК ПодразделениеОрганизации");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитПодразделениеОрганизации"	, "" + Формат(ЭлементСписка.ЕстьРеквизитПодразделениеОрганизации, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитПодразделениеОрганизации");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПодразделениюОрганизации"		, "ХДокумент.ПодразделениеОрганизации В(&ПодразделениеОрганизации)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитПодразделениеОрганизации"		, "Неопределено КАК ПодразделениеОрганизации");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитПодразделениеОрганизации"	, "" + Формат(ЭлементСписка.ЕстьРеквизитПодразделениеОрганизации, "БЛ=Ложь; БИ=Истина") + "  КАК ЕстьРеквизитПодразделениеОрганизации");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПодразделениюОрганизации"		, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьРеквизитПодразделение И ЗначениеЗаполнено(ДокументУдалениеПодразделения) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитПодразделение"		, "ХДокумент.Подразделение КАК Подразделение");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитПодразделение"	, "" + Формат(ЭлементСписка.ЕстьРеквизитПодразделение, "БЛ=Ложь; БИ=Истина") + " КАК ЕстьРеквизитПодразделение");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПодразделению"		, "ХДокумент.Подразделение В(&Подразделение)");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РеквизитПодразделение"		, "Неопределено КАК Подразделение");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьРеквизитПодразделение"	, "" + Формат(ЭлементСписка.ЕстьРеквизитПодразделение, "БЛ=Ложь; БИ=Истина") + "  КАК ЕстьРеквизитПодразделение");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПодразделению"		, "Истина");
			КонецЕсли;
			
			Если ЭлементСписка.ЕстьСвязанные Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьСвязанные"			, "Истина КАК ЕстьСвязанные");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЕстьСвязанные"			, "Ложь КАК ЕстьСвязанные");
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХДокумент.МоментВремени УБЫВ";
		
		Запрос.УстановитьПараметр("ДатаНачала"	 			, НачалоДня(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания"			, КонецДня(ДатаОкончания));
		
		Запрос.УстановитьПараметр("Организация"				, ДокументУдалениеОрганизации);
		Запрос.УстановитьПараметр("Склад"					, ДокументУдалениеСклады);
		Запрос.УстановитьПараметр("Магазин"					, ДокументУдалениеМагазины);
		
		Запрос.УстановитьПараметр("Касса"					, ДокументУдалениеКассы);
		Запрос.УстановитьПараметр("КассаККМ"				, ДокументУдалениеКассыККМ);
		
		Запрос.УстановитьПараметр("Подразделение"			, ДокументУдалениеПодразделения);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", ДокументУдалениеПодразделенияОрганизаций);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ТаблицаВременная = Результат.Выгрузить();
			Для Каждого СтрокаДокументВременный ИЗ ТаблицаВременная Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаДокументыУдаление.Добавить(), СтрокаДокументВременный);
			КонецЦикла;
			
			Если ПоискПоСвязанным Тогда
				Для Каждого СтрокаДокументВременный ИЗ ТаблицаВременная Цикл
					Если НЕ СтрокаДокументВременный.ЕстьСвязанные Тогда
						Продолжить;
					КонецЕсли;
					ДокументОснование = СтрокаДокументВременный.Ссылка;
					ВыборкаСвязанных = ОбъектБДПолучитьСписокДокументовПоКритериюОтбора(ДокументОснование, "Выборка", Истина);
					Пока ВыборкаСвязанных.Следующий() Цикл
						СвязанныйДокументСсылка = ВыборкаСвязанных.Ссылка;
						РеквизитыДокумента = СвязанныйДокументСсылка.Метаданные().Реквизиты;
						// ОРГАНИЗАЦИЯ.
						ЕстьРеквизитОрганизация = НЕ РеквизитыДокумента.Найти("Организация") = Неопределено;
						Если ЕстьРеквизитОрганизация И ЗначениеЗаполнено(ДокументУдалениеОрганизации) И ДокументУдалениеОрганизации.НайтиПоЗначению(СвязанныйДокументСсылка.Организация) = Неопределено Тогда	// Если реквизит "Организация" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются организации (искомая/по документу): 
								|" + ДокументУдалениеОрганизации + " и " + СвязанныйДокументСсылка.Организация + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						// СКЛАД.
						ЕстьРеквизитСклад = НЕ РеквизитыДокумента.Найти("Склад") = Неопределено;
						Если ЕстьРеквизитСклад И ЗначениеЗаполнено(ДокументУдалениеСклады) И ДокументУдалениеСклады.НайтиПоЗначению(СвязанныйДокументСсылка.Склад) = Неопределено Тогда	// Если реквизит "Склад" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются склады (искомый/по документу): 
								|" + ДокументУдалениеСклады + " и " + СвязанныйДокументСсылка.Склад + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						// МАГАЗИН.
						ЕстьРеквизитМагазин = НЕ РеквизитыДокумента.Найти("Магазин") = Неопределено;
						Если ЕстьРеквизитМагазин И ЗначениеЗаполнено(ДокументУдалениеМагазины) И ДокументУдалениеМагазины.НайтиПоЗначению(СвязанныйДокументСсылка.Магазин) = Неопределено Тогда	// Если реквизит "Магазин" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются магазины (искомый/по документу): 
								|" + ДокументУдалениеМагазины + " и " + СвязанныйДокументСсылка.Магазин + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						// КАССА ОПЕРАЦИОННАЯ.
						ЕстьРеквизитКасса = НЕ РеквизитыДокумента.Найти("Касса") = Неопределено;
						Если ЕстьРеквизитКасса И ЗначениеЗаполнено(ДокументУдалениеКассы) И ДокументУдалениеКассы.НайтиПоЗначению(СвязанныйДокументСсылка.Касса) = Неопределено Тогда	// Если реквизит "Касса" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются кассы (искомый/по документу): 
								|" + ДокументУдалениеКассы + " и " + СвязанныйДокументСсылка.Касса + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						// КАССА ККМ.
						ЕстьРеквизитКассаККМ = НЕ РеквизитыДокумента.Найти("КассаККМ") = Неопределено;
						Если ЕстьРеквизитКассаККМ И ЗначениеЗаполнено(ДокументУдалениеКассыККМ) И ДокументУдалениеКассыККМ.НайтиПоЗначению(СвязанныйДокументСсылка.КассаККМ) = Неопределено Тогда	// Если реквизит "КассаККМ" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются кассы ккм (искомый/по документу): 
								|" + ДокументУдалениеКассыККМ + " и " + СвязанныйДокументСсылка.КассаККМ + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						// ПОДРАЗДЕЛЕНИЕ.
						ЕстьРеквизитПодразделение = НЕ РеквизитыДокумента.Найти("Подразделение") = Неопределено;
						Если ЕстьРеквизитПодразделение И ЗначениеЗаполнено(ДокументУдалениеПодразделения) И ДокументУдалениеПодразделения.НайтиПоЗначению(СвязанныйДокументСсылка.Подразделение) = Неопределено Тогда	// Если реквизит "Подразделение" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются подразделения (искомый/по документу): 
								|" + ДокументУдалениеПодразделения + " и " + СвязанныйДокументСсылка.Подразделение + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						// ПОДРАЗДЕЛЕНИЕ ОРГАНИЗАЦИИ.
						ЕстьРеквизитПодразделениеОрганизации = НЕ РеквизитыДокумента.Найти("ПодразделениеОрганизации") = Неопределено;
						Если ЕстьРеквизитПодразделениеОрганизации И ЗначениеЗаполнено(ДокументУдалениеПодразделенияОрганизаций) И ДокументУдалениеПодразделенияОрганизаций.НайтиПоЗначению(СвязанныйДокументСсылка.ПодразделениеОрганизации) = Неопределено Тогда	// Если реквизит "ПодразделениеОрганизации" не совпадает со значение отбора.
							Если ЭтотОбъект.ПоказыватьСообщения Тогда
								Сообщить("Связанный документ: " + СвязанныйДокументСсылка + "
								|различаются подразделения организации (искомый/по документу): 
								|" + ДокументУдалениеПодразделенияОрганизаций + " и " + СвязанныйДокументСсылка.ПодразделениеОрганизации + "
								|Связанный документ игнорируется.");
							КонецЕсли;
							Продолжить;
						КонецЕсли;
						Если НЕ ТаблицаДокументыУдаление.Найти(СвязанныйДокументСсылка, "Ссылка") = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						СтрокаДокументУдаляемый = ТаблицаДокументыУдаление.Найти(ДокументОснование, "Ссылка");
						Если СтрокаДокументУдаляемый = Неопределено Тогда
							НоваяСтрока = ТаблицаДокументыУдаление.Вставить(0);
						Иначе
							ИндекcСтрокиОснования = ТаблицаДокументыУдаление.Индекс(СтрокаДокументУдаляемый);
							НоваяСтрока = ТаблицаДокументыУдаление.Вставить(ИндекcСтрокиОснования);
						КонецЕсли;
						НоваяСтрока.НайденПо = "Д";	// Документам.
						НоваяСтрока.Ссылка = СвязанныйДокументСсылка;
						НоваяСтрока.ЕстьРеквизитОрганизация 			= ЕстьРеквизитОрганизация;
						НоваяСтрока.ЕстьРеквизитСклад					= ЕстьРеквизитСклад;
						НоваяСтрока.ЕстьРеквизитМагазин					= ЕстьРеквизитМагазин;
						НоваяСтрока.ЕстьРеквизитКасса					= ЕстьРеквизитКасса;
						НоваяСтрока.ЕстьРеквизитКассаККМ				= ЕстьРеквизитКассаККМ;
						НоваяСтрока.ЕстьРеквизитПодразделение			= ЕстьРеквизитПодразделение;
						НоваяСтрока.ЕстьРеквизитПодразделениеОрганизации= ЕстьРеквизитПодразделениеОрганизации;
						НоваяСтрока.Пометка = Истина;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			ТаблицаВременная = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// При поиске документов по номенклатуре игнорируется содержимое таблицы типов документов.
	// Учитываются все типы документов.
	Если ПоискПоНоменклатуре И ЗначениеЗаполнено(ДокументУдалениеГруппаНоменклатуры) Тогда
		
		МассивСсылок = ДокументУдалениеПолучитьМассивУдаляемойНоменклатуры(ДокументУдалениеГруппаНоменклатуры);
		
		Если МассивСсылок.Количество() > 0 Тогда
			
			ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
			ТаблицаСсылок.Свернуть("Метаданные, Данные");
			ТаблицаСсылок.Сортировать("Данные Убыв");
			
			Для Каждого СтрокаТЗСсылок ИЗ ТаблицаСсылок Цикл
				Если НЕ Метаданные.Документы.Содержит(СтрокаТЗСсылок.Метаданные) Тогда	// Если не документ.
					Продолжить;
				КонецЕсли;
				ДокументПоНоменклатуре = СтрокаТЗСсылок.Данные;
				Если ДокументПоНоменклатуре.Дата < НачалоДня(ДатаНачала) ИЛИ ДокументПоНоменклатуре.Дата > КонецДня(ДатаОкончания) Тогда	// Если дата документа не соответствует периоду отбора.
					Продолжить;
				КонецЕсли;
				Если ДокументПоНоменклатуре.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				РеквизитыДокумента = СтрокаТЗСсылок.Метаданные.Реквизиты;
				// ОРГАНИЗАЦИЯ.
				ЕстьРеквизитОрганизация = НЕ РеквизитыДокумента.Найти("Организация") = Неопределено;
				Если ЕстьРеквизитОрганизация И ЗначениеЗаполнено(ДокументУдалениеОрганизации) И ДокументУдалениеОрганизации.НайтиПоЗначению(ДокументПоНоменклатуре.Организация) = Неопределено Тогда	// Если реквизит "Организация" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Документ: " + ДокументПоНоменклатуре + "
						|различаются организации (искомая/по документу): 
						|" + ДокументУдалениеОрганизации + " и " + ДокументПоНоменклатуре.Организация + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// СКЛАД.
				ЕстьРеквизитСклад = НЕ РеквизитыДокумента.Найти("Склад") = Неопределено;
				Если ЕстьРеквизитСклад И ЗначениеЗаполнено(ДокументУдалениеСклады) И ДокументУдалениеСклады.НайтиПоЗначению(ДокументПоНоменклатуре.Склад) = Неопределено Тогда	// Если реквизит "Склад" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Документ: " + ДокументПоНоменклатуре + "
						|различаются склады (искомый/по документу): 
						|" + ДокументУдалениеСклады + " и " + ДокументПоНоменклатуре.Склад + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// МАГАЗИН.
				ЕстьРеквизитМагазин = НЕ РеквизитыДокумента.Найти("Магазин") = Неопределено;
				Если ЕстьРеквизитМагазин И ЗначениеЗаполнено(ДокументУдалениеМагазины) И ДокументУдалениеМагазины.НайтиПоЗначению(ДокументПоНоменклатуре.Магазин) = Неопределено Тогда	// Если реквизит "Магазин" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Документ: " + ДокументПоНоменклатуре + "
						|различаются магазины (искомый/по документу): 
						|" + ДокументУдалениеМагазины + " и " + ДокументПоНоменклатуре.Магазин + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// КАССА ОПЕРАЦИОННАЯ.
				ЕстьРеквизитКасса = НЕ РеквизитыДокумента.Найти("Касса") = Неопределено;
				Если ЕстьРеквизитКасса И ЗначениеЗаполнено(ДокументУдалениеКассы) И ДокументУдалениеКассы.НайтиПоЗначению(ДокументПоНоменклатуре.Касса) = Неопределено Тогда	// Если реквизит "Касса" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Документ: " + ДокументПоНоменклатуре + "
						|различаются кассы (искомый/по документу): 
						|" + ДокументУдалениеКассы + " и " + ДокументПоНоменклатуре.Касса + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// КАССА ККМ.
				ЕстьРеквизитКассаККМ = НЕ РеквизитыДокумента.Найти("КассаККМ") = Неопределено;
				Если ЕстьРеквизитКассаККМ И ЗначениеЗаполнено(ДокументУдалениеКассыККМ) И ДокументУдалениеКассыККМ.НайтиПоЗначению(ДокументПоНоменклатуре.КассаККМ) = Неопределено Тогда	// Если реквизит "КассаККМ" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Документ: " + ДокументПоНоменклатуре + "
						|различаются кассы ккм (искомый/по документу): 
						|" + ДокументУдалениеКассыККМ + " и " + ДокументПоНоменклатуре.КассаККМ + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// ПОДРАЗДЕЛЕНИЕ.
				ЕстьРеквизитПодразделение = НЕ РеквизитыДокумента.Найти("Подразделение") = Неопределено;
				Если ЕстьРеквизитПодразделение И ЗначениеЗаполнено(ДокументУдалениеПодразделения) И ДокументУдалениеПодразделения.НайтиПоЗначению(ДокументПоНоменклатуре.Подразделение) = Неопределено Тогда	// Если реквизит "Подразделение" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Связанный документ: " + ДокументПоНоменклатуре + "
						|различаются подразделения (искомый/по документу): 
						|" + ДокументУдалениеПодразделения + " и " + ДокументПоНоменклатуре.Подразделение + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				// ПОДРАЗДЕЛЕНИЕ ОРГАНИЗАЦИИ.
				ЕстьРеквизитПодразделениеОрганизации = НЕ РеквизитыДокумента.Найти("ПодразделениеОрганизации") = Неопределено;
				Если ЕстьРеквизитПодразделениеОрганизации И ЗначениеЗаполнено(ДокументУдалениеПодразделенияОрганизаций) И ДокументУдалениеПодразделенияОрганизаций.НайтиПоЗначению(ДокументПоНоменклатуре.ПодразделениеОрганизации) = Неопределено Тогда	// Если реквизит "ПодразделениеОрганизации" не совпадает со значение отбора.
					Если ЭтотОбъект.ПоказыватьСообщения Тогда
						Сообщить("Связанный документ: " + ДокументПоНоменклатуре + "
						|различаются подразделения организации (искомый/по документу): 
						|" + ДокументУдалениеПодразделенияОрганизаций + " и " + ДокументПоНоменклатуре.ПодразделениеОрганизации + "
						|Документ игнорируется.");
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если НЕ ТаблицаДокументыУдаление.Найти(ДокументПоНоменклатуре, "Ссылка") = Неопределено Тогда	// Если уже есть в списке.
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ТаблицаДокументыУдаление.Добавить();
				НоваяСтрока.НайденПо = "Н"; // Номенклатуре.
				НоваяСтрока.Ссылка = ДокументПоНоменклатуре;
				НоваяСтрока.ЕстьРеквизитОрганизация 			= ЕстьРеквизитОрганизация;
				НоваяСтрока.ЕстьРеквизитСклад					= ЕстьРеквизитСклад;
				НоваяСтрока.ЕстьРеквизитМагазин					= ЕстьРеквизитМагазин;
				НоваяСтрока.ЕстьРеквизитКасса					= ЕстьРеквизитКасса;
				НоваяСтрока.ЕстьРеквизитКассаККМ				= ЕстьРеквизитКассаККМ;
				НоваяСтрока.ЕстьРеквизитПодразделение			= ЕстьРеквизитПодразделение;
				НоваяСтрока.ЕстьРеквизитПодразделениеОрганизации= ЕстьРеквизитПодразделениеОрганизации;
				НоваяСтрока.Пометка = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументыУдаление;
	
КонецФункции

Функция ДокументУдалениеПолучитьМассивУдаляемойНоменклатуры(ДокументУдалениеГруппаНоменклатуры)
	Перем Запрос, Результат, МассивСсылок;
	
	МассивСсылок = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Родитель", ДокументУдалениеГруппаНоменклатуры);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		МассивСсылок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ДокументУдалениеПроизвестиУдалениеДокументовНаСервере(ПометкаУдаление, ТаблицаДокументыУдаление, ВремяОжиданияСнятияБлокировки, КоличествоУдаленныхДокументов, УдалитьНоменклатуру, ГруппаНоменклатуры) Экспорт
	Перем СтрокаТаблицы;
	Перем мдДокумента, ДокументСсылка, ДокументОбъект, ПроведениеРазрешено;
	Перем МассивСсылок, НоменклатураСсылка, НоменклатураОбъект;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоУдаленныхДокументов = 0;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументыУдаление Цикл
		
		Если НЕ СтрокаТаблицы.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументСсылка = СтрокаТаблицы.Ссылка;
		
		Если ДокументСсылка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Исключение
			Сообщить("Невозможно получить объект: " + ДокументСсылка);
			Продолжить;
		КонецПопытки;
		
		// Проверка блокировки документа другим пользователем.
		Если НЕ МонопольныйРежим() Тогда
			Попытка
    			ДокументОбъект.Заблокировать();
			Исключение
				ЗадержкаВВыполненииДействия(ВремяОжиданияСнятияБлокировки);
				Если ДокументОбъект.Заблокирован() Тогда
					СообщениеОБлокировкеДругимПользователем = ОписаниеОшибки();
					ПозицияХ = Найти(ВРег(СообщениеОБлокировкеДругимПользователем), "КОМПЬЮТЕР");
					Сообщить("Не удален: " + ДокументОбъект + ", 
					|т.к. блокирован" + ?(ПозицияХ > 0, ": " + Сред(СообщениеОБлокировкеДругимПользователем, ПозицияХ), ".") + "
					|Документ необходимо удалить вручную.");
					Продолжить;
				Иначе
					// Заблокирован().
					// Примечание:
					// Следует учитывать, что этот метод используется для проверки блокировки объекта базы данных конкретным объектом встроенного языка. 
					// Он не может быть использован, чтобы проверить, заблокирован ли вообще объект базы данных. 
					Попытка
						ДокументОбъект.Заблокировать();
					Исключение
						СообщениеОБлокировкеДругимПользователем = ОписаниеОшибки();
						ПозицияХ = Найти(ВРег(СообщениеОБлокировкеДругимПользователем), "КОМПЬЮТЕР");
						Сообщить("Не удален: " + ДокументОбъект + ", 
						|т.к. блокирован" + ?(ПозицияХ > 0, ": " + Сред(СообщениеОБлокировкеДругимПользователем, ПозицияХ), ".") + "
						|Документ необходимо удалить вручную.");
						Продолжить;
					КонецПопытки;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		ПроведениеРазрешено = МетаданныеПроведениеДокументаРазрешено(ДокументСсылка);
		
		// Отмена проведения документа / Удаление движений документа.
		Если ПроведениеРазрешено Тогда
			Попытка
				Если ДокументОбъект.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			Исключение
				
				Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ДокументОбъект) Тогда
					ДокументОбъект.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
				КонецЕсли;
				
				Попытка
					ДокументОбъект.Проведен = Ложь;
					УдалитьДвиженияУДокумента(ДокументОбъект);		// УДАЛЕНИЕ движений документа.
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					Сообщить("Не удалось удалить движения документа: " + ДокументСсылка);
				КонецПопытки;
			КонецПопытки;
		Иначе
			
			Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ДокументОбъект) Тогда
				ДокументОбъект.ОбменДанными.Загрузка = Истина;		// Не все объекты имеют свойство "ОбменДанными".
			КонецЕсли;
			
			Попытка
				ДокументОбъект.Проведен = Ложь;
				УдалитьДвиженияУДокумента(ДокументОбъект);			// УДАЛЕНИЕ движений документа.
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Сообщить("Не удалось удалить движения документа: " + ДокументСсылка);
			КонецПопытки;
		КонецЕсли;
		
		// Пометка на удаление документа / Удаление документа.
		Попытка
			Если ПометкаУдаление = "ПометкаНаУдаление" Тогда
				
				Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(ДокументОбъект) Тогда
					ДокументОбъект.ОбменДанными.Загрузка = Истина;		// Не все объекты имеют свойство "ОбменДанными".
				КонецЕсли;
				
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				Если ДокументОбъект.Заблокирован() Тогда
					ДокументОбъект.Разблокировать();
				КонецЕсли;
			Иначе
				ДокументОбъект.Удалить();
			КонецЕсли;
			
			СтрокаТаблицы.Удален = Истина;
			КоличествоУдаленныхДокументов = КоличествоУдаленныхДокументов + 1;
		Исключение
			Сообщить("Не удалось удалить документ: " + ДокументСсылка);
		КонецПопытки;
		
	КонецЦикла;
	
	// Пометка на удаление номенклатуры / Удаление номенклатуры.
	Если УдалитьНоменклатуру И ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		МассивСсылок = ДокументУдалениеПолучитьМассивУдаляемойНоменклатуры(ГруппаНоменклатуры);
		Если МассивСсылок.Количество() > 0  Тогда
			Для Каждого НоменклатураСсылка ИЗ МассивСсылок Цикл
				
				Если НоменклатураСсылка.Предопределенный ИЛИ НоменклатураСсылка.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
				
				Если ПометкаУдаление = "ПометкаНаУдаление" Тогда
					
					Если РазрешитьУстановкуЗначенияОбменДаннымиЗагрузкаИстина(НоменклатураОбъект) Тогда
						НоменклатураОбъект.ОбменДанными.Загрузка = Истина;	// Не все объекты имеют свойство "ОбменДанными".
					КонецЕсли;
					
					НоменклатураОбъект.ПометкаУдаления = Истина;
					НоменклатураОбъект.Записать();
				Иначе
					НоменклатураОбъект.Удалить();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаДокументыУдаление;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ. Выгрузка-Загрузка XML.

// Выгрузка ХОбъекта в XML-строку:
//
Функция ЗаписатьВXML(ХОбъект) Экспорт
	ЗаписьXML = Новый ЗаписьXML;				// Тонкий клиент, сервер, толстый клиент, внешнее соединение.
	ЗаписьXML.УстановитьСтроку();
	ЗаписатьXML(ЗаписьXML, ХОбъект);			// Сервер, толстый клиент, внешнее соединение.
	Возврат ЗаписьXML.Закрыть();
КонецФункции

// Загрузка ХОбъекта из XML-строки:
//
Функция ПрочитатьИзXML(СтрокаXML) Экспорт
	ЧтениеXML = Новый ЧтениеXML;				// Тонкий клиент, сервер, толстый клиент, внешнее соединение.
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ХОбъект = ПрочитатьXML(ЧтениеXML);			// Сервер, толстый клиент, внешнее соединение.
	Возврат ХОбъект;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИЗ КОНФИГУРАЦИЙ.
//

// "Функция-Заглушка"
//
// Для Конфигурации: КомплекснаяАвтоматизация 1.1.18.
// Справочник.СохраненныеНастройки.
// ФормаВыбора.СправочникСписокСохраненныеНастройкиВыборЗначения(Элемент, СтандартнаяОбработка, Значение)
//
Функция ПрименитьНастройку() Экспорт
	
КонецФункции

СтрокаРавно = "================================================================================================================================================================";
#КонецЕсли
