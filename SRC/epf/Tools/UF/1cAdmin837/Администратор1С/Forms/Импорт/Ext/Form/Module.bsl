&НаКлиенте
Перем СтрокаРавно;
&НаСервере
Перем СтрокаРавно;

&НаСервере
Функция ОбъектОбработка()
		
	Возврат РеквизитФормыВЗначение("Объект");

КонецФункции

// МО: Перед Открытием формы:
// - Определение ПараметровЗапускаОбработки
// - Добавление реквизитов в таблицу Ссылок на Объект БД и соответствующих элементов формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ)
	Перем ОбъектОбработка, ВерсияБСП;
	
	Объект.УправляемаяФорма = Истина;
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Объект.ВерсияБСП= ОбъектОбработка.ПолучитьВерсиюБСП();
	Объект.ПараметрыСеансаОбработки	= ОбъектОбработка.ОбработкаПолучитьПараметрыСеанса();
	
	// Блокируемый.
	Объект.ЦветТекстаБлокируемогоРеквизита = ЦветаСтиля.ЦветОсобогоТекста;
	Объект.ЦветФонаБлокируемогоРеквизита = Новый Цвет(204, 255 , 255);
	
	// Обычный.
	Объект.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	Объект.ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
	
	// Обрабатываемые коллекции.
	Объект.СписокОбъектовТипаСсылка = ОбъектОбработка.ПолучитьСписокОбъектовТипаСсылка();
	Объект.СписокОбъектовТипаРегистр = ОбъектОбработка.ПолучитьСписокОбъектовТипаРегистр();
	
	Объект.ЕстьСправочникОрганизации	= МетаданныеСодержатСправочник(ОбъектОбработка, "Организации");
	Объект.ЕстьСправочникНоменклатура	= МетаданныеСодержатСправочник(ОбъектОбработка, "Номенклатура");
	Объект.ЕстьСправочникСклады			= МетаданныеСодержатСправочник(ОбъектОбработка, "Склады");
	Объект.ЕстьСправочникМагазины		= МетаданныеСодержатСправочник(ОбъектОбработка, "Магазины");
	Объект.ЕстьСправочникКассы			= МетаданныеСодержатСправочник(ОбъектОбработка, "Кассы");
	Объект.ЕстьСправочникКассыККМ		= МетаданныеСодержатСправочник(ОбъектОбработка, "КассыККМ");
	Объект.ЕстьСправочникПодразделения	= МетаданныеСодержатСправочник(ОбъектОбработка, "Подразделения");
	Объект.ЕстьСправочникПодразделенияОрганизаций = МетаданныеСодержатСправочник(ОбъектОбработка, "ПодразделенияОрганизаций");

КонецПроцедуры

&НаКлиенте
Функция ИспользоватьРежимМодальности()

	Возврат (Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" ИЛИ Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "ИспользоватьСПредупреждениями");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ИМПОРТ ДАННЫХ".
//
// СЛОВО "Файл" - КЛЮЧЕВОЕ.
// СЛОВО "v83" - КЛЮЧЕВОЕ.
//

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Начальные параметры.

&НаКлиенте
Процедура ИмпортТипОбъектаБДПриИзменении(Элемент)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Ложь, Объект.ИмпортТМетаданныеИсточникаПриемника.ПолучитьЭлементы());
	ИмпортОчиститьТаблицуЗагружаемыхОбъектов(Неопределено);
	ФормаОпределитьДоступнностьСтраницаИмпорт(ЭтаФорма.ИмпортТипОбъектаБД);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Начальные параметры СОЕДИНЕНИЯ.

&НаКлиенте
Процедура ИмпортУстановитьНачальныеПараметрыСоединения(Команда)
		
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортТипОбъектаБД) Тогда
		ЭтаФорма.ИмпортТипОбъектаБД = "Документ";
	КонецЕсли;
	
	ЭтаФорма.ИмпортСтруктураПараметровСоединения = Новый Структура;
	
	ОчиститьСообщения();
	
	ИмпортОтключитьсяОтВнешнейБДНаСервере();
	ИмпортОтразитьСостояниеПодключенияКВнешнейБД();
	
	ИмпортУстановитьНачальныеПараметрыСоединенияНаСервере(Объект.ОбъектБД);
	
	ФормаОпределитьДоступнностьСтраницаИмпорт(ЭтаФорма.ИмпортТипОбъектаБД);
	
КонецПроцедуры

&НаСервере
Функция ИмпортУстановитьНачальныеПараметрыСоединенияНаСервере(ОбъектБД)
		
	Попытка
		ЭтаФорма.ИмпортПериод.ДатаНачала = НачалоГода(ОбъектБД.Дата);
		ЭтаФорма.ИмпортПериод.ДатаОкончания = ?(КонецГода(ОбъектБД.Дата) < КонецДня(ТекущаяДата()), КонецГода(ОбъектБД.Дата), КонецДня(ТекущаяДата()));
	Исключение
		ЭтаФорма.ИмпортПериод.ДатаНачала = НачалоГода(ТекущаяДата());
		ЭтаФорма.ИмпортПериод.ДатаОкончания = ТекущаяДата();
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортИмяCOMСоединителя) Тогда
		ЭтаФорма.ИмпортИмяCOMСоединителя			= "v83";	// "v83" - именно так должно быть изначально.
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортВариантРаботыВнешнейИБ) Тогда
		ЭтаФорма.ИмпортВариантРаботыВнешнейИБ		= "Файл";	// "Файл" - именно так должно быть изначально.
		Элементы.ИмпортКаталогБазы.ТолькоПросмотр	= Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ИмпортКаталогБазы.ТолькоПросмотр Тогда
	
		ЭтаФорма.ИмпортИмяСервера 						= "";
		Элементы.ИмпортИмяСервера.ТолькоПросмотр		= Истина;
		
		ЭтаФорма.ИмпортИмяБазыНаСервере 				= "";
		Элементы.ИмпортИмяБазыНаСервере.ТолькоПросмотр	= Истина;
	
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Начальные параметры ИМПОРТА.

&НаКлиенте
Процедура ИмпортПолучитьНачальныеПараметрыИмпорта(Команда)

	ОчиститьСообщения();
	
	Если НЕ ЭтаФорма.ИмпортСоединениеУстановлено Тогда
		ПредупреждениеСообщение(, "Соединение с внешней базой данных не установлено.");
		Возврат;
	КонецЕсли;
	
	Состояние("Получение начальных данных из внешней базы данных ...");
	
	ИмпортОчиститьТаблицуЗагружаемыхОбъектов(Неопределено);
	
	// Параметры страницы "Настройка".
	Объект.ИмпортАрхивнаяКопияБазы				= Истина;
	Объект.ИмпортИспользоватьGUIDИсточника		= Ложь;
	Элементы.ИмпортИспользоватьGUIDИсточника.ТолькоПросмотр = Истина;
	
	Объект.ИмпортИзменятьПодчиненные 			= Ложь;
	
	Объект.ИмпортУчитыватьДатуСозданияОбъекта	= Ложь;		// Элементов Справочника, ПВХ и т.д., но не Документов.
	
	// Определить в Источнике: Организации и Корневые Группы основного Справочника, ПВХ.
	ЭтаФорма.ИмпортСтруктураПараметровСоединения = ИмпортПолучитьСтруктуруПараметровСоединенияНаСервере();
	
	СтруктураНачальныхПараметровИсточника = ИмпортПолучитьНачальныеПараметрыИмпортаНаСервере(ЭтаФорма.ИмпортСтруктураПараметровСоединения);
	
	ЭтаФорма.ИмпортЕстьСправочникОрганизацииИсточника	= СтруктураНачальныхПараметровИсточника.ЕстьСправочникОрганизации;
	ЭтаФорма.ИмпортСписокОрганизацийИсточника 			= СтруктураНачальныхПараметровИсточника.СписокОрганизаций;
		
	ЭтаФорма.ИмпортОрганизацияИсточник = "";
	
	Если ЭтоДокумент(ЭтаФорма.ИмпортТипОбъектаБД) И ЭтаФорма.ИмпортСписокОрганизацийИсточника.Количество() > 0 Тогда
		
		ЭтаФорма.ИмпортОрганизацияИсточник = ЭтаФорма.ИмпортСписокОрганизацийИсточника[0].Представление;
		ЭтаФорма.ИмпортНомерОрганизацииИсточника = ЭтаФорма.ИмпортСписокОрганизацийИсточника.Индекс(ЭтаФорма.ИмпортСписокОрганизацийИсточника[0]);
		
	КонецЕсли;
	
КонецПроцедуры

// МО:
//
&НаСервере
Функция ИмпортПолучитьНачальныеПараметрыИмпортаНаСервере(СтруктураПараметровСоединения)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	СтруктураНачальныхПараметровИсточника = ОбъектОбработка.ИмпортПолучитьНачальныеПараметрыИмпортаНаСервере(СтруктураПараметровСоединения);
	
	Если Объект.ИмпортТМетаданныеИсточникаПриемника.ПолучитьЭлементы().Количество() = 0 Тогда	// ДанныеФормыДерево.
		ИмпортТМетаданныеИсточникаПриемника = РеквизитФормыВЗначение("Объект.ИмпортТМетаданныеИсточникаПриемника");
		ИмпортТМетаданныеИсточникаПриемника = ОбъектОбработка.ИмпортСформироватьТаблицуМетаданныеИсточникаПриемника(СтруктураПараметровСоединения, ИмпортТМетаданныеИсточникаПриемника, ЭтаФорма.ИмпортТипОбъектаБД);
		ЗначениеВРеквизитФормы(ИмпортТМетаданныеИсточникаПриемника, "Объект.ИмпортТМетаданныеИсточникаПриемника");
	КонецЕсли;
	
	Возврат СтруктураНачальныхПараметровИсточника;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Изменение таблицы МЕТАДАННЫЕ..

&НаКлиенте
Процедура ИмпортТМетаданныеИсточникаПриемникаЗагрузитьПриИзменении(Элемент)
	Перем ТекущиеДанныеТаблицы, ЗначениеРеквизита;
	
	ТекущиеДанныеТаблицы = Элемент.Родитель.ТекущиеДанные;
	ЗначениеРеквизита = ТекущиеДанныеТаблицы.Загрузить;
	
	Если ЗначениеРеквизита Тогда
		Если НЕ (ЭтоСправочник(ЭтаФорма.ИмпортТипОбъектаБД) И ТекущиеДанныеТаблицы.КоллекцияИсточника = "Справочники") 
			И НЕ (ЭтоДокумент(ЭтаФорма.ИмпортТипОбъектаБД) И ТекущиеДанныеТаблицы.КоллекцияИсточника = "Документы") 
			И НЕ (ЭтоПланВидовХарактеристик(ЭтаФорма.ИмпортТипОбъектаБД) И ТекущиеДанныеТаблицы.КоллекцияИсточника = "ПланыВидовХарактеристик") Тогда
			ПредупреждениеСообщение(, "Выбранный тип объекта """ + ТекущиеДанныеТаблицы.КоллекцияИсточника + """ не соответствует основному типу импортируемых данных """ + ЭтаФорма.ИмпортТипОбъектаБД + """.");
			ТекущиеДанныеТаблицы.Загрузить = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортТМетаданныеИсточникаПриемникаЗначениеОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ТекущиеДанныеТаблицы, ПараметрыИсточника, СтрокаПараметра;
	Перем СписокВыбора, ЗаголовокФормыВыбора, ВыбранныйЭлемент;
	Перем ОписаниеОповещенияОЗакрытии;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанныеТаблицы = Элемент.Родитель.ТекущиеДанные;
	Если НЕ ТекущиеДанныеТаблицы.Загрузить Тогда
		ПредупреждениеСообщение(, "Выбранный тип объекта """ + ТекущиеДанныеТаблицы.КоллекцияИсточника + """ не выбран для последующего импорта (реквизит ""И"").");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеТаблицы.СписокЗначенийОтбора.Количество() = 0 Тогда
		// Считать из Источника (Справочник, ПВХ) группы 3-х уровней.
		Состояние("Считывание групп из источника ...");
		СписокВыбора = ИмпортТМетаданныеИсточникаПриемникаПриИзмененииЗначенияОтбораНаСервере(ЭтаФорма.ИмпортСтруктураПараметровСоединения, ТекущиеДанныеТаблицы.КоллекцияИсточника, ТекущиеДанныеТаблицы.ИмяВИсточнике);
		ТекущиеДанныеТаблицы.СписокЗначенийОтбора = СписокВыбора.Скопировать();
	Иначе
		СписокВыбора = ТекущиеДанныеТаблицы.СписокЗначенийОтбора.Скопировать();
	КонецЕсли;
		
	ПараметрыИсточника = Новый Структура;
	ПараметрыИсточника.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
	ПараметрыИсточника.Вставить("ВладелецРеквизита"		, ТекущиеДанныеТаблицы);
	ПараметрыИсточника.Вставить("ИмяРеквизита"			, "ЗначениеОтбора");
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выбрать значение отбора'");
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент(ЗаголовокФормыВыбора, СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТаблицы.ЗначениеОтбора));
		ИмпортВызватьОбработкуВыбораЗначенияОтбора(ВыбранныйЭлемент, ПараметрыИсточника);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ИмпортВызватьОбработкуВыбораЗначенияОтбора"", ЭтотОбъект, ПараметрыИсточника)");
		СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещенияОЗакрытии, ЗаголовокФормыВыбора, СписокВыбора.НайтиПоЗначению(ТекущиеДанныеТаблицы.ЗначениеОтбора));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортВызватьОбработкуВыбораЗначенияОтбора(ВыбранныйЭлемент, ПараметрыИсточника) Экспорт
	Перем ТекущийТип, ТекущийПараметр, ТипСтрока;
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Обработка значения отбора.
	
	Если ТипЗнч(ПараметрыИсточника.ВладелецРеквизита) = Тип("ДанныеФормыЭлементДерева")
		ИЛИ ТипЗнч(ПараметрыИсточника.ВладелецРеквизита) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыИсточника.ВладелецРеквизита, Новый Структура(ПараметрыИсточника.ИмяРеквизита, ВыбранныйЭлемент.Значение));
	Иначе
		ПараметрыИсточника.ВладелецРеквизита[ПараметрыИсточника.ИмяРеквизита] = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмпортТМетаданныеИсточникаПриемникаПриИзмененииЗначенияОтбораНаСервере(СтруктураПараметровСоединения, КоллекцияИсточника, ИмяВИсточнике)
	Перем ТаблицаГрупп, ЭлементТЗ, СписокВыбора;
	
	Если КоллекцияИсточника	= "Справочники" Тогда
		ТаблицаГрупп = ОбъектОбработка().ИмпортПолучитьТаблицуГруппСправочникаИлиПВХ(СтруктураПараметровСоединения, "Справочник", ИмяВИсточнике);
	ИначеЕсли КоллекцияИсточника	= "ПланыВидовХарактеристик" Тогда
		ТаблицаГрупп = ОбъектОбработка().ИмпортПолучитьТаблицуГруппСправочникаИлиПВХ(СтруктураПараметровСоединения, "ПланВидовХарактеристик", ИмяВИсточнике);
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ЭлементТЗ ИЗ ТаблицаГрупп Цикл
		СписокВыбора.Добавить(ЭлементТЗ.ПолныйКод, ЭлементТЗ.Наименование);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ФормаОпределитьДоступнностьСтраницаИмпорт(ТипОбъектаБД)
	
	КВоТИмпорт			= Объект.ИмпортТЗагружаемыхОбъектов.Количество() > 0;
	//
	глТипСправочник		= ТипОбъектаБД = "Справочник";
	глТипДокумент		= ТипОбъектаБД = "Документ";
	глТипПВХ			= ТипОбъектаБД = "ПланВидовХарактеристик";
	глИмпорт 			= глТипСправочник ИЛИ глТипДокумент ИЛИ глТипПВХ;
	
	// Вкладка "ИМПОРТ ДАННЫХ".
	
	Элементы.кнИмпортУстановитьНачальныеПараметрыСоединения.Доступность	= глИмпорт;
	
	Элементы.ИмпортОрганизацияИсточник.ТолькоПросмотр 					= НЕ глТипДокумент;
	
	Элементы.кнИмпортПодключитьсяКВнешнемуИсточнику.Доступность			= глИмпорт;
	Элементы.кнИмпортОтключитьсяОтВнешнегоИсточника.Доступность			= глИмпорт;
	
	Элементы.кнИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу.Доступность = глИмпорт;
	Элементы.кнИмпортУстановитьФлажки.Доступность						= глИмпорт;
	Элементы.кнИмпортСнятьФлажки.Доступность							= глИмпорт;
	Элементы.кнИмпортироватьДанныеИзВнешнегоИсточника.Доступность		= глИмпорт;
	Элементы.кнИмпортПровестиДокументы.Доступность						= глТипДокумент;
	Элементы.кнИмпортОчиститьТаблицуЗагружаемыхОбъектов.Доступность		= КВоТИмпорт;
	
	Элементы.ИмпортУчитыватьДатуСозданияОбъекта.ТолькоПросмотр			= НЕ глТипСправочник И НЕ глТипПВХ;
	
	Элементы.кнИмпортироватьДанныеИзВнешнегоИсточника.Доступность		= КВоТИмпорт;
	
	Элементы.ИмпортТЗагружаемыхОбъектовГруппаВладельцы.Видимость		= глТипСправочник;
	Элементы.ИмпортТЗагружаемыхОбъектовГруппаРодители.Видимость			= глТипСправочник ИЛИ глТипПВХ;
	Элементы.ИмпортТЗагружаемыхОбъектовПриемникПредопределенный.Видимость = глТипСправочник ИЛИ глТипПВХ;
	
	Элементы.ИмпортТЗагружаемыхОбъектовГруппаСуммыДокументов.Видимость	= глТипДокумент;
	
	Элементы.ИмпортТЗагружаемыхОбъектовПриемникПроведен.Видимость 		= глТипДокумент;
	Элементы.ИмпортТЗагружаемыхОбъектовПриемникПерепроведен.Видимость 	= глТипДокумент;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Настройка Соединения

&НаКлиенте
Процедура ИмпортИмяCOMСоединителяПриИзменении(Элемент)
	
	СисИнфоИмяCOMСоединителя = ИмпортПолучитьСистемноеИмяCOMСоединителяНаСервере();
	
	Если НЕ ЭтаФорма.ИмпортИмяCOMСоединителя + ".COMConnector" = СисИнфоИмяCOMСоединителя Тогда
		ПредупреждениеСообщение(, "Имя выбранного COMСоединения """ + ЭтаФорма.ИмпортИмяCOMСоединителя + ".COMConnector" + """ отличается от системного """ + СисИнфоИмяCOMСоединителя + """.");
	КонецЕсли;

КонецПроцедуры

// МО:
//
&НаСервере
Функция ИмпортПолучитьСистемноеИмяCOMСоединителяНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяCOMСоединителя();

КонецФункции
 
&НаКлиенте
Процедура ИмпортТипВнешнейБДПриИзменении(Элемент)
	
	ИмпортОтключитьсяОтВнешнейБДНаСервере();
	
	Если ЭтаФорма.ИмпортВариантРаботыВнешнейИБ = "Файл" Тогда
		Элементы.ИмпортКаталогБазы.ТолькоПросмотр 		= Ложь;
		
		ЭтаФорма.ИмпортИмяСервера 						= "";
		Элементы.ИмпортИмяСервера.ТолькоПросмотр		= Истина;
		
		ЭтаФорма.ИмпортИмяБазыНаСервере 				= "";
		Элементы.ИмпортИмяБазыНаСервере.ТолькоПросмотр	= Истина;
	Иначе
		ЭтаФорма.ИмпортКаталогБазы						= "";
		Элементы.ИмпортКаталогБазы.ТолькоПросмотр 		= Истина;
		
		Элементы.ИмпортИмяСервера.ТолькоПросмотр		= Ложь;
		Элементы.ИмпортИмяБазыНаСервере.ТолькоПросмотр	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортКаталогВнешнейБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог'");
	//Диалог.Каталог   = "C:\";
	Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Если Диалог.Выбрать() Тогда
		
		Файл1С = Новый Файл(Диалог.Каталог + "\1Cv8.1CD");
		
		Если Файл1С.Существует() Тогда
			
			Если ЗначениеЗаполнено(ЭтаФорма.ИмпортКаталогБазы) И НЕ ЭтаФорма.ИмпортКаталогБазы = Диалог.Каталог Тогда
	
				ИмпортОтключитьсяОтВнешнейБДНаСервере();
				
				ЭтаФорма.ИмпортОрганизацияИсточник			= Неопределено;
				
				Объект.ИмпортАрхивнаяКопияБазы 				= Истина;
				Объект.ИмпортИспользоватьGUIDИсточника 		= Ложь;
				Объект.ИмпортУчитыватьДатуСозданияОбъекта	= Ложь;
				
				Объект.ИмпортИзменятьПодчиненные			= Ложь;
				Объект.ИмпортЗаменятьПустымиЗначениями 		= Ложь;
	
				ЭтаФорма.ИмпортСписокОрганизацийИсточника.Очистить();
				
				ИмпортОчиститьТаблицуМетаданныхИсточникИПриемник();
	
				ИмпортОчиститьТаблицуЗагружаемыхОбъектов(Неопределено);

				ИмпортОтразитьСостояниеПодключенияКВнешнейБД();

			КонецЕсли;
			
			ЭтаФорма.ИмпортКаталогБазы = Диалог.Каталог;
			
		Иначе
			
			ПредупреждениеСообщение(, "Каталог " + Диалог.Каталог + " 
			|не содержит Информационную базу 1С:Предприятие.");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИмяСервераПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИмяБазыНаСервереПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПользовательПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИмпортПарольПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Подключение к Внешнему источнику.

&НаКлиенте
Функция ИмпортПодключитьсяКВнешнемуИсточнику(Команда)
	
	ОчиститьСообщения();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортПодключитьсяКВнешнемуИсточнику;
	
	ЕстьОшибки = ИмпортПроверитьЗаполнениеПараметров();
	
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Состояние("Соединение с внешней базой данных ...");
	
	СтруктураПараметровСоединения = ИмпортПолучитьСтруктуруПараметровСоединенияНаСервере();
	
	СтрокаСообщенияОбОшибке = "";
	ЭтаФорма.ИмпортСоединениеУстановлено = ИмпортУстановитьВнешнееСоединениеНаСервере(СтрокаСообщенияОбОшибке);
	
	Если ЭтаФорма.ИмпортСоединениеУстановлено Тогда
		
		ЭтаФорма.ИмпортКонфигурацияИсточника = ИмпортКонфигурацияИсточникаНаСервере(СтруктураПараметровСоединения);
		ЭтаФорма.ИмпортВерсияИсточника = ИмпортВерсияИсточникаНаСервере(СтруктураПараметровСоединения);
		
		ИмпортПолучитьНачальныеПараметрыИмпорта(Команда);

	Иначе
		
		ПредупреждениеСообщение(, СтрокаСообщенияОбОшибке);
		
		ЭтаФорма.ИмпортКонфигурацияИсточника = "";
		ЭтаФорма.ИмпортВерсияИсточника = "";
		
	КонецЕсли;
	
	ИмпортОтразитьСостояниеПодключенияКВнешнейБД();
	
КонецФункции

&НаСервере
Функция ИмпортПолучитьСтруктуруПараметровСоединенияНаСервере()
	
	СтруктураПараметровСоединения = Новый Структура;
	
	СтруктураПараметровСоединения.Вставить("ИмяCOMСоединителя"							, ЭтаФорма.ИмпортИмяCOMСоединителя);
	СтруктураПараметровСоединения.Вставить("ВариантРаботыИнформационнойБазы"			, ЭтаФорма.ИмпортВариантРаботыВнешнейИБ);
	
	СтруктураПараметровСоединения.Вставить("КаталогИнформационнойБазы"					, ЭтаФорма.ИмпортКаталогБазы);
	СтруктураПараметровСоединения.Вставить("ИмяСервера1СПредприятия"					, ЭтаФорма.ИмпортИмяСервера);
	СтруктураПараметровСоединения.Вставить("ИмяИнформационнойБазыНаСервере1СПредприятия", ЭтаФорма.ИмпортИмяБазыНаСервере);
	
	СтруктураПараметровСоединения.Вставить("АутентификацияОперационнойСистемы"			, ЭтаФорма.ИмпортАутентификацияWindows);
	СтруктураПараметровСоединения.Вставить("ИмяПользователя"							, ЭтаФорма.ИмпортПользователь);
	СтруктураПараметровСоединения.Вставить("ПарольПользователя"							, ЭтаФорма.ИмпортПароль);
	
	Возврат СтруктураПараметровСоединения;
	
КонецФункции

// МО:
//
&НаСервере
Функция ИмпортУстановитьВнешнееСоединениеНаСервере(СтрокаСообщенияОбОшибке)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметровСоединения = ИмпортПолучитьСтруктуруПараметровСоединенияНаСервере();
	
	ОшибкаПодключенияКомпоненты = Ложь;
	Соединение = ОбъектОбработка.УстановитьВнешнееСоединение(СтруктураПараметровСоединения, СтрокаСообщенияОбОшибке, ОшибкаПодключенияКомпоненты);
	
	Возврат НЕ Соединение = Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ИмпортОтразитьСостояниеПодключенияКВнешнейБД()
	
	Если ЭтаФорма.ИмпортСоединениеУстановлено Тогда
		Элементы.ИмпортСостояниеПодключения.Заголовок = "Соединение установлено";
		Элементы.ИмпортКонфигурацииИсточникаИПриемника.Заголовок = ВРег("" + ЭтаФорма.ИмпортКонфигурацияИсточника + " " + ЭтаФорма.ИмпортВерсияИсточника + " => " + Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия);
	Иначе
		Элементы.ИмпортСостояниеПодключения.Заголовок = "Соединение отсутствует";
		Элементы.ИмпортКонфигурацииИсточникаИПриемника.Заголовок = "ИСТОЧНИК => ПРИЕМНИК";
	КонецЕсли;
	
КонецПроцедуры

// МО:
//
&НаСервере
Функция ИмпортКонфигурацияИсточникаНаСервере(СтруктураПараметровСоединения)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмпортКонфигурацияИсточникаНаСервере(СтруктураПараметровСоединения);
	
КонецФункции

// МО:
//
&НаСервере
Функция ИмпортВерсияИсточникаНаСервере(СтруктураПараметровСоединения)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмпортВерсияИсточникаНаСервере(СтруктураПараметровСоединения);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Отключиться от Внешнего источника.

&НаКлиенте
Процедура ИмпортОтключитьсяОтВнешнегоИсточника(Команда)
	
	ИмпортОтключитьсяОтВнешнейБДНаСервере();
	
	ИмпортОчиститьПараметры();
	
	Объект.ИмпортТМетаданныеИсточникаПриемника.ПолучитьЭлементы().Очистить();
	
	ИмпортОчиститьТаблицуЗагружаемыхОбъектов(Команда);

	ИмпортОтразитьСостояниеПодключенияКВнешнейБД();

КонецПроцедуры

// МО:
//
&НаСервере
Процедура ИмпортОтключитьсяОтВнешнейБДНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ЭтаФорма.ИмпортСоединениеУстановлено = ОбъектОбработка.ИмпортОтключитьсяОтВнешнейБДНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ИмпортОрганизацияИсточникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ВыбранныйЭлемент, ОписаниеОповещенияОЗакрытии;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ВыбранныйЭлемент = ВыбратьИзСписка(ЭтаФорма.ИмпортСписокОрганизацийИсточника, Элемент, ДанныеВыбора);
		ВызватьОбработкуВыбранногоЭлементаИмпортОрганизацияИсточник(ВыбранныйЭлемент, Элемент);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуВыбранногоЭлементаИмпортОрганизацияИсточник"", ЭтотОбъект, Элемент)");
		Выполнить("ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, ЭтаФорма.ИмпортСписокОрганизацийИсточника, Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуВыбранногоЭлементаИмпортОрганизацияИсточник(ВыбранныйЭлемент, Элемент) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		ЭтаФорма.ИмпортОрганизацияИсточник = Неопределено;
		ЭтаФорма.ИмпортНомерОрганизацииИсточника = -1;
		ИмпортОрганизацияИсточникПриИзменении(Элемент);
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ИмпортОрганизацияИсточник = ВыбранныйЭлемент.Представление;
	ЭтаФорма.ИмпортНомерОрганизацииИсточника = ЭтаФорма.ИмпортСписокОрганизацийИсточника.Индекс(ВыбранныйЭлемент);
	
	ИмпортОрганизацияИсточникПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИмпортОрганизацияИсточникПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортОрганизацияИсточник) Тогда
		ЭтаФорма.ИмпортОрганизацияИсточник = Неопределено;
		ЭтаФорма.ИмпортНомерОрганизацииИсточника = -1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортОрганизацияИсточник) Тогда
		ПредупреждениеСообщение(, "Организация - рекомендуемый параметр.
		|
		|Для больших объемов данных - обязательный.
		|
		|Если Организация не указана, 
		|то сопоставление данных Информационных баз может быть длительным.
		|");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Дополнительные параметры.

&НаКлиенте
Процедура ИмпортАрхивнаяКопияБазыПриИзменении(Элемент)
	
	Элементы.ИмпортИспользоватьGUIDИсточника.ТолькоПросмотр = Объект.ИмпортАрхивнаяКопияБазы;
	Объект.ИмпортИспользоватьGUIDИсточника = НЕ Объект.ИмпортАрхивнаяКопияБазы;
	
	Если Объект.ИмпортИспользоватьGUIDИсточника Тогда
		ИмпортИспользоватьGUIDИсточникаПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортИспользоватьGUIDИсточникаПриИзменении(Элемент)
	
	Если Объект.ИмпортИспользоватьGUIDИсточника Тогда
		ПредупреждениеСообщение(, """Использовать GUID источника"" - рекомендуемый параметр, если
		|это не ""Архивная копия базы"" и необходимо синхронизировать данные Источника и Приемника по GUID.
		|
		|Использование этой опции ""приравнивает"" Внешнюю базу к ""Архивной"".
		|В последствии необходимо учитывать эту особенность при последующих импортах данных из Источника.
		|
		|Предпосылка для использования данной опции:
		|В двух разных (""неархивных"") Информационных базах не может быть одинаковых уникальных идентификаторов.
		|
		|");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортУчитыватьДатуСозданияОбъектаПриИзменении(Элемент)
	
	Если Объект.ИмпортУчитыватьДатуСозданияОбъекта Тогда
		ПредупреждениеСообщение(, """Учет даты создания"" объектов справочников - опциональный параметр.
		|
		|Сопоставление данных Информационных баз, медленнее, чем без использования опции.
		|");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Frequently Asked Question(s) [FAQ].

&НаКлиенте
Процедура ИмпортFAQ(Команда)
	
	СтруктураВозврат = ИмпортПолучитьFAQ();
	
	ИмпортПояснение = СтруктураВозврат.ИмпортПояснение;
	ИмпортПараметры = СтруктураВозврат.ИмпортПараметры;
	
	Если ЗначениеЗаполнено(ИмпортПояснение) Тогда
		ПредупреждениеСообщение(, ИмпортПояснение);
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)" Описание возможных действий.
//
&НаКлиенте
Функция ИмпортПолучитьFAQ()
	
	СтруктураВозврат = Новый Структура;
	
	ИмпортПояснение = "";
	ИмпортПараметры = Новый Структура;
	
	ИмпортПояснение = "РЕКОМЕНДАЦИИ:
	|1. Импортировать сначала ""алгоритмические"" справочники - потом документы.
	|2. Основной вариант - от документа. По документу определяется импортируемые подчиненные объекты (Справочники, ПВХ и т.д.).
	|3. Выполнять загрузку в Монопольном режиме в Транзакции.
	|
	|ФИЛЬТРАЦИЯ ОБЪЕКТОВ (документы):
	|1. По-умолчанию - выбран 1(один) тип объекта - тип текущего объекта.
	|2. По-умолчанию = Непомеченные на удаление. При заполнении таблицы сопоставлений объектов. Остальное - ""как есть"".
	|3. По Датам. Обязательный отбор для документов. Период - произвольный.
	|4. По Организации (документ)/Группе (справочник). Рекомендуемый отбор. Актуально для больших объемов данных.
	|5. Изменять подчиненные документу. Применимо только к Справочникам, для которых предусмотрена функция создания.
	|6. Флажок ""Загрузить"" таблицы сопоставлений на странице загрузки. Обязательный отбор.
	|
	|НАСТРОЙКА: ВАЖНО.
	|1. ""Архивная копия базы"" - Поиск в Приемнике (текущей базе) осуществляется по GUID.
	|2. ""Использовать GUID источника"" - Приравнивает ""Стороннюю"" базу к ""Архивной"".
	|При создании объектов используется GUID источника. Таким образом осуществляется ""синхронизация"" по GUID.
	|Предпосылка для использования данной опции: по-умолчанию
	|В двух разных (""неархивных"") Информационных базах не может быть одинаковых идентификаторов.
	|3. ""Изменять подчиненные"". Для Документа - Справочники, ПВХ и т.д. Для Справочника - другие Справочники, ПВХ и т.д.
	|При неустановленном флажке: Создаваемые создаются со всеми подчиненными, если флажок не установлен, то реквизиты
	|Документа, Справочника, ПВХ, заполняются по существующим данным, сами эти данные (эл-ты Справочника, ПВХ) остаются неизменными.
	|4. Производимые изменения можно увидеть активизировав в настройках обработки флажок ""Показывать сообщения"".
	|5. Для соединения необходима регистрация библиотеки comcntr.dll:
	|(х32: C:\Program Files\1cv82\8.Х.Х.Х\bin\comcntr.dll или для x64: C:\Program Files (x86)\1cv82\8.Х.Х.Х\bin\comcntr.dll).
	|
	|ПРОВЕРКА:
	|1. Сопоставление объектов и их реквизитов конфигураций осуществляется по именам.
	|2. Сопоставление объектов Источника и Приемника производится по:
	|
	|- Если установлены флажки ""Архивная копия базы"" и ""Использовать GUID источника"", то поиск в ""Приемнике""
	|осуществляется по GUID. Если не найдено - Документы - Номер+Дата или Номер, другие объекты - по Код+Наименование.
	|
	|- Если не установлены флажки ""Архивная копия базы"" и ""Использовать GUID источника"", то поиск в ""Приемнике""
	|осуществляется: Документы - Номер+Дата или Номер, другие объекты - по Код+Наименование.
	|
	|Таким образом, существет возможность маневра: Поиск по Номеру, Коду и т.д, а потом установить флажок
	|""Использовать GUID источника"" - для ""синхронизации"" по GUID неродственных баз.
	|
	|ЗАГРУЗКА:
	|Рекомендуется изначально сформировать ""АЛГОРИТМИЧЕСКИЕ"" Справочники, ПланыВидовХарактеристик, 
	|и только после этого формировать Документы. Причина - специфика конфигурации взаимная зависимость в Справочниках и ПВХ,
	|а также использование/неиспользование опции ""Изменять подчиненные"".
	|
	|""Найденные"" - замещаются, ""НеНайденные"" - создаются.
	|При импорте из ""Архивной"" базы или ""Использовать GUID источника"" объекты создаются с использованием GUID источника.
	|
	|ДОКУМЕНТЫ.
	|Документы при импорте записываются, но не проводятся. Необходимо проведение.
	|
	|ДОПОЛНИТЕЛЬНЫЕ РЕКВИЗИТЫ И СВЕДЕНИЯ.
	|Импорт этих данных возможен, если данная опция конфигурации активизирована в настройках.
	|
	|БЛОКИРОВАННЫЕ РЕКВИЗИТЫ.
	|При импорте ""Блокированные"" реквизиты на ""Пустой"" не изменяются. Остается значение реквизита объекта.
	|
	|РЕКВИЗИТ ТИПА ""ХРАНИЛИЩЕ ЗНАЧЕНИЯ"".
	|Реквизит подчиняется общим правилам импорта значений.
	|
	|ПРЕДОПРЕДЕЛЕННЫЕ ЭЛЕМЕНТЫ.
	|Состав Предопределенных элементов Источника и Приемника, в общем случае, разный.
	|Если в текущей БД они отсутствуют, то они импортируются НЕпредопределенными, если импорт объекта необходим.
	|
	|ПРОВЕДЕНИЕ ДОКУМЕНТОВ (Заключительный этап в форме обработки):
	|Активный флажок ""Загрузить/Провести"". Проводятся загруженные документы. Для повторно загруженных: непомеченные на удаление.
	|Документы-Основания: из реквизитов ""Основание"", ""ДокументОснование"", ""ЗаказПоставщику"".
	|
	|ТЕСТИРОВАНИЕ И ИСПРАВЛЕНИЕ.
	|После завершения импорта рекомендуется в Конфигураторе произвести ""Тестирование и исправление"".
	|Штатный механизм. Это позволит проверить Информационную Базу с импортированными объектами на противоречивость.
	|==========================================================================================================================
	|Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.";
	
	ИмпортПараметры.Вставить("Действие"			, "Импорт_из_1С8Х");
	ИмпортПараметры.Вставить("Заголовок"		, "Импорт объектов");
	ИмпортПараметры.Вставить("ТекстВопроса"		, ИмпортПояснение + "Подтвердите импорт документов и подчиненных объектов");
	ИмпортПараметры.Вставить("ТекстСостояние"	, "Подождите немного. Происходит импорт документов и подчиненных объектов.");
	
	СтруктураВозврат.Вставить("ИмпортПояснение"	, ИмпортПояснение);
	СтруктураВозврат.Вставить("ИмпортПараметры"	, ИмпортПараметры);
	
	Возврат СтруктураВозврат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Проверка перед Загрузкой.
//

&НаКлиенте
Функция ИмпортОсновныеДействия_Сопоставление_Загрузка(Сопоставление, ТекстВопроса)
	Перем Ответ, ОписаниеОповещенияОЗавершении;
	
	Если НЕ ЭтаФорма.ИмпортСоединениеУстановлено Тогда
		ПредупреждениеСообщение(, "Соединение с Внешней базой данных не установлено.");
		Возврат Ложь;
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу;
	
	Если ЭтоДокумент(ЭтаФорма.ИмпортТипОбъектаБД) Тогда
	
		Отказ = Ложь;
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортПериод.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортПериод.ДатаОкончания) Тогда
			ПроверитьИСообщить(ЭтаФорма.ИмпортПериод, "ИмпортПериод", Элементы.ИмпортПериод.Заголовок, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоСправочник(ЭтаФорма.ИмпортТипОбъектаБД) И Объект.ИмпортУчитыватьДатуСозданияОбъекта Тогда
	
		Отказ = Ложь;
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортПериод.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортПериод.ДатаОкончания) Тогда
			ПроверитьИСообщить(ЭтаФорма.ИмпортПериод, "ИмпортПериод", Элементы.ИмпортПериод.Заголовок, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭтоСправочник(ЭтаФорма.ИмпортТипОбъектаБД) Тогда
		
		ТекстВопроса = "Если в списке выбранных объектов есть справочник ""Номенклатура"",
		|а группа справочника не выбрана, то процесс " + ?(Сопоставление, "сопоставления данных Информационных баз", "загрузки данных из Внешнего источника") + " может быть очень длительным.
		|
		|Рекомендуется выбрать группу справочника ""Номенклатура"".
		|
		|Продолжить " + ?(Сопоставление, "сопоставление данных информационных баз", "загрузку данных из внешнего источника") + " ?";
		
	Иначе
		
		Если Сопоставление Тогда
		
			ТекстВопроса = "Формирование таблицы сопоставлений объектов Источника и Приемника.
			|
			|Проверьте установленные параметры сопоставления.
			|
			|Продолжить сопоставление данных Информационных баз ?";
		
		Иначе
			
			Если НЕ Объект.ИмпортАрхивнаяКопияБазы И НЕ Объект.ИмпортИспользоватьGUIDИсточника Тогда
				ПредупреждениеОGUID = "
				|Для синхронизации Информационных баз по Уникальному идентификатору
				|необходимо установить флажок ""Архивная копия базы"" или ""Использовать GUID источника"".";
			Иначе
				ПредупреждениеОGUID = "";
			КонецЕсли;
		
			ТекстВопроса = "Загрузка данных из Внешнего источника.
			|
			|Проверьте установленные параметры загрузки.
			|" + ПредупреждениеОGUID + "
			|
			|Продолжить загрузку данных из Внешнего источника?";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ОчиститьСообщения();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу;
	
	Если НЕ ИмпортОсновныеДействия_Сопоставление_Загрузка(Истина, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "ИМПОРТ: СОПОСТАВЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу(Ответ, Неопределено);
	Иначе			
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Сопоставление данных и заполнения таблицы ...");
	
	ИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицуНаСервере(ЭтаФорма.ИмпортСтруктураПараметровСоединения);
	
	ФормаОпределитьДоступнностьСтраницаИмпорт(ЭтаФорма.ИмпортТипОбъектаБД);

КонецПроцедуры

// МО:
//
&НаСервере
Функция ИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицуНаСервере(СтруктураПараметровСоединения)
		
	Объект.ИмпортТЗагружаемыхОбъектов.Очистить();

	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаИмпорта = РеквизитФормыВЗначение("Объект.ИмпортТЗагружаемыхОбъектов");
	
	// Заполнение таблицы "СОПОСТАВЛЕНИЯ".
	
	СтруктураПараметровСопоставления = Новый Структура;
	
	СтруктураПараметровСопоставления.Вставить("ИмпортТипОсновногоОбъекта"			, ЭтаФорма.ИмпортТипОбъектаБД);
	
	СтруктураПараметровСопоставления.Вставить("ИмпортДатаНач"						, ЭтаФорма.ИмпортПериод.ДатаНачала);
	СтруктураПараметровСопоставления.Вставить("ИмпортДатаКон"						, ЭтаФорма.ИмпортПериод.ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортОрганизацияИсточник) Тогда
		ЭтаФорма.ИмпортНомерОрганизацииИсточника = -1;
	КонецЕсли;
	СтруктураПараметровСопоставления.Вставить("ИмпортНомерОрганизацииИсточника"		, ЭтаФорма.ИмпортНомерОрганизацииИсточника);
	Если ЭтаФорма.ИмпортСписокОрганизацийИсточника.Количество() > 0 И ЭтаФорма.ИмпортНомерОрганизацииИсточника >= 0 Тогда
		СтруктураПараметровСопоставления.Вставить("ИмпортОрганизацияИсточник"		, ЭтаФорма.ИмпортСписокОрганизацийИсточника[ЭтаФорма.ИмпортНомерОрганизацииИсточника]);		// Элемент СпискаЗначений
	Иначе
		СтруктураПараметровСопоставления.Вставить("ИмпортОрганизацияИсточник"		, Неопределено);
	КонецЕсли;
	
	// Сопоставление данных с Источником: 1С:Предприятие 8.Х.
	ТаблицаИмпорта = ОбъектОбработка.ИмпортСопоставитьИЗаполнитьТаблицуНаСервере(СтруктураПараметровСоединения, СтруктураПараметровСопоставления, ТаблицаИмпорта);
	
	ЗначениеВРеквизитФормы(ТаблицаИмпорта, "Объект.ИмпортТЗагружаемыхОбъектов");
	
КонецФункции

&НаКлиенте
Процедура ИмпортСнятьФлажки(Команда)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Ложь, Объект.ИмпортТЗагружаемыхОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортУстановитьФлажки(Команда)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Истина, Объект.ИмпортТЗагружаемыхОбъектов);
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Установить/Снять Флажки в списке Ссылок на Объект.
//
&НаКлиенте
Процедура  ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Действие, Таблица)
	
	Для Каждого СтрокаСписка ИЗ Таблица Цикл
		СтрокаСписка["Загрузить"] = Действие;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Загрузка.
//

&НаКлиенте
Процедура ИмпортироватьДанныеИзВнешнегоИсточника(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;

	ОчиститьСообщения();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортироватьДанныеИзВнешнегоИсточника;
	
	Если НЕ ИмпортОсновныеДействия_Сопоставление_Загрузка(Ложь, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "ИМПОРТ: ЗАГРУЗКА", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриИмпортеДанныхИзВнешнегоИсточника(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриИмпортеДанныхИзВнешнегоИсточника"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриИмпортеДанныхИзВнешнегоИсточника(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Загрузка из внешней базы данных ...");
	
	СтруктураПараметровСоединения = ИмпортПолучитьСтруктуруПараметровСоединенияНаСервере();
	
	ИмпортироватьДанныеИзВнешнегоИсточникаНаСервере(СтруктураПараметровСоединения);
	
КонецПроцедуры

// МО:
//
&НаСервере
Функция ИмпортироватьДанныеИзВнешнегоИсточникаНаСервере(СтруктураПараметровСоединения)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаИмпорта = РеквизитФормыВЗначение("Объект.ИмпортТЗагружаемыхОбъектов");
	
	// Загрузка данных из Источника: 1С:Предприятие 8.Х.
	ТаблицаИмпорта = ОбъектОбработка.ИмпортироватьДанныеИзВнешнегоИсточникаНаСервере(СтруктураПараметровСоединения, ТаблицаИмпорта);
	
	ЗначениеВРеквизитФормы(ТаблицаИмпорта, "Объект.ИмпортТЗагружаемыхОбъектов");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Очистить форму.
//

&НаКлиенте
Процедура ИмпортОчиститьПараметры()
	
	ЭтаФорма.ИмпортПериод.ДатаНачала	= Дата("00010101");
	ЭтаФорма.ИмпортПериод.ДатаОкончания	= Дата("00010101");
	
	ЭтаФорма.ИмпортОрганизацияИсточник	= Неопределено;
	
	ЭтаФорма.ИмпортИмяCOMСоединителя	= "";
	ЭтаФорма.ИмпортВариантРаботыВнешнейИБ = "";
	
	//ЭтаФорма.ИмпортКаталогБазы			= "";
	ЭтаФорма.ИмпортИмяСервера			= "";
	ЭтаФорма.ИмпортИмяБазыНаСервере 	= "";
	
	//ЭтаФорма.ИмпортПользователь			= "";
	ЭтаФорма.ИмпортПароль				= "";
	ЭтаФорма.ИмпортАутентификацияWindows= Ложь;
	
	Объект.ИмпортАрхивнаяКопияБазы				= Ложь;
	Объект.ИмпортИспользоватьGUIDИсточника 		= Ложь;
	Объект.ИмпортУчитыватьДатуСозданияОбъекта 	= Ложь;
	
	Объект.ИмпортИзменятьПодчиненные 			= Ложь;
	Объект.ИмпортЗаменятьПустымиЗначениями 		= Ложь;
	
	ЭтаФорма.ИмпортКонфигурацияИсточника= "";
	ЭтаФорма.ИмпортВерсияИсточника		= "";
	
	ЭтаФорма.ИмпортКонфигурацияИсточника= "";
	ЭтаФорма.ИмпортВерсияИсточника 		= "";
	
	Элементы.ИмпортСостояниеПодключения.Заголовок = "Соединение отсутствует";
	ЭтаФорма.ИмпортСоединениеУстановлено= Ложь;
	
	Элементы.ИмпортКонфигурацииИсточникаИПриемника.Заголовок = "ИСТОЧНИК => ПРИЕМНИК";
	
	ЭтаФорма.ИмпортСписокОрганизацийИсточника.Очистить();
	
	ИмпортОчиститьТаблицуМетаданныхИсточникИПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортОчиститьТаблицуЗагружаемыхОбъектов(Команда)
	
	Объект.ИмпортТЗагружаемыхОбъектов.Очистить();
	ФормаОпределитьДоступнностьСтраницаИмпорт(ЭтаФорма.ИмпортТипОбъектаБД);
	
КонецПроцедуры

&НаСервере
Процедура ИмпортОчиститьТаблицуМетаданныхИсточникИПриемник()
	
	Попытка
		Объект.ИмпортТИсточникИПриемник.ПолучитьЭлементы().Очистить();
	Исключение
	//	//Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИМПОРТ: Проведение загруженных документов.
//

&НаКлиенте
Процедура ИмпортПровестиДокументы(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ТекстВопроса = "Проведение загруженных документов.
	|
	|Будут проведены документы, имеющие признак ""Проведен"".
	|
	|Провести документы ?
	|";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриПроведенииДокументовПослеИмпорта(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПроведенииДокументовПослеИмпорта"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПроведенииДокументовПослеИмпорта(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Перепроведение загруженных документов ...");
		
	ИмпортПровестиДокументыНаСервере();
	
КонецПроцедуры

// МО:
//
&НаСервере
Процедура ИмпортПровестиДокументыНаСервере()
	
	Если Объект.ИмпортТЗагружаемыхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаИмпорта = РеквизитФормыВЗначение("Объект.ИмпортТЗагружаемыхОбъектов");
	
	// Перепроведение только загруженных и только ранее проведенных документов.
	ТаблицаИмпорта = ОбъектОбработка.ИмпортПровестиДокументыНаСервере(ТаблицаИмпорта);
	
	ЗначениеВРеквизитФормы(ТаблицаИмпорта, "Объект.ИмпортТЗагружаемыхОбъектов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ФОРМЫ.
//

// Проверить заполнение необязательных параметров для формирования таблицы "1С:Предприятие".
//
&НаСервере
Функция ИмпортПроверитьЗаполнениеПараметров()
	
	// Проверяет заполнение реквизитов. Для реквизитов, у которых свойство "Проверка заполнения" установлено в значение "Показывать ошибку" и реквизит не заполнен, будет сформировано сообщение об ошибке.
	Возврат НЕ ЭтаФорма.ПроверитьЗаполнение();
	
КонецФункции

// ЭтаФорма.ПроверитьЗаполнение().
&НаСервере
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если (  ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортПодключитьсяКВнешнемуИсточнику 
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортПолучитьНачальныеПараметрыИмпорта 
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортСопоставитьДанныеСВнешнимИсточникомИЗаполнитьТаблицу 
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.кнИмпортироватьДанныеИзВнешнегоИсточника 
		ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.ИмпортТЗагружаемыхОбъектов) Тогда
			
		ПроверитьИСообщить(ЭтаФорма.ИмпортИмяCOMСоединителя				, "ИмпортИмяCOMСоединителя"			, Элементы.ИмпортИмяCOMСоединителя.Заголовок, Отказ);
		
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ИмпортВариантРаботыВнешнейИБ) ИЛИ ЭтаФорма.ИмпортВариантРаботыВнешнейИБ = "Файл" Тогда
			
			ПроверитьИСообщить(ЭтаФорма.ИмпортКаталогБазы				, "ИмпортКаталогБазы"				, Элементы.ИмпортКаталогБазы.Заголовок		, Отказ);
			
		Иначе
			
			ПроверитьИСообщить(ЭтаФорма.ИмпортИмяСервера				, "ИмпортИмяСервера"				, Элементы.ИмпортИмяСервера.Заголовок		, Отказ);
			ПроверитьИСообщить(ЭтаФорма.ИмпортИмяБазыНаСервере			, "ИмпортИмяБазыНаСервере"			, Элементы.ИмпортИмяБазыНаСервере.Заголовок	, Отказ);
			
		КонецЕсли;
		
		ПроверитьИСообщить(ЭтаФорма.ИмпортПользователь					, "ИмпортПользователь"				, Элементы.ИмпортПользователь.Заголовок		, Отказ);
		
	Иначе
	КонецЕсли;
	
КонецПроцедуры

// ЭтаФорма.ПроверитьЗаполнение().
&НаСервере
Процедура ПроверитьИСообщить(Знач ЗначениеРеквизитаОбъекта, ИмяРеквизитаОбъекта, ЗаголовокЭлементаФормы, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаОбъекта) Тогда
		СообщитьПользователю(НСтр("ru = 'Поле """ + ЗаголовокЭлементаФормы + """ не заполнено.'")	, , ИмяРеквизитаОбъекта	, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                - Любая ссылка на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
&НаСервере
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Попытка
			Сообщение.КлючДанных = КлючДанных;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ТИП ОБЪЕКТА.
//

// Функция-свойство: возвращает значение для идентификации общего типа "Справочники"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаСправочники()
	
	Возврат "Справочник";				// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаСправочники();
	
КонецФункции

&НаСервере
Функция ЭтоСправочник(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаСправочники();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Документы"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаДокументы()
	
	Возврат "Документ";					// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаДокументы();
	
КонецФункции

&НаСервере
Функция ЭтоДокумент(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаДокументы();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы видов характеристик"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыВидовХарактеристик()
	
	Возврат "ПланВидовХарактеристик";	// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыВидовХарактеристик();
	
КонецФункции

&НаСервере
Функция ЭтоПланВидовХарактеристик(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "ПланыОбмена"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыОбмена()
	
	Возврат "ПланОбмена";				// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыОбмена();
	
КонецФункции

&НаСервере
Функция ЭтоПланОбмена(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыОбмена();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Бизнес процессы"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцесс";			// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаБизнесПроцессы();
	
КонецФункции

&НаСервере
Функция ЭтоБизнесПроцесс(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаБизнесПроцессы();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Задачи"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задача";					// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаЗадачи();
	
КонецФункции

&НаСервере
Функция ЭтоЗадача(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаЗадачи();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы видов расчета"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланВидовРасчета";			// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыВидовРасчета();
	
КонецФункции

&НаСервере
Функция ЭтоПланВидовРасчета(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыВидовРасчета();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы счетов"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланСчетов";				// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыСчетов();
	
КонецФункции

&НаСервере
Функция ЭтоПланСчетов(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыСчетов();
КонецФункции

&НаСервере
Функция вОписаниеТипа(ЗначениеТипа)

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = Тип("Строка") Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли;
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // вОписаниеТипа()

////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ.
//

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает номер версии конфигурации без номера сборки
//
// Параметры:
//  Версия - Строка - версия конфигурации в формате РР.ПП.ЗЗ.СС,
//                    где СС – номер сборки, который будет удален
// 
//  Возвращаемое значение:
//  Строка - номер версии конфигурации без номера сборки в формате РР.ПП.ЗЗ
//
&НаСервере
Функция ВерсияКонфигурацииБезНомераСборки(Знач Версия)
	
	Массив = РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Если Массив.Количество() < 3 Тогда
		Возврат Версия;
	КонецЕсли;
	
	Результат = "[Редакция].[Подредакция]";
	Результат = СтрЗаменить(Результат, "[Редакция]",    Массив[0]);
	Результат = СтрЗаменить(Результат, "[Подредакция]", Массив[1]);
	
	Возврат Результат;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  – Строка – второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   – больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаСервере
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
		                    НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
	                         НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Проверяет содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки - строка для проверки.
//  УчитыватьЛидирующиеНули - Булево - нужно ли учитывать лидирующие нули.
//  УчитыватьПробелы - Булево - нужно ли учитывать пробелы.
//
// Возвращаемое значение:
//  Истина       - строка содержит только цифры;
//  Ложь         - строка содержит не только цифры.
//
&НаСервере
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ТолькоЦифрыВСтроке()

// Удаляет двойные кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка       - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
// 
&НаСервере
Функция СократитьДвойныеКавычки(Знач Строка)
	
	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2);
	КонецЦикла;
	Пока Найти(Результат, """") = СтрДлина(Результат) И СтрДлина(Результат) > 0 Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 
          
// Процедура удаляет из строки указанное количество символов справа
//
&НаСервере
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)
	
	Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);
	
КонецПроцедуры 

// Находит символ в строке с конца
//
&НаСервере
Функция НайтиСимволСКонца(Знач СтрокаВся, Знач ОдинСимвол)
	
	НачальнаяПозиция = 1;
	ДлинаСтроки = СтрДлина(СтрокаВся);
	
	Для ТекущаяПозиция = 1 По СтрДлина(СтрокаВся) Цикл
		РеальнаяПозиция = ДлинаСтроки - ТекущаяПозиция + 1;
		ТекущийСимвол = Сред(СтрокаВся, РеальнаяПозиция, 1);
		Если ТекущийСимвол = ОдинСимвол Тогда
			Возврат РеальнаяПозиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Функция проверяет, является ли переданная в неё строка уникальным идентификатором
//
&НаСервере
Функция ЭтоУникальныйИдентификатор(ИдентификаторСтрока)
	
	УИСтрока = ИдентификаторСтрока;
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(УИСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Сч = 1 По СтрДлина(УИСтрока) Цикл
		Если КодСимвола(Шаблон, сч) = 88 И 
			((КодСимвола(УИСтрока, сч) < 48 ИЛИ КодСимвола(УИСтрока, сч) > 57) И (КодСимвола(УИСтрока, сч) < 97 или КодСимвола(УИСтрока, сч) > 102)) Тогда
			Возврат ложь;
		 ИначеЕсли КодСимвола(Шаблон, сч) = 45 И КодСимвола(УИСтрока, сч) <> 45 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// Формирует строку повторяющихся символов заданной длины
//
&НаСервере
Функция СформироватьСтрокуСимволов(Символ, КоличествоСимволов)
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Индекс = 1 ПО КоличествоСимволов Цикл
		
		Результат = Результат + Символ;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Дополняет переданную в качестве первого параметра строку символами слева\справа до заданной длины и возвращает ее
// Незначащие символы слева и справа удаляются
// По умолчанию функция добавляет строку нулями слева
//
// Параметры:
//  Строка      - Строка - исходная строка, которую необходимо дополнить символами до заданной длины
//  ДлинаСтроки - Число - требуемая конечная длина строки
//  Символ      - Строка - (необязательный) значение символа, которым необходимо дополнить строку
//  Режим       - Строка - (необязательный) [Слева|Справа] режим добавления символов к исходной строке: слева или справа
// 
// Пример 1:
// Строка = "1234"; ДлинаСтроки = 10; Символ = "0"; Режим = "Слева"
// Возврат: "0000001234"
//
// Пример 2:
// Строка = " 1234  "; ДлинаСтроки = 10; Символ = "#"; Режим = "Справа"
// Возврат: "1234######"
//
// Возвращаемое значение:
//  Строка - строка, дополненная символами слева или справа
//
&НаСервере
Функция ДополнитьСтроку(Знач Строка, Знач ДлинаСтроки, Знач Символ = "0", Знач Режим = "Слева")
	
	Если ПустаяСтрока(Символ) Тогда
		Символ = "0";
	КонецЕсли;
	
	// длина символа не должна превышать единицы
	Символ = Лев(Символ, 1);
	
	// удаляем крайние пробелы слева и справа строки
	Строка = СокрЛП(Строка);
	
	КоличествоСимволовНадоДобавить = ДлинаСтроки - СтрДлина(Строка);
	
	Если КоличествоСимволовНадоДобавить > 0 Тогда
		
		СтрокаДляДобавления = СформироватьСтрокуСимволов(Символ, КоличествоСимволовНадоДобавить);
		
		Если ВРег(Режим) = "СЛЕВА" Тогда
			
			Строка = СтрокаДляДобавления + Строка;
			
		ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
			
			Строка = Строка + СтрокаДляДобавления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

// Удаляет повторяющиеся символы слева/справа в переданной строке
//
// Параметры:
//  Строка      - Строка - исходная строка, из которой необходимо удалить повторяющиеся символы
//  Символ      - Строка - значение символа, который необходимо удалить
//  Режим       - Строка - (необязательный) [Слева|Справа] режим добавления символов к исходной строке: слева или справа
//
&НаСервере
Функция УдалитьПовторяющиесяСимволы(Знач Строка, Знач Символ, Знач Режим = "Слева")
	
	Если ВРег(Режим) = "СЛЕВА" Тогда
		
		Пока Лев(Строка, 1)= Символ Цикл
			
			Строка = Сред(Строка, 2);
			
		КонецЦикла;
		
	ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
		
		Пока Прав(Строка, 1)= Символ Цикл
			
			Строка = Лев(Строка, СтрДлина(Строка) - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

// Выполняет в строке ГДЕ замену символов ЧТО на соответствующие по номерам символы из строки НаЧто
//
// Параметры:
//  Что		- Строка - строка символов, каждый из которых будет заменен
//  Где		- Строка - исходная строка, в которой будет выполняться замена
//  НаЧто	- Строка - строка символов, на каждый из которых нужно заменить исходные символы
// 
//  Возвращаемое значение:
//  Строка - строка с замененными символами
//
&НаСервере
Функция ЗаменитьОдниСимволыДругими(Что, Где, НаЧто)
	
	Рез = Где;
	
	Для Сч = 1 По СтрДлина(Что) Цикл
		Рез = СтрЗаменить(Рез, Сред(Что, Сч, 1), Сред(НаЧто, Сч, 1));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура ПеренестиИзТаблицыИсточникаВТаблицуПриемник(Источник, Приемник)
	
	Для Каждого СтрокаИсточника ИЗ Источник Цикл
	
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНОЕ/НЕМОДАЛЬНОЕ ПРЕДУПРЕЖДЕНИЕ.
//

&НаКлиенте
Процедура ПредупреждениеСообщение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Если ИспользоватьРежимМодальности() Тогда
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НЕМОДАЛЬНЫЙ ВОПРОС.
//

&НаКлиенте
// Реализация функции Вопрос() в 8.3 БЕЗ ИСПОЛЬЗОВАНИЯ РЕЖИМА МОДАЛЬНОСТИ.
Процедура Вопрос83(ТекстВопроса, ТаймаутВопроса, ОбработкаОповещения)
	Перем ПараметрыВопроса, Кнопки;
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.Таймаут = ТаймаутВопроса;
	
	Кнопки = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса.КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
	ПараметрыВопроса.КнопкаТаймаута = КодВозвратаДиалога.Нет;
	
	ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ПараметрыВопроса);

КонецПроцедуры
	
// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//   Структура   - параметры процедуры ПоказатьВопросПользователю:
//     КнопкаПоУмолчанию             - Произвольный       - определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению. 
//     Таймаут                       - Число              - интервал времени в секундах до автоматического закрытия окна вопроса. 
//     КнопкаТаймаута                - Произвольный       - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                          на которой отображается количество секунд, оставшихся до истечения таймаута. 
//     Заголовок                     - Строка             - заголовок вопроса. 
//     ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево      - если Истина, то в окне вопроса будет доступен одноименный флажок.
//     БольшеНеЗадаватьЭтотВопрос    - Булево             - принимает значение, выбранное пользователем в соответствующем флажке.
//
&НаКлиенте
Функция ПараметрыВопросаПользователю()
	Перем Параметры, Заголовок;
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	//Попытка
	//	Выполнить("Заголовок = ПолучитьЗаголовокКлиентскогоПриложения()");
	//Исключение
	//	Выполнить("Заголовок = ПолучитьЗаголовокПриложения()");
	//КонецПопытки;
	Заголовок = "";
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Истина);
	Параметры.Вставить("Картинка", Неопределено);
	
	Возврат Параметры;
	
КонецФункции	

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение системного перечисления или значение, 
//                                                              связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может использоваться значение 
//                                                  перечисления КодВозвратаДиалога, а также другие значения, поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
&НаКлиенте
Процедура ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено)
	Перем Параметры;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе	
		Параметры = ПараметрыВопросаПользователю();
	КонецЕсли;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = Параметры.КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = Параметры.КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Параметры.Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Параметры.Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстВопроса);
	Параметры.Вставить("Картинка",          Параметры.Картинка);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Параметры.БлокироватьВесьИнтерфейс);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос);
	
	Выполнить("ОткрытьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВопрос, Параметры, , , , , ОбработкаОповещения)");
	
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога
&НаКлиенте
Функция КодВозвратаДиалогаВСтроку(Значение)
	Перем Результат;
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодВозвратаДиалога(Ответ)
	Перем ЗначениеОтвета;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ЗначениеОтвета = Ответ.Значение;
	Иначе
		ЗначениеОтвета = Ответ;
	КонецЕсли;
	
	Возврат ЗначениеОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МЕТАДАННЫЕ.
//

&НаСервере
Функция	МетаданныеСодержатСправочник(ОбъектОбработка, ИмяСправочника)
	
	Возврат ОбъектОбработка.МетаданныеСодержатСправочник(ИмяСправочника);
	
КонецФункции
