&НаКлиенте
Перем СтрокаРавно;
&НаСервере
Перем СтрокаРавно;

&НаСервере
Функция ОбъектОбработка()
		
	Возврат РеквизитФормыВЗначение("Объект");

КонецФункции

&НаСервере
Функция ПолучитьВерсиюБСП()
	
	Возврат ОбъектОбработка().ПолучитьВерсиюБСП();
	
КонецФункции

// Для ВызоваОбработки из 1С после добавления её в справочник "Дополнительные отчеты и обработки", если используется Команда.Использование = "ВызовКлиентскогоМетода";
// В
// &НаСервере
// Функция СведенияОВнешнейОбработке() Экспорт
// ...
// Команда.Использование = "ВызовКлиентскогоМетода";
// ...
//
&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// Синтаксис для вида внешней обработки "ЗаполнениеОбъекта".
	
	Объект.ОбъектБД = ОбъектыНазначения[0];
	
	Если ИдентификаторКоманды = "Администратор1С-ОткрытьОбъектВ" Тогда
		Открыть();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбъектБДПриИзменении(Неопределено);
	
КонецПроцедуры

// Определить доступность элементов формы.
// 
&НаКлиенте
Процедура ФормаОпределитьДоступнность(ТипОбъектаБД)
	
	глКВоТСсылки 		= Объект.ТСсылкиСписок.Количество() > 0;
	глКВоТСправочники 	= Объект.ТСправочникСписок.Количество() > 0;
	КВоТДокументы 		= Объект.ТДокументСписок.Количество();
	КВоТМетаданные 		= Объект.ТМетаданныеРегистрыОбъекта.Количество();
	ПроведениеРазрешено	= Объект.ПроведениеРазрешено;
	
	глТипНеопределено	= НЕ ЗначениеЗаполнено(ТипОбъектаБД);
	глТипСправочник		= ТипОбъектаБД = "Справочник";
	глТипДокумент		= ТипОбъектаБД = "Документ";
	глТипПВХ			= ТипОбъектаБД = "ПланВидовХарактеристик";
	глТипБизнесПроцесс	= ТипОбъектаБД = "БизнесПроцесс";
	глТипЗадача			= ТипОбъектаБД = "Задача";
	глТипПланОбмена		= ТипОбъектаБД = "ПланОбмена";
	
	// Процедура используется часто, поэтому для производительности сравниваем со строкой типа: ТипОбъектаБД = "Документ".
	
	// ОСНОВНОЕ МЕНЮ.
	
	Элементы.кнОМЗаписать.Доступность									= НЕ глТипНеопределено;
	Элементы.кнОМСоздатьКопированием.Доступность						= глТипДокумент;
	
	// Подменю Проведение. Доступность									= глТипДокумент;
	Элементы.кнОМПровести.Доступность									= глТипДокумент И ПроведениеРазрешено;
	Элементы.кнОМПровестиОснованиеИДокумент.Доступность					= глТипДокумент И Объект.ЕстьДокументОснование;
	Элементы.кнОМОтменитьПроведение.Доступность							= глТипДокумент И ПроведениеРазрешено;
	
	// Подменю "Удаление". Доступность									= НЕ глТипНеопределено;
	Элементы.кнОМПометитьНаУдаление.Доступность							= НЕ глТипНеопределено;
	Элементы.кнОМУдалить.Доступность									= НЕ глТипНеопределено;
	Элементы.кнОМСнятьПометкуУдаления.Доступность						= НЕ глТипНеопределено;

	Элементы.кнОМИсторияИзмененийОбъекта.Доступность					= НЕ глТипНеопределено;
	Элементы.кнОМСтруктураПодчиненности.Доступность						= глТипДокумент;
	Элементы.кнОМКартаМаршрута.Доступность								= глТипБизнесПроцесс ИЛИ глТипЗадача;
	
	Элементы.кнОМПроверитьРегистрациюВПланахОбмена.Доступность			= НЕ глТипНеопределено И НЕ глТипПланОбмена;
	Элементы.кнОМРегистрацияВПланахОбмена.Доступность					= НЕ глТипНеопределено И НЕ глТипПланОбмена;
	Элементы.кнОМУдалитьРегистрациюВПланахОбмена.Доступность			= НЕ глТипНеопределено И НЕ глТипПланОбмена;
	
	Элементы.кнОМЗаполнитьВариантыОтчетов.Доступность					= Объект.ЭтоГлавныйУзел;
	
	// ОСНОВНЫЕ ПАРАМЕТРЫ ФОРМЫ.
	
	Элементы.ОбменДаннымиЗагрузка.ТолькоПросмотр						= глТипНеопределено;
	Элементы.ПоказатьДвижения.ТолькоПросмотр							= НЕ глТипДокумент;
	Элементы.СкрыватьПустыеТаблицыДвиженийРегистров.ТолькоПросмотр		= НЕ глТипДокумент;
	Элементы.СкрыватьПустыеТабличныеЧасти.ТолькоПросмотр				= глТипНеопределено;
	
	// ВКЛАДКА "Дополнительно".
	
	// Вкладки: "Свойства Объекта", "Ссылки на Объект", "Метаданные Регистров".
	//Элементы.СтраницаСвойстваОбъекта.ТолькоПросмотр						= глТипНеопределено;
	
	//Элементы.СтраницаМетаДанные.ТолькоПросмотр					= глТипНеопределено;
	Элементы.кнТМетаДанныеПолучитьСписокРегистровСвязанныхСОбъектомМД.Доступность	= ЗначениеЗаполнено(ТипОбъектаБД);
	Элементы.кнПолучитьСписокПодписокНаСобытияОбъектаМД.Доступность		= ЗначениеЗаполнено(ТипОбъектаБД);
	Элементы.кнПолучитьСписокФункциональныхОпцийОбъектаМД.Доступность	= ЗначениеЗаполнено(ТипОбъектаБД);
	Элементы.кнПолучитьСписокПлановОбменаОбъектаМД.Доступность			= ЗначениеЗаполнено(ТипОбъектаБД);
	Элементы.кнПолучитьСпискиВводНаОснованииОбъектаМД.Доступность		= ЗначениеЗаполнено(ТипОбъектаБД);
	
	// Вкладка "Ссылки на объект".
	Элементы.СтраницаСсылкиНаОбъект.ТолькоПросмотр						= ТипОбъектаБД = "" ИЛИ глТипПланОбмена;	// Замену Ссылок для ПланаОбмена ИКЛЮЧИТЬ.
	Элементы.ОбъектБДЗаменяющий.ТолькоПросмотр							= глТипНеопределено;
	Элементы.ОдинаковыйТипПриЗамене.ТолькоПросмотр						= глТипНеопределено;
	Элементы.кнТСсылкиНайти.Доступность									= НЕ глТипНеопределено;											// Поиск Ссылок для ПланаОбмена РАЗРЕШИТЬ.
	Элементы.кнТСсылкиОчистить.Доступность								= глКВоТСсылки;													// Очистку Списка Ссылок для ПланаОбмена РАЗРЕШИТЬ.
	Элементы.кнТСсылкиУстановитьФлажки.Доступность						= глКВоТСсылки И ЭтаФорма.ОбъектБДЗаменяющий <> Неопределено;	// Замену Ссылок для ПланаОбмена ИКЛЮЧИТЬ.
	Элементы.кнТСсылкиСнятьФлажки.Доступность							= глКВоТСсылки И ЭтаФорма.ОбъектБДЗаменяющий <> Неопределено;	// Замену Ссылок для ПланаОбмена ИКЛЮЧИТЬ.
	Элементы.кнТСсылкиПроизвестиЗамену.Доступность						= глКВоТСсылки И ЭтаФорма.ОбъектБДЗаменяющий <> Неопределено;	// Замену Ссылок для ПланаОбмена ИКЛЮЧИТЬ.
	
	// Вкладка "Справочник (Дополнительно)".
	//Элементы.СтраницаСправочникДополнительно.ТолькоПросмотр				= НЕ глТипСправочник;
	Элементы.кнТСправочникПолучитьНачальныеПараметры.Доступность		= глТипСправочник;
	Элементы.кнТСправочникОписаниеДействия.Доступность					= глТипСправочник;
	Элементы.кнТСправочникБлокированныеРеквизиты.Доступность			= глТипСправочник И ЗначениеЗаполнено(Объект.БлокируемыеРеквизиты);
	Элементы.кнТСправочникНайти.Доступность								= глТипСправочник И ЗначениеЗаполнено(ЭтаФорма.СправочникДействие) И ЗначениеЗаполнено(ЭтаФорма.СправочникИзменяемыйРеквизит) И ЗначениеЗаполнено(ЭтаФорма.СправочникНовоеЗначениеРеквизита);
	Элементы.кнТСправочникОчистить.Доступность							= глТипСправочник И глКВоТСправочники;
	Элементы.кнТСправочникУстановитьФлажки.Доступность					= глТипСправочник И глКВоТСправочники;
	Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Доступность		= глТипСправочник И глКВоТСправочники;
	Элементы.кнТСправочникСнятьФлажки.Доступность						= глТипСправочник И глКВоТСправочники;
	Элементы.кнТСправочникНайтиВСписке.Доступность						= глТипСправочник И глКВоТСправочники;
	Элементы.кнТСправочникОтменитьПоиск.Доступность						= глТипСправочник И глКВоТСправочники;
	Элементы.кнТСправочникВыполнить.Доступность							= глТипСправочник И глКВоТСправочники И ЗначениеЗаполнено(ЭтаФорма.СправочникДействие) И ЗначениеЗаполнено(ЭтаФорма.СправочникИзменяемыйРеквизит) И ЗначениеЗаполнено(ЭтаФорма.СправочникНовоеЗначениеРеквизита);
	Элементы.СправочникДатаРанее.ТолькоПросмотр							= НЕ ЭтаФорма.СправочникДействие = "НеиспользуемыеЭлементы_ПоискИУдаление";

	// Вкладка "Документ (Дополнительно)". Доступно ВСЕГДА. Ограничение: Перенумерация.
	Элементы.кнТДокументПолучитьНачальныеПараметрыПеренумерации.Доступность	= глТипДокумент;
	
	Элементы.кнТДокументПеренумерацияНайти.Доступность					= глТипДокумент И ЗначениеЗаполнено(ЭтаФорма.ДокументДействие);
	
	Элементы.кнТДокументПеренумероватьДокументы.Доступность				= КВоТДокументы > 0;
	
	Элементы.кнТДокументПровести.Доступность							= ЭтаФорма.ДокументПроведениеТСписокВидов.Количество() > 0;
	
	Элементы.кнДокументДвиженияПолучитьНепроведенныеСДвижениями.Доступность	= ЭтаФорма.ДокументДвиженияТСписокВидов.Количество() > 0;
	Элементы.кнДокументДвиженияОчиститьДвиженияНепроведенныхСДвижениями.Доступность = ЭтаФорма.ДокументДвиженияНайденыНепроведенныеСДвижениями;
	
	Элементы.кнДокументДвиженияПолучитьПроведенныеБезДвижений.Доступность = ЭтаФорма.ДокументДвиженияТСписокВидов.Количество() > 0;
	Элементы.кнДокументДвиженияПровестиПроведенныеБезДвижений.Доступность = ЭтаФорма.ДокументДвиженияНайденыПроведенныеБезДвижений;
	
	// Вкладка "ПланыОбмена (Дополнительно)".
	Элементы.СтраницаПланОбменаДополнительно.ТолькоПросмотр				= НЕ глТипПланОбмена;
	Элементы.кнПланОбменаПолучитьИнформациюОБДиУзлахРИБ.Доступность		= глТипПланОбмена;
	
КонецПроцедуры

&НаКлиенте
Функция ИспользоватьРежимМодальности()

	Возврат (Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" ИЛИ Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "ИспользоватьСПредупреждениями");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБАТЫВАЕМЫЙ ОБЪЕКТ БД.
// 

&НаКлиенте
Процедура ОбъектБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ОбъектБД = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура;
		
		ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Объект.ОбъектБД);
		СтруктураПараметров.Вставить("ТипОбъектаСтрокой", ПолноеСтроковоеИмяТипа);
		
		ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
		ФильтрПоСсылочнымМетаданным.Добавить("Справочники");
		ФильтрПоСсылочнымМетаданным.Добавить("Документы");
		ФильтрПоСсылочнымМетаданным.Добавить("ПланыОбмена");
		ФильтрПоСсылочнымМетаданным.Добавить("ПланыВидовХарактеристик");
		ФильтрПоСсылочнымМетаданным.Добавить("БизнесПроцессы");
		ФильтрПоСсылочнымМетаданным.Добавить("Задачи");
		ФильтрПоСсылочнымМетаданным.Добавить("ПланыСчетов");
		ФильтрПоСсылочнымМетаданным.Добавить("ПланыВидовРасчета");
		СтруктураПараметров.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", ФильтрПоСсылочнымМетаданным);
		
		ФормаВыбораОбъектаМетаДанных = ПолучитьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВыборОбъектаМетаданных,
		СтруктураПараметров,
		Объект.ОбъектБД);
		
		ФормаВыбораОбъектаМетаДанных.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВыбораОбъектаМетаДанных.ЗакрыватьПриВыборе = Истина;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3).
			ВыбранныйОбъектМетаДанных = ФормаВыбораОбъектаМетаДанных.ОткрытьМодально();
			ВызватьВыборОбъектаБД(ВыбранныйОбъектМетаДанных, Элемент);
		Иначе
			// Стандартно в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьВыборОбъектаБД"", ЭтотОбъект, Элемент)");
			Выполнить("ФормаВыбораОбъектаМетаДанных.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
			ФормаВыбораОбъектаМетаДанных.Открыть();
		КонецЕсли;
		
	Иначе	
		
		СтандартнаяОбработка = Ложь;
		
		Элемент.ВыбиратьТип = Ложь;
			
		ПланОбменаОчиститьПараметры();
		
		хПозицияТочки = Найти(Объект.ПолноеСтроковоеИмяТипа, ".");
		хТипМД 	= Лев(Объект.ПолноеСтроковоеИмяТипа, хПозицияТочки-1);
		хОбъект = Сред(Объект.ПолноеСтроковоеИмяТипа, хПозицияТочки+1);
		
		Если хТипМД = "Справочник" И хОбъект = "ВариантыОтчетов" Тогда	// Специфический справочник.
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("РежимВыбора", Истина);
			СтруктураПараметров.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
			
			ФормаВыбораОбъектаБД = ПолучитьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВариантыОтчетов, СтруктураПараметров);
			
			Если ИспользоватьРежимМодальности() Тогда
				// Стандартно в модальном режиме (8.2/8.3).
				ВыбранноеЗначение = ФормаВыбораОбъектаБД.ОткрытьМодально();
				ВызватьОбъектБДПриИзменении(ВыбранноеЗначение, Элемент);
			Иначе
				// Стандартно в немодальном режиме (8.3).
				Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбъектБДПриИзменении"", ЭтотОбъект, Элемент)");
				Выполнить("ФормаВыбораОбъектаБД.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
				ФормаВыбораОбъектаБД.Открыть();
			КонецЕсли;
			
		Иначе

			СтандартнаяОбработка = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьВыборОбъектаБД(ВыбранныйОбъектМетаДанных, Элемент) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйОбъектМетаДанных) Тогда
		
		хПозицияТочки = Найти(ВыбранныйОбъектМетаДанных, ".");
		хТипМД 	= Лев(ВыбранныйОбъектМетаДанных, хПозицияТочки-1);
		хОбъект = Сред(ВыбранныйОбъектМетаДанных, хПозицияТочки+1);
		
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(хТипМД + "Ссылка." + хОбъект);
		Элемент.ВыбиратьТип = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("РежимВыбора", Истина);
		СтруктураПараметров.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		
		Если хТипМД = "Справочник" И хОбъект = "ВариантыОтчетов" Тогда	// Специфический справочник.
			ФормаВыбораОбъектаБД = ПолучитьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВариантыОтчетов, СтруктураПараметров);
		Иначе
			Попытка
				ФормаВыбораОбъектаБД = ПолучитьФорму(хТипМД + "." + хОбъект + ".ФормаВыбора", СтруктураПараметров);
			Исключение
				ПредупреждениеСообщение(, "Невозможно получить ФормуВыбора для " + ВыбранныйОбъектМетаДанных + "
				|
				|Причина: " + ОписаниеОшибки() + "
				|
				|Открытие ФормыСписка (без выбора) ...");
				ФормаВыбораОбъектаБД = ПолучитьФорму(хТипМД + "." + хОбъект + ".ФормаСписка", СтруктураПараметров);
			КонецПопытки;
		КонецЕсли;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3).
			ВыбранноеЗначение = ФормаВыбораОбъектаБД.ОткрытьМодально();
			ВызватьОбъектБДПриИзменении(ВыбранноеЗначение, Элемент);
		Иначе
			// Стандартно в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбъектБДПриИзменении"", ЭтотОбъект, Элемент)");
			Выполнить("ФормаВыбораОбъектаБД.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
			ФормаВыбораОбъектаБД.Открыть();
		КонецЕсли;;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбъектБДПриИзменении(ВыбранноеЗначение, Элемент) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.ОбъектБД = ВыбранноеЗначение;
		ОбъектБДПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Открыт Новый ОбъектБД:
// - Очистка содержимого формы
// - Обновление содержимого формы
//
&НаКлиенте
Процедура ОбъектБДПриИзменении(Элемент)
	Перем ОбъектБД;
	
	Если Объект.ОбъектБД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектБД = Объект.ОбъектБД;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипОбъектаБД) Тогда
		
		ОбъектБДИнициализироватьОсновныеПараметры(ОбъектБД);
		
		ОбъектБДСформироватьЗаголовокЭлементаФормы(Объект.ТипОбъектаБД, Элементы.ОбъектБД, Объект.ПолноеСтроковоеИмяТипа, Объект.Предопределенный);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектБД) Тогда
		
		Если Объект.ПоказыватьСообщения Тогда
			Если НЕ Элемент = "ОбъектБДЗаписать" Тогда
				ОчиститьСообщения();
			КонецЕсли;
			Сообщить(СтрокаРавно);
			Сообщить("МФ: Подождите. Производится формирование основных таблиц данных:");
		КонецЕсли;
		
		ОбъектБДСформироватьДанные(ОбъектБД);
		
		Если Объект.ТипОбъектаБД = "Документ" Тогда
			ПоказатьДвиженияПриИзменении("ОбъектБДПриИзменении");
		Иначе	
			Объект.ПоказатьДвижения = Ложь;
		КонецЕсли;
		
		Если Объект.ПоказыватьСообщения Тогда
			Сообщить("МФ: Формирование основных таблиц данных завершено.");
			Сообщить(СтрокаРавно);
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
	ПланОбменаСообщитьОНеУстановленномГлавномУзле();

КонецПроцедуры

// Установить Заголовок для ОбъектБД или ОбъектБДЗаменяющий.
//
&НаКлиенте
Процедура ОбъектБДСформироватьЗаголовокЭлементаФормы(ТипОбъектаБД, Элемент, ПолноеСтроковоеИмяТипа = "", Предопределенный = Ложь)

	Если ТипОбъектаБД = "Справочник" ИЛИ ТипОбъектаБД = "ПланОбмена" ИЛИ ТипОбъектаБД = "ПланВидовХарактеристик" Тогда
		Элемент.Заголовок = "" + ПолноеСтроковоеИмяТипа;
	Иначе
		Элемент.Заголовок = "" + ТипОбъектаБД;
	КонецЕсли;
	
КонецПроцедуры

// МО: Вкладка "Свойства Объекта" и др.
// - Таблица Реквизитов.
// - Таблицы Табличных частей.
// - Таблицы Регистров Движений Документов.
//
&НаСервере
Процедура ОбъектБДСформироватьДанные(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	мдОбъектаБД	= ОбъектБД.Метаданные();
	
	ОбъектБДСформироватьТРеквизиты(ОбъектОбработка, мдОбъектаБД, ОбъектБД);
	
	Если Объект.ТипОбъектаБД = "ПланСчетов" ИЛИ Объект.ТипОбъектаБД = "ПланВидовРасчета" Тогда	// Имена типов - Производительность.
		Если ОбъектБДЕстьСтандартныеТабличныеЧастиОбъекта(ОбъектОбработка, мдОбъектаБД, ОбъектБД) Тогда
			ОбъектБДСформироватьТЧасти(ОбъектОбработка, мдОбъектаБД, ОбъектБД, "СтандартныеТабличныеЧасти");
		КонецЕсли;
	КонецЕсли;
	
	ОбъектБДСформироватьТЧасти(ОбъектОбработка, мдОбъектаБД, ОбъектБД, "ТабличныеЧасти");
	
	ОбъектБДПоказатьФОпцииРеквизитов(ОбъектБД);
	
КонецПроцедуры

// МО: Вкладка "Свойства Объекта" и др. Сформировать Таблицу Реквизиты выбранного ОбъектаБД.
// - Таблица Реквизитов.
// - Таблицы Табличных частей.
// - Таблицы Регистров Движений Документов.
//
&НаСервере
Процедура ОбъектБДСформироватьТРеквизиты(ОбъектОбработка, мдОбъектаБД, ОбъектБД)
	
	СтруктураВозврат = ОбъектОбработка.ОбъектБДСформироватьТРеквизиты(ОбъектБД);
	
	ЗначениеВРеквизитФормы(СтруктураВозврат.ТСвойстваОбъекта, "Объект.ТСвойстваОбъекта");
	ЗначениеВРеквизитФормы(СтруктураВозврат.ТРеквизитыОбъекта, "Объект.ТРеквизитыОбъекта");
	
	Объект.СтруктураРеквизиты = СтруктураВозврат.СтруктураРеквизиты;
	Объект.СписокРеквизиты = СтруктураВозврат.СписокРеквизиты;
	Объект.БлокируемыеРеквизиты = СтруктураВозврат.БлокируемыеРеквизиты;
	Объект.НеРедактируемыеРеквизиты = СтруктураВозврат.НеРедактируемыеРеквизиты;
	
	Если Объект.ТипОбъектаБД = "Справочник" Тогда
		
		Если мдОбъектаБД.Иерархический Тогда
			Элементы.ДекорИерархияСправочника.Заголовок = "Иерархический";
		Иначе
			Элементы.ДекорИерархияСправочника.Заголовок = "Неиерархический";
		КонецЕсли;
	
	ИначеЕсли Объект.ТипОбъектаБД = "Документ" Тогда
		
		Объект.ПроведениеРазрешено	= ОбъектОбработка.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	
		Если НЕ Объект.ПроведениеРазрешено Тогда		// Для документа, которому запрещено проведение - красный цвет.
			Элементы.ОбъектБД.ЦветТекстаЗаголовка = Новый Цвет(255, 0, 0);
		КонецЕсли;
		
		Объект.ЕстьДокументОснование= ОбъектОбработка.ОбъектБДЕстьРеквизит("ДокументОснование", ОбъектБД);
		
		Объект.ИмяРеквизитаДокументаОснования = "";
		Если Объект.ЕстьДокументОснование Тогда
			 Объект.ИмяРеквизитаДокументаОснования = "ДокументОснование";
		Иначе
				
			// У документа может и небыть Реквизита "ДокументОснование", но может быть другой реквизит типа документ, который и является Документом-Основанием.
			ИмяРеквизитаДокументОснование = ОбъектОбработка.ОбъектБДПолучитьИмяДокументаОснование(ОбъектБД);
			
			Если ЗначениеЗаполнено(ИмяРеквизитаДокументОснование) Тогда
				Объект.ЕстьДокументОснование = Истина;
				Объект.ИмяРеквизитаДокументаОснования = ИмяРеквизитаДокументОснование;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблицы РеквизитыОбъекта завершено.");
	КонецЕсли;
	
	Если Найти(Строка(ОбъектБД), "<Объект не найден> (") = 0 Тогда
		Объект.IDОбъектаБД	= ОбъектБД.УникальныйИдентификатор();
	Иначе
		Объект.IDОбъектаБД	= ОбъектОбработка.GUIDБитогоОбъектаНаСервере(ОбъектБД);
	КонецЕсли;
	ЭтаФорма.IDОбъектаБДСтрока	= Объект.IDОбъектаБД;
	ЭтаФорма.ДатаИВремяСоздания = ОбъектОбработка.GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ОбъектБД);
	ЭтаФорма.СостояниеОбъектаБД	= ОбъектОбработка.ОбъектБДПолучитьСостояниеОбъекта(ОбъектБД);
	
КонецПроцедуры

// Вкладка "Свойства Объекта" и др. Сформировать Основные ТабличныеЧасти выбранного ОбъектаБД.
//
&НаСервере
Процедура ОбъектБДСформироватьТЧасти(ОбъектОбработка, мдОбъектаБД, ОбъектБД, ВидТабличнойЧасти = "ТабличныеЧасти")
	
	ТипОбъектаБД	= Объект.ТипОбъектаБД;
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) 
		ИЛИ (ВидТабличнойЧасти = "ТабличныеЧасти" И мдОбъектаБД[ВидТабличнойЧасти].Количество() = 0) Тогда
		Возврат;
	КонецЕсли;

	МассивУдаляемыхРеквизитовФормы 	= Новый Массив;
	МассивУдаляемыхЭлементовФормы	= Новый Массив;
	
	Первая = Неопределено;
	// Заполнение табличных частей ОбъектаБД.
	// 1. Создание Реквизита Формы типа "ТаблицаЗначений".
	// 2. Создание Реквизита Формы типа "ГруппаФормы" для размещения ТаблицыЗначений.
	// 3. Создание Реквизита Формы типа "ТаблицаФормы" на ГруппеФормы.
	Для Каждого мдТЧ ИЗ мдОбъектаБД[ВидТабличнойЧасти] Цикл
		
		СчитыватьДанные = Ложь;
		
		Если Объект.ТипОбъектаБД = "Справочник" ИЛИ Объект.ТипОбъектаБД = "ПланВидовХарактеристик" Тогда
			Если (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ОбъектБД.ЭтоГруппа)
				ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ ОбъектБД.ЭтоГруппа)
				ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента) Тогда
				СчитыватьДанные = Истина;
			КонецЕсли;
		Иначе
			СчитыватьДанные = Истина;
		КонецЕсли;
		
		Если СчитыватьДанные Тогда
			
			Если Объект.СкрыватьПустыеТабличныеЧасти И ОбъектБД[мдТЧ.Имя].Количество() = 0 Тогда
				хИмя = ФормаПолучитьИмяСтраницыТабличнаяЧасть(мдТЧ.Имя);
				// Формирование Массивов Реквизитов + Элементов, которые впоследствии будут удалены.
				Если ФормаЕстьЭлемент(хИмя) Тогда
					МассивУдаляемыхРеквизитовФормы.Добавить(ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя));
					МассивУдаляемыхЭлементовФормы.Добавить(хИмя);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			хИмя = ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя);
			РеквизитТаблицаТЧ 	= ФормаСоздатьРеквизитТипаТаблицаЗначений(хИмя, ОбъектБД[мдТЧ.Имя].Выгрузить());
			Если ДобавленныеРеквизиты.НайтиПоЗначению(хИмя) = Неопределено Тогда
				ДобавленныеРеквизиты.Добавить(хИмя);
			КонецЕсли;

			хИмя = ФормаПолучитьИмяСтраницыТабличнаяЧасть(мдТЧ.Имя);
			ФормаСтраницаТЧ 	= ФормаСоздатьРеквизитТипаГруппаФормы(хИмя, мдТЧ.Представление(), Элементы.СтраницыТабличныеЧасти);
			Если ДобавленныеЭлементы.НайтиПоЗначению(хИмя) = Неопределено Тогда
				ДобавленныеЭлементы.Добавить(хИмя);
			КонецЕсли;
			
			хИмя = ФормаПолучитьИмяТаблицыТабличнаяЧасть(мдТЧ.Имя);
			ФормаТаблицаТЧ		= ФормаСоздатьРеквизитТипаТаблицаФормы(хИмя, ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя), РеквизитТаблицаТЧ, ФормаСтраницаТЧ);
			
			Если ТипОбъектаБД = ИмяТипаПланыСчетов() И мдТЧ.Имя = "ВидыСубконто" Тогда
				Элементы.СтраницаТЧВидыСубконто.Заголовок = мдТЧ.Представление() + " (МАХ " + мдОбъектаБД.МаксКоличествоСубконто + ")";
			КонецЕсли;
		
			Если Первая = Неопределено Тогда
				Первая = ФормаСтраницаТЧ;
			КонецЕсли;
			
		Иначе
			
			Если Объект.ПоказыватьСообщения Тогда
				Сообщить("МФ: Табличная часть: " + мдТЧ.Имя + " не формируется, т.к. используется для: " + мдТЧ.Использование + " !");
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
	Элементы.СтраницаТабличныеЧасти.Видимость 		= Истина;
	Если Объект.ПоказатьДвижения Тогда
		Элементы.СтраницаРегистрыСведений.Видимость 	= Истина;
		Элементы.СтраницаРегистрыНакоплений.Видимость 	= Истина;
		Элементы.СтраницаРегистрыБухгалтерии.Видимость 	= Истина;
		Элементы.СтраницаРегистрыРасчета.Видимость 		= Истина;
	КонецЕсли;
	
	Если НЕ Первая = Неопределено Тогда
		ЭтаФорма.ТекущийЭлемент = Первая;
	КонецЕсли;
	
	// Удаление Реквизитов и Элементов, согласно ранее сформированным Массивам: МассивУдаляемыхРеквизитовФормы и МассивУдаляемыхЭлементовФормы.
	Если МассивУдаляемыхРеквизитовФормы.Количество() > 0 Тогда
		ФормаУдалитьПустыеТаблицы(МассивУдаляемыхРеквизитовФормы, МассивУдаляемыхЭлементовФормы);
	КонецЕсли;
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблиц ТабличныеЧасти завершено.");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбъектБДПоказатьФОпцииРеквизитов(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ОбъектОбработка.ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, Объект.ТРеквизитыОбъекта, Неопределено, Истина);
	
	Для Каждого ЭлементТЧасть ИЗ Элементы.СтраницыТабличныеЧасти.ПодчиненныеЭлементы Цикл
		ОбъектОбработка.ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, ЭлементТЧасть, СтрЗаменить(ЭлементТЧасть.Имя, "СтраницаТЧ", ""), Истина);
	КонецЦикла;
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование ф.опций реквизитов завершено.");
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Реквизиты Объекта" и др. Создать Реквизит Формы типа ТаблицаЗначений.
//
&НаСервере
Функция ФормаСоздатьРеквизитТипаТаблицаЗначений(ИмяРеквизита, ТаблицаТЧРЕГ)
	
	// Сдвиг Колонок актуально для Регистров.
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("НомерСтроки");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, -Индекс);
	КонецЕсли;
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("Период");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, ТаблицаТЧРЕГ.Колонки.Количество()-Индекс-1);
	КонецЕсли;
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("Регистратор");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, ТаблицаТЧРЕГ.Колонки.Количество()-Индекс-1);
	КонецЕсли;

	Если НЕ ФормаЕстьРеквизит(ИмяРеквизита) Тогда
		
		// Добавление Реквизита в Форму
		НовыеРеквизиты = Новый Массив;
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"), , ИмяРеквизита, Ложь);
		НовыеРеквизиты.Добавить(Реквизит);
	
		ИзменитьРеквизиты(НовыеРеквизиты);
		
	КонецЕсли;
	
	ЭтаФорма.ЗначениеВРеквизитФормы(ТаблицаТЧРЕГ, ИмяРеквизита);
	
	Возврат ТаблицаТЧРЕГ;
	
КонецФункции

// Вкладка "Свойства Объекта" и др. Создать Элемент формы типа Страница
// - Необходимо для последующего размещения Элемента формы типа ТаблицаФормы.
//
&НаСервере
Функция ФормаСоздатьРеквизитТипаГруппаФормы(ИмяРеквизита, Заголовок, Родитель)
	
	Если НЕ ФормаЕстьЭлемент(ИмяРеквизита) Тогда
		
		// Добавление Реквизита в Форму
		СтраницаФормы = Элементы.Добавить(ИмяРеквизита, Тип("ГруппаФормы"), Родитель);
		СтраницаФормы.Вид                      = ВидГруппыФормы.Страница;
		СтраницаФормы.Заголовок                = Заголовок;
		СтраницаФормы.РастягиватьПоВертикали   = Истина;
		СтраницаФормы.РастягиватьПоГоризонтали = Истина;
		
	Иначе	
		
		СтраницаФормы = Элементы[ИмяРеквизита];
		
	КонецЕсли;
	
	Возврат СтраницаФормы;
	
КонецФункции

// Вкладка "Свойства Объекта" и др. Создать Элемент формы ТаблицаФормы на Элементе формы СтраницаФормы.
// - ИмяПоляТаблицыФормы - Имя элемента на Форме типа Таблица.
// - ИмяРеквизитаДанныеФормыКоллекция - Имя реквизита формы, который необходимо создать.
// - ТаблицаЗначений - Создаваемая таблица.
//
&НаСервере
Функция ФормаСоздатьРеквизитТипаТаблицаФормы(ИмяПоляТаблицыФормы, ИмяРеквизитаДанныеФормыКоллекция, ТаблицаЗначений, Родитель)
	
	Если НЕ ФормаЕстьЭлемент(ИмяПоляТаблицыФормы) Тогда
		
		ТаблицаФормы = Элементы.Добавить(ИмяПоляТаблицыФормы, Тип("ТаблицаФормы"), Родитель);
		ТаблицаФормы.ПутьКДанным = ИмяРеквизитаДанныеФормыКоллекция;
		ТаблицаФормы.ЧередованиеЦветовСтрок = Истина;
		ТаблицаФормы.ВысотаШапки = 2;
	
		// Процедура "ФормаТаблицаПередНачаломИзменения" должна быть Экпортируемой.
		ТаблицаФормы.УстановитьДействие("ПередНачаломИзменения", 	"ФормаТаблицаПередНачаломИзменения");
		ТаблицаФормы.УстановитьДействие("ПриАктивизацииПоля", 		"ФормаТаблицаПриАктивизацииПоля");
		
		// Удаляемые реквизиты Формы.
		УдаляемыеРеквизиты = Новый Массив;
		РеквизитыДляУдаления = ПолучитьРеквизиты(ИмяРеквизитаДанныеФормыКоллекция);
		Для Каждого РеквизитУдаления ИЗ РеквизитыДляУдаления Цикл
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаДанныеФормыКоллекция + "." + РеквизитУдаления.Имя);
			// Удаляем элементы формы
			Элементы.Удалить(Элементы[ИмяПоляТаблицыФормы + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// При наличии в ТЧ Колонки с типом "ХранилищеЗначения" на ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты); выходит на ошибку,
		// поэтому: Произвольный тип.
		
		// Добавляемые реквизиты Формы.
		ДобавляемыеРеквизиты = Новый Массив;
		Для Каждого КолонкаТЧРЕГ ИЗ ТаблицаЗначений.Колонки Цикл
			Если КолонкаТЧРЕГ.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда	// Произвольный тип.	// ХранилищеЗначения может быть только единственным типом в данных.
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(КолонкаТЧРЕГ.Имя, Новый ОписаниеТипов, ИмяРеквизитаДанныеФормыКоллекция, КолонкаТЧРЕГ.Заголовок));
			Иначе
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(КолонкаТЧРЕГ.Имя, КолонкаТЧРЕГ.ТипЗначения, ИмяРеквизитаДанныеФормыКоллекция, КолонкаТЧРЕГ.Заголовок));
			КонецЕсли;
		КонецЦикла;
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
		
		// Добавление элементов в Таблицу Формы
		Для Каждого КолонкаТЧРЕГ ИЗ ТаблицаЗначений.Колонки Цикл
			
			Попытка
				ПолеТаблицыФормы = Элементы.Добавить(ТаблицаФормы.Имя + КолонкаТЧРЕГ.Имя, Тип("ПолеФормы"), ТаблицаФормы);
				ПолеТаблицыФормы.Вид 					= ВидПоляФормы.ПолеВвода;
				ПолеТаблицыФормы.Заголовок				= КолонкаТЧРЕГ.Заголовок;
				ПолеТаблицыФормы.РежимРедактирования	= РежимРедактированияКолонки.Вход;
				ПолеТаблицыФормы.ВыделятьОтрицательные	= Истина;
				ПолеТаблицыФормы.ОграничениеТипа		= КолонкаТЧРЕГ.ТипЗначения;
				
				ПолеТаблицыФормы.ПутьКДанным			= ТаблицаФормы.ПутьКДанным + "." + КолонкаТЧРЕГ.Имя;
			Исключение
				// МА! Проблема решена: МенеджерРегистра.СоздатьНаборЗаписей() вместо Запрос по Регистру.
				Сообщить("МФ: Ошибка ПолеТаблицыФормы.ПутьКДанным = " + ТаблицаФормы.ПутьКДанным + "." + КолонкаТЧРЕГ.Имя);
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
	Иначе
		
		ТаблицаФормы = Элементы[ИмяПоляТаблицыФормы];
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаЗначений, ИмяРеквизитаДанныеФормыКоллекция);
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Флажок "Показать движения". Видимость Элементов формы типа СтраницаРегистра.
//
&НаКлиенте
Процедура ПоказатьДвиженияПриИзменении(Элемент)
	
	Если Объект.ПоказатьДвижения Тогда
			
		ФормаВывестиВСостояние(, , "Производится формирование таблиц движений по регистрам ...");
		
		Элементы.СтраницаРегистрыСведений.Видимость 	= Истина;
		Элементы.СтраницаРегистрыНакоплений.Видимость 	= Истина;
		Элементы.СтраницаРегистрыБухгалтерии.Видимость 	= Истина;
		Элементы.СтраницаРегистрыРасчета.Видимость 		= Истина;
		
		ОбъектБДСформироватьТДвижений(Объект.ОбъектБД);
		
	Иначе
		
		Элементы.СтраницаРегистрыСведений.Видимость 	= Ложь;
		Элементы.СтраницаРегистрыНакоплений.Видимость 	= Ложь;
		Элементы.СтраницаРегистрыБухгалтерии.Видимость 	= Ложь;
		Элементы.СтраницаРегистрыРасчета.Видимость 		= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Флажок "Отключатель триггеров записи".
// (Необходимо записать объект без проверок, например, без проверки на уникальность кода и т.п.)
// Предназначено для изменения становки признака загрузки объектов, что приводит к минимуму проверок объекта при записи, 
// поскольку считается, что объект получен через механизмы обмена и все данные корректны.
// 
&НаКлиенте
Процедура ОбменДаннымиЗагрузкаПриИзменении(Элемент)
	
	Если Объект.ОбменДаннымиЗагрузка Тогда
		ПредупреждениеСообщение(, "ОТКЛЮЧИТЬ ТРИГГЕРЫ ЗАПИСИ (<Объект изменяемый>.ОбменДанными.Загрузка = Истина):
		|
		|Изменение значения вляет только на поведение обработки, но не на сеанс работы в 1С.
		|
		|1С: Если значение данного свойства Истина, 
		|то при выполнении записи или удаления данных будет производиться минимум проверок, 
		|так как при этом делается предположение, что производится запись данных, 
		|полученных через механизмы обмена данными, и эти данные корректны.
		|
		|Триггер (Trigger) - это особый вид хранимых процедур, автоматически выполняемых 
		|при исполнении оператора Update, Insert или Delete над данными таблицы.",, "УСТАНОВЛЕН РЕЖИМ:");
	Иначе	
		ПредупреждениеСообщение(, "ВКЛЮЧИТЬ ТРИГГЕРЫ ЗАПИСИ (<Объект изменяемый>.ОбменДанными.Загрузка = Ложь):
		|
		|Изменение значения вляет только на поведение обработки, но не на сеанс работы в 1С.
		|
		|1С: Если значение данного свойства Истина, 
		|то при выполнении записи или удаления данных будет производиться минимум проверок, 
		|так как при этом делается предположение, что производится запись данных, 
		|полученных через механизмы обмена данными, и эти данные корректны.
		|
		|Триггер (Trigger) - это особый вид хранимых процедур, автоматически выполняемых 
		|при исполнении оператора Update, Insert или Delete над данными таблицы.",, "УСТАНОВЛЕН РЕЖИМ:");
	КонецЕсли;

КонецПроцедуры

// Вкладка "Свойства Объекта" и др. Сформировать Таблицы Движений выбранного ОбъектаБД (Документ).
// - Создание Реквизита Формы типа ТаблицаЗначений.
// - Создание Элемента Формы типа Страница.
// - Создание Элемента Формы типа ТаблицаФормы в Элементе формы типа Страница.
//
&НаСервере
Процедура ОбъектБДСформироватьТДвижений(ОбъектБД)
	
	Если НЕ Объект.ПоказатьДвижения 
		ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектБД)) 
		ИЛИ ОбъектБД = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	ОбязательноПоказать = НЕ Объект.СкрыватьПустыеТаблицыДвиженийРегистров И (мдОбъектаБД.Имя = "КорректировкаРегистров" ИЛИ мдОбъектаБД.Имя = "КорректировкаЗаписейРегистров" ИЛИ мдОбъектаБД.Движения.Количество() > 20);
	
	Если Объект.ПоказыватьСообщения ИЛИ ОбязательноПоказать Тогда
		Если ОбязательноПоказать Тогда
			Сообщить("МФ: Общее количество движений: " + мдОбъектаБД.Движения.Количество() + ".");
			Сообщить("МФ: Для того, чтобы не выводить на экрант таблицы Регистров, в которых документ не осуществил движения 
			|воспользуйтесь настройкой параметра ""Скрывать пустые таблицы движений регистров"".");
		КонецЕсли;
		Если Объект.СкрыватьПустыеТаблицыДвиженийРегистров Тогда
			Сообщить("МФ: " + "Некоторые таблицы (пустые) ""Движения по Регистрам"" не отображаются." , СтатусСообщения.Важное);
		КонецЕсли;
		Сообщить("МФ: " + "Формирование таблиц ""Движения по Регистрам"". " + ТекущаяДата() + " Подождите ... " , СтатусСообщения.Важное);
	КонецЕсли;
	
	// Органичение выводимых на экран Страниц+Таблиц Движений Регистров:
	// 
	// Последовательность действий:
	//
	// 1. СкрыватьПустыеТаблицыДвиженийРегистров = Ложь;
	// 2. ПоказатьДвижения = Истина; 	- Показали ВСЕ движения, в т.ч. и пустые таблицы.
	// 3. СкрыватьПустыеТаблицыДвиженийРегистров = Истина;
	// 4. ПоказатьДвижения = Ложь;		- Скрыли Страницы Движений.
	// 5. ПоказатьДвижения = Истина;	- Показали ТОЛЬКО непустые.
	
	МассивУдаляемыхРеквизитовФормы 	= Новый Массив;
	МассивУдаляемыхЭлементовФормы	= Новый Массив;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	Для Каждого МетаданныеРегистра ИЗ мдОбъектаБД.Движения Цикл
		Если Метаданные.РегистрыСведений.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрСведений";
			МенеджерРегистра	= РегистрыСведений[МетаданныеРегистра.Имя];
			ЭлементРодитель		= Элементы.СтраницыРС;
		ИначеЕсли Метаданные.РегистрыНакопления.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрНакопления";
			МенеджерРегистра	= РегистрыНакопления[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= Элементы.СтраницыРН;
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрБухгалтерии";
			МенеджерРегистра	= РегистрыБухгалтерии[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= Элементы.СтраницыРБ;
		ИначеЕсли Метаданные.РегистрыРасчета.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрРасчета";
			МенеджерРегистра	= РегистрыРасчета[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= Элементы.СтраницыРР;
		КонецЕсли;
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();	// Быстрее Запроса ~ 4 раза (замер производительности) + Исправляет ошибку в ФормаСоздатьРеквизитТипаТаблицаФормы().
		НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБД);
		
		НаборЗаписей.Прочитать();
		
		ТаблицаРегистра = НаборЗаписей.Выгрузить();
		
		// Удалим "лишние" - "неполезные" колонки.
		ТаблицаРегистра.Колонки.Удалить("Регистратор");
		Если ТаблицаРегистра.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			ТаблицаРегистра.Колонки.Удалить("МоментВремени");
		КонецЕсли;
		
		Если Объект.СкрыватьПустыеТаблицыДвиженийРегистров И ТаблицаРегистра.Количество() = 0 Тогда
			хИмя = ФормаПолучитьИмяСтраницыРегистр(МетаданныеРегистра.Имя);
			// Формирование Массивов Реквизитов + Элементов, которые впоследствии будут удалены.
			Если ФормаЕстьЭлемент(хИмя) Тогда
				МассивУдаляемыхРеквизитовФормы.Добавить(ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя));
				МассивУдаляемыхЭлементовФормы.Добавить(хИмя);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Заполнение Таблиц Реквизитов - Движения ОбъектаБД.
		// 1. Создание Реквизита Формы типа "ТаблицаЗначений".
		// 2. Создание Реквизита Формы типа "ГруппаФормы" для размещения ТаблицыЗначений.
		// 3. Создание Реквизита Формы типа "ТаблицаФормы" на ГруппеФормы.
		хИмя = ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя);
		РеквизитРегистр = ФормаСоздатьРеквизитТипаТаблицаЗначений(хИмя, ТаблицаРегистра);
		Если ДобавленныеРеквизиты.НайтиПоЗначению(хИмя) = Неопределено Тогда
			ДобавленныеРеквизиты.Добавить(хИмя);
		КонецЕсли;
		
		хИмя = ФормаПолучитьИмяСтраницыРегистр(МетаданныеРегистра.Имя);
		ГруппаФормы = ФормаСоздатьРеквизитТипаГруппаФормы(хИмя, МетаданныеРегистра.Представление(), ЭлементРодитель);
		Если ДобавленныеЭлементы.НайтиПоЗначению(хИмя) = Неопределено Тогда
			ДобавленныеЭлементы.Добавить(хИмя);
		КонецЕсли;
		
		хИмя = ФормаПолучитьИмяТаблицыРегистр(МетаданныеРегистра.Имя);
		ТаблицаФормы = ФормаСоздатьРеквизитТипаТаблицаФормы(хИмя, ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя), РеквизитРегистр, ГруппаФормы);

		ТаблицаФормы.ИзменятьПорядокСтрок	= Ложь;
		ТаблицаФормы.ИзменятьСоставСтрок	= Ложь;
		ТаблицаФормы.ТолькоПросмотр			= Истина;
		ТаблицаФормы.Доступность			= Истина;
		
	КонецЦикла;
	
	// Удаление Реквизитов и Элементов, согласно ранее сформированным Массивам: МассивУдаляемыхРеквизитовФормы и МассивУдаляемыхЭлементовФормы.
	Если МассивУдаляемыхРеквизитовФормы.Количество() > 0 Тогда
		ФормаУдалитьПустыеТаблицы(МассивУдаляемыхРеквизитовФормы, МассивУдаляемыхЭлементовФормы);
	КонецЕсли;
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблиц Движения по Регистрам завершено.");
	КонецЕсли;
		
КонецПроцедуры

Процедура ФормаУдалитьПустыеТаблицы(МассивУдаляемыхРеквизитовФормы, МассивУдаляемыхЭлементовФормы)
	Перем Элемент, Удаляемый;
	
	// Удаление Реквизитов и Элементов, согласно ранее сформированным Массивам: МассивУдаляемыхРеквизитовФормы и МассивУдаляемыхЭлементовФормы.
	Если МассивУдаляемыхРеквизитовФормы.Количество() > 0 Тогда
		ИзменитьРеквизиты(, МассивУдаляемыхРеквизитовФормы);
		Для Каждого Элемент ИЗ МассивУдаляемыхРеквизитовФормы Цикл
			Удаляемый = ДобавленныеРеквизиты.НайтиПоЗначению(Элемент);
			Если НЕ Удаляемый = Неопределено Тогда
				ДобавленныеРеквизиты.Удалить(Удаляемый);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент ИЗ МассивУдаляемыхЭлементовФормы Цикл
			Удаляемый = ДобавленныеЭлементы.НайтиПоЗначению(Элемент);
			Если НЕ Удаляемый = Неопределено Тогда
				ФормаУдалитьЭлементНаСервере(Элемент);
				ДобавленныеЭлементы.Удалить(Удаляемый);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Открыть ОбъектБД. Нестандартная обработка открятия.
//
&НаКлиенте
Процедура ОбъектБДОткрытие(Элемент, СтандартнаяОбработка)
	Перем РежимОткрытияФормы;
	
	Если Объект.ОбъектБД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	РежимОткрытияФормы = ОткрытьФормуОбъектаМодальноИлиНемодальноВРежимеБлокировкиВладельца(Объект.ОбъектБД, СтандартнаяОбработка);
	Если РежимОткрытияФормы = "Модально" Тогда
		
		// Флажок Форма....Модифицированность не всегда адекватен производимым действиям - поэтому:
		ОбъектБДПриИзменении("ОбъектБДОткрытие");
		ЭтаФорма.ОтобразитьИзменениеДанных(Объект.ОбъектБД, ВидИзмененияДанных.Изменение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуОбъектаМодальноИлиНемодальноВРежимеБлокировкиВладельца(Знач Ключ, СтандартнаяОбработка)
	Перем РежимОткрытияФормы;
	
	Попытка
		
		СтандартнаяОбработка = Ложь;
		
		ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Ключ);
		
		СтруктураПараметров = Новый Структура("Ключ", Ключ);
		
		ФормаОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
		ФормаОбъектаБД.ОткрытьМодально();
		
		РежимОткрытияФормы = "Модально";
		
	Исключение
		
		Попытка
			
			СтандартнаяОбработка = Ложь;
			
			ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Ключ);
			
			СтруктураПараметров = Новый Структура("Ключ", Ключ);
			
			ФормаОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
			ФормаОбъектаБД.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаОбъектаБД.Открыть();
			
			Если Ключ = Объект.ОбъектБД Тогда
				Сообщить("После внесения изменений в стандартной ФормеОбъекта необходимо выполнить ""Обновить"" в форме обработки для отображения внесенных изменений.");
			КонецЕсли;
			
			РежимОткрытияФормы = "БлокировкаВладельца";
			
		Исключение
			
			СтандартнаяОбработка = Истина;
			
			Если Ключ = Объект.ОбъектБД Тогда
				Сообщить("После внесения изменений в стандартной ФормеОбъекта необходимо выполнить ""Обновить"" в форме обработки для отображения внесенных изменений.");
			КонецЕсли;
			
			РежимОткрытияФормы = "Стандартно";
			
		КонецПопытки;
		
	КонецПопытки;
	
	Возврат РежимОткрытияФормы;
	
КонецФункции

// Кнопка "Очистить". Очистка формы.
//
&НаКлиенте
Процедура ОбъектБДОчистка(Элемент)
	
	ОчиститьСообщения();
	
	Объект.ОбъектБД 						= Неопределено;
	Элементы.ОбъектБД.ОграничениеТипа		= Новый ОписаниеТипов("Неопределено");
	Объект.ТипОбъектаБД						= Неопределено;
	Объект.ИмяОбъектаБД						= "";
	Объект.ПолноеСтроковоеИмяТипа 			= "";
	
	Объект.ПроведениеРазрешено				= Ложь;
	Объект.ИмяРеквизитаДокументаОснования 	= "";
	Объект.ЕстьДокументОснование			= Ложь;
	
	Элементы.ОбъектБД.Заголовок				= "ОбъектБД";
	Элементы.ОбъектБД.ЦветТекстаЗаголовка	= Новый Цвет(65, 48, 3);	// Цвет текста формы.

	Объект.ПоказатьДвижения 				= Ложь;
	
	Объект.ВыполнятьВТранзакции				= Истина;
	
	ФормаОчистить();	// После Объекта.
	
	// Вкладка "Дополнительно" - "Ссылки на Объект".
	ТСсылкиОчиститьПараметры();

	// Вкладка "Дополнительно" - "Справочник (Дополнительно)".
	ТСправочникОчиститьПараметры();
	
	// Вкладка "Дополнительно" - "Документ (Дополнительно)".
	ТДокументПеренумерацияОчиститьПараметры();
	
	// Вкладка "Дополнительно" - "Документ (Статистика)".
	ДокументСтатистикаОчиститьПараметры();
	
	// Вкладка "Дополнительно" - "Документ (Движения)".
	ДокументДвиженияОчиститьПараметры();
	
	// Вкладка "Дополнительно" - "Документ (Удаление)".
	ДокументУдалениеОчиститьПараметры();
	
	// План Обмена. Реанимация подчиненного узла. Очистка регистрации измененний.
	ПланОбменаОчиститьПараметры();
	
	// Восстановление "Битых" ссылок.
	GUIDОчиститьПараметры();
	
	// Строка информации.
	ЭтаФорма.СостояниеОбъектаБД	= "";
	Объект.IDОбъектаБД			= Неопределено;
	ЭтаФорма.IDОбъектаБДСтрока	= "";
	ЭтаФорма.ДатаИВремяСоздания = Неопределено;
	
	ФормаОпределитьДоступнность(Неопределено);

КонецПроцедуры

// Кнопка "Очистить". Удаление Реквизитов, Элементов, Очистка таблиц.
//
&НаКлиенте
Процедура ФормаОчистить()
	
	Элементы.СтраницаТабличныеЧасти.Видимость 		= Ложь;
	Элементы.СтраницаРегистрыСведений.Видимость 	= Ложь;
	Элементы.СтраницаРегистрыНакоплений.Видимость 	= Ложь;
	Элементы.СтраницаРегистрыБухгалтерии.Видимость 	= Ложь;
	Элементы.СтраницаРегистрыРасчета.Видимость 		= Ложь;
	
	// ===========================================================
	// Удаление созданных программно Элементов и Реквизитов Формы.
	Если ДобавленныеЭлементы.Количество() > 0 Тогда
		ФормаУдалитьСозданныеПрограммноЭлементыФормыИРеквизитыНаСервере();
	КонецЕсли;
	// ===========================================================
	
	// Очистка таблицы Свойства Объекта.
	Объект.ТСвойстваОбъекта.Очистить();
	// Очистка таблицы Реквизитов Объекта.
	Объект.ТРеквизитыОбъекта.Очистить();
	
	// Прочие Страницы.
	Объект.ТМетаданныеПодпискиНаСобытия.Очистить();
	Объект.ТМетаданныеФункциональныеОпции.Очистить();
	Объект.ТМетаданныеПланыОбмена.Очистить();
	Элементы.ДекорКоличествоРегистровСвязанныхСОбъектом.Заголовок = "Количество уникальных регистров: ";
	Объект.ТМетаданныеРегистрыОбъекта.Очистить();
	Объект.ТМетаданныеВводитсяНаОсновании.Очистить();
	Объект.ТМетаданныеЯвляетсяОснованиемДля.Очистить();
	
	Элементы.ДекорВсегоЗаменяемыхСсылок.Заголовок = "Всего: ";
	Объект.ТСсылкиСписок.Очистить();
	
	Элементы.ДекорИерархияСправочника.Заголовок = "";
	Объект.ТСправочникСписок.Очистить();
	
	Объект.ТДокументСписок.Очистить();
	
	ЭтаФорма.ДокументПроведениеТСписокВидов.Очистить();
	
	ЭтаФорма.ДокументТСтатистика.Очистить();
	
	ЭтаФорма.ДокументДвиженияТСписокВидов.Очистить();
	ЭтаФорма.ДокументТДвижения.Очистить();
	
КонецПроцедуры

// Удалить Элементы И Реквизиты Формы.
//
&НаСервере
Процедура ФормаУдалитьСозданныеПрограммноЭлементыФормыИРеквизитыНаСервере()
	
	// ===========================================================
	// Удаление созданных программно Элементов Формы.
	ФормаУдалитьЭлементЫНаСервере(ДобавленныеЭлементы);
	
	ДобавленныеЭлементы.Очистить();
	// ===========================================================
	
	// ===========================================================
	// Удаление созданных программно Реквизитов Формы.
	ФормаУдалитьМассивРеквизитовНаСервере(ДобавленныеРеквизиты);
	
	ДобавленныеРеквизиты.Очистить();
	// ===========================================================
	
КонецПроцедуры

// Удалить Элементы Формы.
//
&НаСервере
Процедура ФормаУдалитьЭлементЫНаСервере(УдаляемыеЭлементы)
	
	Для Каждого Элемент ИЗ УдаляемыеЭлементы Цикл
		ФормаУдалитьЭлементНаСервере(Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Удалить Элемент Формы.
//
&НаСервере
Процедура ФормаУдалитьЭлементНаСервере(Имя)
	
	ЭлементФормы = Элементы.Найти(Имя);
	Если ЭлементФормы <> Неопределено Тогда
		Элементы.Удалить(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

// Удалить Реквизит Формы.
//
&НаСервере
Процедура ФормаУдалитьМассивРеквизитовНаСервере(МассивРеквизитов)
	
	Если МассивРеквизитов.Количество() > 0 Тогда
		
		УдаляемыеРеквизиты = Новый Массив;
		Для Каждого Реквизит Из МассивРеквизитов Цикл
			УдаляемыеРеквизиты.Добавить(Реквизит.Значение);
		КонецЦикла;
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ТАБЛИЦА СВОЙСТВ ОБЪЕКТА.
//

&НаКлиенте
Процедура ФормаТСвойстваОбъектаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	хЗаголовок = Элемент.Родитель.ТекущиеДанные.Свойство;
	Если ТипЗнч(Элемент.Родитель.ТекущиеДанные.Значение) = Тип("Строка") Тогда
		МногоСтрочныйТекст = СтрЗаменить(Элемент.ТекстРедактирования, ",", Символы.ПС);
	Иначе
		МногоСтрочныйТекст = СтрЗаменить(Элемент.ТекстРедактирования, ";", Символы.ПС);
	КонецЕсли;
	
	ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, хЗаголовок);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "МЕТАДАННЫЕ".
// 

// В целях оптимизации - непосредственно на Вкладке "Метаданные".
//
&НаКлиенте
Процедура кнПолучитьСписокРегистровСвязанныхСОбъектомМД(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Не выбран основной объект.");
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится формирование списка регистров,
	|в которых может присутствовать объект.");
	
	кнПолучитьСписокРегистровСвязанныхСОбъектомМДНаСервере(Объект.ОбъектБД);	// ~ 1 сек.
		
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// МО: Вкладка "Метаданные" - "Регистры".
// - Имя Регистра.
// - Измерение/Ресурс/Реквизит Регистра
// - Признак Ведущщее (только для Регистра Сведений).
//
&НаСервере
Процедура кнПолучитьСписокРегистровСвязанныхСОбъектомМДНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	хРезультат	= ОбъектОбработка.ПолучитьСписокРегистровСвязанныхСОбъектомМД(ОбъектБД);
	тзРегистры	= хРезультат.Таблица;
	хЗаголовок	= хРезультат.Заголовок;
	
	ЗначениеВРеквизитФормы(тзРегистры, "Объект.ТМетаданныеРегистрыОбъекта");
	
	Элементы.ДекорКоличествоРегистровСвязанныхСОбъектом.Заголовок = хЗаголовок;
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблицы Регистров завершено.");
	КонецЕсли;
	
КонецПроцедуры

// В целях оптимизации - непосредственно на Вкладке "Метаданные".
//
&НаКлиенте
Процедура кнПолучитьСписокПодписокНаСобытияОбъектаМД(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Не выбран основной объект.");
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится формирование списка подписок на события
	|объекта метаданных.");
	
	кнПолучитьСписокПодписокНаСобытияОбъектаМДНаСервере(Объект.ОбъектБД);	// ~ 1 сек.
		
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// МО: Вкладка "Метаданные" - "Подписки".
// - Имя Подписки.
// - Обработчик.
// - Событие.
//
&НаСервере
Процедура кнПолучитьСписокПодписокНаСобытияОбъектаМДНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	хРезультат		= ОбъектОбработка.ПолучитьСписокПодписокНаСобытияОбъектаМД(ОбъектБД);
	тзПодписки		= хРезультат.Таблица;
	хЗаголовок		= хРезультат.Заголовок;
	
	ЗначениеВРеквизитФормы(тзПодписки, "Объект.ТМетаданныеПодпискиНаСобытия");
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблицы Подписок на события завершено.");
	КонецЕсли;
	
КонецПроцедуры

// В целях оптимизации - непосредственно на Вкладке "Метаданные".
//
&НаКлиенте
Процедура кнПолучитьСписокФункциональныхОпцийОбъектаМД(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Не выбран основной объект.");
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится формирование списка функциональных опций
	|объекта метаданных.");
	
	кнПолучитьСписокФункциональныхОпцийОбъектаМДНаСервере(Объект.ОбъектБД);	// ~ 1 сек.
		
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// МО: Вкладка "Метаданные" - "Подписки".
// - Имя Подписки.
// - Обработчик.
// - Событие.
//
&НаСервере
Процедура кнПолучитьСписокФункциональныхОпцийОбъектаМДНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	хРезультат		= ОбъектОбработка.ПолучитьСписокФункциональныхОпцийОбъектаМД(ОбъектБД);
	тзФОпции		= хРезультат.Таблица;
	
	ЗначениеВРеквизитФормы(тзФОпции, "Объект.ТМетаданныеФункциональныеОпции");
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблицы Функциональные опции завершено.");
	КонецЕсли;
	
КонецПроцедуры

// В целях оптимизации - непосредственно на Вкладке "Метаданные".
//
&НаКлиенте
Процедура кнПолучитьСписокПлановОбменаОбъектаМД(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Не выбран основной объект.");
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится формирование списка планов обмена
	|объекта метаданных.");
	
	кнПолучитьСписокПлановОбменаОбъектаМДНаСервере(Объект.ОбъектБД);	// ~ 1 сек.
		
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// МО: Вкладка "Метаданные" - "Планы обмена".
// - Имя Подписки.
// - Обработчик.
// - Событие.
//
&НаСервере
Процедура кнПолучитьСписокПлановОбменаОбъектаМДНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	хРезультат		= ОбъектОбработка.ПолучитьСписокПлановОбменаОбъектаМД(ОбъектБД);
	тзПОбмена		= хРезультат.Таблица;
	хЗаголовок		= хРезультат.Заголовок;
	
	ЗначениеВРеквизитФормы(тзПОбмена, "Объект.ТМетаданныеПланыОбмена");
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблицы Ппланы обмена завершено.");
	КонецЕсли;
	
КонецПроцедуры

// В целях оптимизации - непосредственно на Вкладке "Метаданные".
//
&НаКлиенте
Процедура кнПолучитьСпискиВводНаОснованииОбъектаМД(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Не выбран основной объект.");
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится формирование списков ""ввод на основании""
	|объекта метаданных.");
	
	кнПолучитьСпискиВводНаОснованииОбъектаМДНаСервере(Объект.ОбъектБД);	// ~ 1 сек.
		
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// МО: Вкладка "Метаданные" - "Ввод на основании".
// - Объект.
//
&НаСервере
Процедура кнПолучитьСпискиВводНаОснованииОбъектаМДНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	хРезультат		= ОбъектОбработка.ПолучитьСписокВводНаОснованииОъектаМД(ОбъектБД);
	Таблица_1		= хРезультат.Таблица_1;
	Таблица_2		= хРезультат.Таблица_2;
	
	ЗначениеВРеквизитФормы(Таблица_1, "Объект.ТМетаданныеВводитсяНаОсновании");
	ЗначениеВРеквизитФормы(Таблица_2, "Объект.ТМетаданныеЯвляетсяОснованиемДля");
	
	Если Объект.ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование таблиц Ввод на основании завершено.");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ ОБЪЕКТА.
//

////////////////////////////////////////////////////////////////////////////////
// РЕДАКТИРОВАНИЕ РЕКВИЗИТА ОБЪЕКТА ИЛИ РЕКВИЗИТА ТАБЛИЧНОЙ ЧАСТИ.
// 

// Вкладка "Реквизиты Объекта". Событие Таблицы "ТабличнаяЧасть"... ПриАктивизацииПоля(Колонки).
// Проверить возможность редактирования значения Реквизита.
// - Если Значение имеет тип "ХранилищеЗначения" - отказаться от редактирования.
// - Если Значение имеет тип "Булево" и Имя Реквизита = "ЭтоГруппа" для Справочника - отказаться от редактирования.
// - Если Значение имеет тип Имя Реквизита = "НомерОтправленного" или "НомерПринятого" для ПланаОбмена - отказаться от редактирования.
//
&НаКлиенте
Процедура ТРеквизитыПриАктивизацииПоля(Элемент)

	Если (Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущийЭлемент = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.Имя = "ТРеквизиты" Тогда
		ИзменяемоеЗначение = Элемент.ТекущиеДанные.Значение;
		ТипИзменяемогоЗначения = ТипЗнч(ИзменяемоеЗначение);
		ОписаниеТипаИзменяемогоЗначения = Элемент.ТекущиеДанные.ОписаниеТипов;
		Если НЕ ОписаниеТипаИзменяемогоЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
			Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
				ДлинаСтроки = Элемент.ТекущиеДанные.ОписаниеТипов.КвалификаторыСтроки.Длина;
			КонецЕсли;
		Иначе
			ТипИзменяемогоЗначения = Тип("ХранилищеЗначения");
		КонецЕсли;
	Иначе	
		ИмяРеквизитаИзменяемогоЗначения = СтрЗаменить(Элемент.ТекущийЭлемент.Имя,Элемент.Имя,"");
		ИзменяемоеЗначение = Элемент.ТекущиеДанные[ИмяРеквизитаИзменяемогоЗначения];
		ТипИзменяемогоЗначения = ТипЗнч(ИзменяемоеЗначение);
		ОписаниеТипаИзменяемогоЗначения = Элемент.ТекущийЭлемент.ОграничениеТипа;
		Если НЕ ОписаниеТипаИзменяемогоЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
			Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
				ДлинаСтроки = ОписаниеТипаИзменяемогоЗначения.КвалификаторыСтроки.Длина;
			КонецЕсли;
		Иначе
			ТипИзменяемогоЗначения = Тип("ХранилищеЗначения");
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТипИзменяемогоЗначения = Тип("ХранилищеЗначения") Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
		
		Если НЕ Элемент.Имя = "ТРеквизиты" Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
			ТРеквизитыПередНачаломИзменения(Элемент, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Реквизиты Объекта". Событие Таблицы "ТабличнаяЧасть"... ПередНачаломРедактирования.
// Проверить возможность редактирования значения Реквизита.
// - Если Значение имеет тип "ХранилищеЗначения" - отказаться от редактирования.
// - Если Значение имеет тип "Булево" и Имя Реквизита = "ЭтоГруппа" для Справочника - отказаться от редактирования.
// - Если Значение имеет тип Имя Реквизита = "НомерОтправленного" или "НомерПринятого" для ПланаОбмена - отказаться от редактирования.
//
&НаКлиенте
Процедура ТРеквизитыПередНачаломИзменения(Элемент, Отказ) Экспорт
	
	Если Элемент.Имя = "ТРеквизиты" Тогда
		ИмяТаблицы	= "Таблица ""Реквизиты""";
		ИмяРеквизитаИзменяемогоЗначения = Элемент.ТекущиеДанные.Имя;
		ПредставлениеРеквизитаИзменяемогоЗначения = Элемент.ТекущиеДанные.Представление;
		ИзменяемоеЗначение = Элемент.ТекущиеДанные.Значение;
		ТипИзменяемогоЗначения = ТипЗнч(ИзменяемоеЗначение);
		ОписаниеТипаИзменяемогоЗначения = Элемент.ТекущиеДанные.ОписаниеТипов;
		ПроверятьРеквизитСНеопределеннымТипом = Истина;
		ТекущаяКолонка = Элемент.ТекущийЭлемент.Имя;
		Если НЕ ОписаниеТипаИзменяемогоЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
			Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
				ДлинаСтроки = Элемент.ТекущиеДанные.ОписаниеТипов.КвалификаторыСтроки.Длина;
			КонецЕсли;
		Иначе
			ТипИзменяемогоЗначения = Тип("ХранилищеЗначения");
		КонецЕсли;
	Иначе	
		ИмяТаблицы	= "Таблица ТЧ: """ + СтрЗаменить(Элемент.Имя, ФормаПолучитьИмяТаблицыТабличнаяЧасть(""),"") + "";
		ИмяРеквизитаИзменяемогоЗначения = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "");
		ПредставлениеРеквизитаИзменяемогоЗначения = Элемент.ТекущийЭлемент.Заголовок;
		ИзменяемоеЗначение = Элемент.ТекущиеДанные[ИмяРеквизитаИзменяемогоЗначения];
		ТипИзменяемогоЗначения = ТипЗнч(ИзменяемоеЗначение);
		ОписаниеТипаИзменяемогоЗначения = Элемент.ТекущийЭлемент.ОграничениеТипа;
		ПроверятьРеквизитСНеопределеннымТипом = Ложь;
		ТекущаяКолонка = Элемент.ТекущийЭлемент.Имя;
		Если НЕ ОписаниеТипаИзменяемогоЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
			Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
				ДлинаСтроки = ОписаниеТипаИзменяемогоЗначения.КвалификаторыСтроки.Длина;
			КонецЕсли;
		Иначе
			ТипИзменяемогоЗначения = Тип("ХранилищеЗначения");
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗначенияРеквизитаТаблицы(Объект.ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ИзменяемоеЗначение, ПроверятьРеквизитСНеопределеннымТипом);
	
	Если (РезультатПроверки.Отказ) Тогда
		ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если (Элемент.Имя = "ТРеквизиты" И ТекущаяКолонка = "ТРеквизитыЗначение" И Элемент.ТекущиеДанные.Блокированный) Тогда
		ПредупреждениеСообщение(, "Изменение блокированного реквизита объекта.
		|
		|Согласно проектной логике Конфигурации """ + Объект.ПараметрыСеансаОбработки.КраткаяИнформация + """:
		|Реквизит не рекомендуется/нельзя изменять, если Объект участвует в документах.
		|
		|""Блокированные"" реквизиты определяются индивидуально для вида Объекта.", 20);
	КонецЕсли;
	
	Если НЕ (Элемент.Имя = "ТРеквизиты" И ТекущаяКолонка = "ТРеквизитыПроверяемый") И ТипИзменяемогоЗначения = Тип("Строка") Тогда
		РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, ПредставлениеРеквизитаИзменяемогоЗначения, ДлинаСтроки, Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// МО: Проверить возможность редактирования.
//
&НаСервере
Функция ОбъектБДПроверитьВозможностьРедактированияЗначенияРеквизитаТаблицы(ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ИзменяемоеЗначение, ПроверятьРеквизитСНеопределеннымТипом)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	РезультатПроверки = ОбъектОбработка.ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ИзменяемоеЗначение, ПроверятьРеквизитСНеопределеннымТипом);
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОСМОТР/РЕДАКТИРОВАНИЕ МНОГОСТРОЧНОГО ТЕКСТА.
// 

&НаКлиенте
Процедура ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, Заголовок)
	Перем ПараметрыВводаСтроки;
	
	ПараметрыВводаСтроки = Новый Структура;
	ПараметрыВводаСтроки.Вставить("Заголовок"			, Заголовок);
	ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
	ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Неопределено);
	ПараметрыВводаСтроки.Вставить("ИмяРеквизита"		, Неопределено);
	ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, МногоСтрочныйТекст);
	ПараметрыВводаСтроки.Вставить("Многострочность"		, Истина);
	
	РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, Заголовок = "", ДлинаСтроки = 1, Отказ = Ложь)
	Перем ИмяФормыМногоСтрочногоТекста, ПараметрыМСТ, ПараметрыВводаСтроки, ОписаниеОповещенияОЗакрытии;
	
	Если ДлинаСтроки = 0 ИЛИ ДлинаСтроки >= 50 Тогда
			
		ПараметрыВводаСтроки = Новый Структура;
		ПараметрыВводаСтроки.Вставить("Заголовок"			, Заголовок);
		ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
		ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Элемент.ТекущиеДанные);
		Если Элемент.Имя = "ТРеквизиты" Тогда
			ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, "Значение");
		Иначе	
			ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, ИмяРеквизитаИзменяемогоЗначения);
		КонецЕсли;
		ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, ИзменяемоеЗначение);
		
		Если ((Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "АЛГОРИТМ") > 0) 
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "АДРЕС") > 0)
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "ЗАПРОС") > 0)
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "КОММЕНТАРИЙ") > 0)) Тогда
			
			ПараметрыВводаСтроки.Вставить("Многострочность"	, Истина);
			
			// Управляемая Форма (Форма обработки).
			
			ИмяФормыМногоСтрочногоТекста = Объект.ПараметрыСеансаОбработки.ИмяФормыМногоСтрочногоТекста;
				
			ПараметрыМСТ = Новый Структура("МногоСтрочныйТекст", ИзменяемоеЗначение);
			
			ФормаМногоСтрочногоТекста = ПолучитьФорму(ИмяФормыМногоСтрочногоТекста, ПараметрыМСТ, ЭтаФорма);
			ФормаМногоСтрочногоТекста.Заголовок							= Заголовок;
			ФормаМногоСтрочногоТекста.ЗакрыватьПриЗакрытииВладельца 	= Истина;
			
			ФормаМногоСтрочногоТекста.МногоСтрочныйТекст				= ИзменяемоеЗначение;
			
			Если ИспользоватьРежимМодальности() Тогда
				РезультатРедактирования = ФормаМногоСтрочногоТекста.ОткрытьМодально();
				РедактироватьМногострочныйТекстЗавершение(РезультатРедактирования, ПараметрыВводаСтроки);
				Отказ = Истина;
				Возврат;
			Иначе
				Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""РедактироватьМногострочныйТекстЗавершение"", ЭтотОбъект, ПараметрыВводаСтроки)");
				Выполнить("ФормаМногоСтрочногоТекста.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
				ФормаМногоСтрочногоТекста.Открыть();
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ПараметрыВводаСтроки.Вставить("Многострочность"	, Ложь);
			
		КонецЕсли;
		
		РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки)
	Перем РезультатРедактирования;
	
	Если ИспользоватьРежимМодальности() Тогда
		РезультатРедактирования = ПараметрыВводаСтроки.ИсходноеЗначение;
		РедактироватьМногострочныйТекст_ВвестиСтроку(ПараметрыВводаСтроки.ИсходноеЗначение, РезультатРедактирования, Ложь, ПараметрыВводаСтроки.Заголовок, ПараметрыВводаСтроки.Многострочность);
		РедактироватьМногострочныйТекстЗавершение(РезультатРедактирования, ПараметрыВводаСтроки);
	Иначе
		РедактироватьМногострочныйТекст_ПоказатьВводСтроки(ПараметрыВводаСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
// Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы
//
&НаКлиенте
Процедура РедактироватьМногострочныйТекст_ВвестиСтроку(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, Заголовок = Неопределено, Многострочность = Истина)
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст,,, Многострочность);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок,, Многострочность);
	КонецЕсли;
	                              
	Если НЕ ТекстВведен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатРедактирования = МногострочныйТекст Тогда
		РезультатРедактирования = МногострочныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста немодально.
&НаКлиенте
Процедура РедактироватьМногострочныйТекст_ПоказатьВводСтроки(ПараметрыВводаСтроки)
	Перем ОбработчикВводаСтроки, Заголовок, ТекстРедактирования, Многострочность;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = НСтр("ru = '.'");
	КонецЕсли;
	
	Заголовок = ПараметрыВводаСтроки.Заголовок;
	ТекстРедактирования = ПараметрыВводаСтроки.ИсходноеЗначение;
	Многострочность = ПараметрыВводаСтроки.Многострочность;
	
	Выполнить("ОбработчикВводаСтроки = Новый ОписаниеОповещения(""РедактироватьМногострочныйТекстЗавершение"", ЭтотОбъект, ПараметрыВводаСтроки)");
	Выполнить("ПоказатьВводСтроки(ОбработчикВводаСтроки, ТекстРедактирования, Заголовок, , Многострочность)");
	
КонецПроцедуры

// Обработчик результата работы процедуры РедактироватьМногострочныйТекст.
&НаКлиенте
Процедура РедактироватьМногострочныйТекстЗавершение(Текст, ПараметрыВводаСтроки) Экспорт
	Перем Форма, Обработчик, ИсходноеЗначение;
	
	Форма = ПараметрыВводаСтроки.ФормаИлиОбработчик;
	ИсходноеЗначение = ПараметрыВводаСтроки.ИсходноеЗначение;
	
	Если Текст <> Неопределено И НЕ ПараметрыВводаСтроки.ВладелецРеквизита = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыВводаСтроки.ВладелецРеквизита, Новый Структура(ПараметрыВводаСтроки.ИмяРеквизита, Текст));
		Иначе
			ПараметрыВводаСтроки.ВладелецРеквизита[ПараметрыВводаСтроки.ИмяРеквизита] = Текст;
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			Если НЕ Текст = ИсходноеЗначение Тогда
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ДЕЙСТВИЯ ФОРМЫ.
// 

////////////////////////////////////////////////////////////////////////////////
// КНОПКИ ОСНОВНОГО МЕНЮ. ЗАПИСЬ ОБЪЕКТА.
// 

// Кнопка "Записать".
//
&НаКлиенте
Процедура ОМЗаписать(Команда, РежимЗаписи = Неопределено)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = Объект.ТипОбъектаБД;
	
	Если РежимЗаписи = Неопределено Тогда
		
		ТекстВопроса = "ЗАПИСАТЬ " + ВРег(ТипОбъектаБД) + ":
		|" + Объект.ОбъектБД + " ?";
	
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартный Вопрос() в модальном режиме (8.2/8.3).
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ЗАПИСЬ ОБЪЕКТА", КодВозвратаДиалога.Нет);
			ВызватьОбработкуОтветаПриЗаписиОбъекта(Ответ, РежимЗаписи);
		Иначе
			// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриЗаписиОбъекта"", ЭтотОбъект, РежимЗаписи)");
			Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
		КонецЕсли;
	Иначе
		ВызватьОбработкуОтветаПриЗаписиОбъекта(КодВозвратаДиалога.Да, РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриЗаписиОбъекта(Ответ, РежимЗаписи) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	Перем ТипОбъектаБД;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = Объект.ТипОбъектаБД;
	
	Если Объект.ПоказыватьСообщения Тогда
		ОчиститьСообщения();
		Сообщить(СтрокаРавно);
		Если РежимЗаписи = Неопределено Тогда
			Сообщить("МФ: " + "ЗАПИСЬ """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Сообщить("МФ: " + "ПРОВЕДЕНИЕ ДОКУМЕНТА: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Сообщить("МФ: " + "ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДЗаписатьНаСервере(Объект.ОбъектБД, Отказ, РежимЗаписи);
	
	// При Проведении и ОтменыПроведения документа высвечивается: "Формирование таблиц движения ...".
	ЭтаФорма.ОтобразитьИзменениеДанных(Объект.ОбъектБД, ВидИзмененияДанных.Изменение);	// Обновление отображения в реквизите ОбъектБД!
	
	ЭтаФорма.Модифицированность = Ложь;
	
	Если Отказ Тогда
		
		Если Объект.ПоказыватьСообщения Тогда
			
			Если РежимЗаписи = Неопределено Тогда
				Сообщить("МФ: " + "ОБЪЕКТ: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """ НЕ ЗАПИСАН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """ НЕ ПРОВЕДЕН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """ ПРОВЕДЕНИЕ НЕ ОТМЕНЕНО.", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Сообщить(СтрокаРавно);
		КонецЕсли;
		
	Иначе	
		
		Если Объект.ПоказыватьСообщения Тогда
			
			Сообщить(СтрокаРавно);
			
			Если РежимЗаписи = Неопределено Тогда
				Сообщить("МФ: " + "ОБЪЕКТ: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """ ЗАПИСАН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """ ПРОВЕДЕН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + Объект.ОбъектБД + """ ПРОВЕДЕНИЕ ОТМЕНЕНО.", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Если НЕ Объект.ПоказатьДвижения ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить(СтрокаРавно);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимЗаписи = Неопределено Тогда
			Если ТипОбъектаБД = ИмяТипаДокументы() И ОбъектБДПолучитьПризнакПроведенОбъекта(Объект.ОбъектБД) Тогда
				ПредупреждениеСообщение(, "ПРОВЕДЕННЫЙ РАНЕЕ ДОКУМЕНТ: 
				|""" + ВРег(Объект.ОбъектБД) + """
				|
				|- ЗАПИСАН, НО МОЖЕТ БЫТЬ НЕ ПРОВЕДЕН ПОВТОРНО.
				|=> (следовательно)
				|- ДВИЖЕНИЯ ПО РЕГИСТРАМ МОГУТ ОСТАТЬСЯ ПРЕЖНИМИ.
				|
				|РЕКОМЕНДУЕТСЯ ВЫПОЛНИТЬ ПРОВЕДЕНИЕ ДОКУМЕНТА.", , Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия);
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипОбъектаБД = ИмяТипаБизнесПроцессы() ИЛИ ТипОбъектаБД = ИмяТипаЗадачи()) Тогда
			ЭтаФорма.СостояниеОбъектаБД	= ОбъектБДПолучитьСостояниеОбъекта(Объект.ОбъектБД);
		КонецЕсли;
		
		ОбъектБДПриИзменении("ОбъектБДЗаписать");
		
	КонецЕсли;

КонецПроцедуры

// МО: Записать Выбранный ОбъектБД.
//
&НаСервере
Процедура ОбъектБДЗаписатьНаСервере(ОбъектБД, Отказ, РежимЗаписи = Неопределено)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ОбъектОбработка.ОбъектБДЗаписатьНаСервере(ОбъектБД, ЭтаФорма, Отказ, РежимЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КНОПКИ ОСНОВНОГО МЕНЮ. ПРОВЕДЕНИЕ ВыбранногоОбъекта (Тип: Документ).
// 

// Кнопка "СоздатьКопированием" ДОПОЛНИТЕЛЬНОГО МЕНЮ. ТОЛЬКО ДОКУМЕНТ.
//
&НаКлиенте
Процедура ОМСоздатьКопированием(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
			
	Если ОбъектБДПолучитьПометкуУдаленияОбъекта(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, """" + Объект.ОбъектБД + """ помечен на удаление.
		|Снимите пометку удаления и повторите попытку создания копированием.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Вы подтверждаете создание копированием нового объекта типа
	|
	|" + ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Объект.ОбъектБД) + " ?
	|
	|ОСОБЕННОСТИ УСТАНОВКИ ЗНАЧЕНИЙ РЕКВИЗИТОВ ДОКУМЕНТА:
	|
	|1. Номер документа устанавливается в соответствии со штатным префиксом в данной БД.
	|2. Дата документа устанавливается в зависимости от Периодичности нумерации Документа и Даты исходного документа.";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "СОЗДАНИЕ НОВОГО ОБЪЕКТА КОПИРОВАНИЕМ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриСоздатьКопированием(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриСоздатьКопированием"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриСоздатьКопированием(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = ОМСоздатьКопированиемНаСервере(Объект.ОбъектБД);
	
	Если НЕ РезультатСоздания.Отказ Тогда
		
		ОбъектБДПриИзменении("ОМСоздатьКопированием");
		
		ЭтаФорма.ОтобразитьИзменениеДанных(Объект.ОбъектБД, ВидИзмененияДанных.Изменение);
		
	КонецЕсли;
	
	ПредупреждениеСообщение(, РезультатСоздания.ОписаниеОшибки, , Объект.ПараметрыСеансаОбработки.Конфигурация + " " + Объект.ПараметрыСеансаОбработки.Версия);	// Если Успешно - Выдается сообщение.
	
КонецПроцедуры

// МО: Кнопка "СоздатьКопрированием". Только Документ.
//
&НаСервере
Функция ОМСоздатьКопированиемНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.НовыйОбъектБДСоздатьКопированиемНаСервере(ОбъектБД);

КонецФункции

// Кнопка "Провести".
//
&НаКлиенте
Процедура ОМПровести(Команда, ЗадатьВопрос = Истина, ОтветПоОснованию = Неопределено)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПометкуУдаленияОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, "Удаленный документ: """ + Объект.ОбъектБД + """ не может быть проведен.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Объект.ПроведениеРазрешено Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(Объект.ОбъектБД);
		
		ПредупреждениеСообщение(, "Тип документа: """ + Объект.ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + КоличествоДвижений + ".
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗадатьВопрос Тогда
	
		ТекстВопроса = "Подтвердите проведение документа:
		|
		|" + Объект.ОбъектБД + " .";
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартный Вопрос() в модальном режиме (8.2/8.3).
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТА", КодВозвратаДиалога.Нет);
			ВызватьОбработкуОтветаПриПроведенииДокумента(Ответ, Неопределено);
		Иначе
			// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПроведенииДокумента"", ЭтотОбъект, Неопределено)");
			Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
		КонецЕсли;
		
	Иначе
		
		ВызватьОбработкуОтветаПриПроведенииДокумента(ОтветПоОснованию, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПроведенииДокумента(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОМЗаписать(Неопределено, РежимЗаписиДокумента.Проведение);
	
	ПоказатьДвиженияПриИзменении("ОМПровести");
	
	ЭтаФорма.СостояниеОбъектаБД = ОбъектБДПолучитьСостояниеОбъекта(Объект.ОбъектБД);
	
КонецПроцедуры

// МО: Получить возможное количество движений.
//
&НаСервере
Функция ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
	
КонецФункции

// Кнопка "ПровестиОснованиеИДокумент".
//
&НаКлиенте
Процедура ОМПровестиОснованиеИДокумент(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПометкуУдаленияОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, "Удаленный документ: """ + Объект.ОбъектБД + """ не может быть проведен.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Объект.ПроведениеРазрешено Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(Объект.ОбъектБД);
		
		ПредупреждениеСообщение(, "Тип документа: """ + Объект.ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + КоличествоДвижений + ".
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяРеквизитаДокументаОснования) Тогда
		
		ПредупреждениеСообщение(, "У объекта типа """ + Объект.ПолноеСтроковоеИмяТипа + """ отсутствует реквизит Документ-Основание.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	ДокументОснованиеЗначениеИзТРеквизиты = ПолучитьЗначениеДокументаОснованияИзТРеквизиты(Объект.ИмяРеквизитаДокументаОснования);
	
	РезультатПолучения = ПолучитьДокументОснованиеТекущегоОбъектаНаСервере(Объект.ОбъектБД, Объект.ИмяРеквизитаДокументаОснования, ДокументОснованиеЗначениеИзТРеквизиты);
	ДокОснование = РезультатПолучения.ДокОснование;
	ОписаниеОшибки = РезультатПолучения.ОписаниеОшибки;
	
	Если ДокОснование = Неопределено Тогда	// Неопределено - при ошибке получения значения.
		
		ПредупреждениеСообщение(, "Не удалось получить Документ-Основание для: 
		|""" + Объект.ОбъектБД + """. 
		|
		|" + ОписаниеОшибки + "
		|
		|Документ-Основание не может быть проведен.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБДПолучитьПометкуУдаленияОбъекта(ДокОснование) Тогда
		
		ПредупреждениеСообщение(, "Удаленный Документ-Основание: """ + ДокОснование + """ не может быть проведен.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	ДобавочныйТекст = "";
	Если ДатаДокументаОснованияБольшеДатыТекущегоДокументаНаСервере(ДокОснование, Объект.ОбъектБД) Тогда
		ДобавочныйТекст = "
		|ВНИМАНИЕ! Дата Документа-Основания > Даты Текущего Документа !
		|";
	КонецЕсли;
	
	Если НЕ ОбъектБДПолучитьПризнакПроведенОбъекта(ДокОснование) Тогда
		ДобавочныйТекст = "
		|ВНИМАНИЕ! Документ-Основание не является проведенным!
		|";
	КонецЕсли;
	
	ТекстВопроса = "Текущий Документ: """ + Объект.ОбъектБД + """
	|" + ДобавочныйТекст + "
	|Документа-Основания: """ + ДокОснование + "
	|
	|ПОДТВЕРДИТЕ ПРОВЕДЕНИЕ";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 100, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриПроведенииОснованияИДокумента(Ответ, ДокОснование);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПроведенииОснованияИДокумента"", ЭтотОбъект, ДокОснование)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПроведенииОснованияИДокумента(Ответ, ДокОснование) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		
		ПредупреждениеСообщение(, "Вы отказались от проведения Документа-Основания: 
		|
		|""" + ДокОснование + """
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Проведено = ПровестиДокументНаСервере(ДокОснование);
	
	Если Проведено Тогда
		
		ОМПровести(Неопределено, Ложь, КодВозвратаДиалога.Да);	// Проводим Выбранный документ по выработанным правилам.
		
	Иначе
		
		ПредупреждениеСообщение(, "Документ-Основание: 
		|""" + ДокОснование + """ провести не удалось.
		|
		|Текущий Документ: 
		|""" + Объект.ОбъектБД + """ так же не будет проведен.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// МО: Получить Значение НаСервере.
//
&НаСервере
Функция ОбъектБДПолучитьИмяДокументаОснование(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьИмяДокументаОснование(ОбъектБД);
	
КонецФункции

// Получить Значение отображаемое в Таблице "Реквизиты".
//
&НаКлиенте
Функция ПолучитьЗначениеДокументаОснованияИзТРеквизиты(ИмяДокументаОснование)
	
	тзТмп = Объект.ТРеквизитыОбъекта;
	
	ДокументОснованиеЗначениеИзТЗ = "";
	
	СтруктураПоиска = Новый Структура("Имя", ИмяДокументаОснование);
	
	Массив = тзТМП.НайтиСтроки(СтруктураПоиска);	// Должен быть только 1(один) элемент.
	
	Если Массив.Количество() > 0 Тогда
		ДокументОснованиеЗначениеИзТРеквизиты = Строка(Массив[0].Значение);
	КонецЕсли;
	
	Возврат ДокументОснованиеЗначениеИзТРеквизиты;
	
КонецФункции

// Получить Значение НаСервере.
//
&НаСервере
Функция ПолучитьДокументОснованиеТекущегоОбъектаНаСервере(ОбъектБД, ИмяДокументаОснование, ДокументОснованиеЗначениеИзТРеквизиты)
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("ДокОснование", Неопределено);
	РезультатПолучения.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		РезультатПолучения.ДокОснование		= ОбъектБД[ИмяДокументаОснование];	// Получаем Ссылку на Документ-Основание. Передать в Клиент ДокументОбъект невозвожно.
		РезультатПолучения.ОписаниеОшибки	= "Документ-Основание " + РезультатПолучения.ДокОснование + " найден.";
		
		// Проверяем.
		// Потому что:
		// В Таблице "Реквизиты" удаленный документ визуально может отображаеться нормально!
		
		// Фактически у удаленного документа НУЛЕВАЯ дата.
		ДатаДокОсн	 = РезультатПолучения.ДокОснование.Дата;				// Документ может быть удален непосредственно, а в Таблице "Реквизиты" он виден, но после выхода из 1С и повторного входа - все как полагается <Объект не найден и т.д.>
		Если ДатаДокОсн = Дата("00010101000000") Тогда						// Документа все-таки нет.
			Если НЕ Строка(РезультатПолучения.ДокОснование) = Строка(ДокументОснованиеЗначениеИзТРеквизиты) Тогда
				РезультатПолучения.ОписаниеОшибки = "НА СТОРОНЕ СЕРВЕРА: (Объект не найден. Возможно удален.)
				|" + РезультатПолучения.ДокОснование + " 
				|
				|НА СТОРОНЕ КЛИЕНТА: (Значение из Таблицы ""Реквизиты""): 
				|" + ДокументОснованиеЗначениеИзТРеквизиты + "
				|
				|ПОЛУЧАЕМ АНЕКДОТ ПРО ПРОГРАММИСТОВ И АВТОМОБИЛЬ, КОТОРЫЙ НЕ ЗАВОДИТСЯ:
				|
				|""ДАВАЙТЕ ВЫЙДЕМ - И ЗАЙДЕМ - ВДРУГ ПОЕДЕТ?!"" (аналог: MS Windows - ""ПЕРЕЗАГРУЗИМСЯ ?!"")
				|
				|В нашем случае Выйти из 1С - и снова зайти ... (тогда в поле Значения для ДокументаОснования возможно будет <Объект не найден> ...)
				|или
				|Реквизит типа ""Документ-Основание"" был изменен с незаполненного на определенный документ, а запись изменений не была произведена.
				|Запишите текущий документ и повторно попытайтесь провести связку документов: Основание+Текущий.";
			Иначе
				РезультатПолучения.ОписаниеОшибки = "НА СТОРОНЕ СЕРВЕРА: (Объект не найден. Возможно удален.)
				|" + РезультатПолучения.ДокОснование + " 
				|
				|НА СТОРОНЕ КЛИЕНТА: (Значение из Таблицы ""Реквизиты""): 
				|" + ДокументОснованиеЗначениеИзТРеквизиты;
			КонецЕсли;
			РезультатПолучения.ДокОснование = Неопределено;
		КонецЕсли;
		
	Исключение
		РезультатПолучения.ДокОснование = Неопределено;
		РезультатПолучения.ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	Возврат РезультатПолучения;
	
КонецФункции

// Ставнить даты Документа-Основания и ОбъектаБД.
//
&НаСервере
Функция ДатаДокументаОснованияБольшеДатыТекущегоДокументаНаСервере(Объект_1, Объект_2)
	
	Возврат Объект_1.Дата > Объект_2.Дата;
	
КонецФункции

// Выполнить проведение Документа-Основания.
//
&НаСервере
Функция ПровестиДокументНаСервере(ДокументСсылка)
	
	Проведен = Ложь;
	Попытка
		ОбъектИЗМ = ДокументСсылка.ПолучитьОбъект();
		// ОтключениеКонтроляЗаписи: ОбменДанными.Загрузка = Истина; Устанавливать нельзя - Ошибка при Проведении/ОтменеПроведения документа.
		ОбъектИЗМ.Записать(РежимЗаписиДокумента.Проведение);
		Проведен = Истина;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		Проведен = Ложь;
	КонецПопытки;
	
	Возврат Проведен;

КонецФункции

// Кнопка "Отмена проведения".
//
&НаКлиенте
Процедура ОМОтменитьПроведение(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если НЕ Объект.ПроведениеРазрешено Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(Объект.ОбъектБД);
		
		ПредупреждениеСообщение(, "Тип документа: """ + Объект.ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО, следовательно отменить проведение невозможно.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + КоличествоДвижений + ".
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБДПолучитьПометкуУдаленияОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, "Удаленный документ: """ + Объект.ОбъектБД + """ не является проведенным, 
		|Повторная отмена проведения невозможна.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОбъектБДПолучитьПризнакПроведенОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, "Документ: """ + Объект.ОбъектБД + """ не является проведенным, 
		|Повторная отмена проведения невозможна.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = "ОТМЕНИТЬ ПРОВЕДЕНИЕ ДОКУМЕНТА:
	|" + Объект.ОбъектБД + " ?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриУдаленииОбъекта(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриУдаленииОбъекта"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриУдаленииОбъекта(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОМЗаписать(Неопределено, РежимЗаписиДокумента.ОтменаПроведения);
	
	ПоказатьДвиженияПриИзменении("ОМОтменитьПроведение");
	
	ЭтаФорма.СостояниеОбъектаБД = ОбъектБДПолучитьСостояниеОбъекта(Объект.ОбъектБД);

КонецПроцедуры

&НаСервере
Функция ОбъектБДПолучитьПризнакПроведенОбъекта(ОбъектБД)
	
	Возврат ОбъектБД.Проведен;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КНОПКИ ОСНОВНОГО МЕНЮ. УДАЛЕНИЕ ВыбранногоОбъекта.
// 

// Кнопка "Отмена пометки удаления".
//
&НаКлиенте
Процедура ОМСнятьПометкуУдаления(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, """Снять пометку удаления"" для Предопределенного Объекта неприменима.
		|
		|Действие не выполнено.");
			
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОбъектБДПолучитьПометкуУдаленияОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, """" + Объект.ОбъектБД +  """ не помечен на удаление.
		|Снять пометку на удаление невозможно.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = "СНЯТЬ ПОМЕТКУ УДАЛЕНИЯ С ОБЪЕКТА:
	|" + Объект.ОбъектБД + " ?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТМЕНА ПОМЕТКИ НА УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриСнятииПометкиНаУдалениеОбъекта(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриСнятииПометкиНаУдалениеОбъекта"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриСнятииПометкиНаУдалениеОбъекта(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	Перем Отказ;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(Объект.ОбъектБД, Отказ, "СнятьПометкуУдаления");
	
	ЭтаФорма.СостояниеОбъектаБД = ОбъектБДПолучитьСостояниеОбъекта(Объект.ОбъектБД);

КонецПроцедуры

// Кнопка "Пометить на удаление".
//
&НаКлиенте
Процедура ОМПометитьНаУдаление(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, "Предопределенный Объект удалить невозможно.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБДПолучитьПометкуУдаленияОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, """" + Объект.ОбъектБД + """ помечен на удаление.
		|Повторно пометить на удаление невозможно.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	ТипОбъектаБД = Объект.ТипОбъектаБД;
	
	СообщениеДляГруппы = Неопределено;
	Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ Объект.ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		
		СообщениеДляГруппы = ?(ОбъектБДПолучитьПризнакЭтоГруппа(Объект.ОбъектБД), "
		|ВАЖНО: Это Группа Справочника/ПВХ. 
		|Будут помечены на удаление подчиненные Группы и Элементы.
		|", СообщениеДляГруппы);
		
	КонецЕсли;
	
	ТекстВопроса = "ПОМЕТИТЬ НА УДАЛЕНИЕ ОБЪЕКТ:
	|" + Объект.ОбъектБД + "
	|" + СообщениеДляГруппы + "
	|Фактическое удаление необходимо провести стандартным способом:
	|1С:Предприятие -> Операции -> Удаление помеченных объектов.
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПОМЕТКА НА УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриПометкеНаУдалениеОбъекта(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПометкеНаУдалениеОбъекта"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПометкеНаУдалениеОбъекта(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	Перем Отказ;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(Объект.ОбъектБД, Отказ, "ПометкаНаУдаление");
	
	ПоказатьДвиженияПриИзменении("ОМПометитьНаУдаление");
	
	ЭтаФорма.СостояниеОбъектаБД = ОбъектБДПолучитьСостояниеОбъекта(Объект.ОбъектБД);

КонецПроцедуры

&НаСервере
Функция ОбъектБДПолучитьПометкуУдаленияОбъекта(ОбъектБД)
	
	Возврат ОбъектБД.ПометкаУдаления;
	
КонецФункции

&НаСервере
Функция ОбъектБДПолучитьПризнакЭтоГруппа(ОбъектБД)
	
	Возврат ОбъектБД.ЭтоГруппа;
	
КонецФункции

// Кнопка "Удалить". НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ БЕЗ ВОЗМОЖНОСТИ ВОССТАНОВЛЕНИЯ.
//
&НаКлиенте
Процедура ОМУдалить(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(Объект.ОбъектБД) Тогда
		
		ПредупреждениеСообщение(, "Предопределенный Объект удалить невозможно.
		|
		|Действие не выполнено.");
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = "УДАЛИТЬ НЕПОСРЕДСТВЕННО ОБЪЕКТ:
	|" + Объект.ОбъектБД + "
	|
	|ЭТО МОЖЕТ НАРУШИТЬ ССЫЛОЧНУЮ ЦЕЛОСТНОСТЬ ДАННЫХ.
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриНепосредственномУдаленииОбъекта(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриНепосредственномУдаленииОбъекта"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриНепосредственномУдаленииОбъекта(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	Перем Отказ;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(Объект.ОбъектБД, Отказ, "Удалить");
	
	Если НЕ Отказ Тогда
		ОбъектБДОчистка(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// МО: Выполнить Пометка на удаления / Снять пометку удаления / Удалить (НЕПОСРЕДСТВЕННО).
//
&НаСервере
Процедура ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, Действие = "ПометкаНаУдаление")
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ОбъектОбработка.ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, Действие);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО".
// "ССЫЛКИ НА ОБЪЕКТ", "СПРАВОЧНИК (ДОПОЛНИТЕЛЬНО)", "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО)"
// 

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ССЫЛКИ НА ОБЪЕКТ". ПОИСК И ЗАМЕНА ССЫЛОК НА ОБЪЕКТ.
// 

// Вкладка "Ссылки на Объект". Поиск ссылок на выбранный ОбъектБД.
//
&НаКлиенте
Процедура ТСсылкиНайтиСсылкиНаОбъект(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Объект не выбран.");
		Возврат
	КонецЕсли;
	
	Состояние("Подождите. Производится поиск ссылок на ОбъектБД: "+Объект.ОбъектБД);
	
	ТСсылкиНайтиСсылкиНаОбъектНаСервере(Объект.ОбъектБД);
	
	Элементы.ДекорВсегоЗаменяемыхСсылок.Заголовок = "Всего: " + Объект.ТСсылкиСписок.Количество();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
	Состояние("Поиск ссылок на ОбъектБД: " + Объект.ОбъектБД + " завершен.");
	
КонецПроцедуры

// МО: Вкладка "Ссылки на Объект". Поиск ссылок на выбранный ОбъектБД.
//
&НаСервере
Процедура ТСсылкиНайтиСсылкиНаОбъектНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	тзНайденныеСсылки = ОбъектОбработка.ТСсылкиНайтиСсылкиНаОбъектНаСервере(ОбъектБД);
	
	ЗначениеВРеквизитФормы(тзНайденныеСсылки, "Объект.ТСсылкиСписок");
 
КонецПроцедуры

// Вкладка "Ссылки на Объект". Очистка списка найденных ссылок на объект.
//
&НаКлиенте
Процедура ТСсылкиОчистить(Команда)

	Элементы.ДекорВсегоЗаменяемыхСсылок.Заголовок = "Всего: ";
	Объект.ТСсылкиСписок.Очистить();
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);

КонецПроцедуры

// Вкладка "Ссылки на Объект". Установить Флажки в списке Ссылок на Объект.
//
&НаКлиенте
Процедура ТСсылкиУстановитьФлажки(Команда)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Истина, "ТСсылкиСписок");
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Снять Флажки в списке Ссылок на Объект.
//
&НаКлиенте
Процедура ТСсылкиСнятьФлажки(Команда)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Ложь, "ТСсылкиСписок");
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Событие Формы НачалоВыбора для ОбъектЗамещающий.
//
&НаКлиенте
Процедура ТСсылкиОбъектБДЗаменяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЭтаФорма.ОдинаковыйТипПриЗамене Тогда
		Если Объект.ПоказыватьСообщения Тогда
			Сообщить(СтрокаРавно);
			Сообщить("Для назначения Одинакового типа """ + ТипЗнч(Объект.ОбъектБД) + """ для Исходного и Замещающего воспользуйтесь настройкой Параметра ""Одинаковый тип Объектов при замене значений"".");
		КонецЕсли;
	КонецЕсли;
	ТСсылкиОбъектБДЗаменяющийОграничитьТип();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ОбъектБДЗаменяющий;
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Ограничение Типа ОбъектЗаменяющий согласно настройке ОдинаковыйТипПриЗамене (Тип объекта заменяющего = Тип объекта БД).
// см. Форма.Настройка.
//
&НаКлиенте
Процедура ТСсылкиОбъектБДЗаменяющийОграничитьТип()
	
	Если Объект.ОбъектБД = Неопределено Тогда
		Элементы.ОбъектБДЗаменяющий.Заголовок = "Заменяющий объект";
		Элементы.ОбъектБДЗаменяющий.ОграничениеТипа = Новый ОписаниеТипов;
		Элементы.ОбъектБДЗаменяющий.ВыбиратьТип = Истина;
		Возврат;
	КонецЕсли;
	
	ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Объект.ОбъектБД);
	
	Если ЭтаФорма.ОдинаковыйТипПриЗамене Тогда
		ПолноеСтроковоеИмяТипа = СтрЗаменить(ПолноеСтроковоеИмяТипа, "." ,"Ссылка.");	// подобно "СправочникСсылка.Номенклатура"
		Элементы.ОбъектБДЗаменяющий.ОграничениеТипа = Новый ОписаниеТипов(ПолноеСтроковоеИмяТипа);
		Элементы.ОбъектБДЗаменяющий.ВыбиратьТип = Ложь;
	Иначе
		Элементы.ОбъектБДЗаменяющий.ОграничениеТипа = Новый ОписаниеТипов;
		Элементы.ОбъектБДЗаменяющий.ВыбиратьТип = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Выбран Новый ЗАМЕЩАЮЩИЙ ОбъектБД во вкладке "Ссылки на Объект":
//
&НаКлиенте
Процедура ТСсылкиОбъектБДЗаменяющийПриИзменении(Элемент)
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ОбъектБДЗаменяющий;
	
	Если ЭтаФорма.ОбъектБДЗаменяющий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ОбъектБДЗаменяющий = Объект.ОбъектБД Тогда
		ПредупреждениеСообщение(, "В качестве Заменяющего объекта выбран Исходный объект:
		|" + Объект.ОбъектБД + "
		|Необходимо выбрать другой Заменяющий объект.");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Число") 
		ИЛИ ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Строка")
		ИЛИ ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Дата")
		ИЛИ ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Булево") Тогда
		
		ПолноеСтроковоеИмяТипа	= Строка(ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий));
		ТипОбъектаБДЗаменяющего	= ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий);
		Предопределенный		= Ложь;
		
	Иначе
	
		ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ЭтаФорма.ОбъектБДЗаменяющий);
		ТипОбъектаБДЗаменяющего	= ОбъектБДПолучитьТипОбъекта(ЭтаФорма.ОбъектБДЗаменяющий);
		Предопределенный		= ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ЭтаФорма.ОбъектБДЗаменяющий);
	
	КонецЕсли;
	
	ОбъектБДСформироватьЗаголовокЭлементаФормы(ТипОбъектаБДЗаменяющего, Элементы.ОбъектБДЗаменяющий, ПолноеСтроковоеИмяТипа, Предопределенный);
	Элементы.ОбъектБДЗаменяющий.Заголовок = "Заменяющий объект [" + Элементы.ОбъектБДЗаменяющий.Заголовок + "]";
	
	ТипИсходный 	= ТипЗнч(Объект.ОбъектБД);
	ТипЗамещающий	= ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий);
	
	Если НЕ ТипЗамещающий = ТипИсходный Тогда
		ПредупреждениеСообщение(, "ТИПЫ ЗНАЧЕНИЙ ИСХОДНОГО И ЗАМЕНЯЮЩЕГО ОБЪЕКТОВ НЕ СОВПАДАЮТ:
		|
		|ТИП ИСХОДНОГО: """ + ВРег(ТипИсходный) + """ ТИП ЗАМЕНЯЮЩЕГО: """ + ВРег(ТипЗамещающий) + """
		|
		|Будьте внимательны при выборе объектов, в которых будет производиться замена.
		|
		|Если в заменяемом Объекте в составном поле отсутствуют одновременно типы исходного и заменяющего объектов,
		|то возникает конфликтная ситуация ...
		|
		|для установки одинакового типа используйте Параметр ""Одинаковый тип Объектов при замене значений"".");
	КонецЕсли;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
	Если НЕ ЭтаФорма.ОдинаковыйТипПриЗамене Тогда	// Для возможности выбирать простой тип после ссылочного.
		ТСсылкиОбъектБДЗаменяющийОграничитьТип();
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ОбъектБДЗаменяющий;
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Очистка содержимого элемента формы ЗАМЕЩАЮЩИЙ ОбъектБД:
//
&НаКлиенте
Процедура ТСсылкиОбъектБДЗаменяющийОчистка(Элемент)
	
	ЭтаФорма.ОбъектБДЗаменяющий = Неопределено;
	Элементы.ОбъектБДЗаменяющий.Заголовок = "Заменяющий объект";
	ТСсылкиОбъектБДЗаменяющийОграничитьТип();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Ссылки на Объект". Произвести открытие ОбъектБДЗаменяющий.
//
&НаКлиенте
Процедура ТСсылкиОбъектБДЗаменяющийОткрытие(Элемент, СтандартнаяОбработка)
		
	Если ЭтаФорма.ОбъектБДЗаменяющий = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

// Вкладка "Ссылки на Объект". Произвести Замену ссылок Выбранного ОбъектаБД на Заменяющий ОбъектБД.
//
&НаКлиенте
Процедура ТСсылкиПроизвестиЗамену(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если Объект.ТСсылкиСписок.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Список объектов, в которых предполагается произвести замену значения:
		|" + Объект.ОбъектБД + " пуст.
		|Произведите поиск объектов, Выберите объекты, в которых необходимо произвести замену и повторите операцию.
		|Замена значения не произведена.");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ОбъектБДЗаменяющий = Неопределено Тогда
		ПредупреждениеСообщение(, "Заменяющий объект не определен.
		|Выберите Заменяющий объект.
		|Замена значения не произведена.");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ОбъектБДЗаменяющий = Объект.ОбъектБД Тогда
		ПредупреждениеСообщение(, "В качестве Заменяющего объекта выбран Исходный объект:
		|" + Объект.ОбъектБД + "
		|Необходимо выбрать другой Заменяющий объект.
		|Замена значения не произведена.");
		Возврат;
	КонецЕсли;
	
	ОтборВыбранныхСсылок = Новый Структура("Включено", Истина);
	
	Если Объект.ТСсылкиСписок.НайтиСтроки(ОтборВыбранныхСсылок).Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Не выбраны Объекты, в которых необходимо произвести Замену Значения:
		|""" + Объект.ОбъектБД + """ на """ + ЭтаФорма.ОбъектБДЗаменяющий + """
		|Необходимо выбрать Объект(ы) в списке Ссылок.
		|Замена значения не произведена.");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Число") 
		ИЛИ ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Строка")
		ИЛИ ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Дата")
		ИЛИ ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий) = Тип("Булево") Тогда
		
		ПолноеСтроковоеИмяТипа	= Строка(ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий));
		ТипОбъектаБДЗаменяющего	= ТипЗнч(ЭтаФорма.ОбъектБДЗаменяющий);
		Предопределенный		= Ложь;
		
	Иначе
	
		ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ЭтаФорма.ОбъектБДЗаменяющий);
		ТипОбъектаБДЗаменяющего	= ОбъектБДПолучитьТипОбъекта(ЭтаФорма.ОбъектБДЗаменяющий);
		Предопределенный		= ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ЭтаФорма.ОбъектБДЗаменяющий);
	
	КонецЕсли;
	
	ТекстВопроса = "Вы подтверждаете замену выбранного значения 
		|" + ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Объект.ОбъектБД) + ": " + Объект.ОбъектБД + "
		|на 
		|" + ПолноеСтроковоеИмяТипа + ": " + ЭтаФорма.ОбъектБДЗаменяющий + " ?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ЗАМЕНА ССЫЛОК НА ОБЪЕКТ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриЗаменеСсылокНаОбъект(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриЗаменеСсылокНаОбъект"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриЗаменеСсылокНаОбъект(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите, пожалуйста. Выполняется обработка выбранных объектов...");
		
	ОчиститьСообщения();

	ТСсылкиПроизвестиЗаменуСсылокНаСервере(ЭтаФорма.ОбъектБДЗаменяющий);
		
	ПредупреждениеСообщение(, "Обработка завершена!");
	
КонецПроцедуры

// МО: Вкладка "Ссылки на Объект". Произвести Замену ссылок Выбранного ОбъектаБД на Заменяющий ОбъектБД.
//
&НаСервере
Процедура ТСсылкиПроизвестиЗаменуСсылокНаСервере(ОбъектБДЗаменяющий)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ОбъектОбработка.ТСсылкиПроизвестиЗаменуСсылокНаСервере(ОбъектБДЗаменяющий);
	
КонецПроцедуры

// Вкладка "Ссылки на объект". Открыть текущий элемент списка.
//
&НаКлиенте
Процедура ТСсылкиОткрытие(Элемент, СтандартнаяОбработка)
			
	Если Элемент.ТекущийЭлемент.Имя = "Данные" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОбъектаМодальноИлиНемодальноВРежимеБлокировкиВладельца(Элемент.ТекущиеДанные.Данные, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСсылкиОчиститьПараметры()
	
	ЭтаФорма.ОбъектБДЗаменяющий	= Неопределено;
	ЭтаФорма.ОдинаковыйТипПриЗамене = Истина;
	ТСсылкиОбъектБДЗаменяющийОграничитьТип();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "СПРАВОЧНИК (ДОПОЛНИТЕЛЬНО)".
// 
 
&НаКлиенте
Процедура ТСправочникПолучитьНачальныеПараметры(Команда)
	
	Объект.ТСправочникСписок.Очистить();

	ЭтаФорма.СправочникЭлементГруппа = Объект.ОбъектБД;
	
	ТСправочникСформироватьСписокДействийСоСправочником(Объект.ОбъектБД);
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)" Список возможных действий (Наименования обработок).
//
&НаСервере
Процедура ТСправочникСформироватьСписокДействийСоСправочником(ОбъектБД)
	
	Если НЕ Объект.ТипОбъектаБД = ИмяТипаСправочники() Тогда
		ЭтаФорма.СправочникСписокДействия.Очистить();
		Возврат;
	КонецЕсли;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	ЭтаФорма.СправочникСписокДействия.Очистить();
	
	ЭтаФорма.СправочникСписокДействия.Добавить("ЧистыйСтроковыйРеквизит_БезЛишнихСимволов"		, "Удалить лишние символы в реквизите типа Строка");
	ЭтаФорма.СправочникСписокДействия.Добавить("УдалитьНедопустимыеСимволыXML"					, "Удалить недопустимые символы XML в реквизите типа Строка");
	ЭтаФорма.СправочникСписокДействия.Добавить("ИсключитьНеЧитаемыеСимволыИзСтроки"				, "Удалить нечитаемые символы в реквизите типа Строка");
	ЭтаФорма.СправочникСписокДействия.Добавить("Реквизит_Значение"								, "Заполнить Реквизит Значением");
	
	ЭтаФорма.СправочникЕстьРеквизитОписание = ОбъектБДЕстьРеквизитОбъекта("Описание", ОбъектБД);
	Элементы.ТСправочникОписание.Видимость = ЭтаФорма.СправочникЕстьРеквизитОписание;
	
	ЭтаФорма.СправочникЕстьРеквизитНаименованиеПолное = ОбъектБДЕстьРеквизитОбъекта("НаименованиеПолное", ОбъектБД);
	
	Если ЭтаФорма.СправочникЕстьРеквизитНаименованиеПолное И ЭтаФорма.СправочникЕстьРеквизитОписание Тогда
		ЭтаФорма.СправочникСписокДействия.Добавить("НаименованиеПолное_НаименованиеИОписание"	, "Заполнить НаименованиеПолное по Наименование+Описание");
	КонецЕсли;
	
	ЭтаФорма.СправочникЕстьРеквизитАртикул = ОбъектБДЕстьРеквизитОбъекта("Артикул", ОбъектБД);
	Элементы.ТСправочникАртикул.Видимость = ЭтаФорма.СправочникЕстьРеквизитАртикул;
	
	Если ОбъектБДЕстьРеквизитОбъекта("Наименование", Объект.ОбъектБД) И ЭтаФорма.СправочникЕстьРеквизитАртикул Тогда
		ЭтаФорма.СправочникСписокДействия.Добавить("Наименование_АртикулВНаименование"			, "Вставить Артикул в начало Наименования");
		ЭтаФорма.СправочникСписокДействия.Добавить("Наименование_НаименованиеБезАртикула"		, "Удалить Артикул из Наименования");
	КонецЕсли;
	
	Если ((Найти(ВРег(Объект.ПолноеСтроковоеИмяТипа), "КОНТРАГЕНТ") > 0) ИЛИ (Найти(ВРег(Объект.ПолноеСтроковоеИмяТипа), "ОРГАНИЗАЦИ") > 0)) Тогда
		ЭтаФорма.СправочникСписокДействия.Добавить("Наименования_ПоОКОПФ"						, "Заполнить Наименования по ОКОПФ");
		
		Элементы.ТСправочникНаименованиеПолное.Видимость = ЭтаФорма.СправочникЕстьРеквизитНаименованиеПолное;
	
		ЭтаФорма.СправочникЕстьРеквизитНаименованиеСокращенное = ОбъектБДЕстьРеквизитОбъекта("НаименованиеСокращенное", ОбъектБД);
		Элементы.ТСправочникНаименованиеСокращенное.Видимость = ЭтаФорма.СправочникЕстьРеквизитНаименованиеСокращенное;
		
	КонецЕсли;
	
	ЭтаФорма.СправочникСписокДействия.Добавить("НеиспользуемыеЭлементы_ПоискИУдаление"			, "Найти и пометить на удаление неиспользуемые элементы");
	
	Если НЕ мдОбъектаБД.Иерархический Тогда
		Элементы.ТСправочникРодитель.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)" Кнопка FAQ.
//
&НаКлиенте
Процедура ТСправочникОписаниеДействия(Команда)
	
	СтруктураВозврат = ТСправочникПолучитьПояснениеДействия();
	
	ТСправочникПояснениеДействия = СтруктураВозврат.ТСправочникПояснениеДействия;
	ТСправочникПараметрыДействия = СтруктураВозврат.ТСправочникПараметрыДействия;
	
	Если ЗначениеЗаполнено(ТСправочникПояснениеДействия) Тогда
		ПредупреждениеСообщение(, ТСправочникПояснениеДействия);
	Иначе
		ПредупреждениеСообщение(, "Выберите действие и повторите просмотр подсказки.");
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)" Описание возможных действий.
//
&НаКлиенте
Функция ТСправочникПолучитьПояснениеДействия()
	
	СтруктураВозврат = Новый Структура;
	
	ТСправочникПояснениеДействия = "";
	ТСправочникПараметрыДействия = Новый Структура;
	
	Если ЭтаФорма.СправочникДействие = "ЧистыйСтроковыйРеквизит_БезЛишнихСимволов" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Из Наименований удаляются: Двойные Пробелы, символы: Табуляции, НеразрывныйПробел и т.д.
		|А также пробелы, находящиеся ""не на своем месте"" или которыми можно пренебречь.
		|
		|Например:
		|
		|"" = "" (пробелы в начале и в конце) => преобразуется в ""="" (без пробелов).
		|"" ,"" (пробел в начале) = > преобразуется в "","" (без пробелов).
		|""( "" (пробел в конце) = > преобразуется в ""("" (без пробелов).
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Удаление ""лишних"" символов");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите удаление лишних символов в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит удаление лишних символов ...");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "УдалитьНедопустимыеСимволыXML" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Из Наименований удаляются: Недопустимые символы с точки зрения XML.
		|Могут оставаться нечитаемые символы.
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Удаление недопустимых символов XML");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите удаление недопустимых символов XML в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит удаление недопустимых символов XML ...");

	ИначеЕсли ЭтаФорма.СправочникДействие = "ИсключитьНеЧитаемыеСимволыИзСтроки" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|В наименовани остаются:
		|Латиница = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;
		|Кирилица = АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя;
		|Греческие = ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψω;
		|Цифры = 0123456789;
		|СпециальныеСимволы = ~`!@#$%^&*(){}[]_-=+\|/*:;.<>?,№«» ;
		|ДвойнаяКавычка = """";
		|ОдинарнаяКавычка = ';
		|АпострофОбратный = ́;		// КодСимвола 769. Обратный для символа на букве Ё.
		|АвторскоеПраво = ©;		// КодСимвола 169. Copyright - латинская буква C в окружности - авторское право.
		|Зарезервировано = ®; 		// КодСимвола 174. Registered - латинская буква R в окружности - товарный знак.
		|ТоварныйЗнак = ™;			// Верхний  индекс ТМ.
		|ШирокоеТире = —;			// КодСимвола 8212.
		|ДенежныеСимволы = ¤¢€£¥;	// Денежная единица, Цент, Евро, Фунт стерлингов, Иена или юань.
		|ДробныеСимволы = ½¼¾;		// Дроби: 1/2, 1/4, 3/4.
		|СимволыСтепени = ¹²³;		// Степени: 1, 2, 3
		|ПрочиеСимволы = °±×÷Øƒµ+Символ(167);	// Градус, Плюс/Минус, Знак умножения, Знак деления, Диаметр, Знак функции, Микро, Параграф.
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Исключение нечитаемых символов");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите исключение нечитаемых символов в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит исключение нечитаемых символов ...");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "Реквизит_Значение" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|В выбранный реквизит заносится значение из реквизита ""Новое Значение"".
		|
		|Например:
		|
		|БЫЛО: Номенклатура реквизит ""Весовой"" = Ложь.
		|Новое значение: Истина.
		|СТАЛО: Номенклатура реквизит ""Весовой"" = Истина.
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Заполнение реквизита значением");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите заполнение реквизита значением в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит заполнение реквизита значением ...");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "НаименованиеПолное_НаименованиеИОписание" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Пример:
		|
		|Исходные значение реквизитов:
		|1. Наименование: ""Бублик""
		|2. Описание; ""с дыркой""
		|
		|Результат: НаименованиеПолное = ""Бублик с дыркой""
		|
		|ПРИМЕЧАНИЕ: НаименованиеПолное используется в печатных формах.
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Заполнение Наименования Полного по Наименованию и Описанию");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите заполнение в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит заполнение Наименования Полного по Наименованию и Описанию. ");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "Наименование_АртикулВНаименование" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Реквизит Артикул обязательно должен быть заполнен, если нет, то элемент не обрабатывается.
		|Из наименования извлекается 1-ое слово. 
		|Если 1-ым словом является Артикул, то элемент не обрабатывается.
		|Все другие вхождения подстроки Артикула типа ""1234567890"" удаляются, например в конце строки.
		|
		|Пример:
		|
		|Исходное значение реквизита Артикул: 1234567890, а Наименования: Тара 1234567890
		|
		|Результат: Наименование: 1234567890 Тара
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Добавление Артикула в Наименования");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите добавление артикула в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит добавление артикула 1-м словом в Наименованиях. ");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "Наименование_НаименованиеБезАртикула" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Реквизит Артикул обязательно должен быть заполнен, если нет, то элемент не обрабатывается.
		|Все вхождения подстроки Артикула типа ""1234567890"" удаляются.
		|
		|Пример:
		|
		|Исходное значение реквизита Артикул: ""1234567890"", а Наименования: ""1234567890 Тара 1234567890""
		|
		|Результат: Наименование: ""Тара""
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Удаление Артикула из Наименования");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите удаление артикула в выбранных элементах ");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Происходит удаление артикула из Наименования. ");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "Наименования_ПоОКОПФ" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Изменяются элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Ключевое значение: Наименование.
		|Из Наименования извлекается 1-ое слово.
		|Если 1-ым словом является Аббревиатура (согласно ОКОПФ), то элемент обрабатывается.
		|Все другие вхождения подстроки Аббревиатуры типа "" ООО "" (пробелы слева и справа) удаляются.
		|
		|Пример:
		|
		|Исходное значение реквизита Наименования: ООО БеломорКанал
		|
		|Результат:
		|
		|1. Реквизит Наименование:______________БеломорКанал ООО
		|2. Реквизит НаименованиеСокращенное:___ООО БеломорКанал
		|3. Реквизит НаименованиеПолное:________Общество с ограниченной ответственностью БеломорКанал
		|
		|ВАЖНО: В реквизите Наименование должно быть ПОЛНОЕ ПРАВИЛЬНОЕ наименование с АББРЕВИАТУРОЙ из ОКОПФ в начале.
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Обработка Наименования справочника Контрагенты/Организации");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите обработку в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Обработка Наименования Контрагенты/Организации. ");
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "НеиспользуемыеЭлементы_ПоискИУдаление" Тогда
		
		ТСправочникПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Принцип действия:
		|
		|Помечаются на удаление элементы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|ВАЖНО! Помеченные на удаление элементы раньше (до выполняемой данного действия) 
		|исключаются из поиска и последующей пометки на удаление.
        |
		|ВАЖНО! Предопределенные элементы исключаются из поиска и последующей пометки на удаление
		|(удалить предопределенные элементы в режиме 1С:Предприятие невозможно).
        |
		|ВАЖНО! В поле «Объект/Группа» рекомендуется выбирать Группу/Элемент-Родитель для иерархического справочника. 
		|Обработка всего справочника может быть очень длительной, исключение неиерархический справочник 
		|(предположение: неиерархические справочники - небольшие по количеству элементов)
		|
		|Фактическое удаление производится штатными средствами 1С:Предприятие:
		|- Обычное приложение: Главное меню - Операции - Удаление помеченных объектов.
        |- Управляемое приложение: Администрирование - Удаление помеченных объектов.
        |- Фактическое удаление рекомендуется производить в монопольном режиме.
        |
		|Ключевое значение: Ссылка.
		|Элемент не встречается нигде, кроме текущего справочника.
		|
		|==============================================================================================================
		|";
		
		ТСправочникПараметрыДействия.Вставить("Действие"		, ЭтаФорма.СправочникДействие);
		ТСправочникПараметрыДействия.Вставить("Заголовок"		, "Найти и пометить на удаление неиспользуемые элементы");
		ТСправочникПараметрыДействия.Вставить("ТекстВопроса"	, ТСправочникПояснениеДействия + "Подтвердите обработку в выбранных элементах");
		ТСправочникПараметрыДействия.Вставить("ТекстСостояние"	, "Подождите немного. Обработка элементов. Пометка на удаление. ");
		
	КонецЕсли;
	
	СтруктураВозврат.Вставить("ТСправочникПояснениеДействия", ТСправочникПояснениеДействия);
	СтруктураВозврат.Вставить("ТСправочникПараметрыДействия", ТСправочникПараметрыДействия);
	
	Возврат СтруктураВозврат;
	
КонецФункции

// Вкладка "Справочник (Дополнительно)". Показать список Блокированных реквизитов.
//
&НаКлиенте
Процедура ТСправочникБлокированныеРеквизиты(Команда)
	Перем ЭлементСписка, МногоСтрочныйТекст;
	
	МногоСтрочныйТекст = "";
	Для Каждого ЭлементСписка ИЗ Объект.БлокируемыеРеквизиты Цикл
		МногоСтрочныйТекст = МногоСтрочныйТекст + ЭлементСписка.Значение + Символы.ПС;
	КонецЦикла;
	
	ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, "Блокируемые реквизиты объекта");

КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Выбрать "Действие" из СпискаЗначений СправочникСписокДействия.
//
&НаКлиенте
Процедура ТСправочникДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ВыбранныйЭлемент, ОписаниеОповещенияОЗакрытии, Параметры;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Элемент", Элемент);
	Параметры.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ВыбранныйЭлемент = ВыбратьИзСписка(ЭтаФорма.СправочникСписокДействия, Элемент, ДанныеВыбора);
		ВызватьОбработкуВыбранногоЭлементаТСправочникДействие(ВыбранныйЭлемент, Параметры);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуВыбранногоЭлементаТСправочникДействие"", ЭтотОбъект, Параметры)");
		Выполнить("ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, ЭтаФорма.СправочникСписокДействия, Элемент)");
	КонецЕсли;;
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуВыбранногоЭлементаТСправочникДействие(ВыбранныйЭлемент, Параметры) Экспорт
	
	Элемент = Параметры.Элемент;
	СтандартнаяОбработка = Параметры.СтандартнаяОбработка;
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТСправочникСписок.Очистить();
	
	ТСправочникДействиеОчистка(Элемент, СтандартнаяОбработка, Истина);
	
	ЭтаФорма.СправочникДействие = ВыбранныйЭлемент.Значение;
	
	Если ЭтаФорма.СправочникДействие = "ЧистыйСтроковыйРеквизит_БезЛишнихСимволов" Тогда
		
		Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
		Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр 		= Ложь;
		Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр 	= Истина;
		ЭтаФорма.СправочникНовоеЗначениеРеквизита 					= "без лишних символов";
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "УдалитьНедопустимыеСимволыXML" Тогда
		
		Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
		Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр 		= Ложь;
		Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр 	= Истина;
		ЭтаФорма.СправочникНовоеЗначениеРеквизита 					= "Удалить недопустимые символы XML";
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "ИсключитьНеЧитаемыеСимволыИзСтроки" Тогда
		
		Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
		Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр 		= Ложь;
		Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр 	= Истина;
		ЭтаФорма.СправочникНовоеЗначениеРеквизита 					= "Исключить нечитаемые символы";
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "Реквизит_Значение" Тогда
		
		Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Истина;
		Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр 		= Ложь;
		Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр 	= Ложь;
		
	ИначеЕсли ЭтаФорма.СправочникДействие = "НеиспользуемыеЭлементы_ПоискИУдаление" Тогда
		
		Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
		
		Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр 		= Истина;
		Этаформа.СправочникИзменяемыйРеквизит 						= "Ссылка";
		Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр 	= Истина;
		ЭтаФорма.СправочникНовоеЗначениеРеквизита 					= "Удалить, нельзя помиловать";
		
		Элементы.СправочникДатаРанее.ТолькоПросмотр					= Ложь;
		ЭтаФорма.СправочникДатаРанее								= НачалоГода(ТекущаяДата());
		
	Иначе
		
		Если ОбъектБДЕстьРеквизитОбъекта("Наименование", Объект.ОбъектБД) Тогда
			
			Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр 		= Истина;
			Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр	= Истина;
			
			Если ЭтаФорма.СправочникДействие = "НаименованиеПолное_НаименованиеИОписание" Тогда
		
				Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Истина;
				
				Этаформа.СправочникИзменяемыйРеквизит 		= "НаименованиеПолное";
				ЭтаФорма.СправочникНовоеЗначениеРеквизита 	= "= Наименование+Описание";
				
			ИначеЕсли ЭтаФорма.СправочникДействие = "Наименование_АртикулВНаименование" Тогда
		
				Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
				
				Этаформа.СправочникИзменяемыйРеквизит 		= "Наименование";
				ЭтаФорма.СправочникНовоеЗначениеРеквизита 	= "= Артикул + Наименование";
				
			ИначеЕсли ЭтаФорма.СправочникДействие = "Наименование_НаименованиеБезАртикула" Тогда
		
				Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
				
				Этаформа.СправочникИзменяемыйРеквизит 		= "Наименование";
				ЭтаФорма.СправочникНовоеЗначениеРеквизита 	= "= Наименование без Артикула";
				
			ИначеЕсли ЭтаФорма.СправочникДействие = "Наименования_ПоОКОПФ" Тогда
		
				Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
				
				Этаформа.СправочникИзменяемыйРеквизит 		= "Наименование";
				ЭтаФорма.СправочникНовоеЗначениеРеквизита 	= "Согласно ОКОПФ (а также Полное и Сокращенное)";
				
			КонецЕсли;
			
		Иначе
			
			// Наименование отсутствует.
			ПредупреждениеСообщение(, "Реквизит ""Наименование"" отсутствует у отбъекта типа " + Объект.ПолноеСтроковоеИмяТипа);
			ЭтаФорма.СправочникДействие = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Очистить реквизит "Действие".
//
&НаКлиенте
Процедура ТСправочникДействиеОчистка(Элемент, СтандартнаяОбработка, Очистить = Истина)
	
	Объект.ТСправочникСписок.Очистить();
	
	ЭтаФорма.СправочникДействие = Неопределено;
	ТСправочникИзменяемыйРеквизитОчистка(Элемент, СтандартнаяОбработка, Очистить);
	ТСправочникНовоеЗначениеРеквизитаОчистка(Элемент, СтандартнаяОбработка);
		
	Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;

	Элементы.СправочникИзменяемыйРеквизит.ТолькоПросмотр = Истина;
	Элементы.СправочникНовоеЗначениеРеквизита.ТолькоПросмотр = Истина;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Очистить Элемент "СправочникЭлементГруппа".
//
&НаКлиенте
Процедура ТСправочникЭлементГруппаПриИзменении(Элемент)
	
	Объект.ТСправочникСписок.Очистить();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Очистить Элемент "ОбрабатываемыйЭлементГруппа" и "ТСправочникСписок".
//
&НаКлиенте
Процедура ТСправочникЭлементГруппаОчистка(Элемент, СтандартнаяОбработка)
	
	ЭтаФорма.СправочникЭлементГруппа = Неопределено;
		
	ТСправочникОчистить(Элемент);
	
	ТСправочникЭлементГруппаИзменениеОчисткаПредупреждение();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Очистить Элемент "ОбрабатываемыйЭлементГруппа" и "ТСправочникСписок".
//
&НаКлиенте
Процедура ТСправочникЭлементГруппаИзменениеОчисткаПредупреждение()
	
	ПредупреждениеСообщение(, "Объект/Группа не выбран(а). Будет обрабатываться весь справочник.
	|
	|Если Справочник содержит большое количество элементов то,
	|это может вызывать проблему нехватки памяти при обработке.
	|
	|Рекомендуется выбирать Группу/Элемент-Родитель для иерархического справочника.");
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Выбор "ИзменяемыйРеквизит".
//
&НаКлиенте
Процедура ТСправочникИзменяемыйРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Перем ВыбранныйЭлемент, ОписаниеОповещенияОЗакрытии;
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.ЦветТекста 	= Объект.ЦветТекстаПоля;
	Элемент.ЦветФона 	= Объект.ЦветФонаПоля;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ВыбранныйЭлемент = ВыбратьИзСписка(Объект.СписокРеквизиты, Элемент, ДанныеВыбора);
		ВызватьОбработкуВыбранногоЭлементаТСправочникИзменяемыйРеквизит(ВыбранныйЭлемент, Элемент);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуВыбранногоЭлементаТСправочникИзменяемыйРеквизит"", ЭтотОбъект, Элемент)");
		Выполнить("ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, Объект.СписокРеквизиты, Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуВыбранногоЭлементаТСправочникИзменяемыйРеквизит(ВыбранныйЭлемент, Элемент) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ФормаПредупреждениеБлокированныйРеквизит(Элемент, ЭтаФорма.СправочникИзменяемыйРеквизит);
		Возврат;
	КонецЕсли;
	
	Если ВРег(ВыбранныйЭлемент) = "ЭТОГРУППА" Тогда
		ПредупреждениеСообщение(, "Стандартный реквизит ""ЭтоГруппа"" (признак группы) Справочника/ПВХ недоступно для корректировки/записи.
		|
		|Выберите другой реквизит.");
		Возврат;
	КонецЕсли;
	
	Если Объект.СтруктураРеквизиты[ВыбранныйЭлемент.Значение].СодержитТип(Тип("ХранилищеЗначения")) Тогда
		ПредупреждениеСообщение(, "Поле Объекта: """ + ВыбранныйЭлемент + """ типа ""ХранилищеЗначения"" недоступно для корректировки/записи.
		|
		|Выберите другой реквизит.");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.СправочникДействие = "Реквизит_Значение" Тогда
		// Значения разных типов.
		ЭтаФорма.СправочникНовоеЗначениеРеквизита = Неопределено;
	Иначе
		Если НЕ Объект.СтруктураРеквизиты[ВыбранныйЭлемент.Значение].СодержитТип(Тип("Строка")) Тогда
			ПредупреждениеСообщение(, "Выбран реквизит не строкового типа: """ + ВыбранныйЭлемент.Значение + """
			|
			|Выберите другой реквизит.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.СправочникИзменяемыйРеквизит = ВыбранныйЭлемент.Значение;
	
	Если ЭтаФорма.СправочникДействие = "Реквизит_Значение" Тогда
		Объект.ТСправочникСписок.Очистить();
		Элементы.СправочникНовоеЗначениеРеквизита.ОграничениеТипа 	= Объект.СтруктураРеквизиты[ВыбранныйЭлемент.Значение];
	КонецЕсли;
	
	ФормаПредупреждениеБлокированныйРеквизит(Элемент, ЭтаФорма.СправочникИзменяемыйРеквизит);
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры
	
// Предупреждение: "Изменение блокированного реквизита объекта".
//
&НаКлиенте
Процедура ФормаПредупреждениеБлокированныйРеквизит(Элемент, БлокированныйРеквизит)
	
	Если Объект.БлокируемыеРеквизиты.Количество() > 0 Тогда
		Если НЕ Объект.БлокируемыеРеквизиты.НайтиПоЗначению(БлокированныйРеквизит) = Неопределено Тогда
			Элемент.ЦветТекста 	= Объект.ЦветТекстаБлокируемогоРеквизита;
			Элемент.ЦветФона 	= Объект.ЦветФонаБлокируемогоРеквизита;
			
			ТекстСообщения = "Изменение блокированного реквизита объекта.
			|
			|Согласно проектной логике Конфигурации """ + Объект.ПараметрыСеансаОбработки.КраткаяИнформация + """:
			|Реквизит не рекомендуется/нельзя изменять, если Объект участвует в документах.
			|
			|""Блокированные"" реквизиты определяются индивидуально для вида Объекта.";
			
			ПредупреждениеСообщение(, ТекстСообщения);
			
		Иначе
			Элемент.ЦветТекста 	= Объект.ЦветТекстаПоля;
			Элемент.ЦветФона 	= Объект.ЦветФонаПоля;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КлиентСообщениеПользователю(Текст, Поле = "")
	
	Сообщение = Новый СообщениеПользователю();
			
	Сообщение.Текст = Текст;
		
	Сообщение.Поле = Поле;
			
	Сообщение.Сообщить();
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Очистка "ИзменяемыйРеквизит", "ЗначениеРеквизита".
//
&НаКлиенте
Процедура ТСправочникИзменяемыйРеквизитОчистка(Элемент, СтандартнаяОбработка, Очистить = Ложь)
	
	ЭтаФорма.СправочникИзменяемыйРеквизит 				= Неопределено;
	Элементы.СправочникИзменяемыйРеквизит.ЦветТекста 	= Объект.ЦветТекстаПоля;
	Элементы.СправочникИзменяемыйРеквизит.ЦветФона 		= Объект.ЦветФонаПоля;
	
	Если ЭтаФорма.СправочникДействие = "Реквизит_Значение" ИЛИ Очистить Тогда
		ТСправочникНовоеЗначениеРеквизитаОчистка(Элемент, СтандартнаяОбработка);
		Элементы.СправочникНовоеЗначениеРеквизита.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);

КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Новое значение реквизита изменено.
//
&НаКлиенте
Процедура ТСправочникНовоеЗначениеРеквизитаПриИзменении(Элемент)
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Новое значение реквизита очищено.
//
&НаКлиенте
Процедура ТСправочникНовоеЗначениеРеквизитаОчистка(Элемент, СтандартнаяОбработка)
	
	ЭтаФорма.СправочникНовоеЗначениеРеквизита = Неопределено;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Сформировать список для последующей обработки.
//
&НаКлиенте
Процедура ТСправочникНайтиЭлементы(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ЗаголовокВопроса = ВРег(ЭтаФорма.СправочникСписокДействия.НайтиПоЗначению(ЭтаФорма.СправочникДействие));
	
	СтруктураВозврат = ТСправочникПолучитьПояснениеДействия();
	
	ТСправочникПояснениеДействия = СтруктураВозврат.ТСправочникПояснениеДействия;
	ТСправочникПараметрыДействия = СтруктураВозврат.ТСправочникПараметрыДействия;
	
	ТекстДополнительный = "";
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.СправочникЭлементГруппа) Тогда
		ТекстДополнительный = "Весь справочник.";
	Иначе
		ТекстДополнительный = "Элемент/Группа: " + ЭтаФорма.СправочникЭлементГруппа;
	КонецЕсли;
	
	ТекстВопроса = ТСправочникПояснениеДействия + "
	|Произвести выборку данных по " + ТекстДополнительный + " ?
	|";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 100, КодВозвратаДиалога.Нет, ЗаголовокВопроса, КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриПоискеВСправочнике(Ответ, ТекстДополнительный);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПоискеВСправочнике"", ЭтотОбъект, ТекстДополнительный)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПоискеВСправочнике(Ответ, ТекстДополнительный) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится выборка данных.
	|" + ТекстДополнительный);
	
	Если ЭтаФорма.СправочникДействие = "НеиспользуемыеЭлементы_ПоискИУдаление" Тогда
		ТСправочникНайтиНеиспользуемыеЭлементыНаСервере(Объект.ОбъектБД);
	Иначе
		ТСправочникНайтиЭлементыНаСервере(Объект.ОбъектБД);
	КонецЕсли;
	
	Если Объект.ТСправочникСписок.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Для действия """ + ВРег(ЭтаФорма.СправочникСписокДействия.НайтиПоЗначению(ЭтаФорма.СправочникДействие)) + """
		|
		|ДАННЫЕ НЕ НАЙДЕНЫ.");
	КонецЕсли;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Сформировать список.
//
&НаСервере
Процедура ТСправочникНайтиНеиспользуемыеЭлементыНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	Объект.ТСправочникСписок.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Справочник.Ссылка
	|ИЗ
	|	" + Объект.ПолноеСтроковоеИмяТипа + " КАК Справочник
	|ГДЕ
	|	(НЕ Справочник.ПометкаУдаления)
	|	И (НЕ Справочник.Предопределенный)";
	
	Если  ЗначениеЗаполнено(ЭтаФорма.СправочникЭлементГруппа) Тогда
		
		Если мдОбъектаБД.Иерархический Тогда
			
			Если мдОбъектаБД.ВидИерархии = МетаДанные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	И (НЕ Справочник.ЭтоГруппа)
				|	И (Справочник.Ссылка В Иерархии (&ЭлементГруппа))";
				
				Запрос.УстановитьПараметр("ЭлементГруппа", ЭтаФорма.СправочникЭлементГруппа);
				
			ИначеЕсли мдОбъектаБД.Иерархический И мдОбъектаБД.ВидИерархии = МетаДанные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	И (Справочник.Ссылка В Иерархии (&ЭлементГруппа))";
				
				Запрос.УстановитьПараметр("ЭлементГруппа", ЭтаФорма.СправочникЭлементГруппа);
				
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|	И (Справочник.Ссылка = &ЭлементГруппа)";
			
			Запрос.УстановитьПараметр("ЭлементГруппа", ЭтаФорма.СправочникЭлементГруппа);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ТаблицаСсылокНайденныхЭлементов = НайтиПоСсылкам(МассивСсылок);
		ТаблицаСсылокНайденныхЭлементов.Свернуть("Ссылка");
		
		Запрос.Текст = Запрос.Текст + "
		|	И (НЕ Справочник.Ссылка В (&СписокИспользуемых))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("СписокИспользуемых", ТаблицаСсылокНайденныхЭлементов.ВыгрузитьКолонку("Ссылка"));
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ит = 0;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ЭтаФорма.СправочникДатаРанее) И ОбъектОбработка.GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(Выборка.Ссылка) > КонецДня(ЭтаФорма.СправочникДатаРанее) Тогда
					Продолжить;
				КонецЕсли;
			
				Родитель = Неопределено;
				Если мдОбъектаБД.Иерархический Тогда
					Родитель = Выборка.Ссылка.Родитель;
				КонецЕсли;
				
				Описание = Неопределено;
				Если ЭтаФорма.СправочникЕстьРеквизитОписание Тогда
					Описание = Выборка.Ссылка.Описание;
				КонецЕсли;
				
				Артикул = Неопределено;
				Если ЭтаФорма.СправочникЕстьРеквизитАртикул Тогда
					Артикул = Выборка.Ссылка.Артикул;
				КонецЕсли;
				
				ит = ит + 1;
				ТСправочникСписокСтрока = Объект.ТСправочникСписок.Добавить();
				ТСправочникДобавитьСтрокуНаСервере(ТСправочникСписокСтрока, ит, Выборка.Ссылка, Родитель, Описание, Артикул);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Сформировать список.
//
&НаСервере
Процедура ТСправочникНайтиЭлементыНаСервере(ОбъектБД)
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	Объект.ТСправочникСписок.Очистить();
	
	ит = 0;
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.СправочникЭлементГруппа) Тогда
		
		Выборка = Справочники[мдОбъектаБД.Имя].Выбрать();	// ВЕСЬ Справочник.
		
	Иначе
		
		Описание = Неопределено;
		Если ЭтаФорма.СправочникЕстьРеквизитОписание Тогда
			Описание = Объект.ОбъектБД.Описание;
		КонецЕсли;
		
		Артикул = Неопределено;
		Если ЭтаФорма.СправочникЕстьРеквизитАртикул Тогда
			Артикул = Объект.ОбъектБД.Артикул;
		КонецЕсли;
		
		Если мдОбъектаБД.Иерархический Тогда
			
			Если (мдОбъектаБД.ВидИерархии = МетаДанные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов И ЭтаФорма.СправочникЭлементГруппа.ЭтоГруппа) Тогда
				
				Выборка = Справочники[мдОбъектаБД.Имя].ВыбратьИерархически(ЭтаФорма.СправочникЭлементГруппа);
				
			ИначеЕсли мдОбъектаБД.ВидИерархии = МетаДанные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
				
				ит = 1;
				ТСправочникСписокСтрока = Объект.ТСправочникСписок.Добавить();
				ТСправочникДобавитьСтрокуНаСервере(ТСправочникСписокСтрока, 1, ЭтаФорма.СправочникЭлементГруппа, ЭтаФорма.СправочникЭлементГруппа.Родитель, Описание, Артикул);
				
				Выборка = Справочники[мдОбъектаБД.Имя].ВыбратьИерархически(ЭтаФорма.СправочникЭлементГруппа);
				
			Иначе	// Одиночный элемент (не группа) при ИерархияГруппИЭлементов.
				
				ит = 1;
				ТСправочникСписокСтрока = Объект.ТСправочникСписок.Добавить();
				ТСправочникДобавитьСтрокуНаСервере(ТСправочникСписокСтрока, 1, ЭтаФорма.СправочникЭлементГруппа, ЭтаФорма.СправочникЭлементГруппа.Родитель, Описание, Артикул);
				Возврат;
				
			КонецЕсли;
			
		Иначе		// Неиерархический справочник.
			
			ит = 1;
			ТСправочникСписокСтрока = Объект.ТСправочникСписок.Добавить();
			ТСправочникДобавитьСтрокуНаСервере(ТСправочникСписокСтрока, 1, ЭтаФорма.СправочникЭлементГруппа, Неопределено, Описание, Артикул);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Пока Выборка.Следующий()  Цикл
		
		Если Выборка.Ссылка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель = Неопределено;
		Если мдОбъектаБД.Иерархический Тогда
			Родитель = Выборка.Ссылка.Родитель;
		КонецЕсли;
		
		Описание = Неопределено;
		Если ЭтаФорма.СправочникЕстьРеквизитОписание Тогда
			Описание = Выборка.Ссылка.Описание;
		КонецЕсли;
		
		Артикул = Неопределено;
		Если ЭтаФорма.СправочникЕстьРеквизитАртикул Тогда
			Артикул = Выборка.Ссылка.Артикул;
		КонецЕсли;
		
		ит = ит + 1;
		ТСправочникСписокСтрока = Объект.ТСправочникСписок.Добавить();
		ТСправочникДобавитьСтрокуНаСервере(ТСправочникСписокСтрока, ит, Выборка.Ссылка, Родитель, Описание, Артикул);
		
	КонецЦикла;
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Добавить строку в ТСправочникСписок.
//
&НаСервере
Процедура ТСправочникДобавитьСтрокуНаСервере(ТСправочникСписокСтрока, ит, Ссылка, Родитель, Описание, Артикул)
	
	ТСправочникСписокСтрока.НПП = ит;
	ТСправочникСписокСтрока.Элемент = Строка(Ссылка);
	ТСправочникСписокСтрока.Ссылка = Ссылка;
	Если ЭтаФорма.СправочникДействие = "Наименования_ПоОКОПФ" Тогда
		ТСправочникСписокСтрока.РеквизитСтароеЗначение = ОбъектБДПолучитьЗначениеРеквизитаОбъекта("Наименование", Ссылка);
	Иначе
		ТСправочникСписокСтрока.РеквизитСтароеЗначение = ОбъектБДПолучитьЗначениеРеквизитаОбъекта(ЭтаФорма.СправочникИзменяемыйРеквизит, Ссылка);
	КонецЕсли;
	ТСправочникСписокСтрока.Родитель= Строка(Родитель);
	ТСправочникСписокСтрока.Описание= Описание;
	ТСправочникСписокСтрока.Артикул = Артикул;
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Установить флажки у всех элементов.
//
&НаКлиенте
Процедура ТСправочникУстановитьФлажки(Команда)
		
	Состояние("Подождите. Производится пометка данных ...");

	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Истина, "ТСправочникСписок")
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Установить флажки у элементов с ПУСТЫМ обрабатываемым реквизитом.
//
&НаКлиенте
Процедура ТСправочникУстановитьФлажкиНеЗаполненных(Команда)
	
	Состояние("Подождите. Производится пометка данных ...");
	
	ОграничениеТипаСтрока = Строка(Объект.СтруктураРеквизиты[ЭтаФорма.СправочникИзменяемыйРеквизит]);
	
	Для Каждого СтрокаСписка ИЗ Объект.ТСправочникСписок Цикл
		Попытка
			Если ОграничениеТипаСтрока = "Строка" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаСписка.РеквизитСтароеЗначение) Тогда	// Пустое значение.
					СтрокаСписка["Включено"] = Истина;
				КонецЕсли;
			ИначеЕсли ОграничениеТипаСтрока = "Число" Тогда
				Если СтрокаСписка.РеквизитСтароеЗначение = 0 Тогда						// = 0.
					СтрокаСписка["Включено"] = Истина;
				КонецЕсли;
			ИначеЕсли ОграничениеТипаСтрока = "Булево" Тогда
				Если НЕ СтрокаСписка.РеквизитСтароеЗначение Тогда						// = Ложь.
					СтрокаСписка["Включено"] = Истина;
				КонецЕсли;
			ИначеЕсли ОграничениеТипаСтрока = "Дата" Тогда
				Если СтрокаСписка.РеквизитСтароеЗначение = Дата("00010101000000") Тогда	// = Дата неопределена.
					СтрокаСписка["Включено"] = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаСписка.РеквизитСтароеЗначение) Тогда	// Пустое значение.
					СтрокаСписка["Включено"] = Истина;
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Снять флажки у всех элементов.
//
&НаКлиенте
Процедура ТСправочникСнятьФлажки(Команда)
	
	Состояние("Подождите. Производится снятие пометки данных ...");
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Ложь, "ТСправочникСписок")
	
КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Очистка списка.
//
&НаКлиенте
Процедура ТСправочникОчистить(Команда)
	
	Объект.ТСправочникСписок.Очистить();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);

КонецПроцедуры

// Вкладка "Справочник (Дополнительно)". Задать вопрос о Выполнении обработки элементов справочника.
//
&НаКлиенте
Процедура ТСправочникВыполнить(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ЗаголовокВопроса = ВРег(ЭтаФорма.СправочникСписокДействия.НайтиПоЗначению(ЭтаФорма.СправочникДействие));
	
	СтруктураВозврат = ТСправочникПолучитьПояснениеДействия();
	
	ТСправочникПояснениеДействия = СтруктураВозврат.ТСправочникПояснениеДействия;
	ТСправочникПараметрыДействия = СтруктураВозврат.ТСправочникПараметрыДействия;
	
	ТекстВопроса = ТСправочникПараметрыДействия.ТекстВопроса;
	
	Параметр = Новый Структура;
	Параметр.Вставить("ЗаголовокВопроса", ЗаголовокВопроса);
	Параметр.Вставить("Действие"		, ТСправочникПараметрыДействия.Действие);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 100, КодВозвратаДиалога.Нет, ЗаголовокВопроса, КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаСправочникВыполнить(Ответ, Параметр);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаСправочникВыполнить"", ЭтотОбъект, Параметр)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаСправочникВыполнить(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;

	Состояние("Подождите. Производится обработка данных ...
	|" + Параметр.ЗаголовокВопроса);
	
	ВремяНачала = ВремяВМиллисекундах();
	
	РезультатВыполнения = ТСправочникВыполнитьОбработкуСправочникаНаСервере(Параметр.Действие);
	
	ВремяОкончания = ВремяВМиллисекундах();
	ЭтаФорма.Справочник_Время = "" + (ВремяОкончания - ВремяНачала)/1000 + " с";
	
	Если РезультатВыполнения.Отказ Тогда
		
		Предупреждение = "Обработка завершена аварийно. Изменено: " + РезультатВыполнения.Изменено + " из " + РезультатВыполнения.Всего + " элементов.
		|
		|Элемент, на котором произошел отказ: 
		|" + РезультатВыполнения.ЭлементОтказ + ".";
		
		Если Объект.ВыполнятьВТранзакции Тогда
			Предупреждение = Предупреждение + "
			|
			|Транзакция отменена.
			|Все произведенные изменения в информационной базе не сохранены.";
		Иначе	
			Предупреждение = Предупреждение + "
			|
			|Произведенные изменения этого элемента в информационной базе не сохранены.";
		КонецЕсли;
		
		ПредупреждениеСообщение(, Предупреждение);
	
	Иначе
		
		Предупреждение = "Обработка завершена. Изменено: " + РезультатВыполнения.Изменено + " из " + РезультатВыполнения.Всего + " элементов.";
		
		Если РезультатВыполнения.Изменено < РезультатВыполнения.Всего Тогда
			Предупреждение = Предупреждение + "
			|
			|Обработаны не все выбранные элементы.
			|
			|Возможные причины такого результата:
			|
			|1. Возможно не выбраны элементы таблицы для обработки. Графа ""+/-"" (Включено).
			|Никакие изменения элементов не произведены.
			|
			|2. Значение ""ДоИзменения"" равно Значению ""ПослеИзменения"". 
			|Запись таких изменений не производится.
			|
			|3. Ключевой(ые) реквизит(ы) не соответствуют условиям выполненной обработки. 
			|Такие элементы не обрабатываются и, следовательно, не записываются.";
		КонецЕсли;
		
		ПредупреждениеСообщение(, Предупреждение);
		
	КонецЕсли;
	
	ОбъектБДПриИзменении("ОбработкаСправочника");
	
	ЭтаФорма.ОтобразитьИзменениеДанных(Объект.ОбъектБД, ВидИзмененияДанных.Изменение);
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры // ывыв()

// МО: Вкладка "Справочник (Дополнительно)". Переход в МодульОбъекта.
//
&НаСервере
Функция ТСправочникВыполнитьОбработкуСправочникаНаСервере(Действие)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТСправочникСписок = РеквизитФормыВЗначение("Объект.ТСправочникСписок");
	
	хРезультат = Новый Структура;
	
	хРезультат = ОбъектОбработка.ТСправочникВыполнитьОбработкуСправочникаНаСервере(ТСправочникСписок, ЭтаФорма.СправочникИзменяемыйРеквизит, ЭтаФорма.СправочникНовоеЗначениеРеквизита, Действие);
	
	ЗначениеВРеквизитФормы(хРезультат.ТСправочникСписок, "Объект.ТСправочникСписок");
	
	хРезультат.Удалить("ТСправочникСписок");
	
	Возврат хРезультат;

КонецФункции

// Вкладка "Справочник (Дополнительно)" Открыть элемент из списка (ТСправочникСписок).
//
&НаКлиенте
Процедура ТСправочникЭлементОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОбъектаМодальноИлиНемодальноВРежимеБлокировкиВладельца(Элемент.Родитель.ТекущиеДанные.Ссылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСправочникОчиститьПараметры()
	
	Объект.БлокируемыеРеквизиты = Неопределено;
	Элементы.СправочникИзменяемыйРеквизит.ЦветТекста 	= Объект.ЦветТекстаПоля;
	Элементы.СправочникИзменяемыйРеквизит.ЦветФона 		= Объект.ЦветФонаПоля;
	
	Элементы.кнТСправочникУстановитьФлажкиНеЗаполненных.Видимость = Ложь;
	
	ЭтаФорма.СправочникДействие					= Неопределено;
	ЭтаФорма.СправочникЭлементГруппа			= Неопределено;
	ЭтаФорма.СправочникИзменяемыйРеквизит 		= Неопределено;
	ЭтаФорма.СправочникНовоеЗначениеРеквизита 	= Неопределено;
	
	ЭтаФорма.СправочникДатаРанее = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО)".
//

// Вкладка "Справочник (Дополнительно)" Список возможных действий (Наименования обработок).
//
&НаСервере
Процедура ТДокументСформироватьСписокДействийСДокументом(ОбъектБД)
	
	Если НЕ Объект.ТипОбъектаБД = ИмяТипаДокументы() Тогда
		ЭтаФорма.ДокументСписокДействия.Очистить();
		Возврат;
	КонецЕсли;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	ЭтаФорма.ДокументСписокДействия.Очистить();
	
	ЭтаФорма.ДокументСписокДействия.Добавить("Документы_Перенумерация"	, "Перенумерация документов");
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)" Кнопка FAQ.
//
&НаКлиенте
Процедура ТДокументПеренумерацияFAQ(Команда)
	
	ЭтаФорма.ДокументДействие = "Документы_Перенумерация";

	СтруктураВозврат = ТДокументПолучитьПояснениеДействияПеренумерация();
	
	ТДокументПояснениеДействия = СтруктураВозврат.ТДокументПояснениеДействия;
	ТДокументПараметрыДействия = СтруктураВозврат.ТДокументПараметрыДействия;
	
	Если ЗначениеЗаполнено(ТДокументПояснениеДействия) Тогда
		ПредупреждениеСообщение(, ТДокументПояснениеДействия, , ВРег(ЭтаФорма.ДокументСписокДействия.НайтиПоЗначению(ЭтаФорма.ДокументДействие)));
	Иначе
		ПредупреждениеСообщение(, "Получите ""начальные параметры"" и повторите просмотр подсказки.");
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)" Описание возможных действий.
//
&НаКлиенте
Функция ТДокументПолучитьПояснениеДействияПеренумерация()
	
	СтруктураВозврат = Новый Структура;
	
	ТДокументПояснениеДействия = "";
	ТДокументПараметрыДействия = Новый Структура;
	
	Если ЭтаФорма.ДокументДействие = "Документы_Перенумерация" Тогда
		
		ТДокументПояснениеДействия = "Перед применением на РАБОЧЕЙ БД произвести обработку ТЕСТОВОЙ БД.
		|==============================================================================================================
		|Перенумерация возможна при выбранном основном объекте-документе.
		|По основному объекту производится определение параметров перенумерации.
		|
		|Принцип действия:
		|
		|Перенумерация документов возможна за произвольный период.
		|Рекомендуется производить перенумерацию в пределах периодичности документов определенного вида.
		|
		|Перенумеровываются документы, которые помечены флажком ""+/-"" - ""Включено"".
		|
		|Фильтрация документов:
		|
		|1. По Организации + Префикс - ПрефиксИсключение;
		|2. По Префикс - ПрефиксИсключение (если реквизит ""Организация"" отсутствует в документе).
		|
		|Пример ""ПрефиксИсключение"": АА;ББ;ВВ (разделены "";"" - точка с запятой без пробелов), 
		|где АА, ББ, ВВ - Префиксы (или их части) документов, которые необходимо исключить из дальнейшей обработки.
		|
		|ВАЖНО! В ПрефиксеИсключение недопустимы пробелы, если они не являются частью префикса. 
		|(Пробелы считаются значащими символами)
		|
		|==============================================================================================================
		|";
		
		ТДокументПараметрыДействия.Вставить("Действие"		, ЭтаФорма.ДокументДействие);
		ТДокументПараметрыДействия.Вставить("Заголовок"		, "Перенумерация документов");
		ТДокументПараметрыДействия.Вставить("ТекстВопроса"	, ТДокументПояснениеДействия + "Подтвердите перенумерацию документов");
		ТДокументПараметрыДействия.Вставить("ТекстСостояние", "Подождите немного. Происходит перенумерация документов.");
		
	КонецЕсли;
	
	СтруктураВозврат.Вставить("ТДокументПояснениеДействия", ТДокументПояснениеДействия);
	СтруктураВозврат.Вставить("ТДокументПараметрыДействия", ТДокументПараметрыДействия);
	
	Возврат СтруктураВозврат;
	
КонецФункции

// Вкладка "Документ (Дополнительно)". Кнопка ПолучитьНачальныеПараметрыПеренумерации.
//
&НаКлиенте
Процедура ТДокументПолучитьНачальныеПараметрыПеренумерации(Команда)
	
	ТДокументСформироватьСписокДействийСДокументом(Объект.ОбъектБД);

	ЭтаФорма.ДокументДействие = "Документы_Перенумерация";	// Пока единственное действие.
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ПредупреждениеСообщение(, "Не выбран Основной объект-Документ.
		|
		|Перенумерация производится только при выбранном типе документов.
		|");
		Возврат;
	Иначе
		ТДокументПолучитьНачальныеПараметрыПеренумерацииНаСервере(Объект.ОбъектБД);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДокументПрефиксОрганизация) Тогда
		// Нет реквизита "Организация".
		ПредупреждениеСообщение(, "" + Объект.ПолноеСтроковоеИмяТипа + "
		|Реквизит ""Организация"" отсутствует.
		|Рекомендуется в качестве фильтра использовать ""ПрефиксИсключение"".");
	КонецЕсли;
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Установка начальных Параметров обработки документов.
//
&НаСервере
Процедура ТДокументПолучитьНачальныеПараметрыПеренумерацииНаСервере(ОбъектБД)
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	УстановитьЗначениеПараметраНаВкладке("ДокументПрефиксОрганизация", "Организация", "Организации", Объект.ЕстьСправочникОрганизации);

	Если ТипЗнч(ОбъектБД.Номер) = Тип("Строка") Тогда
		ЭтаФорма.ДокументПрефиксТекущий = УдалитьЦифрыВСтроке(ОбъектБД.Номер);
		ЭтаФорма.ДокументПрефиксНовый = "";
		ЭтаФорма.ДокументНомерНач = 0;
	КонецЕсли;
	
	ЭтаФорма.ДокументПериодичность = мдОбъектаБД.ПериодичностьНомера;
	
	Если мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		ЭтаФорма.ДокументПериод.ДатаНачала = НачалоГода(ОбъектБД.Дата);
		ЭтаФорма.ДокументПериод.ДатаОкончания = ?(КонецГода(ОбъектБД.Дата) < КонецДня(ТекущаяДата()), КонецГода(ОбъектБД.Дата), КонецДня(ТекущаяДата()));
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		ЭтаФорма.ДокументПериод.ДатаНачала = НачалоКвартала(ОбъектБД.Дата);
		ЭтаФорма.ДокументПериод.ДатаОкончания = ?(КонецКвартала(ОбъектБД.Дата) < КонецДня(ТекущаяДата()), КонецКвартала(ОбъектБД.Дата), КонецДня(ТекущаяДата()));
	ИначеЕсли мдОбъектаБД.ПериодичностьНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		ЭтаФорма.ДокументПериод.ДатаНачала = НачалоМесяца(ОбъектБД.Дата);
		ЭтаФорма.ДокументПериод.ДатаОкончания = ?(КонецМесяца(ОбъектБД.Дата) < КонецДня(ТекущаяДата()), КонецМесяца(ОбъектБД.Дата), КонецДня(ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Реквизит Префикс новый.
//
&НаКлиенте
Процедура ТДокументПрефиксНовыйПриИзменении(Элемент)
	
	Если ВРег(СокрЛП(ЭтаФорма.ДокументПрефиксНовый)) = ВРег(СокрЛП(ЭтаФорма.ДокументПрефиксТекущий)) Тогда
		ПредупреждениеСообщение(, "Новый Префикс = Старому. 
		|Рекомендуется Префикс, не используемый при штатной нумерации документов.");
	КонецЕсли;
	
	ЭтаФорма.ДокументНомерНач = ТДокументПрефиксНомерНовыйНаСервере(Объект.ОбъектБД) + 1;
	
КонецПроцедуры

// МО: Вкладка "Документ дополнительно". Получить начальное значение Номера.
//
&НаСервере
Функция ТДокументПрефиксНомерНовыйНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ТДокументПрефиксНомерНовыйНаСервере(ОбъектБД, ЭтаФорма.ДокументПрефиксНовый, ЭтаФорма.ДокументПериод.ДатаНачала, ЭтаФорма.ДокументПериод.ДатаОкончания);
	
КонецФункции

// Вкладка "Документ (Дополнительно)".  Поле Номер начальный. Проверить значение.
//
&НаКлиенте
Процедура ТДокументНомерНачПриИзменении(Элемент)
	
	НомерНач1 = ТДокументПрефиксНомерНовыйНаСервере(Объект.ОбъектБД)+1;
	НомерСтрокой1 = СокрЛП(СтрЗаменить(Формат(НомерНач1,"ЧЦ=10; ЧВН="), Символы.НПП, ""));
	НомерСтрокой1 = ""+ЭтаФорма.ДокументПрефиксНовый + Сред(НомерСтрокой1,СтрДлина(ЭтаФорма.ДокументПрефиксНовый));
	
	НомерСтрокой = СокрЛП(СтрЗаменить(Формат(ЭтаФорма.ДокументНомерНач,"ЧЦ=10; ЧВН="), Символы.НПП, ""));
	НомерСтрокой = ""+ЭтаФорма.ДокументПрефиксНовый + Сред(НомерСтрокой,СтрДлина(ЭтаФорма.ДокументПрефиксНовый));
	
	Если ЭтаФорма.ДокументНомерНач < НомерНач1 Тогда
		ПредупреждениеСообщение(, "Указанный начальный № " + НомерСтрокой + " некорректен, 
		|т.к. существует документ с таким же или большим Номером.");
		ЭтаФорма.ДокументНомерНач = НомерНач1;
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Найти Документы.
//
&НаКлиенте
Процедура ТДокументНайтиДокументы(Команда)
	
	ЭтаФорма.ДокументПрефиксНовый = Неопределено;
	ЭтаФорма.ДокументНомерНач = 0;
	
	ФормаВывестиВСостояние(, , "Подождите. Производится отбор документов для последующей перенумерации ...");
	
	ТДокументНайтиДокументыНаСервере(Объект.ОбъектБД);
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
	Состояние("Поиск документов завершен.");
	
КонецПроцедуры

// МО: Вкладка "Документ (Дополнительно)". Найти Документы.
//
&НаСервере
Процедура ТДокументНайтиДокументыНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	тзДокСписок = ОбъектОбработка.ТДокументНайтиДокументыНаСервере(ОбъектБД, ЭтаФорма.ДокументПрефиксОрганизация, ЭтаФорма.ДокументПрефиксТекущий, ЭтаФорма.ДокументПрефиксИсключение, ЭтаФорма.ДокументПериод.ДатаНачала, ЭтаФорма.ДокументПериод.ДатаОкончания);
	
	ЗначениеВРеквизитФормы(тзДокСписок, "Объект.ТДокументСписок");
	
КонецПроцедуры

// Вкладка "Документ дополнительно". Очистить таблицу найденных документов.
//
&НаКлиенте
Процедура ТДокументПеренумерацияОчистить(Команда)

	Объект.ТДокументСписок.Очистить();
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);

КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Перенумеровать документы.
//
&НаКлиенте
Процедура ТДокументПеренумероватьДокументы(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если Объект.ТДокументСписок.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Список документов пуст.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДокументПрефиксНовый) Тогда
		ПредупреждениеСообщение(, "Новый Префикс не определен.");
		Возврат;
	Иначе	
		Если ВРег(СокрЛП(ЭтаФорма.ДокументПрефиксНовый)) = ВРег(СокрЛП(ЭтаФорма.ДокументПрефиксТекущий)) Тогда
			ПредупреждениеСообщение(, "Новый Префикс = Старому. 
			|Рекомендуется Префикс, не используемый при штатной нумерации документов.");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтаФорма.ДокументНомерНач = 0 Тогда
		ПредупреждениеСообщение(, "Начальный Номер не определен.");
		Возврат;
	Иначе
		
		ДокументСНомеромНач = ТДокументПроверитьСуществованиеДокументаСНомеромНач(Объект.ОбъектБД, ЭтаФорма.ДокументНомерНач, ЭтаФорма.ДокументПрефиксНовый, ЭтаФорма.ДокументПериод.ДатаОкончания);
		
		Если НЕ ДокументСНомеромНач = Неопределено Тогда
			НомерСтрокой = СокрЛП(СтрЗаменить(Формат(ЭтаФорма.ДокументНомерНач,"ЧЦ=10; ЧВН="), Символы.НПП, ""));
			НомерСтрокой = ""+ЭтаФорма.ДокументПрефиксНовый+Сред(НомерСтрокой,СтрДлина(ЭтаФорма.ДокументПрефиксНовый));
			ПредупреждениеСообщение(, "Документ с № " + НомерСтрокой + " существует: " + ДокументСНомеромНач + "
			|Обработка прервана.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите/Отмените перенумерацию документов
	|";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПЕРЕНУМЕРАЦИЯ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриПеренумерацииДокументов(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПеренумерацииДокументов"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПеренумерацииДокументов(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВывестиВСостояние(, , "Подождите. Производится перенумерация документов ...");
	
	ОчиститьСообщения();
	
	ИзменениеОбъектаБД = ТДокументПеренумероватьДокументыНаСервере(Объект.ОбъектБД, ЭтаФорма.ДокументПериод.ДатаНачала, ЭтаФорма.ДокументПериод.ДатаОкончания, ЭтаФорма.ДокументПрефиксНовый, ЭтаФорма.ДокументНомерНач);
	
	ПредупреждениеСообщение(, "Обработка завершена!");
	
	Если ИзменениеОбъектаБД Тогда
		Д1 = ЭтаФорма.ДокументПериод.ДатаНачала;
		Д2 = ЭтаФорма.ДокументПериод.ДатаОкончания;
		ОбъектБДПриИзменении("ТДокументПроизвестиЗамену");
		ЭтаФорма.ДокументПериод.ДатаНачала = Д1;
		ЭтаФорма.ДокументПериод.ДатаОкончания = Д2;
		ЭтаФорма.ОтобразитьИзменениеДанных(Объект.ОбъектБД, ВидИзмененияДанных.Изменение);
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТДокументСписок;
	
КонецПроцедуры

// МО: Вкладка "Документ (Дополнительно)". Проверка существования документа с НомерНач.
//
&НаСервере
Функция ТДокументПроверитьСуществованиеДокументаСНомеромНач(ОбъектБД, НомерНач, ПрефиксНовый, ДатаКон)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ТДокументПроверитьСуществованиеДокументаСНомеромНач(ОбъектБД, НомерНач, ПрефиксНовый, ДатаКон);
	
КонецФункции

// МО: Вкладка "Документ (Дополнительно)". Перенумеровать документы.
//
&НаСервере
Функция ТДокументПеренумероватьДокументыНаСервере(ОбъектБД, ДатаНач, ДатаКон, ПрефиксНовый, НомерНач)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	хРезультат = ОбъектОбработка.ТДокументПеренумероватьДокументыНаСервере(ОбъектБД, ДатаНач, ДатаКон, ПрефиксНовый, НомерНач);
	ИзменениеОбъектаБД = хРезультат.ИзменениеОбъектаБД;
	
	ЗначениеВРеквизитФормы(хРезультат.Таблица, "Объект.ТДокументСписок");
	
	Возврат ИзменениеОбъектаБД;
	
КонецФункции

// Вкладка "Документ (Дополнительно)". Получить ДокументСсылка по данным ячейки таблицы.
//
&НаСервере
Функция ТДокументПолучитьДокументПоДаннымТаблицы(ИскомоеЗначение)
	
	ТабТмп = РеквизитФормыВЗначение("Объект.ТДокументСписок");
	
	Возврат ТабТмп.Найти(ИскомоеЗначение, "ПредставлениеТек").ДокументТек;
	
КонецФункции

// Вкладка "Документ (Дополнительно)". Установить Флажки в списке Ссылок на Документ.
//
&НаКлиенте
Процедура ТДокументПеренумерацияУстановитьФлажки(Команда)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Истина, "ТДокументСписок")

КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Снять Флажки в списке Ссылок на Документ.
//
&НаКлиенте
Процедура ТДокументПеренумерацияСнятьФлажки(Команда)
	
	ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Ложь, "ТДокументСписок")
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Открыть текущий документ.
//
&НаКлиенте
Процедура ТДокументОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТДокументПредставление" Тогда
			
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОбъектаМодальноИлиНемодальноВРежимеБлокировкиВладельца(Элемент.ТекущиеДанные.ДокументТек, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТДокументПеренумерацияОчиститьПараметры()
	
	ЭтаФорма.ДокументПрефиксОрганизация 	= Неопределено;
	ЭтаФорма.ДокументПериод.ДатаНачала 		= Дата("00010101");
	ЭтаФорма.ДокументПериод.ДатаОкончания 	= Дата("00010101");
	ЭтаФорма.ДокументПрефиксТекущий 		= "";
	ЭтаФорма.ДокументПрефиксИсключение		= "";
	ЭтаФорма.ДокументПрефиксНовый 			= "";
	ЭтаФорма.ДокументНомерНач 				= 0;
	ЭтаФорма.ДокументПериодичность			= Неопределено;
	
	ЭтаФорма.ДокументПроведениеПериод.ДатаНачала	= Дата("00010101");
	ЭтаФорма.ДокументПроведениеПериод.ДатаОкончания	= Дата("00010101");
	ЭтаФорма.ДокументПроведениеОрганизация 	= Неопределено;
	ЭтаФорма.ДокументПроводить				= Неопределено;
	ЭтаФорма.ДокументПроведениеОжидатьСнятиеБлокировки		= Ложь;
	ЭтаФорма.ДокументПроведениеВремяОжиданияСнятияБлокировки= 0;
	Элементы.ДокументПроведениеВремяОжиданияСнятияБлокировки.ТолькоПросмотр = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ДОКУМЕНТ (ДОПОЛНИТЕЛЬНО) ПРОВЕДЕНИЕ".
//

// Вкладка "Документ (Дополнительно)". Кнопка ПолучитьНачальныеПараметрыПроведения.
//
&НаКлиенте
Процедура ТДокументПолучитьНачальныеПараметрыПроведения(Команда)
	
	Если НЕ Объект.МонопольныйРежим Тогда
		
		ЭтаФорма.ДокументПроведениеОжидатьСнятиеБлокировки = Истина;
		ДокументПроведениеОжидатьСнятиеБлокировкиПриИзменении(Команда);
		
	КонецЕсли;
	
	ЭтаФорма.ДокументПроведениеПериод.ДатаНачала 	= НачалоМесяца(ТекущаяДата());
	ЭтаФорма.ДокументПроведениеПериод.ДатаОкончания = КонецДня(ТекущаяДата());
	Этаформа.ДокументПроводить	= "Проведенные";
	
	УстановитьЗначениеПараметраНаВкладке("ДокументПроведениеОрганизация", "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	
	ТДокументПолучитьНачальныеПараметрыПроведенияНаСервере(ЭтаФорма.ДокументПроведениеОрганизация);
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);

КонецПроцедуры

&НаКлиенте
Процедура ТДокументПроведениеFAQ(Команда)
	
	ПредупреждениеСообщение(, "Проведение документов рекомендуется выполнять в монопольном режиме.
	|
	|Для установки монопольного режима воспользуйтесь формой ""Настройка"" обработки:
	|гиперссылка ""Многопользовательский режим"" или кнопка основного меню ""Настройка"".
	|
	|При немонопольном режиме проведения рекомендуется включить вывод сообщений.
	|Кнопка основного меню ""Настройка"", иначе вывод сообщений только о непроведенных.
	|
	|Перед проведением документов необходимо также проверить даты запрета изменений
	|Сервис - Даты запрета изменений данных и при необходимости скорректировать.");
	
КонецПроцедуры

// МО: Вкладка "Документ (Дополнительно)". Кнопка ПолучитьНачальныеПараметрыПроведения.
//
&НаСервере
Процедура ТДокументПолучитьНачальныеПараметрыПроведенияНаСервере(ДокументПроведениеОрганизация)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаСписокВидовДокументов = РеквизитФормыВЗначение("ДокументПроведениеТСписокВидов");
	
	ТаблицаСписокВидовДокументов = ОбъектОбработка.ТДокументПроведениеЗаполнитьСписокВидовДокументов(ТаблицаСписокВидовДокументов, ДокументПроведениеОрганизация);
	
	ЗначениеВРеквизитФормы(ТаблицаСписокВидовДокументов, "ДокументПроведениеТСписокВидов");
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Действия при блокированном документе..
//
&НаКлиенте
Процедура ДокументПроведениеОжидатьСнятиеБлокировкиПриИзменении(Элемент)
	
	Если ЭтаФорма.ДокументПроведениеОжидатьСнятиеБлокировки Тогда
		Элементы.ДокументПроведениеВремяОжиданияСнятияБлокировки.ТолькоПросмотр = Ложь;
		ЭтаФорма.ДокументПроведениеВремяОжиданияСнятияБлокировки = 1;
	Иначе
		Элементы.ДокументПроведениеВремяОжиданияСнятияБлокировки.ТолькоПросмотр = Истина;
		ЭтаФорма.ДокументПроведениеВремяОжиданияСнятияБлокировки = 0;
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Фильтрация списка видов документов.
//
&НаКлиенте
Процедура ДокументПроведениеОрганизацияПриИзменении(Элемент)
	
	ТДокументПолучитьНачальныеПараметрыПроведенияНаСервере(ЭтаФорма.ДокументПроведениеОрганизация);
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Кнопка Установить флажки в списке видов документов.
//
&НаКлиенте
Процедура ТДокументПроведениеУстановитьФлажки(Команда)
	
	ТДокументПроведениеУстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Кнопка Снять флажки в списке видов документов.
//
&НаКлиенте
Процедура ТДокументПроведениеСнятьФлажки(Команда)
	
	ТДокументПроведениеУстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Кнопка Установить/Снять флажки в списке видов документов.
//
&НаКлиенте
Процедура ТДокументПроведениеУстановитьСнятьФлажки(Флажок)
	
	Для Каждого ВидДокумента ИЗ ЭтаФорма.ДокументПроведениеТСписокВидов Цикл
		Если ВидДокумента.Значение = "ЧекККМ" ИЛИ ВидДокумента.Значение = "ЧекККМВозврат" Тогда
			ВидДокумента.Пометка = Ложь;
		Иначе
			ВидДокумента.Пометка = Флажок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Кнопка Инвентировать флажки в списке видов документов.
//
&НаКлиенте
Процедура ТДокументПроведениеИнвертироватьФлажки(Команда)
	
	Для Каждого ВидДокумента ИЗ ЭтаФорма.ДокументПроведениеТСписокВидов Цикл
		Если ВидДокумента.Значение = "ЧекККМ" ИЛИ ВидДокумента.Значение = "ЧекККМВозврат" Тогда
			ВидДокумента.Пометка = Ложь;
		Иначе
			ВидДокумента.Пометка = НЕ ВидДокумента.Пометка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Провести документы по отмеченным в списке видов документов.
//
&НаКлиенте
Процедура ТДокументПровести(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ЭтаФорма.ДокументПроведениеПериод.ДатаНачала = Дата("00010101000000") Тогда
		ПредупреждениеСообщение(, "Незаполнена начальная дата.
		|Проведение документов не выполнено.");
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ДокументПроведениеПериод.ДатаОкончания = Дата("00010101000000") Тогда
		ПредупреждениеСообщение(, "Незаполнена конечная дата.
		|Проведение документов не выполнено.");
		Возврат;
	КонецЕсли;
	
	ДатаНачала = НачалоДня(ЭтаФорма.ДокументПроведениеПериод.ДатаНачала);
	ДатаОкончания = ?(ЭтаФорма.ДокументПроведениеПериод.ДатаОкончания = Дата("00010101000000"), КонецДня(ТекущаяДата()), КонецДня(ЭтаФорма.ДокументПроведениеПериод.ДатаОкончания));
	
	ТекстВопроса = "Параметры проведения:
	|
	|Дата Первого документа: " + ДатаНачала + "
	|Дата Последнего документа: " + ДатаОкончания + "
	|
	|Дополнительный фильтр: " + ?(ЗначениеЗаполнено(ЭтаФорма.ДокументПроведениеОрганизация), """Организация""" + " " + ЭтаФорма.ДокументПроведениеОрганизация, "Отсутствует") + "
	|" + ?(ЗначениеЗаполнено(ЭтаФорма.ДокументПроведениеОрганизация), "(только документы, имеющие реквизит ""Организация"")", "") + "
	|
	|Подтвердите проведение документов.";
	
	Параметр = Новый Структура;
	Параметр.Вставить("ДатаНачала"		, ДатаНачала);
	Параметр.Вставить("ДатаОкончания"	, ДатаОкончания);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриТДокументПровести(Ответ, Параметр);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриТДокументПровести"", ЭтотОбъект, Параметр)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриТДокументПровести(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВывестиВСостояние(, , "Подождите. Производится перепроведение документов ...");
	
	ОчиститьСообщения();
	
	КоличествоПроведенных = 0;
	ЕстьБлокированные = Ложь;
	
	ТДокументПровестиНаСервере(КоличествоПроведенных, ЕстьБлокированные, Параметр.ДатаНачала, Параметр.ДатаОкончания);
	
	ПредупреждениеСообщение(, "Количество проведенных документов: " + КоличествоПроведенных + "
	|" + ?(ЕстьБлокированные, "Есть блокированные документы.
	|Дополнительно:
	|В главном меню в подменю ""Сервис"" можно открыть список активных пользователей.", ""));
	
КонецПроцедуры
	
// МО: Вкладка "Документ (Дополнительно)". Провести документы по отмеченным в списке видов документов.
//
&НаСервере
Процедура ТДокументПровестиНаСервере(КоличествоПроведенных, ЕстьБлокированные, ДатаНачала, ДатаОкончания)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаСписокВидов = РеквизитФормыВЗначение("ДокументПроведениеТСписокВидов");
	
	ОбъектОбработка.ТДокументПровестиДокументыИзСпискаВыбранныхВидов(ДатаНачала, ДатаОкончания, ЭтаФорма.ДокументПроведениеОрганизация, ТаблицаСписокВидов, ЭтаФорма.ДокументПроводить, КоличествоПроведенных, ЭтаФорма.ДокументПроведениеОжидатьСнятиеБлокировки, ЭтаФорма.ДокументПроведениеВремяОжиданияСнятияБлокировки, ЕстьБлокированные);
	
	ЗначениеВРеквизитФормы(ТаблицаСписокВидов, "ДокументПроведениеТСписокВидов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". "ПЛАН ОБМЕНА (ДОПОЛНИТЕЛЬНО)".
//

&НаКлиенте
Процедура ПланОбменаПолучитьИнформациюОБДиУзлахРИБ(Команда)
	
	ОчиститьСообщения();
	
	ПланОбменаПолучитьИнформациюОБДиУзлахРИБНаСервере();
	
КонецПроцедуры

// МО:
//
&НаСервере
Процедура ПланОбменаПолучитьИнформациюОБДиУзлахРИБНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ЭтаФорма.БДвРИБ = ОбъектОбработка.ОбъектБДПолучитьПоложениеБДвРИБ(Объект.ОбъектБД);
	
	ЭтаФорма.ПланОбменаКомментарий = "";
	Если ЭтаФорма.БДвРИБ = "Центральная БД" Тогда
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "Центральная БД: Отключение/Установка Главного Узла в Центральной БД невозможно, т.к. БД сама является Главным Узлом.";
	Иначе
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "Периферийная БД: Для Отключения/Установки Главного Узла необходим монопольный доступ (Конфигуратор, сеансы - закрыты).";
	КонецЕсли;
	
	мдОбъектаБД = Объект.ОбъектБД.Метаданные();
	
	ЭтаФорма.ГлавныйУзел 	= ОбъектОбработка.ОбъектБДПолучитьГлавныйУзелВРИБ();
	ЭтаФорма.ТекущийУзел 	= Объект.ОбъектБД;
	
	Элементы.ГлавныйУзелПредыдущий.Доступность = Истина;
	
	ЕстьИзменения = ПланОбменаВывестиКомментарийОНаличииНеподтвержденныхИзменений(Объект.ОбъектБД);
	
	ПланОбменаПросмотрНеподтвержденныхИзмененийДоступность();
	
	ПланОбменаУдалитьРегистрациюИзмененийДоступность(ЕстьИзменения);
	
	ПланОбменаОтключитьГлавныйУзелДоступность(Объект.ГлавныйУзелПредыдущий);
	
	ПланОбменаУстановитьГлавныйУзелДоступность(Объект.ГлавныйУзелПредыдущий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаСообщитьОНеУстановленномГлавномУзле()
	
	Если НЕ ЭтаФорма.ПредупреждениеСделано И ЗначениеЗаполнено(Объект.ГлавныйУзелПредыдущий) Тогда
		
		ЭтаФорма.ПредупреждениеСделано = Истина;
		
		ПредупреждениеСообщение(, "ВНИМАНИЕ! 
		|Периферийная информационная база. ГлавныйУзел ОТКЛЮЧЕН.
		|
		|НЕОБХОДИМО Установить ГлавныйУзел.
		|
		|Страница ""Дополнительно"" - Вкладка ""План Обмена"".");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаСправка1СНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПредупреждениеСообщение(, "Справка 1С: ""О запрете загрузки данных"" 
	|
	|Запрет загрузки может быть установлен для данных, которые должны редактироваться только в одном узле БД, 
	|а также по правилам, которые следуют из требований обмена данными, а не из типовых бизнес-процессов организации.
	|
	|ВАЖНО: Если дата запрета загрузки данных установлена, то при попытке загрузить данные в БД до даты запрета 
	|все запрещенные для загрузки данные будут пропущены, сведения о них будут записаны в журнал регистрации, 
	|а разрешенные - загружены.
	|
	|(см. также ""Опции"" - ""Даты запрета ..."")");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаСпециальноеПояснениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПредупреждениеСообщение(, "Если в Периферийной БД (!!!) Главный Узел неопределен (реквизит ""Главный узел (ТЕКУЩИЙ)"" пуст)
	|и использовалась другая возможность для отключения Главного Узла в этой Периферийной БД, то:
	|
	|Для восстановления Главного Узла в этой Периферийной БД необходимо выбрать ""Главный Узел (ПРЕДЫДУЩИЙ)"" вручную.
	|(в перийной БД у Главного Узла значения: НомерПринятого # 0, НомерОтправленного # 0)
	|
	|Если использовалась другая возможность для отключения Главного Узла в этой Периферийной БД, то
	|до выбора Главного Узла значения ЦентральнаяБД/ПериферийнаяБД, ГлавныйУзел/ПолчиненныйУзел в Периферийной БД 
	|могут определяться неверно.");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаГлавныйУзелПредыдущийПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГлавныйУзелПредыдущий) Тогда
		ЭтаФорма.ГлавныйУзел = Неопределено;
		ОМОбновить(Элемент);
		ПланОбменаПолучитьИнформациюОБДиУзлахРИБНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПланОбменаПросмотрНеподтвержденныхИзмененийДоступность()
	
	Элементы.кнПланОбменаПросмотрНеподтвержденныхИзменений.Доступность			= Истина;
	Элементы.ПланОбменаОграничениеКоличестваПросматриваемыхИзменений.Доступность= Истина;
	ЭтаФорма.ПланОбменаОграничениеКоличестваПросматриваемыхИзменений			= 10;
	
КонецПроцедуры

&НаСервере
Процедура ПланОбменаУдалитьРегистрациюИзмененийДоступность(ЕстьИзменения)
	
	Элементы.кнПланОбменаУдалитьРегистрациюИзменений.Доступность = ЕстьИзменения;

КонецПроцедуры

&НаСервере
Процедура ПланОбменаОтключитьГлавныйУзелДоступность(Узел)
	
	Элементы.кнПланОбменаОтключитьГлавныйУзел.Доступность = ЭтаФорма.БДвРИБ = "Периферийная БД" И НЕ ЗначениеЗаполнено(Узел);
	
КонецПроцедуры

&НаСервере
Процедура ПланОбменаУстановитьГлавныйУзелДоступность(Узел)
	
	Элементы.кнПланОбменаУстановитьГлавныйУзел.Доступность			= ЭтаФорма.БДвРИБ = "Периферийная БД" И ЗначениеЗаполнено(Узел);
	ЭтаФорма.ПланОбменаКомментарийУстановкаГлавногоУзла				= "- НЕОБХОДИМО Установить ГлавныйУзел.";
	Элементы.ПланОбменаКомментарийУстановкаГлавногоУзла.Видимость	= ЭтаФорма.БДвРИБ = "Периферийная БД" И ЗначениеЗаполнено(Узел);
	Элементы.ПланОбменаКомментарийУстановкаГлавногоУзла.Доступность	= ЭтаФорма.БДвРИБ = "Периферийная БД" И ЗначениеЗаполнено(Узел);
	
КонецПроцедуры

&НаСервере
Функция ПланОбменаВывестиКомментарийОНаличииНеподтвержденныхИзменений(ОбъектБД)
	
	Если ПланОбменаЕстьИзмененияНаСервере(ОбъектБД) Тогда
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
		|=================================================================================================================
		|""" + ОбъектБД + """ есть неподтвержденные изменения. № Принятого/Отправленного: " + ОбъектБД.НомерПринятого + "/" + ОбъектБД.НомерОтправленного + " (см. ""Свойства Объекта"").";
		Возврат Истина;
	Иначе
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
		|=================================================================================================================
		|""" + ОбъектБД + """ нет неподтвержденных изменений. № Принятого/Отправленного: " + ОбъектБД.НомерПринятого + "/" + ОбъектБД.НомерОтправленного + " (см. ""Свойства Объекта"").";
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПланОбменаЕстьИзмененияНаСервере(ОбъектБД)
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	ИмяПланаОбмена = мдОбъектаБД.Имя;
	
	СтруктураВыборки = Новый Структура("Наименование", ОбъектБД.Наименование);
	
	Выборка = ПланыОбмена[ИмяПланаОбмена].Выбрать(СтруктураВыборки);
	Пока Выборка.Следующий() Цикл
		Попытка
			Изменения = ПланыОбмена.ВыбратьИзменения(Выборка.Ссылка, 1);	//Проверка по первому сообщению.
			Пока Изменения.Следующий() Цикл
				Возврат Истина;
			КонецЦикла;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПланОбменаПросмотрНеподтвержденныхИзменений(Команда)
	
	ОчиститьСообщения();
	
	ПланОбменаПросмотрНеподтвержденныхИзмененийНаСервере(ЭтаФорма.ТекущийУзел);
	
КонецПроцедуры

&НаСервере
Процедура ПланОбменаПросмотрНеподтвержденныхИзмененийНаСервере(ОбъектБД)
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	
	ИмяПланаОбмена = мдОбъектаБД.Имя;
	
	СтруктураВыборки = Новый Структура("Наименование", ОбъектБД.Наименование);
	
	НомерСледующегоСообщения = ОбъектБД.НомерОтправленного + 1;
	
	Сообщить("План обмена: """ + ОбъектБД.Наименование + """. №= " + НомерСледующегоСообщения + " (следующее сообщение,  в которое будут помещены выбранные изменения).");	// Номер сообщения обмена данными, в который будут помещены выбранные изменения.
	
	Выборка = ПланыОбмена[ИмяПланаОбмена].Выбрать(СтруктураВыборки);
	Пока Выборка.Следующий() Цикл
		Попытка
			Изменения = ПланыОбмена.ВыбратьИзменения(Выборка.Ссылка, НомерСледующегоСообщения);	// Номер сообщения обмена данными, в который будут помещены выбранные изменения.
			ит = 0;
			Пока Изменения.Следующий() Цикл
				ит = ит + 1;
				Сообщить(Изменения.Получить());
				Если ЭтаФорма.ПланОбменаОграничениеКоличестваПросматриваемыхСообщений > 0 И ит >= ЭтаФорма.ПланОбменаОграничениеКоличестваПросматриваемыхСообщений Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОбменаУдалитьРегистрациюИзменений(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ТекстВопроса = "Подтвердите УДАЛЕНИЕ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ
	|
	|Плана обмена """ + ЭтаФорма.ТекущийУзел + """ ?
	|
	|см. Справка 1С: ""О запрете загрузки данных""";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "УДАЛЕНИЕ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ", КодВозвратаДиалога.Нет);
		ВызовОбработкиОтветаПриУдаленииРегистрацииИзменений(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызовОбработкиОтветаПриУдаленииРегистрацииИзменений"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовОбработкиОтветаПриУдаленииРегистрацииИзменений(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ПланОбменаУдалитьРегистрациюИзмененийНаСервере(ЭтаФорма.ТекущийУзел);
	
КонецПроцедуры

&НаСервере
Функция ПланОбменаУдалитьРегистрациюИзмененийНаСервере(Узел)
	
	Попытка
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Неопределено);
		Предупреждение = "+ Удаление регистрации изменений Плана обмена """ + Узел + """ произведено.";
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
		|=================================================================================================================
		|" + Предупреждение;
		ЕстьИзменения = ПланОбменаВывестиКомментарийОНаличииНеподтвержденныхИзменений(Узел);
		Элементы.кнПланОбменаУдалитьРегистрациюИзменений.Доступность = ЕстьИзменения;
		Элементы.ПланОбменаКомментарийУдалениеРегистрацииИзменений.Доступность = ЕстьИзменения;
		Возврат Предупреждение;
	Исключение
		Предупреждение = "- Удаление регистрации изменений Плана обмена """ + Узел + """ произвести не удалось.";
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
		|=================================================================================================================
		|" + Предупреждение;
		Возврат Предупреждение;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ПланОбменаОтключитьГлавныйУзел(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ТекстВопроса = "Подтвердите ОТКЛЮЧЕНИЕ ГЛАВНОГО УЗЛА
	|
	|""" + ЭтаФорма.ГлавныйУзел + """ ?
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)
	|";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТКЛЮЧЕНИЕ ГЛАВНОГО УЗЛА", КодВозвратаДиалога.Нет);
		ВызовОбработкиОтветаПриОтключенииГлавногоУзла(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызовОбработкиОтветаПриОтключенииГлавногоУзла"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовОбработкиОтветаПриОтключенииГлавногоУзла(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	Перем Предупреждение;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Предупреждение = ПланОбменаОтключитьГлавныйУзелНаСервере(ЭтаФорма.ГлавныйУзел);
	
	Если ЗначениеЗаполнено(Предупреждение) Тогда
		ПредупреждениеСообщение(, Предупреждение);
	КонецЕсли;
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

// МО;
//
&НаСервере
Функция ПланОбменаОтключитьГлавныйУзелНаСервере(Узел)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
		
	Предупреждение = "";
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда		// В Центральной БД - ГлавныйУзел() всега Неопределено.
		Если ОбъектОбработка.ОбъектБДПроверитьЭтоГлавныйУзелПланаОбмена(Узел) Тогда
			Предупреждение = "Центральная БД: """ + Узел + """ - это Главный Узел.
			|
			|Отключение Главного Узла на Центральной БД невозможно, т.к. БД по-умолчанию является Главным Узлом.
			|";
			Возврат Предупреждение;
		КонецЕсли;
	Иначе
		Если НЕ ОбъектОбработка.ОбъектБДПроверитьЭтоГлавныйУзелПланаОбмена(Узел) Тогда
			Предупреждение = "Периферийная БД: """ + Узел + """ - это  Подчиненный Узел.
			|
			|Выбранный узел не является Главным Узлом.
			|";
			Возврат Предупреждение;
		Иначе
			Попытка
				ПланыОбмена.УстановитьГлавныйУзел(Неопределено);
				Объект.ГлавныйУзелПредыдущий = Узел;
				Узел = Неопределено;
				ПланОбменаОтключитьГлавныйУзелДоступность(Объект.ГлавныйУзелПредыдущий);
				ПланОбменаУстановитьГлавныйУзелДоступность(Объект.ГлавныйУзелПредыдущий);
				Элементы.ГлавныйУзелПредыдущий.Доступность = Истина;
    			Предупреждение = "+ Главный Узел """ + Объект.ГлавныйУзелПредыдущий + """ отключен.";
				ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
				|=================================================================================================================
				|" + Предупреждение;
				Возврат Предупреждение;
			Исключение
				Предупреждение = "- Отключить Главный Узел """ + ЭтаФорма.ГлавныйУзел + """ не удалось.
				|Возможно не установлен Монопольный режим доступа к базе.";
				ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
				|=================================================================================================================
				|" + Предупреждение;
				Возврат Предупреждение;
			КонецПопытки;
 		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПланОбменаУстановитьГлавныйУзел(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если НЕ ЗначениеЗаполнено(Объект.ГлавныйУзелПредыдущий) Тогда
		ПредупреждениеСообщение(, "Предыдущий ""ГлавныйУзел"" неопределен.
		|
		|Произведите выбор и повторите попытку установки ГлавногоУзла.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите УСТАНОВКУ ГЛВАНЫМ УЗЛОМ
	|
	|""" + Объект.ГлавныйУзелПредыдущий + """.";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "УСТАНОВКА ГЛАВНОГО УЗЛА", КодВозвратаДиалога.Нет);
		ВызовОбработкиОтветаПриУстановкеГлавногоУзла(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызовОбработкиОтветаПриУстановкеГлавногоУзла"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызовОбработкиОтветаПриУстановкеГлавногоУзла(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	Перем Предупреждение;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Предупреждение = ПланОбменаУстановитьГлавныйУзелНаСервере(Объект.ГлавныйУзелПредыдущий);
	
	ПредупреждениеСообщение(, Предупреждение);
	
КонецПроцедуры

&НаСервере
Функция ПланОбменаУстановитьГлавныйУзелНаСервере(Узел)
	
	Попытка
	    ПланыОбмена.УстановитьГлавныйУзел(Узел);
		ЭтаФорма.ГлавныйУзел = Узел;
		Узел = Неопределено;
		ПланОбменаОтключитьГлавныйУзелДоступность(Неопределено);
		ПланОбменаУстановитьГлавныйУзелДоступность(Неопределено);
		Элементы.ГлавныйУзелПредыдущий.Доступность = Ложь;
    	Предупреждение = "+ Главный узел установлен: """ + ЭтаФорма.ГлавныйУзел + """.";
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
		|=================================================================================================================
		|" + Предупреждение;
	Исключение
		Предупреждение = "- Установить """ + Узел + """ Главным Узлом не удалось.
		|Варианты ошибки:
		|- Возможно не установлен Монопольный режим доступа к базе.
		|- Узел """ + Узел + """ не может быть установлен Главным Узлом.";
		ЭтаФорма.ПланОбменаКомментарий = ЭтаФорма.ПланОбменаКомментарий + "
		|=================================================================================================================
		|" + Предупреждение;
	КонецПопытки;
	
	Возврат Предупреждение;
	
КонецФункции

// Очистить страницу ПланОбмена (Дополнительно).
//
&НаКлиенте
Процедура ПланОбменаОчиститьПараметры()
	
	ЭтаФорма.ГлавныйУзел			= Неопределено;
	ЭтаФорма.ТекущийУзел			= Неопределено;
	
	ЭтаФорма.ПланОбменаКомментарий 	= "";
	
	Элементы.кнПланОбменаПросмотрНеподтвержденныхИзменений.Доступность			= Ложь;
	Элементы.ПланОбменаОграничениеКоличестваПросматриваемыхИзменений.Доступность= Ложь;
	Элементы.кнПланОбменаУдалитьРегистрациюИзменений.Доступность	= Ложь;
	Элементы.кнПланОбменаОтключитьГлавныйУзел.Доступность			= Ложь;
	Элементы.кнПланОбменаУстановитьГлавныйУзел.Доступность			= Ложь;
	
	Элементы.ГлавныйУзелПредыдущий.Доступность						= Ложь;
	Элементы.ПланОбменаКомментарийУдалениеРегистрацииИзменений.Доступность = Ложь;
	Элементы.ПланОбменаКомментарийОтключениеГлавногоУзла.Доступность= Ложь;
	Элементы.ПланОбменаКомментарийУстановкаГлавногоУзла.Доступность	= Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧИТЬ ИМЯ СОЗДАВАЕМЫХ/СОЗДАННЫХ ЭЛЕМЕНТОВ ФОРМЫ.
//

// Возвращает Имя Реквизита Формы, связанного с ТЧ.
// Вызов определения из МодуляОбъекта долгий - поэтому здесь.
//
&НаСервере
Функция ФормаПолучитьИмяРеквизитаТабличнаяЧасть(ТЧИмя)
	
	Возврат "ТЧасть" + ТЧИмя;
	
КонецФункции

// Возвращает Имя Реквизита Формы, связанного с Регистром.
// Вызов определения из МодуляОбъекта долгий - поэтому здесь.
//
&НаСервере
Функция ФормаПолучитьИмяРеквизитаРегистр(ТЧИмя)
	
	Возврат "ТДвижений" + ТЧИмя;
	
КонецФункции

// Возвращает имя Страницы Формы, связанной с ТЧ.
//
&НаСервере
Функция ФормаПолучитьИмяСтраницыТабличнаяЧасть(ТЧИмя)
	
	Возврат "СтраницаТЧ" + ТЧИмя;
	
КонецФункции

// Возвращает имя Страницы Формы, связанной с Регистром.
//
&НаСервере
Функция ФормаПолучитьИмяСтраницыРегистр(ТЧИмя)
	
	Возврат "СтраницаРЕГ" + ТЧИмя;
	
КонецФункции

// Возвращает имя Таблицы Формы, связанной с ТЧ.
//
&НаСервере
Функция ФормаПолучитьИмяТаблицыТабличнаяЧасть(ТЧИмя)
	
	Возврат "ТФормыТЧасти" + ТЧИмя;
	
КонецФункции

// Возвращает имя Таблицы Формы, связанной с Регистром.
//
&НаСервере
Функция ФормаПолучитьИмяТаблицыРегистр(ТЧИмя)
	
	Возврат "ТФормыДвижений" + ТЧИмя;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ТИП ОБЪЕКТА.
//

// Органичени типа Реквизита Объекта, т.к. в основном это СправочникСсылка, ПеречислениеСсылка, ДокументСсылка и т.д.
//
&НаСервере
Процедура ОграничитьТипРеквизита(Реквизит, Тип)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип(Тип));
	Иначе
		Массив = Тип;
	КонецЕсли;
	
	Попытка
		ЭтаФорма[Реквизит].ТипЗначения = Новый ОписаниеТипов(Массив);
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// Органичени типа Реквизита Объекта, т.к. в основном это СправочникСсылка, ПеречислениеСсылка, ДокументСсылка и т.д.
//
&НаСервере
Процедура ОграничитьТипЭлемента(Элемент, Тип)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип(Тип));
	Иначе
		Массив = Тип;
	КонецЕсли;
	
	Попытка
		Элементы[Элемент].ДоступныеТипы = Новый ОписаниеТипов(Массив);
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Элементы[Элемент].ОграничениеТипа = Новый ОписаниеТипов(Массив);
	
	Попытка
		Элементы[Элемент].РежимВыбораИзСписка = Ложь;
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// МО: Возвращает для Описание ОбъектаБД.
// Вызов определения из МодуляОбъекта долгий - поэтому здесь.
//
&НаСервере
Функция ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");

	Возврат ОбъектОбработка.ОбъектБДПолучитьОписаниеОбъекта(ОбъектБД);
	
КонецФункции

// МО: Возвращает для Справочника значение Свойства Предопределенный.
//
&НаСервере
Функция ОбъектБДПолучитьПризнакПроведениеРазрешено(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьПризнакПроведениеРазрешено(ОбъектБД);
	
КонецФункции

// МО: Возвращает для Справочника значение Свойства Предопределенный.
//
&НаСервере
Функция ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД);
	
КонецФункции

// МО: Возвращает для Выбранного ОбъектаБД значение Свойства Предопределенный, Удаленный, Проведенный.
// Вызов определения из МодуляОбъекта долгий - поэтому здесь.
//
&НаСервере
Функция ОбъектБДПолучитьСостояниеОбъекта(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьСостояниеОбъекта(ОбъектБД);
	
КонецФункции

// МО: 
//
&НаСервере
Процедура ОбъектБДИнициализироватьОсновныеПараметры(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Объект.ТипОбъектаБД 			= ОбъектОбработка.ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	Объект.ПолноеСтроковоеИмяТипа	= ОбъектОбработка.ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	Объект.ИмяОбъектаБД				= ОбъектОбработка.ОбъектБДПолучитьИмяОбъекта(ОбъектБД);
	
	Объект.Предопределенный 		= ОбъектОбработка.ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД);	// Проверка по типам объектов в МО.
	
КонецПроцедуры

// МО: Возвращает для Значение строку типа "Справочник".
//
&НаСервере
Функция ОбъектБДПолучитьТипОбъекта(Значение)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");

	Возврат ОбъектОбработка.ОбъектБДПолучитьТипОбъекта(Значение);
	
КонецФункции

// МО: Возвращает для Значение строку типа "Справочник.Номенклатура".
// Используется при формировании Таблицы Реквизитов.
//
&НаСервере
Функция ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Значение)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьПолноеСтроковоеИмяТипа(Значение);
	
КонецФункции

// МО: Возвращает для Значение строку типа "Номенклатура".
// Используется при формировании Таблицы Реквизитов.
//
&НаСервере
Функция ОбъектБДПолучитьИмяОбъекта(Значение)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьИмяОбъекта(Значение);
	
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Справочники"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаСправочники()
	
	Возврат "Справочник";				// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаСправочники();
	
КонецФункции

&НаСервере
Функция ЭтоСправочник(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаСправочники();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Документы"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаДокументы()
	
	Возврат "Документ";					// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаДокументы();
	
КонецФункции

&НаСервере
Функция ЭтоДокумент(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаДокументы();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы видов характеристик"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыВидовХарактеристик()
	
	Возврат "ПланВидовХарактеристик";	// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыВидовХарактеристик();
	
КонецФункции

&НаСервере
Функция ЭтоПланВидовХарактеристик(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "ПланыОбмена"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыОбмена()
	
	Возврат "ПланОбмена";				// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыОбмена();
	
КонецФункции

&НаСервере
Функция ЭтоПланОбмена(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыОбмена();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Бизнес процессы"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат "БизнесПроцесс";			// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаБизнесПроцессы();
	
КонецФункции

&НаСервере
Функция ЭтоБизнесПроцесс(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаБизнесПроцессы();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Задачи"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат "Задача";					// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаЗадачи();
	
КонецФункции

&НаСервере
Функция ЭтоЗадача(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаЗадачи();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы видов расчета"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат "ПланВидовРасчета";			// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыВидовРасчета();
	
КонецФункции

&НаСервере
Функция ЭтоПланВидовРасчета(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыВидовРасчета();
КонецФункции

// Функция-свойство: возвращает значение для идентификации общего типа "Планы счетов"
//
// Тип: Строка
//
&НаСервере
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат "ПланСчетов";				// Для скорости.
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ИмяТипаПланыСчетов();
	
КонецФункции

&НаСервере
Функция ЭтоПланСчетов(ТипОбъектаБД)
	Возврат ТипОбъектаБД = ИмяТипаПланыСчетов();
КонецФункции

&НаСервере
Функция вОписаниеТипа(ЗначениеТипа)

	МассивТипов = Новый Массив;
	Если ТипЗнч(ЗначениеТипа) = Тип("Строка") Тогда
		МассивТипов.Добавить(Тип(ЗначениеТипа));
	Иначе
		МассивТипов.Добавить(ЗначениеТипа);
	КонецЕсли;
	ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);

	Возврат ОписаниеТипов;

КонецФункции // вОписаниеТипа()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ.
//

// МО: Проверить на существование Реквизита в Объекте.
//
&НаСервере
Функция ОбъектБДЕстьСтандартныеТабличныеЧастиОбъекта(ОбъектОбработка, мдОбъектаБД, ОбъектБД)
	
	// 2012.10.12. Метод мдОбъектаБД.СтандартныеТабличныеЧасти.Количество() у ПланаСчетов отсутствует.
	
	Попытка
		СтТЧ = мдОбъектаБД.СтандартныеТабличныеЧасти[0];
		Возврат Истина;
	Исключение
		Возврат Ложь;
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции 

// МО Возвращает Объект типа СправочникОбъект/ДокументОбъект.
//
&НаСервере
Функция ОбъектБДПолучитьОбъектИзСсылки(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьОбъектИзСсылки(ОбъектБД);
	
КонецФункции

// МО: Проверить на существование Реквизита в Объекте.
//
&НаСервере
Функция ОбъектБДЕстьРеквизитОбъекта(ИмяРеквизита, Объект)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДЕстьРеквизит(ИмяРеквизита, Объект);
	
КонецФункции 

// Получить Значение Реквизита в Объекта.
//
&НаСервере
Функция ОбъектБДПолучитьЗначениеРеквизитаОбъекта(ИмяРеквизита, Объект)
	
	Возврат Объект[ИмяРеквизита];
	
КонецФункции 

// Получить Тип Реквизита в Объекта.
//
&НаСервере
Функция ОбъектБДПолучитьТипРеквизитаОбъекта(ИмяРеквизита, Объект)
	
	Возврат ТипЗнч(Объект[ИмяРеквизита]);
	
КонецФункции 

// МО: Получить Реквизит ОбъектаБД по Имени.
//
&НаСервере
Функция ОбъектБДПолучитьМДРеквизита(ИмяРеквизита, Объект)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.ОбъектБДПолучитьМДРеквизита(ИмяРеквизита, Объект);
	
КонецФункции 

// Проверить на существование Реквизита в Форме.
//
&НаСервере
Функция ФормаЕстьРеквизит(ИмяРеквизита)
	
	Попытка
		ЕстьРеквизит = Этаформа[ИмяРеквизита];
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Проверить на существование Элемента на Форме.
//
&НаСервере
Функция ФормаЕстьЭлемент(ИмяРеквизита)
	
	Возврат НЕ Элементы.Найти(ИмяРеквизита) = Неопределено;
	
КонецФункции

// Органичени типа Реквизита Объекта, т.к. в основном это СправочникСсылка, ПеречислениеСсылка, ДокументСсылка и т.д.
//
&НаСервере
Процедура ФормаОграничитьТипЭлемента(Элемент, Тип)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип(Тип));
	Иначе
		Массив = Тип;
	КонецЕсли;
	
	Попытка
		Элементы[Элемент].ДоступныеТипы = Новый ОписаниеТипов(Массив);
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Элементы[Элемент].ОграничениеТипа = Новый ОписаниеТипов(Массив);
	
	Попытка
		Элементы[Элемент].РежимВыбораИзСписка = Ложь;
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ВызватьОбработкуНаВопросШаблон(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Сервисное сообщение.
//
&НаСервере
Процедура СообщитьОбОшибкеПриЗаписи(Информация)
	
	Причина = ?(Информация.Причина = Неопределено, Информация, Информация.Причина);
	Сообщить(Причина.Описание, СтатусСообщения.Важное);
	
КонецПроцедуры

// Удаляет цифры из строки, оставляя символы.
//
&НаСервере
Функция УдалитьЦифрыВСтроке(НомерСЦифрами)
	
	Массив = Новый Массив;
	Массив.Добавить("0");
	Массив.Добавить("1");
	Массив.Добавить("2");
	Массив.Добавить("3");
	Массив.Добавить("4");
	Массив.Добавить("5");
	Массив.Добавить("6");
	Массив.Добавить("7");
	Массив.Добавить("8");
	Массив.Добавить("9");
	
	НомерБезЦифр = НомерСЦифрами;
	Для нМ = 0 По 9 Цикл
		Пока Найти(НомерБезЦифр, Массив[нМ]) > 0 Цикл
			НомерБезЦифр = СтрЗаменить(НомерБезЦифр, Массив[нМ], "");
		КонецЦикла;
	КонецЦикла;
	НомерБезЦифр = СокрЛП(НомерБезЦифр);
	
	Возврат НомерБезЦифр;
КонецФункции

// Вкладка "Ссылки на Объект". Установить/Снять Флажки в списке Ссылок на Объект.
//
&НаСервере
Процедура  ФормаУстановитьСнятьФлажокВТаблицеНаСервере(Действие, Таблица)
	
	Если Таблица = "ТСсылкиСписок" Тогда
		Для Каждого СтрокаСписка ИЗ Объект.ТСсылкиСписок Цикл
			СтрокаСписка["Включено"] = Действие;
		КонецЦикла;
	ИначеЕсли Таблица = "ТСправочникСписок" Тогда
		Для Каждого СтрокаСписка ИЗ Объект.ТСправочникСписок Цикл
			СтрокаСписка["Включено"] = Действие;
		КонецЦикла;
	ИначеЕсли Таблица = "ТДокументСписок" Тогда
		Для Каждого СтрокаСписка ИЗ Объект.ТДокументСписок Цикл
			СтрокаСписка["Включено"] = Действие;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработка оповещения ЭтойФормы от Формы "Настройка".
//
&НаКлиенте
Процедура ФормаОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Строка(Источник) = "Форма" И НЕ ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда	// в Управляемом приложении отсутствует Тип("Форма").
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			
			Если ИмяСобытия = "ПоказыватьСообщения" Тогда								// Из формы "Настройка".
				
				Объект.ПоказыватьСообщения 						= Параметр;
				
			ИначеЕсли ИмяСобытия = "СкрыватьПустыеТаблицыДвиженийРегистров" Тогда		// Из формы "Настройка".
				
				Объект.СкрыватьПустыеТаблицыДвиженийРегистров	= Параметр;
				
			ИначеЕсли ИмяСобытия = "СкрыватьПустыеТабличныеЧасти" Тогда					// Из формы "Настройка".
				
				Объект.СкрыватьПустыеТабличныеЧасти				= Параметр;
				
			ИначеЕсли ИмяСобытия = "ОбменДаннымиЗагрузка" Тогда						// Из формы "Настройка".
				
				Объект.ОбменДаннымиЗагрузка 					= Параметр;
				
			ИначеЕсли ИмяСобытия = "МонопольныйРежим" Тогда								// Из формы "Настройка".
				
				Объект.МонопольныйРежим							= Параметр;
				
				ФормаПолучитьЗаголовокРежима();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		// Не всегда Источником является Форма, следовательно Владельца формы нет.
		
	КонецПопытки;
	
КонецПроцедуры

// Получить заголовок типа Монопольный/Многопользовательский доступ.
//
&НаКлиенте
Процедура ФормаПолучитьЗаголовокРежима()
	
	Если Объект.МонопольныйРежим Тогда
		Элементы.Режим.Заголовок = "Монопольный режим";
	Иначе
		Элементы.Режим.Заголовок = "Многопользовательский режим";
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает время в миллисекундах или секундах.
//
// Пример использования:
//
// Начало = ВремяВМиллисекундах();
// КоличествоСтрок = 0;
// Для Каждого Элемент ИЗ Массив Цикл
// 	  КоличествоСтрок = КоличествоСтрок  + 1;
//    ...
// КонецЦикла;
// Конец  = ВремяВМиллисекундах();
// ВремяВыполнения = (Конец - Начало) / 1000;
//
// РезультСтрока = НСтр("ru = 'Результат процесса (количество строк = %КоличествоСтрок%, время выполнения = %ВремяВыполнения% с)'");
// РезультСтрока = СтрЗаменить(РезультСтрока, "%КоличествоСтрок%", Строка(КоличествоСтрок));
// РезультСтрока = СтрЗаменить(РезультСтрока, "%ВремяВыполнения%", Строка(ВремяВыполнения));
//
&НаКлиентеНаСервереБезКонтекста
Функция ВремяВМиллисекундах()
	
	Попытка
		Script = Новый COMОбъект("MSScriptControl.ScriptControl");
		Script.Language = "javascript";
		Script.Timeout	= -1;
		Время = Script.Eval("var d = new Date(); d.getTime()");
	Исключение
		Попытка
			Выполнить("Время = ТекущаяУниверсальнаяДатаВМиллисекундах()");	// Версия Платформы 8.2.17.153 и выше.
		Исключение
			Время = ТекущаяДата();
		КонецПопытки;
	КонецПопытки;
	
	Возврат Время;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ: СОБЫТИЯ ФОРМЫ.
// 

// МО: Перед Открытием формы:
// - Определение ПараметровЗапускаОбработки
// - Добавление реквизитов в таблицу Ссылок на Объект БД и соответствующих элементов формы.
//
&НаСервере
Процедура ФормаПриСозданииНаСервере(Отказ)
	Перем ОбъектОбработка, ВерсияБСП;
	
	Если Параметры.Свойство("ОбъектБД") Тогда
		Объект.ОбъектБД = Параметры.ОбъектБД;
	КонецЕсли;
	
	Объект.УправляемаяФорма = Истина;
	Объект.ЭтоГлавныйУзел = ПланыОбмена.ГлавныйУзел() = Неопределено;
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Объект.ВерсияБСП= ОбъектОбработка.ПолучитьВерсиюБСП();
	Объект.ПараметрыСеансаОбработки	= ОбъектОбработка.ОбработкаПолучитьПараметрыСеанса();
	
	ЭтаФорма.ПроверкаПравПользователя = ОбъектОбработка.ОбработкаПроверитьПраваПользователяИРежимЗапуска();
	
	// Добавляем в Реквизит Формы ТСсылкиСписок новые Колонки-Реквизиты.
	НовыеРеквизиты = Новый Массив;
	Реквизит = Новый РеквизитФормы("Данные"		, Новый ОписаниеТипов()			, "Объект.ТСсылкиСписок", , Ложь);
	НовыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("Метаданные"	, Новый ОписаниеТипов("Строка")	, "Объект.ТСсылкиСписок", , Ложь);
	НовыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("Ссылка"		, Новый ОписаниеТипов()			, "Объект.ТСсылкиСписок", , Ложь);
	НовыеРеквизиты.Добавить(Реквизит);
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	// Добавляем в Элемент Формы ТСсылкиСписок новые Колонки-Реквизиты.
	НовоеПоле = Элементы.Добавить("Данные", Тип("ПолеФормы"), Элементы.ТСсылкиСписок);
	НовоеПоле.ПутьКДанным			= "Объект.ТСсылкиСписок.Данные";
	НовоеПоле.Вид					= ВидПоляФормы.ПолеВвода;
	НовоеПоле.РежимРедактирования	= РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.ПропускатьПриВводе 	= Истина;
	НовоеПоле.Ширина				= 30;
	НовоеПоле.ВыбиратьТип			= Ложь;
	НовоеПоле.КнопкаВыбора			= Ложь;
	НовоеПоле.КнопкаСпискаВыбора	= Ложь;
	НовоеПоле.КнопкаОткрытия		= Истина;
	НовоеПоле.КнопкаОчистки			= Ложь;
	НовоеПоле.КнопкаРегулирования	= Ложь;
	НовоеПоле.РедактированиеТекста	= Ложь;

	НовоеПоле = Элементы.Добавить("МетаДанные", Тип("ПолеФормы"), Элементы.ТСсылкиСписок);
	НовоеПоле.ПутьКДанным			= "Объект.ТСсылкиСписок.МетаДанные";
	НовоеПоле.Вид					= ВидПоляФормы.ПолеНадписи;
	НовоеПоле.Ширина				= 20;
	
	ЭтаФорма.ВосстановлениеСсылкиКомментарий = "ПРОЦЕДУРА ВОССТАНОВЛЕНИЯ ""БИТОЙ"" ССЫЛКИ.
	|Основано на GUID (Globally Unique Identifier) — статистически уникальный 128-битный идентификатор.
	|
	|1. В сеансе Основной БД: Заполнить поле ""Битый"" Объект (ТЕКСТ) строкой подобно:
	|<Объект не найден> (51:8309001cc496175a11e17a512788a343).
	|2. В сеансе Основной БД: Выполнить <""Битый"" Объект: Получить GUID>. Получить GUID и Дату создания объекта.
	|3. В сеансе Архивной БД: По дате создания объекта открыть 1С:Предприятие по восстановленным данным из архивной копии.
	|4. В сеансе Архивной БД: Открыть Обработку ""1С:Администратор"".
	|5. В сеансе Архивной БД: По полученному ""Битый"" Объект (GUID) найти в архивной копии Ссылку на объект.
	|Таким образом однозначно определяется тип ""Битого"" объекта (Актуально для составных реквизитов).
	|6. В сеансе Основной БД: Выбрать ""Битый"" Объект (ТИП) в соответствии с данными Архивной БД или определенным по данным открытой ИБ.
	|(по-умолчанию присваивается тип текущего редактируемого объекта).
	|7. В сеансе Основной БД: Выполнить <""Битый"" Объект: Восстановить>. Создать новый Объект с GUID ""Битого"" Объекта.
	|8. В сеансе Основной БД: Выполнить <""Битый"" Объект: Редактировать>.
	|Данная Обработка в отличие от стандартной формы Конфигурации позволит Вам изменить нужные реквзиты Объекта.
	|9. В сеансе Основной БД: Заполнить поля объекта данными из Архивной БД.
	|
	|Записать изменения.
	|ОБЪЕКТ ВОССТАНОВЛЕН.";
	
	ЭтаФорма.ПланОбменаСправка1С 								= """О запрете загрузки данных""";
	ЭтаФорма.ПланОбменаСпециальноеПояснение 					= "Если использовалась другая возможность для отключения Главного Узла, то ... ";
	ЭтаФорма.ПланОбменаКомментарийУдалениеРегистрацииИзменений	= "- После удаления неподтвержденные изменения не будут посланы в текущий узел.";
	ЭтаФорма.ПланОбменаКомментарийОтключениеГлавногоУзла		= "- При необходимости в конфигураторе загрузить конфигурацию (CF) ГлавногоУзла.";
	
	// Блокируемый.
	Объект.ЦветТекстаБлокируемогоРеквизита = ЦветаСтиля.ЦветОсобогоТекста;
	Объект.ЦветФонаБлокируемогоРеквизита = Новый Цвет(204, 255 , 255);
	
	// Обычный.
	Объект.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	Объект.ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
	
	// Обрабатываемые коллекции.
	Объект.СписокОбъектовТипаСсылка = ОбъектОбработка.ПолучитьСписокОбъектовТипаСсылка();
	Объект.СписокОбъектовТипаРегистр = ОбъектОбработка.ПолучитьСписокОбъектовТипаРегистр();
	
	Объект.ЕстьСправочникОрганизации	= МетаданныеСодержатСправочник(ОбъектОбработка, "Организации");
	Объект.ЕстьСправочникНоменклатура	= МетаданныеСодержатСправочник(ОбъектОбработка, "Номенклатура");
	Объект.ЕстьСправочникСклады			= МетаданныеСодержатСправочник(ОбъектОбработка, "Склады");
	Объект.ЕстьСправочникМагазины		= МетаданныеСодержатСправочник(ОбъектОбработка, "Магазины");
	Объект.ЕстьСправочникКассы			= МетаданныеСодержатСправочник(ОбъектОбработка, "Кассы");
	Объект.ЕстьСправочникКассыККМ		= МетаданныеСодержатСправочник(ОбъектОбработка, "КассыККМ");
	Объект.ЕстьСправочникПодразделения	= МетаданныеСодержатСправочник(ОбъектОбработка, "Подразделения");
	Объект.ЕстьСправочникПодразделенияОрганизаций = МетаданныеСодержатСправочник(ОбъектОбработка, "ПодразделенияОрганизаций");
	
	УстановитьЗначениеПараметраНаВкладке("ДокументСтатистикаОрганизация"	, "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	УстановитьЗначениеПараметраНаВкладке("ДокументПроведениеОрганизация"	, "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	УстановитьЗначениеПараметраНаВкладке("ДокументДвиженияОрганизация"		, "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	УстановитьЗначениеПараметраНаВкладке("ДокументПрефиксОрганизация"		, "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	
	Элементы.кнОМЗаполнитьВариантыОтчетовРеквизиты.Доступность = НЕ Метаданные.Справочники.Найти("ВариантыОтчетов") = Неопределено;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраНаВкладке(ИмяРеквизитаФормы, ИмяРеквизитаОбъекта, ИмяСправочника, ЕстьСправочник)
	Перем НачальноеЗначение;
	
	Если НЕ ТипЗнч(ЭтаФорма[ИмяРеквизитаФормы]) = Тип("СписокЗначений") Тогда
		Попытка
			НачальноеЗначение = Объект.ОбъектБД[ИмяРеквизитаОбъекта];
		Исключение
			НачальноеЗначение = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ЕстьСправочник Тогда
		Элементы[ИмяРеквизитаФормы].Видимость = Истина;
		Элементы[ИмяРеквизитаФормы].ТолькоПросмотр = Ложь;
		Если ТипЗнч(ЭтаФорма[ИмяРеквизитаФормы]) = Тип("СписокЗначений") Тогда
			ОграничитьТипРеквизита(ИмяРеквизитаФормы, "СправочникСсылка." + ИмяСправочника);
		Иначе
			ОграничитьТипЭлемента(ИмяРеквизитаФормы, "СправочникСсылка." + ИмяСправочника);
		КонецЕсли;
	Иначе
		Элементы[ИмяРеквизитаФормы].Видимость = Ложь;
		Элементы[ИмяРеквизитаФормы].ТолькоПросмотр = Истина;
		ЭтаФорма[ИмяРеквизитаФормы] = Неопределено;
	КонецЕсли;
	
	Если Элементы[ИмяРеквизитаФормы].Видимость
		И НЕ ТипЗнч(ЭтаФорма[ИмяРеквизитаФормы]) = Тип("СписокЗначений") Тогда
		ЭтаФорма[ИмяРеквизитаФормы] = НачальноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Перед Закрытием формы:
// - Сохранение значения Выбранного ОбъектаБД.
//
&НаСервере
Процедура ФормаПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ОбъектБД"								, Объект.ОбъектБД);
	Настройки.Вставить("ПоказыватьСообщения"					, Объект.ПоказыватьСообщения);
	Настройки.Вставить("ОдинаковыйТипПриЗамене"					, ЭтаФорма.ОдинаковыйТипПриЗамене);
	Настройки.Вставить("СкрыватьПустыеТабличныеЧасти"			, Объект.СкрыватьПустыеТабличныеЧасти);
	Настройки.Вставить("СкрыватьПустыеТаблицыДвиженийРегистров"	, Объект.СкрыватьПустыеТаблицыДвиженийРегистров);
	
	Настройки.Вставить("ГлавныйУзелПредыдущий"					, Объект.ГлавныйУзелПредыдущий);
	
КонецПроцедуры

// Перед Открытием формы:
// - Восстановление значения Выбранного ОбъектаБД.
//
&НаСервере
Процедура ФормаПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Не сохраняются при закрытии Обработки.
	
	Объект.ВыполнятьВТранзакции	= Истина;
	Объект.МонопольныйРежим 	= МонопольныйРежим();
	
	// Восстанавливаем настройки / Устанавливаем начальные значения.
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		Значение = Настройки.Получить("ОбъектБД");
		Объект.ОбъектБД = ?(Значение <> Неопределено, Значение, Неопределено);
	КонецЕсли;
	
	Значение = Настройки.Получить("ПоказыватьСообщения");
	Объект.ПоказыватьСообщения = ?(Значение <> Неопределено, Значение, Ложь);
	
	Значение = Настройки.Получить("ОдинаковыйТипПриЗамене");
	ЭтаФорма.ОдинаковыйТипПриЗамене = ?(Значение <> Неопределено, Значение, Истина);
	
	Значение = Настройки.Получить("СкрыватьПустыеТабличныеЧасти");
	Объект.СкрыватьПустыеТабличныеЧасти = ?(Значение <> Неопределено, Значение, Истина);
	
	Значение = Настройки.Получить("СкрыватьПустыеТаблицыДвиженийРегистров");
	Объект.СкрыватьПустыеТаблицыДвиженийРегистров = ?(Значение <> Неопределено, Значение, Истина);

	Значение = Настройки.Получить("ГлавныйУзелПредыдущий");
	Объект.ГлавныйУзелПредыдущий = ?(Значение <> Неопределено, Значение, Неопределено);

КонецПроцедуры

// При Открытии формы:
// - Выполнение минимального количества процедур по восстановленному значению Выбранного ОбъектаБД.
// Необходимо для восстановления состояния пред прошлым закрытием формы.
//
&НаКлиенте
Процедура ФормаПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		Состояние("" + Объект.ПараметрыСеансаОбработки.СинонимОбработки + "
		|Заполнение элементов формы данными объекта: 
		|" + Объект.ОбъектБД);
	КонецЕсли;
	
	ФормаПолучитьЗаголовокРежима();
	
	Если ЭтаФорма.ПроверкаПравПользователя.Отказ Тогда
		ПредупреждениеСообщение(, ЭтаФорма.ПроверкаПравПользователя.ОписаниеОшибки);
		Закрыть();
		Возврат;
	Иначе
		Если НЕ ЭтаФорма.ПроверкаПравПользователя.ОписаниеОшибки = "" Тогда
			ПредупреждениеСообщение(, ЭтаФорма.ПроверкаПравПользователя.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРавно = "=============================================================";
	
	Если ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ОбъектБДПриИзменении("ФормаПриОткрытии");
	Иначе
		ФормаОпределитьДоступнность(Неопределено);
	КонецЕсли;
		
КонецПроцедуры

// Вывести в окно "Состояние" текст.
// - Восстановление значения Выбранного ОбъектаБД.
//
&НаКлиенте
Процедура ФормаВывестиВСостояние(Текст = Неопределено, Процент = Неопределено, Пояснение = Неопределено)
	
	Если Текст = Неопределено Тогда
		
		Текст = Объект.ПараметрыСеансаОбработки.СинонимОбработки;
		
	КонецЕсли;
	
	Если Пояснение = Неопределено Тогда
		
		Пояснение = "Формирование основных таблиц обработки ...";
		
	КонецЕсли;
	
	Состояние(Текст, Процент, Пояснение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КНОПКИ ОСНОВНОГО МЕНЮ. ОПЦИИ.
// 

// Кнопка "Обновить" Повторное считывание данных выбранного объекта.
//
&НаКлиенте
Процедура ОМОбновить(Команда)
	
	ОчиститьСообщения();

	Если ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
		ОбъектБДПриИзменении("ОМОбновить");
	Иначе
		ФормаОпределитьДоступнность(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Кнопка "Структура подчиненности".
//
&НаКлиенте
Процедура ОМСтруктураПодчиненности(Команда)
	
	ТипОбъектаБД = Объект.ТипОбъектаБД;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) 
		ИЛИ НЕ ТипОбъектаБД = ИмяТипаДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыСтруктурыПодчиненности = Объект.ПараметрыСеансаОбработки.ИмяФормыСтруктурыПодчиненности;
	
	Если ИмяФормыСтруктурыПодчиненности = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма Структура Подчиненности не найдена.
		|Просмотр информации о Подчиненности документов невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектОтбора", Объект.ОбъектБД);
	
		ОткрытьФорму(ИмяФормыСтруктурыПодчиненности, ПараметрыФормы, ЭтаФорма, ЭтаФорма.КлючУникальности);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
    КонецПопытки;
	
КонецПроцедуры

// Открыть Форму для просмотра Дат Запрета редактирования даных.
//
&НаКлиенте
Процедура ОМДатыЗапрета(Команда)

	ИмяРегистраДатыЗапрета = Объект.ПараметрыСеансаОбработки.ИмяРегистраДатыЗапрета;
	
	Если ИмяРегистраДатыЗапрета = Неопределено Тогда
		ПредупреждениеСообщение(, "Не обнаружен Регистр, содержащий информацию о Датах Запрета.
		|Просмотр информации о Датах Запрета невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		ОткрытьФорму("РегистрСведений." + ИмяРегистраДатыЗапрета + ".ФормаСписка");
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
		
КонецПроцедуры

// Открыть Форму "Карта маршрута".
//
&НаКлиенте
Процедура ОМКартаМаршрута(Команда)
	
	ТипОбъектаБД = Объект.ТипОбъектаБД;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектБД) 
		ИЛИ НЕ ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
		Если НЕ ТипОбъектаБД = ИмяТипаЗадачи() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФормыКартаМаршрута = Объект.ПараметрыСеансаОбработки.ИмяФормыКартаМаршрута;
	
	Если ИмяФормыКартаМаршрута = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""КартаМаршрута"" не найдена.
		|Просмотр карты бизнес-процесса невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		ПараметрыФормы = Новый Структура;
		Если ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
			ПараметрыФормы.Вставить("БизнесПроцесс", Объект.ОбъектБД);
		ИначеЕсли ТипОбъектаБД = ИмяТипаЗадачи() Тогда
			БПроцесс = ОМКартаМаршрутаПолучитьБизнесПроцессЗадачиНаСервере(Объект.ОбъектБД);
			ПараметрыФормы.Вставить("БизнесПроцесс", БПроцесс);
			Если НЕ ЗначениеЗаполнено(БПроцесс) Тогда
				ПредупреждениеСообщение(, "Задача: """ + Объект.ОбъектБД + """ 
				|
				|Бизнес-процесс неопределен.");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
		ОткрытьФорму(ИмяФормыКартаМаршрута, ПараметрыФормы, ЭтаФорма, ЭтаФорма.КлючУникальности);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
    КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОМКартаМаршрутаПолучитьБизнесПроцессЗадачиНаСервере(ОбъектБД)
	
	Возврат ОбъектБД.БизнесПроцесс;
	
КонецФункции

// Кнопка "История изменений объекта". Дополнительная форма.
//
&НаКлиенте
Процедура ОМИсторияИзмененийОбъекта(Команда)
	
	ИмяФормыЖурналаРегистрации = Объект.ПараметрыСеансаОбработки.ИмяФормыЖурналаРегистрации;
	
	Если ИмяФормыЖурналаРегистрации = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""Журнала регистрации"" не найдена.
		|Просмотр списка регистрации изменений данной БД, невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
	
		Состояние("Подождите ...
		|Производится открытие Журнала регистрации.");
	
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(Объект.ОбъектБД) Тогда
			ПараметрыФормы.Вставить("ОбъектБД", Объект.ОбъектБД);
		КонецЕсли;
	
		ОткрытьФорму(ИмяФормыЖурналаРегистрации, ПараметрыФормы, ЭтаФорма, ЭтаФорма.КлючУникальности);
		
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОМПроверитьРегистрациюВПланахОбмена(Команда)
	Перем СписокУзловОбмена, ЗначенияВыбраны;
	Перем ОписаниеОповещенияОЗакрытии;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(Объект.ОбъектБД);
	
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	// Установить пометку у всех строк.
    СписокУзловОбмена.ЗаполнитьПометки(Истина);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для проверки регистрации объекта");
		ВызватьОбработкуПриПроверкеРегистрацииВПланахОбмена(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуПриПроверкеРегистрацииВПланахОбмена"", ЭтотОбъект, Неопределено)");
		СписокУзловОбмена.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, "Выберите узел(ы) обмена для проверки регистрации объекта");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуПриПроверкеРегистрацииВПланахОбмена(СписокУзловОбмена, Параметр) Экспорт
	Перем ПроверкаРегистрации;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Проверка регистрации изменений объекта: 
	|" + Объект.ОбъектБД);
	
	ПроверкаРегистрации = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(Объект.ОбъектБД, СписокУзловОбмена, "ИзменениеЗарегистрировано");
	
	ПредупреждениеСообщение(, "Проверка регистрации изменений объекта в узлах обмена произведена. 
	|");
	
КонецПроцедуры

&НаКлиенте
Процедура ОМРегистрацияВПланахОбмена(Команда)
	Перем СписокУзловОбмена, ЗначенияВыбраны;
	Перем ОписаниеОповещенияОЗакрытии;
	
	ОчиститьСообщения();

	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(Объект.ОбъектБД);
	
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	// Установить пометку у всех строк.
    СписокУзловОбмена.ЗаполнитьПометки(Истина);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для регистрации объекта");
		ВызватьОбработкуПриРегистрацииВПланахОбмена(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуПриРегистрацииВПланахОбмена"", ЭтотОбъект, Неопределено)");
		СписокУзловОбмена.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, "Выберите узел(ы) обмена для регистрации объекта");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуПриРегистрацииВПланахОбмена(СписокУзловОбмена, Параметр) Экспорт
	Перем РегистрацияПроизведена;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Регистрация изменений объекта: 
	|" + Объект.ОбъектБД);
	
	РегистрацияПроизведена = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(Объект.ОбъектБД, СписокУзловОбмена, "ЗарегистрироватьИзменения");
	
	Если НЕ РегистрацияПроизведена Тогда
		ПредупреждениеСообщение(, "Регистрация изменений объекта в узлах обмена не произведена. 
		|см. сообщения.");
	Иначе
		ПредупреждениеСообщение(, "Регистрация изменений объекта, а также ""связанных"" объектов, в узлах обмена завершена.
		|");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОМУдалитьРегистрациюВПланахОбмена(Команда)
	Перем СписокУзловОбмена, ЗначенияВыбраны;
	Перем ОписаниеОповещенияОЗакрытии;
	Перем ОтменаРегистрацииПроизведена;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(Объект.ОбъектБД);
	
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для удаления регистрации объекта");
		ВызватьОбработкуПриУдаленииРегистрацииВПланахОбмена(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуПриУдаленииРегистрацииВПланахОбмена"", ЭтотОбъект, Неопределено)");
		СписокУзловОбмена.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, "Выберите узел(ы) обмена для удаления регистрации объекта");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуПриУдаленииРегистрацииВПланахОбмена(СписокУзловОбмена, Параметр) Экспорт
	Перем ОтменаРегистрацииПроизведена;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Удаление регистрации изменений объекта: 
	|" + Объект.ОбъектБД);
	
	ОтменаРегистрацииПроизведена = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(Объект.ОбъектБД, СписокУзловОбмена, "УдалитьРегистрациюИзменений");
	
	Если НЕ ОтменаРегистрацииПроизведена Тогда
		ПредупреждениеСообщение(, "Удаление регистрации изменений объекта в узлах обмена не произведено.
		|см. сообщения.");
	Иначе
		ПредупреждениеСообщение(, "Удаление регистрации изменений объекта в узлах обмена завершено.
		|");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД)
	Перем ОбъектОбработка;
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
		
КонецФункции

&НаСервере
Функция ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, Действие)
	Перем ОбъектОбработка;
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, Действие);
		
КонецФункции

&НаКлиенте
Процедура ОМОткрытьФормуРегистрацииИзмененийОбъектовВПланахОбмена(Команда)
	Перем ФормаРегистрацииИзмененийОбъектовВПланахОбмена;
	
	ФормаРегистрацииИзмененийОбъектовВПланахОбмена = ПолучитьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыРегистрацияИзменений, , ЭтаФорма);

	ФормаРегистрацииИзмененийОбъектовВПланахОбмена.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОМОткрытьФормуИмпорт(Команда)
	Перем ФормаИмпорт;
	
	ФормаИмпорт = ПолучитьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыИмпорт, , ЭтаФорма);

	ФормаИмпорт.Открыть();
	
КонецПроцедуры

// Кнопка "Список активных пользователей". Дополнительная форма.
//
&НаКлиенте
Процедура ОМСписокАктивныхПользователей(Команда)
	
	ИмяФормыСпискаАктивныхПользователей = Объект.ПараметрыСеансаОбработки.ИмяФормыСпискаАктивныхПользователей;
	
	Если ИмяФормыСпискаАктивныхПользователей = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""Списка Активных Пользователей"" не найдена.
		|Просмотр списка пользователей, работающих с данной БД, невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		ОткрытьФорму(ИмяФормыСпискаАктивныхПользователей, , ЭтаФорма, ЭтаФорма.КлючУникальности);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
КонецПроцедуры

// Кнопка "Журнал регистрации". Дополнительная форма.
//
&НаКлиенте
Процедура ОМЖурналРегистрации(Команда)
	
	ИмяФормыЖурналаРегистрации = Объект.ПараметрыСеансаОбработки.ИмяФормыЖурналаРегистрации;
	
	Если ИмяФормыЖурналаРегистрации = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""Журнала регистрации"" не найдена.
		|Просмотр списка регистрации изменений данной БД, невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		ОткрытьФорму(ИмяФормыЖурналаРегистрации, , ЭтаФорма, ЭтаФорма.КлючУникальности);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
КонецПроцедуры

// Кнопка "Настройка" Параметров обработки.
//
&НаКлиенте
Процедура ОМНастройка(Команда)
	
	ИмяФормыНастройкиОбработки = Объект.ПараметрыСеансаОбработки.ИмяФормыНастройкиОбработки;
	
	Если ИмяФормыНастройкиОбработки = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма Настройки Обработки не найдена.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ПараметрыНастройки = Новый Структура;
		ПараметрыНастройки.Вставить("ПараметрыСеансаОбработки"					, Объект.ПараметрыСеансаОбработки);
		// ЛЕВО.
		ПараметрыНастройки.Вставить("МонопольныйРежим"							, Объект.МонопольныйРежим);
		ПараметрыНастройки.Вставить("ОбменДаннымиЗагрузка"						, Объект.ОбменДаннымиЗагрузка);
		// ПРАВО.
		ПараметрыНастройки.Вставить("ПоказыватьСообщения"						, Объект.ПоказыватьСообщения);
		ПараметрыНастройки.Вставить("СкрыватьПустыеТаблицыДвиженийРегистров"	, Объект.СкрыватьПустыеТаблицыДвиженийРегистров);
		ПараметрыНастройки.Вставить("СкрыватьПустыеТабличныеЧасти"				, Объект.СкрыватьПустыеТабличныеЧасти);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройкиОбработки, ПараметрыНастройки, ЭтаФорма);
		ФормаНастройки.ЗакрыватьПриЗакрытииВладельца 	= Истина;
		Если ФормаНастройки.Открыта() Тогда
			ФормаНастройки.Закрыть();
		КонецЕсли;
		ФормаНастройки.Открыть();	// НЕМОДАЛЬНО !!! ОПОВЕЩЕНИЯ.
		
	Исключение
		
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		
	КонецПопытки;

КонецПроцедуры

// Получить справку по обработке.
//
&НаКлиенте
Процедура ВнешняяОбработкаСправка(Элемент)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДМЕНЮ "ОПЦИИ". ЗАПОЛНИТЬ ВАРИАНТЫ ОТЧЕТОВ.
//

// Заполнить справочники типа "ВариантыОтчетов", "РегламентированнаяОтчетность" типовых конфигураций.
//
&НаКлиенте
Процедура ОМЗаполнитьВариантыОтчетов(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	Перем Конфигурация, Версия, ОбъектПроцедура;
	
	Конфигурация 	= Объект.ПараметрыСеансаОбработки.Конфигурация;
	Версия			= Объект.ПараметрыСеансаОбработки.Версия;
	
	ОбъектПроцедура = "ВариантыОтчетов.ОбработкаПредопределенныхВариантов";
	Если Конфигурация = "Розница" И ВерсияКонфигурацииБезНомераСборки(Версия) = "2.0" Тогда
		ОбъектПроцедура = "ВариантыОтчетов.ОбработкаПредопределенныхВариантов";
	ИначеЕсли Конфигурация = "КомплекснаяАвтоматизация" И ВерсияКонфигурацииБезНомераСборки(Версия) = "1.1" Тогда
		ОбъектПроцедура = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегламентированнуюОтчетность";
	ИначеЕсли Конфигурация = "БухгалтерияПредприятия" И ВерсияКонфигурацииБезНомераСборки(Версия) = "3.0" Тогда
		ОбъектПроцедура = "ВариантыОтчетов.ОбработкаПредопределенныхВариантов";
	ИначеЕсли Конфигурация = "УправлениеТорговлей" Тогда
		Если ВерсияКонфигурацииБезНомераСборки(Версия) = "11.0" Тогда
			ОбъектПроцедура = "ВариантыОтчетов.ОбработкаПредопределенныхВариантов";
		ИначеЕсли ВерсияКонфигурацииБезНомераСборки(Версия) = "11.1" Тогда
			ОбъектПроцедура = "ВариантыОтчетов.Обновить";
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектПроцедура = Неопределено Тогда
		ПредупреждениеСообщение(, "Для Конфигурации: " + Объект.ПараметрыСеансаОбработки.Конфигурация + " версии " + Объект.ПараметрыСеансаОбработки.Версия + "
		|Обработка не предусмотрена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 
	"БСП: Заполнение справочника ""Варианты отчетов"".
	|(процедуры, используемые при обновлении конфигурации)
	|
	|Ситуации, при которых возникает необходимость заполнения справочника:
	|1. Некорректное обновление конфигурации.
	|2. Удален(ы) элементы справочника.
	|
	|Рекомендация:
	|Перед выполнением процедуры заполнения справочника произвести удаление элементов, помеченных на удаление,
	|или произвести непосредственное удаление вручную двойных записей в справочнике, ести таковые имеются.
	|
	|Вы подтверждаете заполнение справочника ""Варианты отчетов""?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ЗАПОЛНЕНИЕ СПРАВОЧНИКА ""ВАРИАНТЫ ОТЧЕТОВ""", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриЗаполненииСправочникаВариантыОтчетов(Ответ, ОбъектПроцедура);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриЗаполненииСправочникаВариантыОтчетов"", ЭтотОбъект, ОбъектПроцедура)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриЗаполненииСправочникаВариантыОтчетов(Ответ, ОбъектПроцедура) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. 
	|Производится формирование справочника ""Варианты отчетов""...");
		
	Отказ = Истина;
	Результат = ОМЗаполнитьВариантыОтчетовНаСервере(ОбъектПроцедура, Отказ);
		
	Если Отказ Тогда
		ПредупреждениеСообщение(, Результат);
	Иначе	
		ПредупреждениеСообщение(, "Формирование справочника ""Варианты отчетов"" завершено.");
	КонецЕсли;
	
КонецПроцедуры

// Заполнить справочники типа "ВариантыОтчетов", "РегламентированнаяОтчетность" типовых конфигураций.
//
&НаСервере
Функция ОМЗаполнитьВариантыОтчетовНаСервере(ОбъектПроцедура, Отказ)
	
	// В последовательности появления обработчиков ...
	Отказ = Истина;
	Попытка
		ВыполнитьБезопасно(ОбъектПроцедура);
		Отказ = Ложь;
	Исключение
		Попытка
			ВыполнитьБезопасно("ВариантыОтчетов.Обновить");
			Отказ = Ложь;
		Исключение
			Попытка
				// БСП "2.1.3.50".
				Обработчики = НоваяТаблицаОбработчиковОбновления();
				Попытка
					Выполнить("ВариантыОтчетов.ПриДобавленииОбработчиковОбновления(Обработчики)");
				Исключение
					Отказ = Истина;
					Возврат "Произошла ошибка. Справочник не заполнен.
					|
					|БСП: " + Объект.ВерсияБСП + "
					|Обработчик: ВариантыОтчетов.ПриДобавленииОбработчиковОбновления(Обработчики).";
				КонецПопытки;
				
				ПараметрыОбновления = Новый Структура("МонопольныйРежим,РазделенныеОбработчики");
				ПараметрыОбновления.МонопольныйРежим = Истина;
				ПараметрыОбновления.РазделенныеОбработчики = Обработчики;
				Попытка
					Выполнить("ВариантыОтчетов.ОбновитьОбщиеДанные(ПараметрыОбновления)");
				Исключение
					Попытка
						Выполнить("ВариантыОтчетов.ОбновитьОбщиеДанные()");
					Исключение
						Отказ = Истина;
						Возврат "Произошла ошибка. Справочник не заполнен.
						|
						|БСП: " + Объект.ВерсияБСП + "
						|Обработчик: ВариантыОтчетов.ОбновитьОбщиеДанные().";
					КонецПопытки;
				КонецПопытки;
				Попытка
					Выполнить("ВариантыОтчетов.ОбновитьРазделенныеДанные(ПараметрыОбновления)");
				Исключение
					Попытка
						Выполнить("ВариантыОтчетов.ОбновитьРазделенныеДанные()");
					Исключение
						Отказ = Истина;
						Возврат "Произошла ошибка. Справочник не заполнен.
						|
						|БСП: " + Объект.ВерсияБСП + "
						|Обработчик: ВариантыОтчетов.ОбновитьРазделенныеДанные().";
					КонецПопытки;
				КонецПопытки;
				Отказ = Ложь;
			Исключение
				Отказ = Истина;
				Возврат "Произошла ошибка. Справочник не заполнен.
				|
				|БСП: " + Объект.ВерсияБСП + "
				|Обработчик (устаревшее): " + ОбъектПроцедура + ".";
			КонецПопытки;
		КонецПопытки;
	КонецПопытки;
	
	Возврат "Успешно";
	
КонецФункции

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица с колонками:
//                       Версия        - номер версии конфигурации, при переходе на которую должна
//                                       быть выполнена процедура-обработчик обновления
//                       Процедура     - полное имя процедуры-обработчика обновления. 
//                                       Должна быть обязательно экспортной. 
//                       Опциональный  - если Истина, то обработчик не должен срабатывать
//                                       при первом запуске на "пустой" базе.
//                       Приоритет     - Число. Для внутреннего использования.
//                       ОбщиеДанные   - если Истина, то обработчик должен срабатывать до
//                                       выполнения любых обработчиков, использующих разделенные
//                                       данные.
//                       УправлениеОбработчиками - Булево. Если Истина обработчик должен иметь
//                                       параметр типа структура в котором есть свойство 
//                                       РазделенныеОбработчики - таблица значений со структурой возвращаемой
//                                       этой функцией. Используются только колонки Процедура,
//                                       Приоритет и МонопольныйРежим.
//                                       В случае необходимости выполнения разделенного обработчика,
//                                       в данную таблицу необходимо добавить строку с описанием 
//                                       процедуры обработчика.
//                                       Имеет смысл только для обязательных (Версия = *)
//                                       обработчиков обновления с установленным флагом ОбщиеДанные
//                       ВыполнятьВГруппеОбязательных - Булево. Следует указывать если обработчик требуется
//                                       выполнять в одной группе с обработчиками на версии "*".
//                                       При этом, возможно менять порядок выполнения обработчика 
//                                       относительно других путем изменения приоритета.
//                       МонопольныйРежим - Неопределено, Булево. 
//                                       Неопределено - обработчик должен безусловно выполняться в 
//                                       монопольном режиме.
//                                       Для обязательных обработчиков обновления (Версия = "*")
//                                        Ложь - обработчик не требует монопольного режима
//                                        Истина - обработчик может требовать монопольного режима
//                                         для выполнения.
//                                         В такие обработчики передается параметр типа структура 
//                                         со свойством МонопольныйРежим (типа булево). 
//                                         При запуске обработчика в монопольном режиме передается
//                                          значение Истина. В этом случае обработчик должен выполнить
//                                          требуемые действия по обновлению. Изменение параметра
//                                          в теле обработчика игнорируется.
//                                         При запуске обработчика в немонопольном режиме передается
//                                          значение Ложь. В этом случае обработчик не должен вносить
//                                          никакие изменения в ИБ.
//                                          Если в результате анализа выясняется что обработчику требуется
//                                          изменить данные ИБ следует установить значение параметра в
//                                          Истина и прекратить выполнение обработчика.
//                                          В этом случае оперативное (немонопольное обновление ИБ) будет
//                                          отменено и выдана ошибка с требованием выполнить обновление
//                                          в монопольном режиме.
//                                       Для обработчиков перехода на конкретную версию (версия <> *)
//                                        Ложь - обработчик не требует монопольного режима для выполнения
//                                        Истина - обработчик требует монопольного режима для выполнения
//
&НаСервере
Функция НоваяТаблицаОбработчиковОбновления()
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	Обработчики.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("УправлениеОбработчиками", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("ВыполнятьВГруппеОбязательных", Новый ОписаниеТипов("Булево"));
	Обработчики.Колонки.Добавить("МонопольныйРежим");
	
	Возврат Обработчики;
	
КонецФункции

&НаКлиенте
Процедура ОМЗаполнитьВариантыОтчетовРеквизиты(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	Перем КВоНеПомеченныхНаУдаление, КВоПомеченныхНаУдаление, КВоНеНайдено, КВоЗаполненных;
	
	ТекстВопроса = 
	"БСП: Нештатное заполнение реквизитов элемента справочника ""Варианты отчетов"".
	|Дополнительно: Настройка размещения элемента по Предопределенному варианту.
	|
	|Заполняемые реквизиты:
	|- Предопределенный вариант;
	|- Отчет.
	|
	|Отбор элементов справочника ""Варианты отчетов"", подлежащих заполнению:
	|- ПредопределенныйВариант = <Не заполнено> или <Объект не найден>...;
	|- Отчет = Непользовательский;
	|- Тип отчета = внутренний;
	|
	|Ситуации, при которых возникает необходимость заполнения реквизита справочника:
	|- Некорректное обновление конфигурации (Главный, периферийный узлы РИБ).
	|
	|Рекомендация:
	|Перед выполнением процедуры заполнения справочника произвести удаление элементов, помеченных на удаление,
	|или произвести непосредственное удаление вручную двойных записей в справочнике, ести таковые имеются.
	|
	|Вы подтверждаете заполнение реквизита справочника?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ЗАПОЛНЕНИЕ СПРАВОЧНИКА ""ВАРИАНТЫ ОТЧЕТОВ""", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриЗаполненииРеквизитовВариантовОтчетов(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриЗаполненииРеквизитовВариантовОтчетов"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриЗаполненииРеквизитовВариантовОтчетов(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние("Подождите...
	|Производится заполнение реквизитов ""Предопределенный вариант"", ""Отчет"".");
	
	КВоНеПомеченныхНаУдаление = 0;
	КВоПомеченныхНаУдаление = 0;
	КВоНеНайдено = 0;
	КВоЗаполненных = ЗаполнитьВариантыОтчетовРеквизиты(КВоНеПомеченныхНаУдаление, КВоПомеченныхНаУдаление, КВоНеНайдено);
	Если КВоЗаполненных > 0 Тогда
		ПредупреждениеСообщение(, "Заполнение завершено.
		|При необходимости отмените регистрацию объектов в узлах РИБ.
		|
		|Заполнено элементов: " + КВоЗаполненных + "
		|Помеченных на удаление: " + КВоПомеченныхНаУдаление + "
		|Непомеченных на удаление: " + КВоНеПомеченныхНаУдаление + "
		|Не найдено предопределенных: " + КВоНеНайдено + "
		|ВСЕГО: " + (КВоНеПомеченныхНаУдаление + КВоПомеченныхНаУдаление));
	Иначе
		ПредупреждениеСообщение(, "Заполнение не произведено.
		|" + ?(КВоНеНайдено=0, "Отсутствуют незаполненные элементы справочника ""Варианты отчетов"".", "Не найдены предопределенные варианты.") + "
		|
		|Заполнено элементов: " + КВоЗаполненных + "
		|Помеченных на удаление: " + КВоПомеченныхНаУдаление + "
		|Непомеченных на удаление: " + КВоНеПомеченныхНаУдаление + "
		|Не найдено предопределенных: " + КВоНеНайдено + "
		|ВСЕГО: " + (КВоНеПомеченныхНаУдаление + КВоПомеченныхНаУдаление));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВариантыОтчетовРеквизиты(КВоНеПомеченныхНаУдаление, КВоПомеченныхНаУдаление, КВоНеНайдено)
	Перем КВоЗаполненных;
	
	КВоЗаполненных = 0;
	Попытка
		КВоЗаполненных = ЗаполнитьВариантыОтчетовОтдельныеРеквизиты(КВоНеПомеченныхНаУдаление, КВоПомеченныхНаУдаление, КВоНеНайдено);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Возврат КВоЗаполненных;
	
КонецФункции

// Произвести заполнение реквизита справочника "ВариантыОтчетов" по справочнику "ПредопределенныеВариантыОтчетов".
//
// Примечание: справочник "ПредопределенныеВариантыОтчетов" не участвует в обменах.
//
&НаСервере
Функция ЗаполнитьВариантыОтчетовОтдельныеРеквизиты(КВоНеПомеченныхНаУдаление, КВоПомеченныхНаУдаление, КВоНеНайдено)
	Перем ВыборкаВариантыОтчетов;
	Перем ВариантСсылка, ВариантОбъект;
	Перем ТаблицаДетальныеЗаписи, ПредопределенныйВариант;
	Перем РазмещениеПредопределенного, НовоеРазмещение;
	Перем КВоЗаполненных;
	
	ВыборкаВариантыОтчетов = Справочники.ВариантыОтчетов.Выбрать();
	
	КВоЗаполненных = 0;
	Пока ВыборкаВариантыОтчетов.Следующий() Цикл
		
		ВариантСсылка = ВыборкаВариантыОтчетов.Ссылка;
		
		Если ВариантСсылка.ПометкаУдаления Тогда
			КВоПомеченныхНаУдаление = КВоПомеченныхНаУдаление + 1;
			Продолжить;
		КонецЕсли;
		КВоНеПомеченныхНаУдаление = КВоНеПомеченныхНаУдаление + 1;
		
		Если НЕ ВариантСсылка.Пользовательский И ВариантСсылка.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний
			И (Найти(Строка(ВариантСсылка.ПредопределенныйВариант), "<Объект не найден>") > 0 
			ИЛИ НЕ ЗначениеЗаполнено(ВариантСсылка.ПредопределенныйВариант)) Тогда
			
			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			// Данный фрагмент построен конструктором.
			// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПредопределенныеВариантыОтчетов.Ссылка,
			|	ПредопределенныеВариантыОтчетов.Наименование,
			|	ПредопределенныеВариантыОтчетов.КлючВарианта,
			|	ПредопределенныеВариантыОтчетов.Отчет
			|ИЗ
			|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
			|ГДЕ
			|	ПредопределенныеВариантыОтчетов.Наименование = &Наименование
			|	И ПредопределенныеВариантыОтчетов.КлючВарианта = &КлючВарианта
			|	И НЕ ПредопределенныеВариантыОтчетов.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Наименование", ВариантСсылка.Наименование);
			Запрос.УстановитьПараметр("КлючВарианта", ВариантСсылка.КлючВарианта);
			
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				КВоНеНайдено = КВоНеНайдено + 1;
				Сообщить("Не найден предопр.вариант для " + ВариантСсылка);
				Продолжить;
			КонецЕсли;
			
			ТаблицаДетальныеЗаписи = Результат.Выгрузить();
			ПредопределенныйВариант= ТаблицаДетальныеЗаписи[0].Ссылка;
			
			ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
			ВариантОбъект.ОбменДанными.Загрузка = Истина;
			ВариантОбъект.ПредопределенныйВариант = ПредопределенныйВариант;
			ВариантОбъект.Отчет = ПредопределенныйВариант.Отчет;
			
			// Размещение варианта отчета в подсистемах.
			ВариантОбъект.Размещение.Очистить();
			Для Каждого РазмещениеПредопределенного ИЗ ПредопределенныйВариант.Размещение Цикл
				НовоеРазмещение = ВариантОбъект.Размещение.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеРазмещение, РазмещениеПредопределенного);
				Попытка
					НовоеРазмещение.Использование = Истина;
				Исключение
				КонецПопытки;
				Попытка
					НовоеРазмещение.РазделИлиГруппа = РазмещениеПредопределенного.Подсистема;
				Исключение
					Попытка
						НовоеРазмещение.Подсистема = РазмещениеПредопределенного.Подсистема;
					Исключение
					КонецПопытки;
				КонецПопытки;
			КонецЦикла;
			
			Попытка
				ВариантОбъект.Записать();
				КВоЗаполненных = КВоЗаполненных + 1;
			Исключение
				Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
			
			Если Объект.ПоказыватьСообщения Тогда
				Сообщить("Установлен предопр.вариант для " + ВариантСсылка);
			КонецЕсли;
			Если ТаблицаДетальныеЗаписи.Количество() > 1 Тогда
				Сообщить("Для варианта отчета " + ВариантСсылка + " найдено " + ТаблицаДетальныеЗаписи.Количество() + " предопределенных вариантов.
				|Необходимо удостовериться в правильности выбранного значения.");
			КонецЕсли;
			
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КВоЗаполненных;

КонецФункции

// Выполнить экспортную процедуру без параметров по имени.
//
// Параметры
//  ИмяЭкспортнойПроцедуры – Строка    – имя экспортной процедуры в формате 
//										 <имя объекта>.<имя процедуры>, где <имя объекта> - это
// 										 общий модуль или модуль менеджера объекта.
//
// Пример:
//  ВыполнитьБезопасно("МойОбщийМодуль.МояПроцедура"); 
//
&НаСервере
Процедура ВыполнитьБезопасно(Знач ИмяЭкспортнойПроцедуры)
	
	// Проверка предусловий на формат ИмяЭкспортнойПроцедуры.
	ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ИмяЭкспортнойПроцедуры, ".");
	Если ЧастиИмени.Количество() <> 2 И ЧастиИмени.Количество() <> 3 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;

	ИмяОбъекта = ЧастиИмени[0];
	Если ЧастиИмени.Количество() = 2 И Метаданные.ОбщиеМодули.Найти(ИмяОбъекта) = Неопределено Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
			ИмяЭкспортнойПроцедуры);
	КонецЕсли;
		
	Если ЧастиИмени.Количество() = 3 Тогда
		ДопустимыеИменаТипов = Новый Массив;
		ДопустимыеИменаТипов.Добавить(ВРег("Константы"));
		ДопустимыеИменаТипов.Добавить(ВРег("Справочники"));
		ДопустимыеИменаТипов.Добавить(ВРег("Документы"));
		ДопустимыеИменаТипов.Добавить(ВРег("РегистрыСведений"));
		ДопустимыеИменаТипов.Добавить(ВРег("РегистрыНакопления"));
		ДопустимыеИменаТипов.Добавить(ВРег("РегистрыБухгалтерии"));
		ДопустимыеИменаТипов.Добавить(ВРег("РегистрыРасчета"));
		ДопустимыеИменаТипов.Добавить(ВРег("БизнесПроцессы"));
		ДопустимыеИменаТипов.Добавить(ВРег("Задачи"));
		ДопустимыеИменаТипов.Добавить(ВРег("ПланыСчетов"));
		ДопустимыеИменаТипов.Добавить(ВРег("ПланыОбмена"));
		ДопустимыеИменаТипов.Добавить(ВРег("ПланыВидовХарактеристик"));
		ДопустимыеИменаТипов.Добавить(ВРег("ПланыВидовРасчета"));
		ИмяТипа = ВРег(ЧастиИмени[0]);
		Если ДопустимыеИменаТипов.Найти(ИмяТипа) = Неопределено Тогда
			ВызватьИсключение ПодставитьПараметрыВСтроку(
				НСтр("ru='Неправильный формат параметра ИмяЭкспортнойПроцедуры (%1)'"),
				ИмяЭкспортнойПроцедуры);
		КонецЕсли;
	КонецЕсли;

	Выполнить ИмяЭкспортнойПроцедуры + "();";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ.
//

// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции 

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает номер версии конфигурации без номера сборки
//
// Параметры:
//  Версия - Строка - версия конфигурации в формате РР.ПП.ЗЗ.СС,
//                    где СС – номер сборки, который будет удален
// 
//  Возвращаемое значение:
//  Строка - номер версии конфигурации без номера сборки в формате РР.ПП.ЗЗ
//
&НаСервере
Функция ВерсияКонфигурацииБезНомераСборки(Знач Версия)
	
	Массив = РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Если Массив.Количество() < 3 Тогда
		Возврат Версия;
	КонецЕсли;
	
	Результат = "[Редакция].[Подредакция]";
	Результат = СтрЗаменить(Результат, "[Редакция]",    Массив[0]);
	Результат = СтрЗаменить(Результат, "[Подредакция]", Массив[1]);
	
	Возврат Результат;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  – Строка – второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   – больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаСервере
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2)
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
		                    НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
	                         НСтр("ru = 'Неправильный формат строки версии: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Проверяет содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки - строка для проверки.
//  УчитыватьЛидирующиеНули - Булево - нужно ли учитывать лидирующие нули.
//  УчитыватьПробелы - Булево - нужно ли учитывать пробелы.
//
// Возвращаемое значение:
//  Истина       - строка содержит только цифры;
//  Ложь         - строка содержит не только цифры.
//
&НаСервере
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ТолькоЦифрыВСтроке()

// Удаляет двойные кавычки с начала и конца строки, если они есть.
//
// Параметры:
//  Строка       - входная строка;
//
// Возвращаемое значение:
//  Строка - строка без двойных кавычек.
// 
&НаСервере
Функция СократитьДвойныеКавычки(Знач Строка)
	
	Результат = Строка;
	Пока Найти(Результат, """") = 1 Цикл
		Результат = Сред(Результат, 2);
	КонецЦикла;
	Пока Найти(Результат, """") = СтрДлина(Результат) И СтрДлина(Результат) > 0 Цикл
		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 
          
// Процедура удаляет из строки указанное количество символов справа
//
&НаСервере
Процедура УдалитьПоследнийСимволВСтроке(Текст, ЧислоСимволов)
	
	Текст = Лев(Текст, СтрДлина(Текст) - ЧислоСимволов);
	
КонецПроцедуры 

// Находит символ в строке с конца
//
&НаСервере
Функция НайтиСимволСКонца(Знач СтрокаВся, Знач ОдинСимвол)
	
	НачальнаяПозиция = 1;
	ДлинаСтроки = СтрДлина(СтрокаВся);
	
	Для ТекущаяПозиция = 1 По СтрДлина(СтрокаВся) Цикл
		РеальнаяПозиция = ДлинаСтроки - ТекущаяПозиция + 1;
		ТекущийСимвол = Сред(СтрокаВся, РеальнаяПозиция, 1);
		Если ТекущийСимвол = ОдинСимвол Тогда
			Возврат РеальнаяПозиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

// Функция проверяет, является ли переданная в неё строка уникальным идентификатором
//
&НаСервере
Функция ЭтоУникальныйИдентификатор(ИдентификаторСтрока)
	
	УИСтрока = ИдентификаторСтрока;
	Шаблон = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX";
	
	Если СтрДлина(Шаблон) <> СтрДлина(УИСтрока) Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Сч = 1 По СтрДлина(УИСтрока) Цикл
		Если КодСимвола(Шаблон, сч) = 88 И 
			((КодСимвола(УИСтрока, сч) < 48 ИЛИ КодСимвола(УИСтрока, сч) > 57) И (КодСимвола(УИСтрока, сч) < 97 или КодСимвола(УИСтрока, сч) > 102)) Тогда
			Возврат ложь;
		 ИначеЕсли КодСимвола(Шаблон, сч) = 45 И КодСимвола(УИСтрока, сч) <> 45 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// Формирует строку повторяющихся символов заданной длины
//
&НаСервере
Функция СформироватьСтрокуСимволов(Символ, КоличествоСимволов)
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Индекс = 1 ПО КоличествоСимволов Цикл
		
		Результат = Результат + Символ;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Дополняет переданную в качестве первого параметра строку символами слева\справа до заданной длины и возвращает ее
// Незначащие символы слева и справа удаляются
// По умолчанию функция добавляет строку нулями слева
//
// Параметры:
//  Строка      - Строка - исходная строка, которую необходимо дополнить символами до заданной длины
//  ДлинаСтроки - Число - требуемая конечная длина строки
//  Символ      - Строка - (необязательный) значение символа, которым необходимо дополнить строку
//  Режим       - Строка - (необязательный) [Слева|Справа] режим добавления символов к исходной строке: слева или справа
// 
// Пример 1:
// Строка = "1234"; ДлинаСтроки = 10; Символ = "0"; Режим = "Слева"
// Возврат: "0000001234"
//
// Пример 2:
// Строка = " 1234  "; ДлинаСтроки = 10; Символ = "#"; Режим = "Справа"
// Возврат: "1234######"
//
// Возвращаемое значение:
//  Строка - строка, дополненная символами слева или справа
//
&НаСервере
Функция ДополнитьСтроку(Знач Строка, Знач ДлинаСтроки, Знач Символ = "0", Знач Режим = "Слева")
	
	Если ПустаяСтрока(Символ) Тогда
		Символ = "0";
	КонецЕсли;
	
	// длина символа не должна превышать единицы
	Символ = Лев(Символ, 1);
	
	// удаляем крайние пробелы слева и справа строки
	Строка = СокрЛП(Строка);
	
	КоличествоСимволовНадоДобавить = ДлинаСтроки - СтрДлина(Строка);
	
	Если КоличествоСимволовНадоДобавить > 0 Тогда
		
		СтрокаДляДобавления = СформироватьСтрокуСимволов(Символ, КоличествоСимволовНадоДобавить);
		
		Если ВРег(Режим) = "СЛЕВА" Тогда
			
			Строка = СтрокаДляДобавления + Строка;
			
		ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
			
			Строка = Строка + СтрокаДляДобавления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

// Удаляет повторяющиеся символы слева/справа в переданной строке
//
// Параметры:
//  Строка      - Строка - исходная строка, из которой необходимо удалить повторяющиеся символы
//  Символ      - Строка - значение символа, который необходимо удалить
//  Режим       - Строка - (необязательный) [Слева|Справа] режим добавления символов к исходной строке: слева или справа
//
&НаСервере
Функция УдалитьПовторяющиесяСимволы(Знач Строка, Знач Символ, Знач Режим = "Слева")
	
	Если ВРег(Режим) = "СЛЕВА" Тогда
		
		Пока Лев(Строка, 1)= Символ Цикл
			
			Строка = Сред(Строка, 2);
			
		КонецЦикла;
		
	ИначеЕсли ВРег(Режим) = "СПРАВА" Тогда
		
		Пока Прав(Строка, 1)= Символ Цикл
			
			Строка = Лев(Строка, СтрДлина(Строка) - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

// Выполняет в строке ГДЕ замену символов ЧТО на соответствующие по номерам символы из строки НаЧто
//
// Параметры:
//  Что		- Строка - строка символов, каждый из которых будет заменен
//  Где		- Строка - исходная строка, в которой будет выполняться замена
//  НаЧто	- Строка - строка символов, на каждый из которых нужно заменить исходные символы
// 
//  Возвращаемое значение:
//  Строка - строка с замененными символами
//
&НаСервере
Функция ЗаменитьОдниСимволыДругими(Что, Где, НаЧто)
	
	Рез = Где;
	
	Для Сч = 1 По СтрДлина(Что) Цикл
		Рез = СтрЗаменить(Рез, Сред(Что, Сч, 1), Сред(НаЧто, Сч, 1));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура ПеренестиИзТаблицыИсточникаВТаблицуПриемник(Источник, Приемник)
	
	Для Каждого СтрокаИсточника ИЗ Источник Цикл
	
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНОЕ/НЕМОДАЛЬНОЕ ПРЕДУПРЕЖДЕНИЕ.
//

&НаКлиенте
Процедура ПредупреждениеСообщение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Если ИспользоватьРежимМодальности() Тогда
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НЕМОДАЛЬНЫЙ ВОПРОС.
//

&НаКлиенте
// Реализация функции Вопрос() в 8.3 БЕЗ ИСПОЛЬЗОВАНИЯ РЕЖИМА МОДАЛЬНОСТИ.
Процедура Вопрос83(ТекстВопроса, ТаймаутВопроса, ОбработкаОповещения)
	Перем ПараметрыВопроса, Кнопки;
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.Таймаут = ТаймаутВопроса;
	
	Кнопки = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса.КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
	ПараметрыВопроса.КнопкаТаймаута = КодВозвратаДиалога.Нет;
	
	ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ПараметрыВопроса);

КонецПроцедуры
	
// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//   Структура   - параметры процедуры ПоказатьВопросПользователю:
//     КнопкаПоУмолчанию             - Произвольный       - определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению. 
//     Таймаут                       - Число              - интервал времени в секундах до автоматического закрытия окна вопроса. 
//     КнопкаТаймаута                - Произвольный       - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                          на которой отображается количество секунд, оставшихся до истечения таймаута. 
//     Заголовок                     - Строка             - заголовок вопроса. 
//     ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево      - если Истина, то в окне вопроса будет доступен одноименный флажок.
//     БольшеНеЗадаватьЭтотВопрос    - Булево             - принимает значение, выбранное пользователем в соответствующем флажке.
//
&НаКлиенте
Функция ПараметрыВопросаПользователю()
	Перем Параметры, Заголовок;
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	//Попытка
	//	Выполнить("Заголовок = ПолучитьЗаголовокКлиентскогоПриложения()");
	//Исключение
	//	Выполнить("Заголовок = ПолучитьЗаголовокПриложения()");
	//КонецПопытки;
	Заголовок = "";
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Истина);
	Параметры.Вставить("Картинка", Неопределено);
	
	Возврат Параметры;
	
КонецФункции	

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение системного перечисления или значение, 
//                                                              связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может использоваться значение 
//                                                  перечисления КодВозвратаДиалога, а также другие значения, поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
&НаКлиенте
Процедура ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено)
	Перем Параметры;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе	
		Параметры = ПараметрыВопросаПользователю();
	КонецЕсли;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = Параметры.КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = Параметры.КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Параметры.Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Параметры.Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстВопроса);
	Параметры.Вставить("Картинка",          Параметры.Картинка);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Параметры.БлокироватьВесьИнтерфейс);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос);
	
	Выполнить("ОткрытьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВопрос, Параметры, , , , , ОбработкаОповещения)");
	
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога
&НаКлиенте
Функция КодВозвратаДиалогаВСтроку(Значение)
	Перем Результат;
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодВозвратаДиалога(Ответ)
	Перем ЗначениеОтвета;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ЗначениеОтвета = Ответ.Значение;
	Иначе
		ЗначениеОтвета = Ответ;
	КонецЕсли;
	
	Возврат ЗначениеОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВКЛАДКА "ДОПОЛНИТЕЛЬНО". ВОССТАНОВИТЬ БИТЫЙ ОБЪЕКТ.
//

&НаКлиенте
Процедура GUIDНайтиБитыеОбъекты(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	ТекстВопроса = "Поиск объектов типа:
	|<Объект не найден> (84:bf5600145e3710ab11dda4c605dbe824)
	|
	|Процесс поиска может быть длительным.
	|
	|Продолжить поиск ""Битых"" объектов ?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "ПОИСК ""БИТЫХ"" ОБЪЕКТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриGUIDНайтиБитыеОбъекты(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриGUIDНайтиБитыеОбъекты"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриGUIDНайтиБитыеОбъекты(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Подождите. Производится поиск ""Битых"" объектов.");
	
	GUIDНайтиБитыеОбъектыНаСервере();
	
	Если Объект.БитыеСсылки.Количество() = 0 Тогда
		ПредупреждениеСообщение(, """Бытые"" объекты не найдены.");
	Иначе
		ПредупреждениеСообщение(, "Найдено " + Объект.БитыеСсылки.Количество() + " ""Битых"" объектов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура GUIDНайтиБитыеОбъектыНаСервере()
	
	тзБитыеСсылки = ОбъектОбработка().GUIDНайтиБитыеОбъектыНаСервере();
	
	ЗначениеВРеквизитФормы(тзБитыеСсылки, "Объект.БитыеСсылки");
	
КонецПроцедуры

&НаКлиенте
Процедура GUIDБитыйОбъектПерейтиКВосстановлению(Команда)
	
	Если Объект.БитыеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.БитыеСсылки.ТекущаяСтрока = Неопределено Тогда
		Элементы.БитыеСсылки.ТекущаяСтрока = 0;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.БитыеСсылки.ТекущиеДанные;
	
	ЭтаФорма.БитыйОбъектТекст = ТекущиеДанные.ОбъектНеНайденСсылка;
	ЭтаФорма.БитыйОбъектGUIDСтрока = Неопределено;
	ЭтаФорма.БитыйОбъектТип = Неопределено;
	ЭтаФорма.БитыйОбъектСсылка = Неопределено;
	
КонецПроцедуры

// МО: Дата и Время создания Объекта.
//
&НаСервере
Функция GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ОбъектБД)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ОбъектБД);
	
КонецФункции

&НаКлиенте
Процедура GUIDБитыйОбъектТекстПриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура GUIDБитыйОбъектПолучитьГУИД(Команда)
	
	ЭтаФорма.БитыйОбъектGUID = GUIDБитогоОбъектаНаСервере(ЭтаФорма.БитыйОбъектТекст);
	ЭтаФорма.БитыйОбъектGUIDСтрока = Строка(ЭтаФорма.БитыйОбъектGUID);
	ЭтаФорма.БитыйОбъектДатаИВремя = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ЭтаФорма.БитыйОбъектGUID);
	
	Если ЗначениеЗаполнено(Объект.ИмяОбъектаБД) И Объект.БитыеСсылки.Количество() = 0 Тогда
		ОбъектБДСсылкаСтрокой = Объект.ТипОбъектаБД + "Ссылка." + Объект.ИмяОбъектаБД;
		ЭтаФорма.БитыйОбъектТип = вОписаниеТипа(ОбъектБДСсылкаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

// МО: GUID "Битого" Объекта.
//
&НаСервере
Функция GUIDБитогоОбъектаНаСервере(Знач БитыйGUID)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.GUIDБитогоОбъектаНаСервере(БитыйGUID);
	
КонецФункции

// Получить ссылку "Битого" Объекта по GUID.
//
&НаКлиенте
Процедура GUIDБитыйОбъектВосстановить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.БитыйОбъектТип) Тогда
		ПредупреждениеСообщение(, "Не выбран тип восстанавливаемого Объекта.");
		Возврат;
	КонецЕсли;
	
	ОбъектБитыйВосстановленный = GUIDБитыйОбъектВосстановитьНаСервере(ЭтаФорма.БитыйОбъектТип.Типы()[0], ЭтаФорма.БитыйОбъектGUID, ЭтаФорма.БитыйОбъектДатаИВремя, ЭтаФорма.БитыйОбъектТекст);
	
	ЭтаФорма.ОтобразитьИзменениеДанных(ЭтаФорма.БитыйОбъектСсылка,ВидИзмененияДанных.Изменение);

КонецПроцедуры

// МО: Получить ссылку "Битого" Объекта по GUID.
//
&НаСервере
Функция GUIDБитыйОбъектВосстановитьНаСервере(БитыйОбъектТип, БитыйОбъектGUID, БитыйОбъектДатаИВремя, БитыйОбъектТекст)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ЭтаФорма.БитыйОбъектСсылка = ОбъектОбработка.GUIDВосстановитьОбъектПоТипуИГУИД(БитыйОбъектТип, БитыйОбъектGUID, БитыйОбъектДатаИВремя, БитыйОбъектТекст);
	
	Возврат ЭтаФорма.БитыйОбъектСсылка;
	
КонецФункции

&НаКлиенте
Процедура GUIDБитыйОбъектПерейтиКРедактированию(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.БитыйОбъектСсылка) Тогда
		ПредупреждениеСообщение(, "Ссылка на Объект не определена.");
		Возврат;
	КонецЕсли;
	
	Объект.ОбъектБД = ЭтаФорма.БитыйОбъектСсылка;
	
	ОбъектБДПриИзменении(Команда);
	
	ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаСвойстваОбъекта;
	
КонецПроцедуры

&НаКлиенте
Процедура GUIDНайтиОбъектСсылка(Команда)
	
	Попытка
		GUID = Новый УникальныйИдентификатор(ЭтаФорма.ОбъектGUIDТекст);
	Исключение
		GUID = Неопределено;
	КонецПопытки;
	
	Если GUID = Неопределено Тогда
		ПредупреждениеСообщение(, "Не удалось преобразовать " + ЭтаФорма.ОбъектGUIDТекст + "
		|в Уникальный идентификатор.");
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ОбъектGUIDСсылка = GUIDНайтиОбъектНаСервере(GUID);
	
КонецПроцедуры

&НаСервере
Функция GUIDНайтиОбъектНаСервере(GUID)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	Возврат ОбъектОбработка.GUIDПолучитьСсылкуНаОбъектНаСервере(GUID);
	
КонецФункции

&НаКлиенте
Процедура GUIDОчиститьПараметры()
	
	ЭтаФорма.БитыйОбъектGUID		= Неопределено;
	ЭтаФорма.БитыйОбъектGUIDСтрока 	= "";
	ЭтаФорма.БитыйОбъектДатаИВремя 	= Неопределено;
	ЭтаФорма.БитыйОбъектСсылка		= Неопределено;
	ЭтаФорма.БитыйОбъектТекст		= "";
	ЭтаФорма.БитыйОбъектТип			= Неопределено;
	
	ЭтаФорма.ОбъектGUIDТекст		= "";
	ЭтаФорма.ОбъектGUIDСсылка		= Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ: ДОПОЛНИТЕЛЬНЫЕ ОБРАБОТКИ.
//

////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ: Статистика документов.
//
	
&НаКлиенте
Процедура ДокументСтатистикаОчиститьПараметры()
	
	ЭтаФорма.ДокументСтатистикаПериод.ДатаНачала = Дата("00010101");
	ЭтаФорма.ДокументСтатистикаПериод.ДатаОкончания = Дата("00010101");
	
	ЭтаФорма.ДокументСтатистикаОрганизация = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНачальныеПараметрыДокументСтатистика(Команда)
	
	УстановитьЗначениеПараметраНаВкладке("ДокументСтатистикаОрганизация", "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	
	ЭтаФорма.ДокументСтатистикаПериод.ДатаНачала = НачалоГода(ТекущаяДата());
	ЭтаФорма.ДокументСтатистикаПериод.ДатаОкончания = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатистикуДокументов(Команда)
	
	ФормаВывестиВСостояние(, , "Подождите. Производится формирование статистики по документам ...");
	
	ПолучитьСтатистикуДокументовНаСервере();
	
КонецПроцедуры

// МО:
//
&НаСервере
Процедура ПолучитьСтатистикуДокументовНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаСтатистика = РеквизитФормыВЗначение("ДокументТСтатистика");
	
	ТаблицаСтатистика = ОбъектОбработка.ПолучитьСтатистикуДокументовНаСервере(ТаблицаСтатистика, ЭтаФорма.ДокументСтатистикаПериод.ДатаНачала, ЭтаФорма.ДокументСтатистикаПериод.ДатаОкончания, ЭтаФорма.ДокументСтатистикаОрганизация);
	
	ЗначениеВРеквизитФормы(ТаблицаСтатистика, "ДокументТСтатистика");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ: Непроведенные документы с движениями.
// Используется список видов документов из проведения документов.
//

&НаКлиенте
Процедура ПолучитьНачальныеПараметрыДляОбработкиДвиженийДокументов(Команда)
	
	ДокументДвиженияОчиститьПараметры();
	
	Состояние("Подождите...
	|Производится формирование списка типов документов ...");
	
	ЭтаФорма.ДокументТДвижения.Очистить();
	
	УстановитьЗначениеПараметраНаВкладке("ДокументДвиженияОрганизация", "Организация", "Организации", Объект.ЕстьСправочникОрганизации);
	
	ЭтаФорма.ДокументДвиженияПериод.ДатаНачала = НачалоГода(ТекущаяДата());
	ЭтаФорма.ДокументДвиженияПериод.ДатаОкончания = ТекущаяДата();
	
	ЭтаФорма.ДокументДвиженияУчитыватьАктивностьЗаписейРегистров = Истина;
	
	ПолучитьНачальныеПараметрыДляОбработкиДвиженийДокументовНаСервере();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);

КонецПроцедуры

// МО:
//
&НаСервере
Процедура ПолучитьНачальныеПараметрыДляОбработкиДвиженийДокументовНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаСписокВидовДокументов = РеквизитФормыВЗначение("ДокументДвиженияТСписокВидов");
	
	ТаблицаСписокВидовДокументов = ОбъектОбработка.ДокументДвиженияЗаполнитьСписокВидовДокументов(ТаблицаСписокВидовДокументов, ЭтаФорма.ДокументДвиженияОрганизация);
	
	ЗначениеВРеквизитФормы(ТаблицаСписокВидовДокументов, "ДокументДвиженияТСписокВидов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНепроведенныеДокументыСДвижениями(Команда)
	
	ДокументДвиженияОчиститьПараметрыПередПоискомДокументов();
	
	ОчиститьСообщения();

	Состояние("Подождите... 
	|Производится поиск непроведенных документов c движениями.");
	
	Элементы.ТДокументДвижения.Заголовок = "Документы [непроведенные с движениями]";
	
	ПолучитьНепроведенныеДокументыСДвижениямиНаСервере();
	
	ПредупреждениеСообщение(, "" + ?(ЭтаФорма.ДокументТДвижения.Количество() = 0, "Отсутствуют непроведенные документы с движениями.", "Количество непроведенных документов с движениями: " + ЭтаФорма.ДокументТДвижения.Количество()));
	
	ЭтаФорма.ДокументДвиженияНайденыНепроведенныеСДвижениями = ЭтаФорма.ДокументТДвижения.Количество() > 0;
	
	Элементы.кнДокументДвиженияОчиститьДвиженияНепроведенныхСДвижениями.Доступность = ЭтаФорма.ДокументДвиженияНайденыНепроведенныеСДвижениями;
	
КонецПроцедуры

// МО:
//
&НаСервере
Процедура ПолучитьНепроведенныеДокументыСДвижениямиНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаДокументыДвижения = РеквизитФормыВЗначение("ДокументТДвижения");
	
	ТаблицаДокументыДвижения = ОбъектОбработка.ПолучитьНепроведенныеДокументыСДвижениямиНаСервере(ЭтаФорма.ДокументДвиженияТСписокВидов, ТаблицаДокументыДвижения, ЭтаФорма.ДокументДвиженияУчитыватьАктивностьЗаписейРегистров, ЭтаФорма.ДокументДвиженияПериод.ДатаНачала, ЭтаФорма.ДокументДвиженияПериод.ДатаОкончания, ЭтаФорма.ДокументДвиженияОрганизация);
	
	ЗначениеВРеквизитФормы(ТаблицаДокументыДвижения, "ДокументТДвижения");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДвиженияНепроведенныхСДвижениями(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	
	Если ЭтаФорма.ДокументТДвижения.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Список непроведенных документов, имеющих движения пуст.
		|Операция прервана.");
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ТДокументДвижения.Заголовок = "Документы [непроведенные с движениями]" Тогда
		ПредупреждениеСообщение(, "Поиск непроведенных документов, имеющих движения не производился.
		|Операция прервана.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Существуют непроведенные документы, имеющие движения.
	|Для корректности данных в Информационной Базе 
	|необходимо очистить движения таких документов.
	|
	|Очищаются движения документов, проведение которых возможно.
	|
	|Удалить движения непроведенных документов ?";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "УДАЛЕНИЕ ДВИЖЕНИЙ НЕПРОВЕДЕННЫХ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриУдаленииДвиженийНепроведенныхДокументовСДвижениями(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриУдаленииДвиженийНепроведенныхДокументовСДвижениями"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриУдаленииДвиженийНепроведенныхДокументовСДвижениями(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние("Подождите...
	|Производится удаление движений непроведенных документов.");
	
	КоличествоОчищенных = УдалитьДвиженияНепроведенныхСДвижениямиНаСервере();
	
	ПредупреждениеСообщение(, "Удалены движения документов: " + КоличествоОчищенных + " из " + ЭтаФорма.ДокументТДвижения.Количество() + "
	|
	|Рекомендуется произвести повторную проверку ""Найти непроведенные с движениями"" 
	|для проверки произведенных действий.");
	
КонецПроцедуры

&НаСервере
Функция УдалитьДвиженияНепроведенныхСДвижениямиНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаДокументыДвижения = РеквизитФормыВЗначение("ДокументТДвижения");
	
	КоличествоОчищенных = ОбъектОбработка.УдалитьДвиженияНепроведенныхСДвижениямиНаСервере(ТаблицаДокументыДвижения);
	
	Возврат КоличествоОчищенных;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПроведенныеДокументыБезДвижений(Команда)
	
	ДокументДвиженияОчиститьПараметрыПередПоискомДокументов();
	
	ОчиститьСообщения();
	
	Состояние("Подождите...
	|Производится поиск проведенных документов без движений.");
	
	Элементы.ТДокументДвижения.Заголовок = "Документы [проведенные без движений]";
	
	ПолучитьПроведенныеДокументыБезДвиженийНаСервере();
	
	ПредупреждениеСообщение(, "" + ?(ЭтаФорма.ДокументТДвижения.Количество() = 0, "Отсутствуют проведенные документы без движений.", "Количество проведенных документов без движений: " + ЭтаФорма.ДокументТДвижения.Количество()));
	
	ЭтаФорма.ДокументДвиженияНайденыПроведенныеБезДвижений = ЭтаФорма.ДокументТДвижения.Количество() > 0;
	
	Элементы.кнДокументДвиженияПровестиПроведенныеБезДвижений.Доступность = ЭтаФорма.ДокументДвиженияНайденыПроведенныеБезДвижений;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПроведенныеДокументыБезДвиженийНаСервере()
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаДокументыДвижения = РеквизитФормыВЗначение("ДокументТДвижения");
	
	ТаблицаДокументыДвижения = ОбъектОбработка.ПолучитьПроведенныеДокументыБезДвиженийНаСервере(ЭтаФорма.ДокументДвиженияТСписокВидов, ТаблицаДокументыДвижения, ЭтаФорма.ДокументДвиженияУчитыватьАктивностьЗаписейРегистров, ЭтаФорма.ДокументДвиженияПериод.ДатаНачала, ЭтаФорма.ДокументДвиженияПериод.ДатаОкончания, ЭтаФорма.ДокументДвиженияОрганизация);
	
	ЗначениеВРеквизитФормы(ТаблицаДокументыДвижения, "ДокументТДвижения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиПроведенныеБезДвижений(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении, Отказ;
	
	Если ЭтаФорма.ДокументТДвижения.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Список проведенных документов, не имеющих движения пуст.
		|Операция прервана.");
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ТДокументДвижения.Заголовок = "Документы [проведенные без движений]" Тогда
		ПредупреждениеСообщение(, "Поиск проведенных документов, не имеющих движения не производился.
		|Операция прервана.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Существуют проведенные документы, не имеющие движения.
	|Для корректности данных в Информационной Базе
	|необходимо перепровести данные документы.
	|
	|Проводятся документов, проведение которых возможно.
	|
	|Провести документы без движений ?";
	
	Отказ = Неопределено;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕННЫЕ ДОКУМЕНТЫ БЕЗ ДВИЖЕНИЙ", КодВозвратаДиалога.Нет);
		Отказ = Ложь;
		ВызватьОбработкуОтветаПриПроведенииПроведенныхДокументовБезДвижений(Ответ, Отказ);
	Иначе
		Если Отказ = Неопределено Тогда
			// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
			Отказ = Ложь;
			Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПроведенииПроведенныхДокументовБезДвижений"", ЭтотОбъект, Отказ)");
			Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПроведенииПроведенныхДокументовБезДвижений(Ответ, Отказ) Экспорт
	Перем ЗначениеОтвета, ДопСообщение;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние("Подождите...
	|Производится проведение документов без движений.");
	
	КоличествоПроведенных = ПровестиПроведенныеБезДвиженийНаСервере(Отказ);
	
	ДопСообщение = "";
	Если Отказ И Объект.ВыполнятьВТранзакции Тогда
		ДопСообщение = "ВНИМАНИЕ! Транзакция отменена. Состояние документов - прежнее.";
	КонецЕсли;
	
	ПредупреждениеСообщение(, "Проведено документов: " + КоличествоПроведенных + " из " + ЭтаФорма.ДокументТДвижения.Количество() + "
	|" + ДопСообщение + "
	|Рекомендуется произвести повторную проверку ""Найти проведенные без движений"" 
	|для проверки произведенных действий.");
	
КонецПроцедуры

&НаСервере
Функция ПровестиПроведенныеБезДвиженийНаСервере(Отказ)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ТаблицаДокументыДвижения = РеквизитФормыВЗначение("ДокументТДвижения");
	
	КоличествоПроведенных = ОбъектОбработка.ПровестиПроведенныеБезДвиженийНаСервере(ТаблицаДокументыДвижения, Отказ);
	
	Возврат КоличествоПроведенных;
	
КонецФункции

&НаКлиенте
Процедура ДокументДвиженияУстановитьФлажки(Команда)
	
	ДокументДвиженияУстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДвиженияСнятьФлажки(Команда)
	
	ДокументДвиженияУстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Кнопка Инвентировать флажки в списке видов документов.
//
&НаКлиенте
Процедура ДокументДвиженияУстановитьФлажкиПроводимых(Команда)
	
	Для Каждого ВидДокумента ИЗ ЭтаФорма.ДокументДвиженияТСписокВидов Цикл
		Если ВидДокумента.ПроведениеРазрешено Тогда		// ..., например, КОРРЕКТИРОВКА РЕГИСТРОВ не проводится, но имеет движения! Нецелесобразно.
			Если ВидДокумента.Имя = "ЧекККМ" ИЛИ ВидДокумента.Значение = "ЧекККМВозврат" Тогда		// Чеки ККМ: По-умолчанию не рассматриваем.
				ВидДокумента.Пометка = Ложь;
			Иначе	
				ВидДокумента.Пометка = Истина;
			КонецЕсли;
		Иначе	
			ВидДокумента.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вкладка "Документ (Дополнительно)". Кнопка Установить/Снять флажки в списке видов документов.
//
&НаКлиенте
Процедура ДокументДвиженияУстановитьСнятьФлажки(Флажок)
	
	Для Каждого ВидДокумента ИЗ ЭтаФорма.ДокументДвиженияТСписокВидов Цикл
		ВидДокумента.Пометка = Флажок;
		Если ВидДокумента.Имя = "ЧекККМ" ИЛИ ВидДокумента.Значение = "ЧекККМВозврат" Тогда		// Чеки ККМ: По-умолчанию не рассматриваем.
			ВидДокумента.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Не используется.
&НаСервере
Функция ПолучитьПризнакПроведениеРазрешеноДляДокументаНаСервере(ИмяДокумента)
	
	Возврат Метаданные.НайтиПоПолномуИмени("Документ." + ИмяДокумента).Проведение = МетаДанные.СвойстваОбъектов.Проведение.Разрешить;
	
КонецФункции

&НаКлиенте
Процедура ДокументДвиженияОчиститьПараметрыПередПоискомДокументов()
	
	ЭтаФорма.ДокументДвиженияНайденыПроведенныеБезДвижений = Ложь;
	ЭтаФорма.ДокументДвиженияНайденыНепроведенныеСДвижениями = Ложь;
	
	Элементы.кнДокументДвиженияПровестиПроведенныеБезДвижений.Доступность = Ложь;
	Элементы.кнДокументДвиженияОчиститьДвиженияНепроведенныхСДвижениями.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументДвиженияОчиститьПараметры()
	
	Элементы.ТДокументДвижения.Заголовок = "Список документов";
	
	ЭтаФорма.ДокументДвиженияПериод.ДатаНачала = Дата("00010101");
	ЭтаФорма.ДокументДвиженияПериод.ДатаОкончания = Дата("00010101");
	
	ЭтаФорма.ДокументДвиженияОрганизация = Неопределено;
	
	ЭтаФорма.ДокументДвиженияУчитыватьАктивностьЗаписейРегистров = Истина;
	
	ЭтаФорма.ДокументДвиженияНайденыПроведенныеБезДвижений = Ложь;
	ЭтаФорма.ДокументДвиженияНайденыНепроведенныеСДвижениями = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ: Удаление документов.
// Используется список видов документов.
//

&НаКлиенте
Процедура ПолучитьНачальныеПараметрыДляУдаленияДокументов(Команда)
	Перем МетаданныеСодержатСправочникНоменклатура;
	
	ДокументУдалениеОчиститьПараметры();
	
	Состояние("Подождите...
	|Производится формирование списка типов документов ...");
	
	ЭтаФорма.ДокументТУдаление.Очистить();
	
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеОрганизации"	, "Организация"		, "Организации"		, Объект.ЕстьСправочникОрганизации);
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеСклады"		, "Склад"			, "Склады"			, Объект.ЕстьСправочникСклады);
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеМагазины"		, "Магазин"			, "Магазины"		, Объект.ЕстьСправочникМагазины);
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеКассы"		, "Касса"			, "Кассы"			, Объект.ЕстьСправочникКассы);
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеКассыККМ"		, "КассаККМ"		, "КассыККМ"		, Объект.ЕстьСправочникКассыККМ);
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеПодразделения", "Подразделение"	, "Подразделения"	, Объект.ЕстьСправочникПодразделения);
	УстановитьЗначениеПараметраНаВкладке("ДокументУдалениеПодразделенияОрганизаций", "ПодразделениеОрганизации", "ПодразделенияОрганизаций", Объект.ЕстьСправочникПодразделенияОрганизаций);

	ЭтаФорма.ДокументУдалениеПериод.ДатаНачала = НачалоГода(ТекущаяДата());
	ЭтаФорма.ДокументУдалениеПериод.ДатаОкончания = ТекущаяДата();
	ЭтаФорма.ДокументУдалениеВремяОжидания = 1;
	
	УстановитьЗначениеПараметраГруппаНоменклатура("ДокументУдалениеГруппаНоменклатуры");
	Элементы.ДокументУдалениеПоискПоНоменклатуре.ТолькоПросмотр = НЕ Объект.ЕстьСправочникНоменклатура;
	Элементы.ДокументУдалениеГруппаНоменклатуры.ТолькоПросмотр  = Истина;
	
	ЭтаФорма.ДокументУдалениеПометкаУдаление = "ПометкаНаУдаление";
	
	ПолучитьНачальныеПараметрыДляУдалениеДокументовНаСервере();
	
	ФормаОпределитьДоступнность(Объект.ТипОбъектаБД);
	
КонецПроцедуры

// МО:
//
&НаСервере
Процедура ПолучитьНачальныеПараметрыДляУдалениеДокументовНаСервере()
	
	ТаблицаСписокВидовДокументов = РеквизитФормыВЗначение("ДокументУдалениеТСписокВидов");
	
	ТаблицаСписокВидовДокументов = ОбъектОбработка().ДокументУдалениеЗаполнитьСписокВидовДокументов(ТаблицаСписокВидовДокументов, ЭтаФорма.ДокументУдалениеОрганизации);
	
	ЗначениеВРеквизитФормы(ТаблицаСписокВидовДокументов, "ДокументУдалениеТСписокВидов");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраГруппаНоменклатура(ИмяРеквизитаФормы)
	
	Если Объект.ЕстьСправочникНоменклатура Тогда
		Элементы[ИмяРеквизитаФормы].ТолькоПросмотр = Ложь;
		ОграничитьТипЭлемента(ИмяРеквизитаФормы, "СправочникСсылка.Номенклатура");
	Иначе
		Элементы[ИмяРеквизитаФормы].ТолькоПросмотр = Истина;
		ЭтаФорма[ИмяРеквизитаФормы] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУдалениеПоискПоНоменклатуреПриИзменении(Элемент)
	
	Элементы.ДокументУдалениеГруппаНоменклатуры.ТолькоПросмотр  = НЕ Этаформа.ДокументУдалениеПоискПоНоменклатуре;
	Элементы.ДокументУдалениеУдалитьНоменклатуру.ТолькоПросмотр	= НЕ Этаформа.ДокументУдалениеПоискПоНоменклатуре;
	Если НЕ Этаформа.ДокументУдалениеПоискПоНоменклатуре Тогда
		ЭтаФорма.ДокументУдалениеГруппаНоменклатуры = Неопределено;
		ЭтаФорма.ДокументУдалениеУдалитьНоменклатуру= Ложь;
	Иначе
		ПредупреждениеСообщение(, "Отбор по группе номенклатуры существенно замедляет 
		|формирование списка документов для последующего удаления.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУдалениеПолучитьСписокУдаляемых(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	Перем КоличествоДокументов;
	
	Если ЭтаФорма.ДокументУдалениеПоискПоНоменклатуре И НЕ ЗначениеЗаполнено(ЭтаФорма.ДокументУдалениеГруппаНоменклатуры) Тогда
		ПредупреждениеСообщение(, "Не заполнен реквизит ""Группа номенклатуры"".");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "
	|Параметры основного отбора:
	|- Период (обязательный).
	|- Организация (обязательный, если существует в конфигурации).
	|- Склад (опция, если существует в конфигурации).
	|- Магазин (опция, если существует в конфигурации).
	|- Касса (опция, если существует в конфигурации).
	|- КассаККМ (опция, если существует в конфигурации).
	|- Подчиненные (для документов, которые могут выступать основанием для других документов).
	|
	|Дополнительно:
	|- Номенклатура (опция, если существует в конфигурации).
	|  При отборе по номенклатуре:
	|  * Игнорируется содержание таблицы типов документов.
	|  * Учитываются параметры: Период, Организация, Склад, Магазин, Касса, КассаККМ, Подразделение, ПодразделениеОрганизации.
	|Отбор по номенклатуре рекомендуется произвести после удаления по основному отбору.
	|Отбор по номенклатуре - длительная операция.
	|
	|Исключаются документы, помеченные на удаление.
	|
	|Произвести отбор документов?
	|";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "ОТБОР ДОКУМЕНТОВ ДЛЯ УДАЛЕНИЯ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриПолученииСпискаУдаляемыхДокументов(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриПолученииСпискаУдаляемыхДокументов"", ЭтотОбъект, Неопределено)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриПолученииСпискаУдаляемыхДокументов(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ВремяНачала = ВремяВМиллисекундах();
	
	ОчиститьСообщения();
	
	Состояние("Подождите. Производится формирование списка документов
	|для последующего удаления.");
	
	ДокументУдалениеПолучитьСписокУдаляемыхДокументовНаСервере();
	
	КоличествоДокументовИмеющихРеквизитОрганизация 				= ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитОрганизация"				, Истина)).Количество();
	КоличествоДокументовИмеющихРеквизитСклад					= ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитСклад"					, Истина)).Количество();
	КоличествоДокументовИмеющихРеквизитМагазин 					= ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитМагазин"					, Истина)).Количество();
	КоличествоДокументовИмеющихРеквизитКасса 					= ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитКасса"					, Истина)).Количество();
	КоличествоДокументовИмеющихРеквизитКассаККМ 				= ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитКассаККМ"					, Истина)).Количество();
	КоличествоДокументовИмеющихРеквизитПодразделение 			= ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитПодразделение"			, Истина)).Количество();
	КоличествоДокументовИмеющихРеквизитПодразделениеОрганизации = ЭтаФорма.ДокументТУдаление.НайтиСтроки(Новый Структура("ЕстьРеквизитПодразделениеОрганизации"	, Истина)).Количество();
	
	ВремяОкончания = ВремяВМиллисекундах();
	ЗатраченоВремени = "" + (ВремяОкончания - ВремяНачала)/1000 + " с";
	
	ПредупреждениеСообщение(, "Отобрано " + ЭтаФорма.ДокументТУдаление.Количество() + " документов,
	|из них:
	|" + КоличествоДокументовИмеющихРеквизитОрганизация + ", содержащих реквизит ""Организация"".
	|" + КоличествоДокументовИмеющихРеквизитСклад + ", содержащих реквизит ""Склад"".
	|" + КоличествоДокументовИмеющихРеквизитМагазин + ", содержащих реквизит ""Магазин"".
	|" + КоличествоДокументовИмеющихРеквизитКасса + ", содержащих реквизит ""Касса"".
	|" + КоличествоДокументовИмеющихРеквизитКассаККМ + ", содержащих реквизит ""КассаККМ"".
	|" + КоличествоДокументовИмеющихРеквизитПодразделение + ", содержащих реквизит ""Подразделение"".
	|" + КоличествоДокументовИмеющихРеквизитПодразделениеОрганизации + ", содержащих реквизит ""ПодразделениеОрганизации"".
	| 
	|Затрачено: " + ЗатраченоВремени);
	
КонецПроцедуры

&НаСервере
Процедура ДокументУдалениеПолучитьСписокУдаляемыхДокументовНаСервере()
	
	ТаблицаДокументыУдаление = РеквизитФормыВЗначение("ДокументТУдаление");
	
	ТаблицаДокументыУдаление = ОбъектОбработка().ДокументУдалениеПолучитьСписокУдаляемыхДокументовНаСервере(ЭтаФорма.ДокументУдалениеТСписокВидов, ТаблицаДокументыУдаление, ЭтаФорма.ДокументУдалениеПериод.ДатаНачала, ЭтаФорма.ДокументУдалениеПериод.ДатаОкончания, ЭтаФорма.ДокументУдалениеОрганизации, ЭтаФорма.ДокументУдалениеСклады, ЭтаФорма.ДокументУдалениеМагазины, ЭтаФорма.ДокументУдалениеКассы, ЭтаФорма.ДокументУдалениеКассыККМ, ЭтаФорма.ДокументУдалениеПодразделения, ЭтаФорма.ДокументУдалениеПодразделенияОрганизаций, ЭтаФорма.ДокументУдалениеПоискПоСвязанным, ЭтаФорма.ДокументУдалениеПоискПоНоменклатуре, ЭтаФорма.ДокументУдалениеГруппаНоменклатуры);
	
	ЗначениеВРеквизитФормы(ТаблицаДокументыУдаление, "ДокументТУдаление");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУдалениеПроизвестиУдалениеДокументов(Команда)
	Перем ТекстВопроса, Ответ, ОписаниеОповещенияОЗавершении;
	Перем КоличествоУдаленныхДокументов;
	Перем Текст2, Текст3;
	
	Если ЭтаФорма.ДокументУдалениеПометкаУдаление = "ПометкаНаУдаление" Тогда
		ТекстВопроса = "
		|Пометка на удаление документов, отмеченных флажком ""П"" (Пометка) в таблице документов.
		|
		|Фактическое удаление производится штатной процедурой ""Удаление помеченных объектов"".
		|
		|Произвести удаление документов?
		|";
		Текст2 = "Пометка на удаление";
		Текст3 = "Помечено на удаление";
	Иначе
		ТекстВопроса = "
		|Удаление документов, отмеченных флажком ""П"" (Пометка) в таблице документов.
		|(без возможности восстановления)
		|
		|Произвести удаление документов?
		|";
		Текст2 = "Удаление";
		Текст3 = "Удалено";
	КонецЕсли;
	
	Параметр = Новый Структура;
	Параметр.Вставить("Текст2", Текст2);
	Параметр.Вставить("Текст3", Текст3);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, "УДАЛЕНИЕ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриУдаленииДокументовПоСписку(Ответ, Параметр);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриУдаленииДокументовПоСписку"", ЭтотОбъект, Параметр)");
		Вопрос83(ТекстВопроса, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриУдаленииДокументовПоСписку(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Состояние("Подождите. Производится " + Параметр.Текст2 + " документов.");
	
	КоличествоУдаленныхДокументов = 0;
	ДокументУдалениеПроизвестиУдалениеДокументовНаСервере(КоличествоУдаленныхДокументов);
	
	Если КоличествоУдаленныхДокументов > 0 Тогда
		ПредупреждениеСообщение(, "" + Параметр.Текст3 + ": " + КоличествоУдаленныхДокументов + " документов.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументУдалениеПроизвестиУдалениеДокументовНаСервере(КоличествоУдаленныхДокументов)
	
	ТаблицаДокументыУдаление = РеквизитФормыВЗначение("ДокументТУдаление");
	
	ТаблицаДокументыУдаление = ОбъектОбработка().ДокументУдалениеПроизвестиУдалениеДокументовНаСервере(ЭтаФорма.ДокументУдалениеПометкаУдаление, ТаблицаДокументыУдаление, ЭтаФорма.ДокументУдалениеВремяОжидания, КоличествоУдаленныхДокументов, ЭтаФорма.ДокументУдалениеУдалитьНоменклатуру, ЭтаФорма.ДокументУдалениеГруппаНоменклатуры);
	
	ЗначениеВРеквизитФормы(ТаблицаДокументыУдаление, "ДокументТУдаление");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУдалениеПолеЯвляетсяОснованиемДляОткрытие(Элемент, СтандартнаяОбработка)
	Перем МногоСтрочныйТекст;
	
	Если ТипЗнч(Элемент.ТекстРедактирования) = Тип("Строка") Тогда
		МногоСтрочныйТекст = СтрЗаменить(Элемент.ТекстРедактирования, ",", Символы.ПС);
	Иначе
		МногоСтрочныйТекст = СтрЗаменить(Элемент.ТекстРедактирования, ";", Символы.ПС);
	КонецЕсли;
	
	ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУдалениеОчиститьПараметры()
	
	ЭтаФорма.ДокументУдалениеПериод.ДатаНачала = Дата("00010101");
	ЭтаФорма.ДокументУдалениеПериод.ДатаОкончания = Дата("00010101");
	
	ЭтаФорма.ДокументУдалениеОрганизации			= Новый СписокЗначений;
	ЭтаФорма.ДокументУдалениеСклады 				= Новый СписокЗначений;
	ЭтаФорма.ДокументУдалениеМагазины 				= Новый СписокЗначений;
	ЭтаФорма.ДокументУдалениеКассы 					= Новый СписокЗначений;
	ЭтаФорма.ДокументУдалениеКассыККМ				= Новый СписокЗначений;
	ЭтаФорма.ДокументУдалениеПодразделения			= Новый СписокЗначений;
	ЭтаФорма.ДокументУдалениеПодразделенияОрганизаций= Новый СписокЗначений;
	
	ЭтаФорма.ДокументУдалениеПометкаУдаление 		= Неопределено;
	
	Этаформа.ДокументУдалениеПоискПоНоменклатуре 	= Ложь;
	ЭтаФорма.ДокументУдалениеГруппаНоменклатуры 	= Неопределено;
	
	Элементы.ДокументУдалениеПоискПоНоменклатуре.ТолькоПросмотр = Истина;
	Элементы.ДокументУдалениеГруппаНоменклатуры.ТолькоПросмотр  = Истина;
	
	ЭтаФорма.ДокументУдалениеВремяОжидания = 0;
	
	ЭтаФорма.ДокументУдалениеТСписокВидов.Очистить();
	ЭтаФорма.ДокументТУдаление.Очистить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕТАДАННЫЕ.
//

&НаСервере
Функция	МетаданныеСодержатСправочник(ОбъектОбработка, ИмяСправочника)
	
	Возврат ОбъектОбработка.МетаданныеСодержатСправочник(ИмяСправочника);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПАРСЕР ЗАПРОСА.
//

&НаКлиенте
Процедура ОМПарсерЗапроса(Команда)
	//
	//ИмяФормыПарсераЗапроса = Объект.ПараметрыСеансаОбработки.ИмяФормыПарсераЗапроса;
	//
	//Если ИмяФормыПарсераЗапроса = Неопределено Тогда
	//	ПредупреждениеСообщение(, "Форма ""ИмяФормыПарсераЗапроса"" не найдена.");
	//	Возврат;
	//КонецЕсли;
	//
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("ПараметрыСеансаОбработки", Объект.ПараметрыСеансаОбработки);
	//				
	//ФормаПарсерЗапроса = ПолучитьФорму(ИмяФормыПарсераЗапроса, СтруктураПараметров);
	//ФормаПарсерЗапроса.ВладелецФормы = ЭтаФорма;
	//ФормаПарсерЗапроса.ЗакрыватьПриЗакрытииВладельца = Истина;
	//	
	//ФормаПарсерЗапроса.Открыть();
	//
КонецПроцедуры
