Перем СчетчикОбновленийФормы, СчетчикСообщенийПриОбновлении;
Перем СтрокаРавно;
Перем НовыйТипОбъектаБД;
Перем ЭтаФормаЗаголовок;

// Обработка, в основном, ориентирована на работу в управляемом приложении.
// Поэтому основная форма - Управляемая.
// Для подключения обработки в конфигурациях на обычном интерфейсе
// необходимо указать в свойствах обработки в качестве основной формы обычную, имеющей имя: "Обычная".

// Для ВызоваОбработки из 1С после добавления её в справочник "Дополнительные отчеты и обработки", если используется Команда.Использование = "ВызовКлиентскогоМетода";
// В
// &НаСервере
// Функция СведенияОВнешнейОбработке() Экспорт
// ...
// Команда.Использование = "ВызовКлиентскогоМетода";
// ...
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// Синтаксис для вида внешней обработки "ЗаполнениеОбъекта".
	
	ОбъектБД = ОбъектыНазначения[0];
	СохранитьЗначение("ОбъектБД", ОбъектБД);
	
	Если ИдентификаторКоманды = "Администратор1С-ОткрытьОбъектВ" Тогда
		Открыть();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ОбъектБДПриИзменении(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЙ ОБЪЕКТ ФОРМЫ.
// 

Процедура ОбъектБДНачалоВыбора(Элемент, СтандартнаяОбработка)
	Перем ОписаниеОповещенияОЗакрытии_1;
	
	Если Элемент.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		// Обычная или Управляемая Формы (форма конфигурации).
		// Управляемая форма: УстановкаНачальногоЗначения ???.
		
		СтандартнаяОбработка 	= Ложь;
	
		ТипОбъектаБД 			= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
		ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
		
		ИспользоватьФормуСписка = Ложь;
		
		Параметры = Новый Структура;
		Параметры.Вставить("РежимВыбора" , Истина);
		Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
			Параметры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		КонецЕсли;
		
		ФормаВыбораОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаВыбора", Параметры, ЭтаФорма);
		ФормаВыбораОбъектаБД.ЗакрыватьПриВыборе = Истина;
		ФормаВыбораОбъектаБД.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		Если ТипЗнч(ФормаВыбораОбъектаБД) = Тип("Форма") Тогда
			ФормаВыбораОбъектаБД.РежимВыбора = Истина;
			
			Попытка
				// В ФормкВыбора должено присутствовать ПараметрВыборГруппИЭлементов.
				Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
					ФормаВыбораОбъектаБД.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
				КонецЕсли;
			Исключение
				// ФормаВыбора ???
				// Открытие некоторых справочников в некоторых конфигурацмях.
				ПредупреждениеСообщение(, "ФормаВыбора не может быть открыта.
				|
				|Возможные причины:
				|
				|1. При открытии ФормыВыбора производится специфическая обработка (например используется отбор) результат которой - отказ в запуске.
				|2. Возможно открываемая форма (со специфической обработкой при запуске) не является ФормойВыбора списочного типа - отказ в запуске.
				|");
			КонецПопытки;
			
			Попытка
				ФормаВыбораОбъектаБД.НачальноеЗначениеВыбора = ОбъектБД;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3).
			ВыбранныйОбъектБД = ФормаВыбораОбъектаБД.ОткрытьМодально();
			ВызватьОбработкуВыбранногоОбъектаБД(ВыбранныйОбъектБД, Элемент);
		Иначе
			// Стандартно в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗакрытии_1 = Новый ОписаниеОповещения(""ВызватьОбработкуВыбранногоОбъектаБД"", ЭтаФорма, Элемент)");
			Попытка
				Выполнить("ФормаВыбораОбъектаБД.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии_1");
			Исключение
				// Платформа 8.3.5.1443. Обычная форма. Режим модальности: "НеИспользовать"..
				// Отсутствие реквизита ФормаВыбораОбъектаБД.ОписаниеОповещенияОЗакрытии у: ПланОбмена.
				СтандартнаяОбработка = Истина;
				Возврат;
			КонецПопытки;
			ФормаВыбораОбъектаБД.Открыть();
		КонецЕсли;
		
	Исключение
		
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
		Сообщить("МФ: " + "Не удалось открыть ФормуВыбора. Конфигурация: """ + ПараметрыСеансаОбработки.Конфигурация + """, версия " + ПараметрыСеансаОбработки.Версия, СтатусСообщения.Важное);
		Если (ПараметрыСеансаОбработки.Конфигурация = "Розница") Тогда
			Сообщить("МФ: " + "Ошибка выявлена на редакции: Розница 2.0.3.14. Справочник ""ВнешниеПользователи"" при вызове Управляемой ФормыВыбора из формы ""Обычная"" данной Обработки.", СтатусСообщения.Внимание);
		КонецЕсли;
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВызватьОбработкуВыбранногоОбъектаБД(ВыбранныйОбъектБД, Элемент) Экспорт
	
	Если НЕ ВыбранныйОбъектБД = Неопределено Тогда
		ОбъектБД = ВыбранныйОбъектБД;
		Элемент.Значение = ОбъектБД;
		ОбъектБДПриИзменении(Элемент);
	Иначе	
		Если ПоказыватьСообщения Тогда
			Сообщить("МФ: " + "Если в ФормеВыбора производились изменения с выбранным ранее Объектом " + ТипОбъектаБД + ": """ + ОбъектБД + """, то необходимо сделать Обновление Формы.", СтатусСообщения.Внимание);
		Иначе
			Элемент.Значение = ОбъектБД;
			ОбъектБДПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДПриИзменении(Элемент)
	
	ФормаОчистить();
	
	Если ОбъектБД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мдОбъектаБД				= ОбъектБД.Метаданные();
	ТипОбъектаБД 			= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	ЭтаФорма.Заголовок		= ЭтаФормаЗаголовок + " ";
	
	Если ТипОбъектаБД = ИмяТипаДокументы() Тогда
		Если НЕ ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда		// Если Документ нельзя проводить - Выделим КРАСНЫМ.
			ЭлементыФормы.ОбъектБДЗаголовок.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			ЭлементыФормы.ОбъектБДЗаголовок.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
	КонецЕсли;
		
	Если ОбъектБД.Пустая() Тогда
		Если НЕ ТипОбъектаБД = ИмяТипаДокументы() Тогда
			ЭтаФорма.Заголовок	= ЭтаФормаЗаголовок + " " + ПолноеСтроковоеИмяТипа;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		Иначе
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТипОбъектаБД + ": " + мдОбъектаБД.Синоним;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		КонецЕсли;
	Иначе
		Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыОбмена() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
			ПоказатьДвижения = Ложь;
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок  + ПолноеСтроковоеИмяТипа + ?(ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД)," (*)","") + ": " + ОбъектБД;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ?(ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД)," (*)","") + ":";
		ИначеЕсли ТипОбъектаБД = ИмяТипаДокументы() Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТипОбъектаБД + ": " + ОбъектБД;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		Иначе
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТипОбъектаБД + ": " + ОбъектБД;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		КонецЕсли;
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
	Если ЗначениеЗаполнено(ОбъектБД) Тогда
		
		СчетчикСообщенийПриОбновлении = 0;
		Если ПоказыватьСообщения Тогда
			Если НЕ Элемент = "ОбъектБДЗаписать" Тогда
				ОчиститьСообщения();
			КонецЕсли;
			Сообщить(СтрокаРавно);
			Сообщить("МФ: " + "Подождите. Производится формирование основных таблиц данных.", СтатусСообщения.ОченьВажное);
			Сообщить(СтрокаРавно);
		КонецЕсли;
		
		ОбъектБДСформироватьТРеквизиты(ОбъектБД);
		Если ПоказыватьСообщения Тогда
			Сообщить("МФ: " + "Формирование таблицы ""РеквизитыОбъекта"" завершено.", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если ТипОбъектаБД = ИмяТипаПланыСчетов() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
			// 2012.10.12. Метод мдОбъектаБД.СтандартныеТабличныеЧасти.Количество() у ПланаСчетов отсутствует.
			НаличиеСТЧ = Ложь;
			Попытка
				Тмп = мдОбъектаБД.СтандартныеТабличныеЧасти[0];
				НаличиеСТЧ = Истина;
			Исключение
				НаличиеСТЧ = Ложь;
			    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
			Если НаличиеСТЧ Тогда
				ОбъектБДСформироватьТЧасти(ОбъектБД, "СтандартныеТабличныеЧасти");
			КонецЕсли;
		КонецЕсли;
		
		Если мдОбъектаБД.ТабличныеЧасти.Количество() > 0 Тогда
			ОбъектБДСформироватьТЧасти(ОбъектБД, "ТабличныеЧасти");
		КонецЕсли;
		
		ОбъектБДПоказатьФОпцииРеквизитов(ОбъектБД);
		
		Если ПоказатьДвижения Тогда
			ОбъектБДСформироватьТДвижений(ОбъектБД, "ОбъектБДПриИзменении");
		КонецЕсли;

		Если ПоказыватьСообщения Тогда
			Если НЕ ПоказатьДвижения Тогда
				Сообщить(СтрокаРавно);
			КонецЕсли;
			Сообщить("МФ: " + "Формирование основных таблиц завершено.", СтатусСообщения.ОченьВажное);
			Сообщить(СтрокаРавно);
		КонецЕсли;
	
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТРеквизитыОбъекта;
		
	Иначе
		
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ОбъектБД;
			
	КонецЕсли;
	
	Если НовыйТипОбъектаБД Тогда
		ОбъектБДСформироватьТаблицыМетаданных(ОбъектБД);
		НовыйТипОбъектаБД = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектБДОткрытие(Элемент, СтандартнаяОбработка)
	Перем ОписаниеОповещенияОЗакрытии;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	мдОбъектаБД	 = ОбъектБД.Метаданные();
	
	Попытка
		
		// Обычная или Управляемая Формы (форма конфигурации).
		
		СтандартнаяОбработка = Ложь;
	
		ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	
		Параметры = Новый Структура("Ключ", ОбъектБД);
	
		Если ((ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик()) И мдОбъектаБД.Иерархический И ОбъектБД.ЭтоГруппа) Тогда
			ФормаОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаГруппы", Параметры, ЭтаФорма);
		Иначе	
			ФормаОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаОбъекта", Параметры, ЭтаФорма);
		КонецЕсли;
		ФормаОбъектаБД.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3).
			ФормаОбъектаБД.ОткрытьМодально();
			ВызватьОбработкуИзмененногоОбъектаБД(Неопределено, Элемент);
		Иначе
			// Стандартно в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуИзмененногоОбъектаБД"", ЭтаФорма, Элемент)");
			Выполнить("ФормаОбъектаБД.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
			ФормаОбъектаБД.Открыть();
		КонецЕсли;
		
	Исключение
		
		СтандартнаяОбработка = Истина;
		
		Если ПоказыватьСообщения Тогда
			ПредупреждениеСообщение(, "МФ: " + "Стандартное открытие ФормыОбъекта.
			|
			|Не рекомендуется вносить изменения в Объекте, т.к. после закрытия ФормыОбъекта Изменения не отразятся в Форме обработки.
			|
			|Для отображения информации в Форме - Обновите Форму.");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВызватьОбработкуИзмененногоОбъектаБД(Значение, Элемент) Экспорт
	
	ОбъектБДПриИзменении(Элемент);
		
КонецПроцедуры

Процедура ОбъектБДСформироватьТЧасти(ОбъектБД, ВидТабличнойЧасти = "ТабличныеЧасти")
	
	мдОбъектаБД		= ОбъектБД.Метаданные();
	ТипОбъектаБД	= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД)
		ИЛИ (ВидТабличнойЧасти = "ТабличныеЧасти" И мдОбъектаБД[ВидТабличнойЧасти].Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Первая = Неопределено;

	// Заполнение табличных частей ОбъектаБД.
	// 1. Создание Реквизита Формы типа "Страница".
	// 2. Создание Реквизита Формы типа "ТаблицаЗначений" на Странице.
	Для Каждого мдТЧ ИЗ мдОбъектаБД[ВидТабличнойЧасти] Цикл
		
		СчитыватьДанные = Ложь;
		Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
			Если (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ОбъектБД.ЭтоГруппа)
			ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ ОбъектБД.ЭтоГруппа)
			ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента) Тогда
				СчитыватьДанные = Истина;
			КонецЕсли;
		Иначе
			СчитыватьДанные = Истина;
		КонецЕсли;
		
		Если СчитыватьДанные Тогда
		
			Если СкрыватьПустыеТабличныеЧасти И ОбъектБД[мдТЧ.Имя].Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ФормаСтраницаТЧ		= ФормаСоздатьСтраницуИПолеДляТЗ(ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя), мдТЧ.Представление(), ЭлементыФормы.СтраницыГруппаТЧ, Ложь);
			РеквизитТаблицаТЧ	= ФормаСоздатьРеквизитТипаТЗ(ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя), ФормаСтраницаТЧ, ОбъектБД[мдТЧ.Имя].Выгрузить());
			
			Если ТипОбъектаБД = ИмяТипаПланыСчетов() И мдТЧ.Имя = "ВидыСубконто" Тогда
				ЭлементыФормы.СтраницыГруппаТЧ.Страницы.ТЧастьВидыСубконто.Заголовок = мдТЧ.Представление() + " (МАХ " + мдОбъектаБД.МаксКоличествоСубконто + ")";
			КонецЕсли;
			
			Если Первая = Неопределено Тогда
				Первая = ФормаСтраницаТЧ;
			КонецЕсли;
		Иначе
			Если ПоказыватьСообщения Тогда
				Сообщить("МФ: " + "Табличная часть: """ + мдТЧ.Имя + """ не формируется, т.к. используется для: """ + мдТЧ.Использование + """.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ((ЭлементыФормы.СтраницыГруппаТЧ.Страницы.Количество() > 1) И (ЭлементыФормы.СтраницыГруппаТЧ.Страницы.Найти("УдаляемаяСтраница") <> Неопределено)) Тогда
		ЭлементыФормы.СтраницыГруппаТЧ.Страницы.Удалить(0);
	КонецЕсли;
	
	Если НЕ Первая = Неопределено Тогда
		ЭтаФорма.ТекущийЭлемент = Первая;
	КонецЕсли;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Формирование таблиц ""ТабличныеЧасти"" Объекта завершено.", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДПоказатьФОпцииРеквизитов(ОбъектБД)
	
	ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, ТРеквизитыОбъекта, Неопределено, Ложь);
	
	Для Каждого ЭлементТЧасть ИЗ ЭлементыФормы.СтраницыГруппаТЧ.Страницы Цикл
		Если ЭлементТЧасть.Имя = "УдаляемаяСтраница" Тогда
			Продолжить;
		КонецЕсли;
		ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, ЭлементыФормы[ЭлементТЧасть.Имя] , СтрЗаменить(ЭлементТЧасть.Имя, "ТЧасть", ""), Ложь);
	КонецЦикла;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование ф.опций реквизитов завершено.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДСформироватьТДвижений(ОбъектБД, ВызывающаяПроцедура)
	
	Если НЕ ПоказатьДвижения 
		ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектБД)) 
		ИЛИ ОбъектБД = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	ОбязательноПоказать = НЕ СкрыватьПустыеТаблицыДвиженийРегистров И (мдОбъектаБД.Имя = "КорректировкаРегистров" ИЛИ мдОбъектаБД.Имя = "КорректировкаЗаписейРегистров" ИЛИ мдОбъектаБД.Движения.Количество() > 20);
	
	Если ПоказыватьСообщения ИЛИ ОбязательноПоказать Тогда
		Если ОбязательноПоказать Тогда
			Сообщить("МФ: Общее количество движений: " + мдОбъектаБД.Движения.Количество() + ".");
			Сообщить("МФ: Для того, чтобы не выводить на экрант таблицы Регистров, в которых документ не осуществил движения 
			|воспользуйтесь настройкой параметра ""Скрывать пустые таблицы движений регистров"".");
		КонецЕсли;
		Сообщить("МФ: " + "Формирование таблиц ""Движения по Регистрам"". " + ТекущаяДата() + " Подождите ... " , СтатусСообщения.Важное);
	КонецЕсли;
	
	// Заполнение табличных частей ОбъектаБД.
	// 1. Создание Реквизита Формы типа "Страница".
	// 2. Создание Реквизита Формы типа "ТаблицаЗначений" на Странице.
	Для Каждого МетаданныеРегистра ИЗ мдОбъектаБД.Движения Цикл
		Если Метаданные.РегистрыСведений.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрСведений";
			МенеджерРегистра	= РегистрыСведений[МетаданныеРегистра.Имя];
			ЭлементРодитель		= ЭлементыФормы.СтраницыГруппаРС;
		ИначеЕсли Метаданные.РегистрыНакопления.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрНакопления";
			МенеджерРегистра	= РегистрыНакопления[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= ЭлементыФормы.СтраницыГруппаРН;
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрБухгалтерии";
			МенеджерРегистра	= РегистрыБухгалтерии[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= ЭлементыФормы.СтраницыГруппаРБ;
		ИначеЕсли Метаданные.РегистрыРасчета.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрРасчета";
			МенеджерРегистра	= РегистрыРасчета[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= ЭлементыФормы.СтраницыГруппаРР;
		КонецЕсли;
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();	// Быстрее Запроса ~ 4 раза (замер производительности).
		НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБД);
		
		НаборЗаписей.Прочитать();
		
		ТаблицаРегистра = НаборЗаписей.Выгрузить();
		
		// Удалим "лишние" - "неполезные" колонки.
		ТаблицаРегистра.Колонки.Удалить("Регистратор");
		Если ТаблицаРегистра.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			ТаблицаРегистра.Колонки.Удалить("МоментВремени");
		КонецЕсли;
		
		Если СкрыватьПустыеТаблицыДвиженийРегистров И ТаблицаРегистра.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФормаСтраницаТЧ		= ФормаСоздатьСтраницуИПолеДляТЗ(ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя), МетаданныеРегистра.Представление(), ЭлементРодитель, Истина);
		РеквизитТаблицаТЧ	= ФормаСоздатьРеквизитТипаТЗ(ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя), ФормаСтраницаТЧ, ТаблицаРегистра);
		
		Если ((ЭлементРодитель.Страницы.Количество() > 1) И (ЭлементРодитель.Страницы.Найти("УдаляемаяСтраница") <> Неопределено)) Тогда
			ЭлементРодитель.Страницы.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоказыватьСообщения  ИЛИ ОбязательноПоказать Тогда
		Сообщить("МФ: " + "Формирование таблиц ""Движения по Регистрам"" Объекта  " + ТекущаяДата() + " завершено.", СтатусСообщения.Важное);
		Сообщить(СтрокаРавно);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбъектБДСформироватьТаблицыМетаданных(ОбъектБД)
	
	РезультатВыполнения	= ПолучитьСписокПодписокНаСобытияОбъектаМД(ОбъектБД);
	
	РезультатВыполнения	= ПолучитьСписокФункциональныхОпцийОбъектаМД(ОбъектБД);
	
	РезультатВыполнения	= ПолучитьСписокПлановОбменаОбъектаМД(ОбъектБД);
	
	РезультатВыполнения	= ПолучитьСписокРегистровСвязанныхСОбъектомМД(ОбъектБД);
	ЭлементыФормы.СтраницыМетаданных.Страницы.ПанельРегистры.Заголовок = РезультатВыполнения.Заголовок;
	
	РезультатВыполнения	= ПолучитьСписокВводНаОснованииОъектаМД(ОбъектБД);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Формирование таблицы ""Метаданные: Регистры"" завершено.", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДОчистка(Элемент, СтандартнаяОбработка)
	
	ОбъектБД = Неопределено;
	НовыйТипОбъектаБД = Истина;
	
	ЭтаФорма.Заголовок	= ЭтаФормаЗаголовок;
	ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "ОбъектБД:";
	ЭлементыФормы.ОбъектБДЗаголовок.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЭлементыФормы.СтраницыМетаданных.Страницы.ПанельРегистры.Заголовок = "Регистры";
	ЭлементыФормы.СтрокаСтатуса.Заголовок = "";
	
	ПоказатьДвижения = Ложь;
	
	ОчиститьСообщения();
	
	ФормаОчистить();
	
КонецПроцедуры

Процедура ОбъектБДПолучитьСтрокуСостоянияОбъекта()
	
	ЭлементыФормы.УникальныйИдентификатор.Значение = ОбъектБД.УникальныйИдентификатор();
	ЭлементыФормы.ДатаИВремяСоздания.Значение = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ОбъектБД);
	
	ЭлементыФормы.СтрокаСтатуса.Заголовок = " " + ОбъектБДПолучитьСостояниеОбъекта(ОбъектБД);
	
КонецПроцедуры

Процедура ПоказатьДвиженияПриИзменении(Элемент)
	
	Если ПоказатьДвижения Тогда
		ОбъектБДСформироватьТДвижений(ОбъектБД, "ПоказатьДвиженияПриИзменении");
	Иначе
		ФормаОчистить(Истина);
		Если ПоказыватьСообщения Тогда
			Сообщить(СтрокаРавно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМА.
// 

Функция   ФормаСоздатьСтраницуИПолеДляТЗ(Имя, Заголовок, Родитель, ТолькоПросмотр = Истина)
	
	Родитель.Страницы.Добавить(Имя, Заголовок);
	Родитель.ТекущаяСтраница = Родитель.Страницы[Имя];
	
	Элемент = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), Имя, Истина, Родитель);
	
	// Процедура "ФормаТаблицаПередНачаломИзменения" должна быть Экпортируемой.
	Элемент.УстановитьДействие("ПередНачаломИзменения", Новый Действие("ФормаТаблицаПередНачаломИзменения"));
	// Процедура "ФормаТаблицаПриАктивизацииКолонки" должна быть Экпортируемой.
	Элемент.УстановитьДействие("ПриАктивизацииКолонки", Новый Действие("ФормаТаблицаПриАктивизацииКолонки"));
	
	ФормаСтраницаТЧ = ЭлементыФормы[Имя];
	ФормаСтраницаТЧ.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Родитель, ГраницаЭлементаУправления.Низ);
	ФормаСтраницаТЧ.УстановитьПривязку(ГраницаЭлементаУправления.Право, Родитель, ГраницаЭлементаУправления.Право);
	ФормаСтраницаТЧ.Высота					= Родитель.Высота-8;
	ФормаСтраницаТЧ.Ширина					= Родитель.Ширина-2;
	ФормаСтраницаТЧ.ЧередованиеЦветовСтрок	= Истина;
	ФормаСтраницаТЧ.ИзменятьСоставСтрок		= Истина;
	ФормаСтраницаТЧ.ИзменятьПорядокСтрок	= Ложь;
	ФормаСтраницаТЧ.ТолькоПросмотр			= ТолькоПросмотр;
	ФормаСтраницаТЧ.Видимость				= Истина;
	ФормаСтраницаТЧ.Доступность				= Истина;
	ФормаСтраницаТЧ.АвтоКонтекстноеМеню 	= Истина;
	ФормаСтраницаТЧ.ВысотаШапки				= 2;
	
	Возврат ФормаСтраницаТЧ;
	
КонецФункции

Функция   ФормаСоздатьРеквизитТипаТЗ(ИмяРеквизита, ТЧНаФорме, ТаблицаТЧРЕГ)
	
	// Сдвиг Колонок: Актуально для Регистров.
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("НомерСтроки");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, -Индекс);
	КонецЕсли;
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("Период");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, ТаблицаТЧРЕГ.Колонки.Количество()-Индекс-1);
	КонецЕсли;
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("Регистратор");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, ТаблицаТЧРЕГ.Колонки.Количество()-Индекс-1);
	КонецЕсли;

	ТЧНаФорме.Значение = ТаблицаТЧРЕГ;
	ТЧНаФорме.СоздатьКолонки();
	Для Каждого КолонкаТЧ ИЗ ТЧНаФорме.Колонки Цикл
		КолонкаТЧ.РежимРедактирования 	= РежимРедактированияКолонки.Вход;
		КолонкаТЧ.ВыделятьОтрицательные = Истина;
	КонецЦикла;
	
	Возврат ТаблицаТЧРЕГ;
	
КонецФункции

// Вкладка "Реквизиты Объекта". Событие Таблицы: ПриАктивацииКолонки.
// Проверить возможность редактирования значения Реквизита.
// - Если Значение имеет тип "ХранилищеЗначения" - отказаться от редактирования.
// - Если Значение имеет тип "Булево" и Имя Реквизита = "ЭтоГруппа" для Справочника - отказаться от редактирования.
//
Процедура ФормаТаблицаПриАктивизацииКолонки(Элемент) Экспорт
	
	Если (Элемент.Значение = Неопределено ИЛИ Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущаяКолонка = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
		ТипИзменяемогоЗначения = ТипЗнч(Элемент.ТекущиеДанные.Значение);
	Иначе	
		ТипИзменяемогоЗначения = ТипЗнч(Элемент.ТекущиеДанные[Элемент.ТекущаяКолонка.Имя]);
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТипИзменяемогоЗначения = Тип("ХранилищеЗначения") Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
		
		Если НЕ Элемент.Имя = "ТРеквизитыОбъекта" Тогда
			Элемент.Колонки[Элемент.ТекущаяКолонка.Имя].ТолькоПросмотр = Истина;
			ФормаТаблицаПередНачаломИзменения(Элемент, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Реквизиты Объекта". Событие Таблицы: ПередНачаломИзменения.
// Проверить возможность редактирования значения Реквизита.
// - Если Значение имеет тип "ХранилищеЗначения" - отказаться от редактирования.
// - Если Значение имеет тип "Булево" и Имя Реквизита = "ЭтоГруппа" для Справочника - отказаться от редактирования.
//
Процедура ФормаТаблицаПередНачаломИзменения(Элемент, Отказ) Экспорт
	
	Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
		ИмяТаблицы	= "Таблица ""Реквизиты""";
		ИмяРеквизитаИзменяемогоЗначения 			= Элемент.ТекущиеДанные.Имя;
		ПредставлениеРеквизитаИзменяемогоЗначения 	= Элемент.ТекущиеДанные.Представление;
		ИзменяемоеЗначение 							= Элемент.ТекущиеДанные.Значение;
		ТипИзменяемогоЗначения 						= ТипЗнч(ИзменяемоеЗначение);
		ПроверятьРеквизитСНеопределеннымТипом		= Истина;
		ТекущаяКолонка								= Элемент.ТекущаяКолонка.Имя;
		Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
			ДлинаСтроки = Элемент.ТекущиеДанные.ОписаниеТипов.КвалификаторыСтроки.Длина;
		КонецЕсли;
	Иначе	
		ИмяТаблицы = "Таблица """ + Элемент.Имя + """";
		ИмяРеквизитаИзменяемогоЗначения 			= Элемент.ТекущаяКолонка.Имя;
		ПредставлениеРеквизитаИзменяемогоЗначения 	= Элемент.ТекущаяКолонка.ТекстШапки;
		ИзменяемоеЗначение 							= Элемент.ТекущиеДанные[ИмяРеквизитаИзменяемогоЗначения];
		ТипИзменяемогоЗначения 						= ТипЗнч(ИзменяемоеЗначение);
		ПроверятьРеквизитСНеопределеннымТипом		= Ложь;
		ТекущаяКолонка								= Элемент.ТекущаяКолонка.Имя;
		Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
			ДлинаСтроки = Элемент.Значение.Колонки[ИмяРеквизитаИзменяемогоЗначения].ТипЗначения.КвалификаторыСтроки.Длина;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ИзменяемоеЗначение, ПроверятьРеквизитСНеопределеннымТипом);
	
	Если (РезультатПроверки.Отказ) Тогда
		ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если (Элемент.Имя = "ТРеквизитыОбъекта" И ТекущаяКолонка = "Значение" И Элемент.ТекущиеДанные.Блокированный) Тогда
		ПредупреждениеСообщение(, "Изменение блокированного реквизита объекта.
		|
		|Согласно проектной логике Конфигурации """ + ПараметрыСеансаОбработки.КраткаяИнформация + """:
		|Реквизит не рекомендуется/нельзя изменять, если Объект участвует в документах.
		|
		|""Блокированные"" реквизиты определяются индивидуально для вида Объекта.");
	КонецЕсли;
	
	Если НЕ (Элемент.Имя = "ТРеквизитыОбъекта" И ТекущаяКолонка = "Проверяемый") И ТипИзменяемогоЗначения = Тип("Строка") Тогда
		Если ИспользоватьРежимМодальности() Тогда
			РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, ПредставлениеРеквизитаИзменяемогоЗначения, ДлинаСтроки, Отказ);
			Возврат;
		Иначе
			// Платформа 8.3.5.1443. Обычная форма. Режим модальности: "НеИспользовать"..
			// В процедуру РедактироватьМногострочныйТекстЗавершение(ТекстРедактирования, ПараметрыВводаСтроки) Экспорт не "приходит" значение ТекстРедактирования из ПоказатьВводСтроки().
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаОчистить(ТолькоРегистры = Ложь)
	
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРС);
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРН);
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРБ);
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРР);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблиц ""Движения по Регистрам"" Объекта очищена.", СтатусСообщения.Важное);
	КонецЕсли;
		
	Если ТолькоРегистры Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйТипОбъектаБД Тогда
		ТМетаданныеПодпискиНаСобытия.Очистить();
		ТМетаданныеФункциональныеОпции.Очистить();
		ТМетаданныеПланыОбмена.Очистить();
		ТМетаданныеРегистрыОбъекта.Очистить();
		ТМетаданныеВводитсяНаОсновании.Очистить();
		ТМетаданныеЯвляетсяОснованиемДля.Очистить();
	КонецЕсли;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблицы ""Метаданные..."" очищены.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ТСвойстваОбъекта.Очистить();
	ТРеквизитыОбъекта.Очистить();
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблицы ""Реквизиты"" Объекта очищена.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаТЧ);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблицы ""Табличные Части"" Объекта очищена.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ОбъектБД;
	
КонецПроцедуры

Процедура ФормаУдалитьСтраницы(ГруппаСтраниц)
	
	ГруппаСтраниц.Страницы.Вставить(0, "УдаляемаяСтраница", "");
	Пока ГруппаСтраниц.Страницы.Количество() > 1 Цикл
		ГруппаСтраниц.Страницы.Удалить(1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормаОпределитьДоступнность()
	
	СчетчикОбновленийФормы = СчетчикОбновленийФормы + 1;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	ЭлементыФормы.МонопольныйРежим.Заголовок = ?(МонопольныйРежим, "Монопольный режим", "Многопользовательский режим");
	
	Если ЗначениеЗаполнено(ОбъектБД) Тогда

		мдОбъектаБД = ОбъектБД.Метаданные();
		ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаТЧ, "ТабличныеЧасти");
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаТабличныеЧасти.Видимость = ОтобразитьВкладку;
		
		Если ТипОбъектаБД = ИмяТипаДокументы() Тогда
			
			Если ПоказатьДвижения Тогда
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРС, "Регистры Сведений");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыСведений.Видимость 		= ОтобразитьВкладку;
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРН, "Регистры Накопления");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыНакопления.Видимость		= ОтобразитьВкладку;
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРБ, "Регистры Бухгалтерии");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыБухгалтерии.Видимость	= ОтобразитьВкладку;
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРР, "Регистры Расчета");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыРасчета.Видимость 		= ОтобразитьВкладку;
				
			Иначе
				
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыСведений.Видимость 		= Ложь;
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыНакопления.Видимость		= Ложь;
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыБухгалтерии.Видимость	= Ложь;
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыРасчета.Видимость 		= Ложь;
				
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаТабличныеЧасти.Видимость 		= Ложь;
		
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыСведений.Видимость 		= Ложь;
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыНакопления.Видимость		= Ложь;
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыБухгалтерии.Видимость	= Ложь;
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыРасчета.Видимость 		= Ложь;
		
	КонецЕсли;
	
	ЭлементыФормы.ПоказатьДвижения.Доступность																= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	ЭлементыФормы.СкрыватьПустыеТаблицыДвиженийРегистров.Доступность										= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнЗаписать.Доступность										= ЗначениеЗаполнено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнОМСоздатьКопированием.Доступность							= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки.кнПровести.Доступность					= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы() И ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки.кнПровестиОснованиеИДокумент.Доступность	= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы() И ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки.кнОтменитьПроведение.Доступность			= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы() И ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.кнСтруктураПодчиненности.Доступность			= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.кнКартаМаршрута.Доступность					= ЗначениеЗаполнено(ОбъектБД) И (ТипОбъектаБД = ИмяТипаБизнесПроцессы() ИЛИ ТипОбъектаБД = ИмяТипаЗадачи());
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.РегистрацияОбъектаВПланахОбмена.Кнопки.кнПроверитьРегистрациюВПланахОбмена.Доступность 	= ЗначениеЗаполнено(ОбъектБД) И НЕ ТипОбъектаБД = ИмяТипаПланыОбмена();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.РегистрацияОбъектаВПланахОбмена.Кнопки.кнРегистрацияВПланахОбмена.Доступность 			= ЗначениеЗаполнено(ОбъектБД) И НЕ ТипОбъектаБД = ИмяТипаПланыОбмена();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.РегистрацияОбъектаВПланахОбмена.Кнопки.кнУдалитьРегистрациюВПланахОбмена.Доступность 		= ЗначениеЗаполнено(ОбъектБД) И НЕ ТипОбъектаБД = ИмяТипаПланыОбмена();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмУдаление.Кнопки.кнСнятьПометкуУдаления.Доступность			= ЗначениеЗаполнено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмУдаление.Кнопки.кнПометитьНаУдаление.Доступность			= ЗначениеЗаполнено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмУдаление.Кнопки.кнУдалить.Доступность						= ЗначениеЗаполнено(ОбъектБД);
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнОбновить.Доступность										= ЗначениеЗаполнено(ОбъектБД);
	
КонецПроцедуры

Функция   ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементРодитель, Вкладка)
	
	ОтобразитьВкладку = Истина;
	Если ((ЭлементРодитель.Страницы.Количество() = 1) И (ЭлементРодитель.Страницы[0].Имя = "УдаляемаяСтраница")) Тогда
		ОтобразитьВкладку = Ложь;
		Если ПоказыватьСообщения Тогда
			СчетчикСообщенийПриОбновлении = СчетчикСообщенийПриОбновлении + 1;
			//Сообщить("МФ: " + "Вкладка """ + Вкладка + """ не отображается, т.к. в ней отсутствуют таблицы с данными.");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтобразитьВкладку;
	
КонецФункции

Процедура ФормаТСвойстваОбъектаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	хЗаголовок = "Значение свойства:";
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		МногоСтрочныйТекст = СтрЗаменить(Элемент.ВыделенныйТекст, ",", Символы.ПС);
		ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, хЗаголовок);
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		МногоСтрочныйТекст = СтрЗаменить(Строка(Элемент.Значение), " ", "");
		МногоСтрочныйТекст = СтрЗаменить(МногоСтрочныйТекст, ";", Символы.ПС);
		ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, хЗаголовок);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОСМОТР/РЕДАКТИРОВАНИЕ МНОГОСТРОЧНОГО ТЕКСТА.
// 

Процедура ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, Заголовок)
	Перем ПараметрыВводаСтроки;
	
	ПараметрыВводаСтроки = Новый Структура;
	ПараметрыВводаСтроки.Вставить("Заголовок"			, Заголовок);
	ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
	ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Неопределено);
	ПараметрыВводаСтроки.Вставить("ИмяРеквизита"		, Неопределено);
	ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, МногоСтрочныйТекст);
	ПараметрыВводаСтроки.Вставить("Многострочность"		, Истина);
	
	РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);
	
КонецПроцедуры

Процедура РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, Заголовок = "", ДлинаСтроки = 1, Отказ = Ложь)
	Перем ИмяФормыМногоСтрочногоТекста, ПараметрыМСТ, ПараметрыВводаСтроки, ОписаниеОповещенияОЗакрытии;
	
	Если ДлинаСтроки = 0 ИЛИ ДлинаСтроки >= 50 Тогда
			
		ПараметрыВводаСтроки = Новый Структура;
		ПараметрыВводаСтроки.Вставить("Заголовок"			, Заголовок);
		ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
		ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Элемент.ТекущиеДанные);
		Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
			ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, "Значение");
		Иначе	
			ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, ИмяРеквизитаИзменяемогоЗначения);
		КонецЕсли;
		ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, ИзменяемоеЗначение);
		
		Если ((Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "АЛГОРИТМ") > 0) 
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "АДРЕС") > 0)
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "ЗАПРОС") > 0)
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "КОММЕНТАРИЙ") > 0)) Тогда
			
			ПараметрыВводаСтроки.Вставить("Многострочность"	, Истина);
			
			//Обычная Форма (Форма обработки).
			
			ИмяФормыМногоСтрочногоТекста = ПараметрыСеансаОбработки.ИмяФормыМногоСтрочногоТекста;
				
			ПараметрыМСТ = Новый Структура("МногоСтрочныйТекст", ИзменяемоеЗначение);
			
			ФормаМногоСтрочногоТекста = ПолучитьФорму(ИмяФормыМногоСтрочногоТекста, ПараметрыМСТ, ЭтаФорма);
			ФормаМногоСтрочногоТекста.Заголовок							= Заголовок;
			ФормаМногоСтрочногоТекста.ВладелецФормы 					= ЭтаФорма;
			ФормаМногоСтрочногоТекста.ЗакрыватьПриЗакрытииВладельца 	= Истина;
			
			ФормаМногоСтрочногоТекста.МногоСтрочныйТекст				= ИзменяемоеЗначение;
			
			Если ИспользоватьРежимМодальности() Тогда
				ФормаМногоСтрочногоТекста.ОткрытьМодально();
				РедактироватьМногострочныйТекстЗавершение(ФормаМногоСтрочногоТекста.МногоСтрочныйТекст, ПараметрыВводаСтроки);
				Отказ = Истина;
				Возврат;
			Иначе
				Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""РедактироватьМногострочныйТекстЗавершение"", ЭтаФорма, ПараметрыВводаСтроки)");
				Выполнить("ФормаМногоСтрочногоТекста.ОписаниеОповещенияОЗакрытии = ОписаниеОповещенияОЗакрытии");
				ФормаМногоСтрочногоТекста.Открыть();
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ПараметрыВводаСтроки.Вставить("Многострочность"	, Ложь);
			
		КонецЕсли;
		
		РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки)
	Перем РезультатРедактирования;
	
	Если ИспользоватьРежимМодальности() Тогда
		РезультатРедактирования = ПараметрыВводаСтроки.ИсходноеЗначение;
		РедактироватьМногострочныйТекст_ВвестиСтроку(ПараметрыВводаСтроки.ИсходноеЗначение, РезультатРедактирования, Ложь, ПараметрыВводаСтроки.Заголовок, ПараметрыВВодаСтроки.Многострочность);
		РедактироватьМногострочныйТекстЗавершение(РезультатРедактирования, ПараметрыВводаСтроки);
	Иначе
		РедактироватьМногострочныйТекст_ПоказатьВводСтроки(ПараметрыВводаСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
// Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы
//
Процедура РедактироватьМногострочныйТекст_ВвестиСтроку(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, Заголовок = Неопределено, Многострочность = Истина)
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст,,, Многострочность);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок,, Многострочность);
	КонецЕсли;
	                              
	Если НЕ ТекстВведен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатРедактирования = МногострочныйТекст Тогда
		РезультатРедактирования = МногострочныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста немодально.
Процедура РедактироватьМногострочныйТекст_ПоказатьВводСтроки(ПараметрыВводаСтроки)
	Перем ОбработчикВводаСтроки, Заголовок, ТекстРедактирования, Многострочность;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = НСтр("ru = '.'");
	КонецЕсли;
	
	Заголовок = ПараметрыВводаСтроки.Заголовок;
	ТекстРедактирования = ПараметрыВводаСтроки.ИсходноеЗначение;
	Многострочность = ПараметрыВводаСтроки.Многострочность;
	
	Выполнить("ОбработчикВводаСтроки = Новый ОписаниеОповещения(""РедактироватьМногострочныйТекстЗавершение"", ЭтаФорма, ПараметрыВводаСтроки)");
	Выполнить("ПоказатьВводСтроки(ОбработчикВводаСтроки, ТекстРедактирования, Заголовок, , Многострочность)");
	
КонецПроцедуры

// Обработчик результата работы процедуры РедактироватьМногострочныйТекст.
Процедура РедактироватьМногострочныйТекстЗавершение(ТекстРедактирования, ПараметрыВводаСтроки) Экспорт
	Перем Форма, Обработчик, ИсходноеЗначение;
	
	Форма = ПараметрыВводаСтроки.ФормаИлиОбработчик;
	ИсходноеЗначение = ПараметрыВводаСтроки.ИсходноеЗначение;
	
	Если ТекстРедактирования <> Неопределено И НЕ ПараметрыВводаСтроки.ВладелецРеквизита = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыВводаСтроки.ВладелецРеквизита, Новый Структура(ПараметрыВводаСтроки.ИмяРеквизита, ТекстРедактирования));
		Иначе
			ПараметрыВводаСтроки.ВладелецРеквизита[ПараметрыВводаСтроки.ИмяРеквизита] = ТекстРедактирования;
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			Если НЕ ТекстРедактирования = ИсходноеЗначение Тогда
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ДЕЙСТВИЯ ФОРМЫ.
// 

////////////////////////////////////////////////////////////////////////////////
// ЗАПИСАТЬ ОБЪЕКТ.
//

Процедура ОМЗаписать(Кнопка, РежимЗаписи = Неопределено)
	Перем ОписаниеОповещенияОЗавершении;
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если РежимЗаписи = Неопределено Тогда
		
		ТекстВопроса = "Подтвердите запись изменений: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
		|" + Строка(ОбъектБД);
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартный Вопрос() в модальном режиме (8.2/8.3).
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ЗАПИСЬ ОБЪЕКТА", КодВозвратаДиалога.Нет);
			ВызватьОбработкуЗаписиОбъекта(Ответ, РежимЗаписи);
		Иначе
			// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
			Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуЗаписиОбъекта"", ЭтаФорма, РежимЗаписи)");
			Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ЗАПИСЬ ОБЪЕКТА"", КодВозвратаДиалога.Нет)");
		КонецЕсли;
		
	Иначе
		
		ВызватьОбработкуЗаписиОбъекта(КодВозвратаДиалога.Да, РежимЗаписи)
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВызватьОбработкуЗаписиОбъекта(Ответ, РежимЗаписи) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если РежимЗаписи = Неопределено И (ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут) Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикСообщенийПриОбновлении = 0;
	Если ПоказыватьСообщения Тогда
		ОчиститьСообщения();
		Сообщить(СтрокаРавно);
		Если РежимЗаписи = Неопределено Тогда
			Сообщить("МФ: " + "ЗАПИСЬ """ + ТипОбъектаБД + "." + ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Сообщить("МФ: " + "ПРОВЕДЕНИЕ ДОКУМЕНТА: """ + ТипОбъектаБД + "." + ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Сообщить("МФ: " + "ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА: """ + ТипОбъектаБД + "." + ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДЗаписатьНаСервере(ОбъектБД, ЭтаФорма, Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		ОбъектБДПриИзменении("ОбъектБДЗаписать");
		Если ПоказыватьСообщения Тогда
			
			Если РежимЗаписи = Неопределено Тогда
				Сообщить("МФ: " + "ОБЪЕКТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ НЕ ЗАПИСАН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ НЕ ПРОВЕДЕН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ПРОВЕДЕНИЕ НЕ ОТМЕНЕНО.", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Сообщить(СтрокаРавно);
		КонецЕсли;
	Иначе	
		ЭлементыФормы.ОбъектБД.Значение = ОбъектБД;
		Если ПоказыватьСообщения Тогда
			
			Сообщить(СтрокаРавно);
			
			Если РежимЗаписи = Неопределено Тогда
				Сообщить("МФ: " + "ОБЪЕКТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ЗАПИСАН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ПРОВЕДЕН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ПРОВЕДЕНИЕ ОТМЕНЕНО.", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Если НЕ ПоказатьДвижения ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить(СтрокаРавно);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимЗаписи = Неопределено Тогда
			Если ТипОбъектаБД = ИмяТипаДокументы() И ОбъектБД.Проведен Тогда
				ПредупреждениеСообщение(, "ПРОВЕДЕННЫЙ РАНЕЕ ДОКУМЕНТ: """ + ВРег(ОбъектБД) + """
				|
				|- ЗАПИСАН, НО МОЖЕТ БЫТЬ НЕ ПРОВЕДЕН ПОВТОРНО.
				|следовательно
				|- ДВИЖЕНИЯ ПО РЕГИСТРАМ МОГУТ ОСТАТЬСЯ ПРЕЖНИМИ.
				|
				|РЕКОМЕНДУЕТСЯ ВЫПОЛНИТЬ ПРОВЕДЕНИЕ ДОКУМЕНТА.", , ПараметрыСеансаОбработки.Конфигурация + " " +ПараметрыСеансаОбработки.Версия);
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипОбъектаБД = ИмяТипаБизнесПроцессы() ИЛИ ТипОбъектаБД = ИмяТипаЗадачи()) Тогда
			ОбъектБДПолучитьСтрокуСостоянияОбъекта();
		КонецЕсли;
		
		ОбъектБДПриИзменении("ОбъектБДЗаписать");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОЗДАТЬ КОПИЮ ДОКУМЕНТА.
//

Процедура ОМСоздатьКопированием(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
			
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, """" + ОбъектБД + """ помечен на удаление.
		|Снимите пометку удаления и повторите попытку создания копированием.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите создание копированием нового объекта типа
	|
	|" + ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД) + " ?
	|
	|ОСОБЕННОСТИ УСТАНОВКИ ЗНАЧЕНИЙ РЕКВИЗИТОВ ДОКУМЕНТА:
	|
	|1. Номер документа устанавливается в соответствии со штатным префиксом в данной БД.
	|2. Дата документа устанавливается в зависимости от Периодичности нумерации Документа и Даты исходного документа.";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "СОЗДАНИЕ НОВОГО ОБЪЕКТА КОПИРОВАНИЕМ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуСоздатьКопированием(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуСоздатьКопированием"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""СОЗДАНИЕ НОВОГО ОБЪЕКТА КОПИРОВАНИЕМ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
		
КонецПроцедуры

Процедура ВызватьОбработкуСоздатьКопированием(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = НовыйОбъектБДСоздатьКопированиемНаСервере(ОбъектБД);
	
	Если НЕ РезультатСоздания.Отказ Тогда
		
		ОбъектБДПриИзменении(ОбъектБД);
		
	КонецЕсли;
	
	ПредупреждениеСообщение(, РезультатСоздания.ОписаниеОшибки, , ПараметрыСеансаОбработки.Конфигурация + " " + ПараметрыСеансаОбработки.Версия);	// Если Успешно - Выдается сообщение.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕДЕНИЕ/ОТМЕНА ПРОВЕДЕНИЯ.
//

Процедура ОМПровести(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	
	Если НЕ МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
		
		ПредупреждениеСообщение(, "Тип документа: """ + ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + КоличествоДвижений + ".
		|
		|Операция не выполнена.");
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, "Удаленный документ: """ + ОбъектБД + """ не может быть проведен.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите проведение документа: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТА", КодВозвратаДиалога.Нет);
		ВызватьОбработкуПроведенияДокумента(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуПроведенияДокумента"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ПРОВЕДЕНИЕ ДОКУМЕНТА"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОбработкуПроведенияДокумента(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОМЗаписать(Неопределено, РежимЗаписиДокумента.Проведение);
	Если ПоказатьДвижения Тогда
		ФормаОчистить(Истина);
		ПоказатьДвиженияПриИзменении("ОтобразитьДвижения");
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

Процедура ОМПровестиОснованиеИДокумент(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	
	Если НЕ МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
		ДополнительныйТекст = ?(КоличествоДвижений = 0, "пуста", "" + КоличествоДвижений);
		
		ПредупреждениеСообщение(, "Тип документа: """ + ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + ДополнительныйТекст + ".
		|
		|Выполнение проведеня документов прервано.");
		Возврат;
		
	КонецЕсли;
	
	ИмяДокументаОснование = "ДокументОснование";
	Если НЕ ОбъектБДЕстьРеквизит("ДокументОснование", ОбъектБД) Тогда
		
		// У документа может и небыть Реквизита "ДокументОснование", но может быть другой реквизит типа документ, который и является Документом-Основанием.
		ИмяДокументаОснование = ОбъектБДПолучитьИмяДокументаОснование(ОбъектБД);
		Если ИмяДокументаОснование = "" Тогда
		
			ПредупреждениеСообщение(, "У объекта типа """ + ПолноеСтроковоеИмяТипа + """ отсутствует реквизит Документ-Основание.
			|Выполнение операции прервано.");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОснованиеЗначениеИзТРеквизиты = ПолучитьЗначениеДокументаОснованияИзТРеквизиты(ИмяДокументаОснование);
	
	РезультатПолучения = ПолучитьДокументОснованиеТекущегоОбъектаНаСервере(ОбъектБД, ИмяДокументаОснование, ДокументОснованиеЗначениеИзТРеквизиты);
	ДокОснование = РезультатПолучения.ДокОснование;
	ОписаниеОшибки = РезультатПолучения.ОписаниеОшибки;
	
	Если ДокОснование = Неопределено Тогда	// Неопределено - при ошибке получения значения.
		
		ПредупреждениеСообщение(, "Не удалось получить Документ-Основание для: 
		|""" + ОбъектБД + """. 
		|
		|" + ОписаниеОшибки + "
		|
		|Документ-Основание не может быть проведен.
		|Выполнение проведеня документов прервано.");
		Возврат;
		
	КонецЕсли;
	
	Если ДокОснование.ПометкаУдаления Тогда
		
		ПредупреждениеСообщение(, "Удаленный Документ-Основание: """ + ДокОснование + """ не может быть проведен.
		|
		|Выполнение проведеня документов прервано.");
		Возврат;
		
	КонецЕсли;
	
	ДобавочныйТекст = "";
	Если ДатаДокументаОснованияБольшеДатыТекущегоДокументаНаСервере(ДокОснование, ОбъектБД) Тогда
		ДобавочныйТекст = "
		|ВНИМАНИЕ! Дата Документа-Основания > Даты Текущего Документа!
		|";
	КонецЕсли;
	
	Если НЕ ДокОснование.Проведен Тогда
		ДобавочныйТекст = "
		|ВНИМАНИЕ! Документ-Основание не является проведенным!
		|";
	КонецЕсли;
	
	ТекстВопроса = "Текущий Документ: """ + ОбъектБД + """
		|" + ДобавочныйТекст + "
		|ПОДТВЕРДИТЕ ПРОВЕДЕНИЕ
		|
		|Документа-Основания: """ + ДокОснование + """";
		
	Параметр = Новый Структура;
	Параметр.Вставить("ДокОснование"	, ДокОснование);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуПровестиОснованиеИДокумент(Ответ, Параметр);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуПровестиОснованиеИДокумент"", ЭтаФорма, Параметр)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ПРОВЕДЕНИЕ ДОКУМЕНТОВ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;

КонецПроцедуры

Процедура ВызватьОбработкуПровестиОснованиеИДокумент(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, Проведено;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		ПредупреждениеСообщение(, "Отказ от проведения Документа-Основания: 
		|
		|""" + Параметр.ДокОснование + """
		|
		|Выполнение проведения документов прервано.");
		Возврат;
	КонецЕсли;
	
	Проведено = ПровестиДокументНаСервере(Параметр.ДокОснование);
	
	Если Проведено Тогда
		
		ОМПровести(Неопределено);	// Проводим Выбранный документ по выработанным правилам.
		
	Иначе
		
		ПредупреждениеСообщение(, "Документ-Основание: 
		|""" + Параметр.ДокОснование + """ провести не удалось.
		|
		|Текущий Документ: 
		|""" + ОбъектБД + """ так же не будет проведен.
		|
		|Выполнение проведения документов прервано.");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Получить Значение отображаемое в Таблице "Реквизиты".
//
Функция   ПолучитьЗначениеДокументаОснованияИзТРеквизиты(ИмяДокументаОснование)
	
	тзТмп = ТРеквизитыОбъекта;
	
	ДокументОснованиеЗначениеИзТЗ = "";
	
	СтруктураПоиска = Новый Структура("Имя", ИмяДокументаОснование);
	
	Массив = тзТМП.НайтиСтроки(СтруктураПоиска);	// Должен быть только 1(один) элемент.
	
	Если Массив.Количество() > 0 Тогда
		ДокументОснованиеЗначениеИзТРеквизиты = Строка(Массив[0].Значение);
	КонецЕсли;
	
	Возврат ДокументОснованиеЗначениеИзТРеквизиты;
	
КонецФункции

// Получить Значение НаСервере.
//
Функция   ПолучитьДокументОснованиеТекущегоОбъектаНаСервере(ОбъектБД, ИмяДокументаОснование, ДокументОснованиеЗначениеИзТРеквизиты)
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("ДокОснование", Неопределено);
	РезультатПолучения.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		РезультатПолучения.ДокОснование		= ОбъектБД[ИмяДокументаОснование];	// Получаем Ссылку на Документ-Основание. Передать в Клиент ДокументОбъект невозвожно.
		РезультатПолучения.ОписаниеОшибки	= "Документ-Основание: """ + РезультатПолучения.ДокОснование + """ найден.";
		
		// Проверяем.
		// Потому что:
		// В Таблице "Реквизиты" удаленный документ визуально может отображаеться нормально!
		
		// Фактически у удаленного документа НУЛЕВАЯ дата.
		ДатаДокОсн	 = РезультатПолучения.ДокОснование.Дата;				// Документ может быть удален непосредственно, а в Таблице "Реквизиты" он виден, но после выхода из 1С и повторного входа - все как полагается <Объект не найден и т.д.>
		Если ДатаДокОсн = Дата("00010101000000") Тогда						// Документа все-таки нет.
			Если НЕ Строка(РезультатПолучения.ДокОснование) = Строка(ДокументОснованиеЗначениеИзТРеквизиты) Тогда
				РезультатПолучения.ОписаниеОшибки = "НА СТОРОНЕ СЕРВЕРА: (Объект не найден. Возможно удален.)
				|" + РезультатПолучения.ДокОснование + " 
				|
				|НА СТОРОНЕ КЛИЕНТА: (Значение из Таблицы ""Реквизиты""): 
				|" + ДокументОснованиеЗначениеИзТРеквизиты + "
				|
				|ПОЛУЧАЕМ АНЕКДОТ ПРО ПРОГРАММИСТОВ И АВТОМОБИЛЬ, КОТОРЫЙ НЕ ЗАВОДИТСЯ:
				|
				|""ДАВАЙТЕ ВЫЙДЕМ - И ЗАЙДЕМ - ВДРУГ ПОЕДЕТ?!"" (аналог с MS Windows - ""ПЕРЕЗАГРУЗИМСЯ ?!"")
				|
				|В нашем случае Выйти из 1С - и снова зайти ... (тогда в поле Значения для ДокументаОснования возможно будет <Объект не найден> ...)
				|или
				|Реквизит типа ""Документ-Основание"" был изменен с незаполненного на определенный документ, а запись изменений не была произведена.
				|Запишите текущий документ и повторно попытайтесь провести связку документов: Основание+Текущий.";
			Иначе
				РезультатПолучения.ОписаниеОшибки = "НА СТОРОНЕ СЕРВЕРА: (Объект не найден. Возможно удален.)
				|" + РезультатПолучения.ДокОснование + " 
				|
				|НА СТОРОНЕ КЛИЕНТА: (Значение из Таблицы ""Реквизиты""): 
				|" + ДокументОснованиеЗначениеИзТРеквизиты;
			КонецЕсли;
			РезультатПолучения.ДокОснование = Неопределено;
		КонецЕсли;
		
	Исключение
		РезультатПолучения.ДокОснование = Неопределено;
		РезультатПолучения.ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	Возврат РезультатПолучения;
	
КонецФункции

// Ставнить даты Документа-Основания и ОбъектаБД.
//
Функция   ДатаДокументаОснованияБольшеДатыТекущегоДокументаНаСервере(Объект_1, Объект_2)
	
	Возврат Объект_1.Дата > Объект_2.Дата;
	
КонецФункции

// Выполнить проведение Документа-Основания.
//
Функция   ПровестиДокументНаСервере(ДокументВходящий)
	
	Проведен = Ложь;
	Попытка
		ОбъектИЗМ = ДокументВходящий.ПолучитьОбъект();
		// ОтключениеКонтроляЗаписи: ОбменДанными.Загрузка = Истина;	// Устанавливать нельзя - Ошибка при Проведении/ОтменеПроведения документа.
		ОбъектИЗМ.Записать(РежимЗаписиДокумента.Проведение);
		Проведен = Истина;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		Проведен = Ложь;
	КонецПопытки;
	
	Возврат Проведен;

КонецФункции

Процедура ОМОтменитьПроведение(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	Если НЕ МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
		ДополнительныйТекст = ?(КоличествоДвижений = 0, "пуста", "" + КоличествоДвижений);
		
		ПредупреждениеСообщение(, "Тип документа: """ + ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|Cледовательно невозможно выполнить отмену проведения.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + ДополнительныйТекст + ".
		|
		|Операция не выполнена.");
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, "Удаленный документ: """ + ОбъектБД + """ не является проведенным, 
		|Повторная отмена проведения невозможна.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектБД.Проведен Тогда
		ПредупреждениеСообщение(, "Документ: """ + ОбъектБД + """ не является проведенным, 
		|Повторная отмена проведения невозможна.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите отмену проведения документа: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтменыПроведенияДокумента(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтменыПроведенияДокумента"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОбработкуОтменыПроведенияДокумента(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОМЗаписать(Неопределено, РежимЗаписиДокумента.ОтменаПроведения);
	Если ПоказатьДвижения Тогда
		ПоказатьДвижения = Ложь;
		ПоказатьДвиженияПриИзменении("ОчиститьДвижения");
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УДАЛЕНИЕ/ОТМЕНА УДАЛЕНИЯ.
//

Процедура ОМСнятьПометкуУдаления(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Тогда		// Справочник, ~ПланОбмена, ПланСчетов, ПланВидовРасчета.
		ПредупреждениеСообщение(, """Снять пометку удаления"" для Предопределенного Объекта неприменима.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, """" + ОбъектБД +  """ не помечен на удаление.
		|Снять пометку на удаление невозможно.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Снять пометку на удаление: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТМЕНА ПОМЕТКИ НА УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтменыПометкиНаУдаление(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтменыПометкиНаУдаление"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ОТМЕНА ПОМЕТКИ НА УДАЛЕНИЕ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОбработкуОтменыПометкиНаУдаление(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, "СнятьПометкуУдаления");
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

Процедура ОМПометитьНаУдаление(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Тогда		// Справочник, ~ПланОбмена, ПланСчетов, ПланВидовРасчета.
		ПредупреждениеСообщение(, "Предопределенный Объект удалить невозможно.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, """" + ОбъектБД + """ помечен на удаление.
		|Повторно пометить на удаление невозможно.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	СообщениеДляГруппы = Неопределено;
	Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		СообщениеДляГруппы = ?(ОбъектБД.ЭтоГруппа, "
		|ВАЖНО: Это Группа Справочника/ПланаВидовХарактеристик. 
		|Будут помечены на удаление подчиненные Группы и Элементы.
		|", СообщениеДляГруппы);
	КонецЕсли;
	
	ТекстВопроса = "Пометить на удаление: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД) + ".
	|" + СообщениеДляГруппы + "
	|Фактическое удаление необходимо провести стандартным способом:
	|1С:Предприятие -> Операции -> Удаление помеченных объектов.
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПОМЕТКА НА УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуПометкиНаУдаление(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуПометкиНаУдаление"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ПОМЕТКА НА УДАЛЕНИЕ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОбработкуПометкиНаУдаление(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, "ПометкаНаУдаление");
	Если ПоказатьДвижения Тогда
		ПоказатьДвижения = Ложь;
		ПоказатьДвиженияПриИзменении("ОчиститьДвижения");
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

Процедура ОМУдалить(Кнопка)
	Перем ОписаниеОповещенияОЗавершении;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Тогда		// Справочник, ~ПланОбмена, ПланСчетов, ПланВидовРасчета.
		ПредупреждениеСообщение(, "Предопределенный Объект удалить невозможно.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "ПОДТВЕРДИТЕ НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД) + ".
	|
	|ЭТО МОЖЕТ НАРУШИТЬ ССЫЛОЧНУЮ ЦЕЛОСТНОСТЬ ДАННЫХ.
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ВызватьОбработкуНепосредственногоУдаленияОбъекта(Ответ, Неопределено);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуНепосредственногоУдаленияОбъекта"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОбработкуНепосредственногоУдаленияОбъекта(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, "Удалить");
	
	Если НЕ Отказ Тогда
		ОбъектБДОчистка(Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЦИИ ОБРАБОТКИ.
//

Процедура ОМСтруктураПодчиненностиОбъекта(Кнопка)
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) 
		ИЛИ НЕ ТипОбъектаБД = ИмяТипаДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыСтруктурыПодчиненности = ПараметрыСеансаОбработки.ИмяФормыСтруктурыПодчиненности;
	
	Если ИмяФормыСтруктурыПодчиненности = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""СтруктураПодчиненности"" не найдена.
		|Просмотр информации о Подчиненности документов невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		// Обычная Форма (форма обработки).
		
		ФормаСтруктурыПодчиненности = ПолучитьФорму(ИмяФормыСтруктурыПодчиненности);
		ФормаСтруктурыПодчиненности.ВладелецФормы 					= ЭтаФорма;
		ФормаСтруктурыПодчиненности.ЗакрыватьПриЗакрытииВладельца	= Истина;
		ФормаСтруктурыПодчиненности.ДокументСсылка 					= ОбъектБД;
		
		ФормаСтруктурыПодчиненности.ОткрытьМодально();
	
	Исключение
		
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОМДатыЗапрета(Кнопка)

	ИмяРегистраДатыЗапрета = ПараметрыСеансаОбработки.ИмяРегистраДатыЗапрета;
	
	Если ИмяРегистраДатыЗапрета = Неопределено Тогда
		ПредупреждениеСообщение(, "Не обнаружен Регистр, содержащий информацию о Датах Запрета.
		|Просмотр информации о Датах Запрета невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		// Обычная или Управляемая ФормыФорма (форма конфигурации).
		
		ФормаДатыЗапрета = ПолучитьФорму("РегистрСведений." + ИмяРегистраДатыЗапрета + ".ФормаСписка", , ЭтаФорма);
		ФормаДатыЗапрета.ВладелецФормы 					= ЭтаФорма;
		ФормаДатыЗапрета.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Попытка
			ФормаДатыЗапрета.РежимОткрытияОкна 			= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Исключение
		КонецПопытки;
		
		Если ИспользоватьРежимМодальности() Тогда
			ФормаДатыЗапрета.ОткрытьМодально();
		Иначе
			ФормаДатыЗапрета.Открыть();
		КонецЕсли;
	
	Исключение
		
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
		
	КонецПопытки;
		
КонецПроцедуры

Процедура ОМКартаМаршрута(Кнопка)
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) 
		ИЛИ НЕ ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
		Если НЕ ТипОбъектаБД = ИмяТипаЗадачи() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФормыКартаМаршрута = ПараметрыСеансаОбработки.ИмяФормыКартаМаршрута;
	
	Если ИмяФормыКартаМаршрута = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""КартаМаршрута"" не найдена.
		|Просмотр карты бизнес-процесса невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		// Обычная Форма (форма обработки).
		
		ФормаКартаМаршрута = ПолучитьФорму(ИмяФормыКартаМаршрута);
		ФормаКартаМаршрута.ВладелецФормы 					= ЭтаФорма;
		ФормаКартаМаршрута.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Если ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
			ФормаКартаМаршрута.БизнесПроцесс 				= ОбъектБД;
		ИначеЕсли ТипОбъектаБД = ИмяТипаЗадачи() Тогда
			ФормаКартаМаршрута.БизнесПроцесс 				= ОбъектБД.БизнесПроцесс;
			Если НЕ ЗначениеЗаполнено(ФормаКартаМаршрута.БизнесПроцесс) Тогда
				ПредупреждениеСообщение(, "Задача: """ + ОбъектБД + """ 
				|
				|Бизнес-процесс неопределен.");
			КонецЕсли;
		КонецЕсли;
		
		ФормаКартаМаршрута.ОткрытьМодально();
	
	Исключение
		
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОМПроверитьРегистрациюВПланахОбмена(Кнопка)
	Перем СписокУзловОбмена, ОписаниеОповещенияОЗакрытии;
	Перем ПроверкаРегистрации;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
	
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	// Установить пометку у всех строк.
    СписокУзловОбмена.ЗаполнитьПометки(Истина);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для проверки регистрации объекта");
		ВызватьОбработкуПриПроверкеРегистрацииВПланахОбмена(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуПриПроверкеРегистрацииВПланахОбмена"", ЭтаФорма, Неопределено)");
		Выполнить("СписокУзловОбмена.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, ""Выберите узел(ы) обмена для проверки регистрации объекта"")");
	КонецЕсли;
		
КонецПроцедуры

Процедура ВызватьОбработкуПриПроверкеРегистрацииВПланахОбмена(СписокУзловОбмена, Параметр) Экспорт
	Перем ПроверкаРегистрации;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Проверка регистрации изменений объекта: 
	|" + ОбъектБД);
	
	ПроверкаРегистрации = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, "ИзменениеЗарегистрировано");
	
	ПредупреждениеСообщение(, "Проверка регистрации изменений объекта в узлах обмена произведена. 
	|");
	
КонецПроцедуры

Процедура ОМРегистрацияВПланахОбмена(Кнопка)
	Перем СписокУзловОбмена, ОписаниеОповещенияОЗакрытии;
	Перем РегистрацияПроизведена;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
	
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	// Установить пометку у всех строк.
    СписокУзловОбмена.ЗаполнитьПометки(Истина);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для регистрации объекта");
		ВызватьОбработкуПриРегистрацииВПланахОбмена(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуПриРегистрацииВПланахОбмена"", ЭтаФорма, Неопределено)");
		Выполнить("СписокУзловОбмена.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, ""Выберите узел(ы) обмена для регистрации объекта"")");
	КонецЕсли;
		
КонецПроцедуры

Процедура ВызватьОбработкуПриРегистрацииВПланахОбмена(СписокУзловОбмена, Параметр) Экспорт
	Перем РегистрацияПроизведена;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Регистрация изменений объекта: 
	|" + ОбъектБД);
	
	РегистрацияПроизведена = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, "ЗарегистрироватьИзменения");
	
	Если НЕ РегистрацияПроизведена Тогда
		ПредупреждениеСообщение(, "Регистрация изменений объекта в узлах обмена не произведена. 
		|см. сообщения.");
	Иначе
		ПредупреждениеСообщение(, "Регистрация изменений объекта, а также ""связанных"" объектов, в узлах обмена завершена.
		|");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМУдалитьРегистрациюВПланахОбмена(Кнопка)
	Перем СписокУзловОбмена, ОписаниеОповещенияОЗакрытии;
	Перем ОтменаРегистрацииПроизведена;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
	
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3).
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для удаления регистрации объекта");
		ВызватьОбработкуПриУдаленииРегистрацииВПланахОбмена(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(""ВызватьОбработкуПриУдаленииРегистрацииВПланахОбмена"", ЭтаФорма, Неопределено)");
		Выполнить("СписокУзловОбмена.ПоказатьОтметкуЭлементов(ОписаниеОповещенияОЗакрытии, ""Выберите узел(ы) обмена для удаления регистрации объекта"")");
	КонецЕсли;
		
КонецПроцедуры

Процедура ВызватьОбработкуПриУдаленииРегистрацииВПланахОбмена(СписокУзловОбмена, Параметр) Экспорт
	Перем ОтменаРегистрацииПроизведена;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Удаление регистрации изменений объекта: 
	|" + ОбъектБД);
	
	ОтменаРегистрацииПроизведена = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, "УдалитьРегистрациюИзменений");
	
	Если НЕ ОтменаРегистрацииПроизведена Тогда
		ПредупреждениеСообщение(, "Удаление регистрации изменений объекта в узлах обмена не произведено.
		|см. сообщения.");
	Иначе
		ПредупреждениеСообщение(, "Удаление регистрации изменений объекта в узлах обмена завершено.
		|");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМНастройки(Кнопка)
	
	ИмяФормыНастройкиОбработки = ПараметрыСеансаОбработки.ИмяФормыНастройкиОбработки;
	
	Если ИмяФормыНастройкиОбработки = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""НастройкаОбработки"" не найдена.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		// Обычная Форма (форма обработки).
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройкиОбработки);
		ФормаНастройки.ВладелецФормы 					= ЭтаФорма;
		ФормаНастройки.ЗакрыватьПриЗакрытииВладельца 	= Истина;
		
		ФормаНастройки.ОткрытьМодально();
	
	Исключение
		
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОМОбновитьОтображаемыеДанные(Кнопка)
	
	ОчиститьСообщения();
	
	ОбъектБДПриИзменении(Кнопка);
	
КонецПроцедуры

Процедура ОМСправка(Кнопка)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ.
// 

Процедура ФормаПриОткрытии()
	
	ОчиститьСообщения();
	
	МонопольныйРежим = МонопольныйРежим();
	
	ПараметрыСеансаОбработки = ОбработкаПолучитьПараметрыСеанса();
	
	РезультатПроверки = ОбработкаПроверитьПраваПользователяИРежимЗапуска();
	
	Если РезультатПроверки.Отказ Тогда
		ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		Закрыть();
		Возврат;
	Иначе
		Если НЕ РезультатПроверки.ОписаниеОшибки = "" Тогда
			ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
   Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
      ОбъектБД = ВосстановитьЗначение("ОбъектБД");
   КонецЕсли;
	
	ПоказыватьСообщения = ВосстановитьЗначение("ПоказыватьСообщения");
	
	СкрыватьПустыеТабличныеЧасти			= ВосстановитьЗначение("СкрыватьПустыеТабличныеЧасти");
	СкрыватьПустыеТаблицыДвиженийРегистров 	= ВосстановитьЗначение("СкрыватьПустыеТаблицыДвиженийРегистров");
	
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТСвойстваОбъекта, ТСвойстваОбъекта);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТРеквизитыОбъекта, ТРеквизитыОбъекта);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеПодпискиНаСобытия, ТМетаданныеПодпискиНаСобытия);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеФункциональныеОпции, ТМетаданныеФункциональныеОпции);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеПланыОбмена, ТМетаданныеПланыОбмена);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеРегистрыОбъекта, ТМетаданныеРегистрыОбъекта);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеВводитсяНаОсновании, ТМетаданныеВводитсяНаОсновании);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеЯвляетсяОснованиемДля, ТМетаданныеЯвляетсяОснованиемДля);
	
	ОбъектБДПриИзменении(ОбъектБД);
	
КонецПроцедуры

Процедура ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыТаблица, Таблица)
	
	Для Каждого Колонка ИЗ ЭлементыТаблица.Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормаПриЗакрытии()
	
	СохранитьЗначение("ОбъектБД", ОбъектБД);
	СохранитьЗначение("ПоказыватьСообщения", ПоказыватьСообщения);
	СохранитьЗначение("СкрыватьПустыеТабличныеЧасти", СкрыватьПустыеТабличныеЧасти);
	СохранитьЗначение("СкрыватьПустыеТаблицыДвиженийРегистров", СкрыватьПустыеТаблицыДвиженийРегистров);

КонецПроцедуры

Процедура ФормаОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			
			Если ИмяСобытия = "ПоказыватьСообщения" Тогда							// Из формы "Настройка".
				
				ПоказыватьСообщения 					= Параметр;
				
			ИначеЕсли ИмяСобытия = "СкрыватьПустыеТаблицыДвиженийРегистров" Тогда	// Из формы "Настройка".
				
				СкрыватьПустыеТаблицыДвиженийРегистров	= Параметр;
				
			ИначеЕсли ИмяСобытия = "СкрыватьПустыеТабличныеЧасти" Тогда				// Из формы "Настройка".
				
				СкрыватьПустыеТабличныеЧасти			= Параметр;
				
			ИначеЕсли ИмяСобытия = "МонопольныйРежим" Тогда							// Из формы "Настройка".
				
				МонопольныйРежим						= Параметр;
				
			ИначеЕсли ИмяСобытия = "ОбменДаннымиЗагрузка" Тогда						// Из формы "Настройка".
				
				ОбменДаннымиЗагрузка	 				= Параметр;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		// Не всегда Источником является Форма, следовательно Владельца формы нет.
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНОЕ/НЕМОДАЛЬНОЕ ПРЕДУПРЕЖДЕНИЕ.
//

Функция ИспользоватьРежимМодальности()

	Возврат (ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" ИЛИ ПараметрыСеансаОбработки.РежимИспользованияМодальности = "ИспользоватьСПредупреждениями");
	
КонецФункции

Процедура ПредупреждениеСообщение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Если ИспользоватьРежимМодальности() Тогда
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НЕМОДАЛЬНЫЙ ВОПРОС.
//

Функция ПолучитьКодВозвратаДиалога(Ответ)
	Перем ЗначениеОтвета;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ЗначениеОтвета = Ответ.Значение;
	Иначе
		ЗначениеОтвета = Ответ;
	КонецЕсли;
	
	Возврат ЗначениеОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПАРСЕР ТЕКСТА ЗАПРОСА.
// 

Процедура ОМПарсерЗапроса(Кнопка)
	//
	//ИмяФормыПарсераЗапроса = ПараметрыСеансаОбработки.ИмяФормыПарсераЗапроса;
	//
	//Если ИмяФормыПарсераЗапроса = Неопределено Тогда
	//	Предупреждение("Форма ""ИмяФормыПарсераЗапроса"" не найдена.");
	//	Возврат;
	//КонецЕсли;
	//				
	//ФормаПарсерЗапроса = ПолучитьФорму(ИмяФормыПарсераЗапроса);
	//ФормаПарсерЗапроса.ВладелецФормы = ЭтаФорма;
	//ФормаПарсерЗапроса.ЗакрыватьПриЗакрытииВладельца = Истина;
	//	
	//ФормаПарсерЗапроса.Открыть();
	//
КонецПроцедуры

СтрокаРавно = "================================================================================================================================================================";

НовыйТипОбъектаБД				= Истина;
СчетчикОбновленийФормы			= 0;
СчетчикСообщенийПриОбновлении	= 0;

ПоказыватьСообщения 			= Ложь;

ВыполнятьВТранзакции 			= Истина;

ЭтаФормаЗаголовок				= ЭтаФорма.Заголовок;
