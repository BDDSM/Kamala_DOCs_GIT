////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем ОбъектОбработка, ВерсияБСП;
	
	Объект.УправляемаяФорма = Истина;
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Объект.ВерсияБСП= ОбъектОбработка.ПолучитьВерсиюБСП();
	Объект.ПараметрыСеансаОбработки	= ОбъектОбработка.ОбработкаПолучитьПараметрыСеанса();
	
	ВыполнитьПроверкуПравДоступа("Администрирование", Метаданные);
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект = ЭтотОбъект();
	ТекущийОбъект.ПрочитатьНастройки();
	ЭтотОбъект(ТекущийОбъект);
	
	ОбъектРегистрации = Параметры.ОбъектРегистрации;
	Расшифровка       = "";
	
	Если ТипЗнч(ОбъектРегистрации)=Тип("Структура") Тогда
		ТаблицаРегистрации = Параметры.ТаблицаРегистрации;
		ОбъектСтрокой = ТаблицаРегистрации;
		Для Каждого КлючЗначение Из ОбъектРегистрации Цикл
			Расшифровка = Расшифровка + "," + КлючЗначение.Значение;
		КонецЦикла;
		Расшифровка = " (" + Сред(Расшифровка,2) + ")";
	Иначе		
		ТаблицаРегистрации = "";
		ОбъектСтрокой = ОбъектРегистрации;
	КонецЕсли;
	Заголовок = "Регистрация " + ТекущийОбъект.ПредставлениеСсылки(ОбъектСтрокой) + Расшифровка;
	
	ПрочитатьУзлыОбмена();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьВсеУзлы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоУзловОбмена
//

&НаКлиенте
Процедура ДеревоУзловОбменаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле=Элементы.ДеревоУзловОбменаНаименование Или Поле=Элементы.ДеревоУзловОбменаКод Тогда
		ОткрытьФормуРедактированияДругихОбъектов();
		Возврат;
	ИначеЕсли Поле<>Элементы.ДеревоУзловОбменаНомерСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоУзловОбмена.ТекущиеДанные;
	
	НомерСообщения = ТекДанные.НомерСообщения;
	Подсказка = НСтр("ru='Номер отправленного'");
	Если ВвестиЧисло(НомерСообщения, Подсказка) Тогда
		ИзменитьНомерСообщенияНаСервере(ТекДанные.Ссылка, НомерСообщения, ОбъектРегистрации, ТаблицаРегистрации);
		
		ТекущийУзел = ТекущийВыбранныйУзел();
		ПрочитатьУзлыОбмена(Истина);
		РазвернутьВсеУзлы(ТекущийУзел);
		
		Если Параметры.ОповещатьОбИзменениях Тогда
			Оповестить("ИзменениеРегистрацииОбменаДаннымиОбъекта",
				Новый Структура("ОбъектРегистрации, ТаблицаРегистрации", ОбъектРегистрации, ТаблицаРегистрации),
				ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУзловОбменаПометкаПриИзменении(Элемент)
	ИзменениеПометки(Элементы.ДеревоУзловОбмена.ТекущаяСтрока);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
//

&НаКлиенте
Процедура ПеречитатьДеревоУзлов(Команда)
	ТекущийУзел = ТекущийВыбранныйУзел();
	ПрочитатьУзлыОбмена();
	РазвернутьВсеУзлы(ТекущийУзел);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияОтУзла(Команда)
	ОткрытьФормуРедактированияДругихОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеУзлы(Команда)
	Для Каждого СтрокаПлана Из ДеревоУзловОбмена.ПолучитьЭлементы() Цикл
		СтрокаПлана.Пометка = Истина;
		ИзменениеПометки(СтрокаПлана.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуВсемУзлам(Команда)
	Для Каждого СтрокаПлана Из ДеревоУзловОбмена.ПолучитьЭлементы() Цикл
		СтрокаПлана.Пометка = Ложь;
		ИзменениеПометки(СтрокаПлана.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьПометкуВсемУзлам(Команда)
	Для Каждого СтрокаПлана Из ДеревоУзловОбмена.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаУзла Из СтрокаПлана.ПолучитьЭлементы() Цикл
			СтрокаУзла.Пометка = Не СтрокаУзла.Пометка;
			ИзменениеПометки(СтрокаУзла.ПолучитьИдентификатор())
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегистрацию(Команда)
	Перем ОписаниеОповещенияОЗавершении;
	
	Текст = НСтр("ru='Изменить регистрацию ""%1""
	             |на узлах?'");
	
	ЗаголовокВопроса = НСтр("ru='Подтверждение'");
	
	Текст = СтрЗаменить(Текст, "%1", ОбъектРегистрации);
	
	Параметр = Новый Структура;
	Параметр.Вставить("ДеревоУзловОбмена", ДеревоУзловОбмена);
	
	Если Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "Использовать" ИЛИ Объект.ПараметрыСеансаОбработки.РежимИспользованияМодальности = "ИспользоватьСПредупреждениями" Тогда
		// Стандартный Вопрос() в модальном режиме (8.2/8.3).
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ЗаголовокВопроса, КодВозвратаДиалога.Нет);
		ВызватьОбработкуОтветаПриИзмененииРегистрациВУзлах(Ответ, Параметр);
	Иначе
		// НеСтандартный Вопрос() с обработкой результата в немодальном режиме (8.3).
		Выполнить("ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ВызватьОбработкуОтветаПриИзмененииРегистрациВУзлах"", ЭтотОбъект, Параметр)");
		Вопрос83(Текст, 30, ОписаниеОповещенияОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработкуОтветаПриИзмененииРегистрациВУзлах(Ответ, Параметр) Экспорт
	Перем ДеревоУзловОбмена;
	Перем ТекущийУзел, Колво, Текст, ЗаголовокОповещения;
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		ТекущийУзел = ТекущийВыбранныйУзел();
		ПрочитатьУзлыОбмена(Истина);
		РазвернутьВсеУзлы(ТекущийУзел);
		Возврат;
	КонецЕсли;
	
	ДеревоУзловОбмена = Параметр.ДеревоУзловОбмена;
	
	Колво = ИзменениеРегистрацииПоУзлам(ДеревоУзловОбмена);
	Если Колво>0 Тогда
		Текст = НСтр("ru='Регистрация %1 была изменена на %2 узлах'");
		ЗаголовокОповещения = НСтр("ru='Изменение регистрации:'");
		
		Текст = СтрЗаменить(Текст, "%1", ОбъектРегистрации);
		Текст = СтрЗаменить(Текст, "%2", Колво);
		
		ПоказатьОповещениеПользователя(ЗаголовокОповещения,
		ПолучитьНавигационнуюСсылку(ОбъектРегистрации),
		Текст,
		Элементы.СкрытаяКартинкаИнформация32.Картинка);
		
		Если Параметры.ОповещатьОбИзменениях Тогда
			Оповестить("ИзменениеРегистрацииОбменаДаннымиОбъекта",
			Новый Структура("ОбъектРегистрации, ТаблицаРегистрации", ОбъектРегистрации, ТаблицаРегистрации),
			ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийУзел = ТекущийВыбранныйУзел();
	ПрочитатьУзлыОбмена(Истина);
	РазвернутьВсеУзлы(ТекущийУзел);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	ОткрытьФормуНастроекОбработки();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

&НаКлиенте
Функция ТекущийВыбранныйУзел()
	ТекущиеДанные = Элементы.ДеревоУзловОбмена.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Новый Структура("Наименование, Ссылка", ТекущиеДанные.Наименование, ТекущиеДанные.Ссылка);
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастроекОбработки()
	ТекИмяФормы = ПолучитьИмяФормы() + "Форма.НастройкиРегистрацииИзменений";
	ОткрытьФорму(ТекИмяФормы, , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияДругихОбъектов()
	ТекИмяФормы = ПолучитьИмяФормы() + "Форма.РегистрацияИзменений";
	Данные = Элементы.ДеревоУзловОбмена.ТекущиеДанные;
	Если Данные<>Неопределено И Данные.Ссылка<>Неопределено Тогда
		ТекПараметры = Новый Структура("УзелОбмена, ИдентификаторКоманды, ОбъектыНазначения", Данные.Ссылка);
		ОткрытьФорму(ТекИмяФормы, ТекПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеУзлы(УзелФокуса=Неопределено)
	НайденныйУзел = Неопределено;
	
	Для Каждого Строка Из ДеревоУзловОбмена.ПолучитьЭлементы() Цикл
		Идентификатор = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоУзловОбмена.Развернуть(Идентификатор, Истина);
		
		Если УзелФокуса<>Неопределено И НайденныйУзел=Неопределено Тогда
			Если Строка.Наименование=УзелФокуса.Наименование И Строка.Ссылка=УзелФокуса.Ссылка Тогда
				НайденныйУзел = Идентификатор;
			Иначе
				Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
					Если Подстрока.Наименование=УзелФокуса.Наименование И Подстрока.Ссылка=УзелФокуса.Ссылка Тогда
						НайденныйУзел = Подстрока.ПолучитьИдентификатор();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УзелФокуса<>Неопределено И НайденныйУзел<>Неопределено Тогда
		Элементы.ДеревоУзловОбмена.ТекущаяСтрока = НайденныйУзел;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменениеРегистрацииПоУзлам(Знач Данные)
	ТекущийОбъект = ЭтотОбъект();
	КолвоУзлов = 0;
	Для Каждого Строка Из Данные.ПолучитьЭлементы() Цикл
		Если Строка.Ссылка<>Неопределено Тогда
			флУже = ТекущийОбъект.ОбъектЗарегистрированНаУзле(Строка.Ссылка, ОбъектРегистрации, ТаблицаРегистрации);
			Если Строка.Пометка=0 И флУже Тогда
				Результат = ТекущийОбъект.ИзменитьРегистрациюНаСервере(Ложь, Истина, Строка.Ссылка, ОбъектРегистрации, ТаблицаРегистрации);
				КолвоУзлов = КолвоУзлов + Результат.Успешно;
			ИначеЕсли Строка.Пометка=1 И (Не флУже) Тогда
				Результат = ТекущийОбъект.ИзменитьРегистрациюНаСервере(Истина, Истина, Строка.Ссылка, ОбъектРегистрации, ТаблицаРегистрации);
				КолвоУзлов = КолвоУзлов  + Результат.Успешно;
			КонецЕсли;
		КонецЕсли;
		КолвоУзлов = КолвоУзлов + ИзменениеРегистрацииПоУзлам(Строка);
	КонецЦикла;
	Возврат КолвоУзлов;
КонецФункции

&НаСервере
Функция ИзменитьНомерСообщенияНаСервере(Узел, НомерСообщения, Данные, ИмяТаблицы=Неопределено)
	Возврат ЭтотОбъект().ИзменитьРегистрациюНаСервере(НомерСообщения, Истина, Узел, Данные, ИмяТаблицы);
КонецФункции

&НаСервере
Функция ЭтотОбъект(ТекущийОбъект=Неопределено) 
	Если ТекущийОбъект=Неопределено Тогда
		Возврат РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьИмяФормы(ТекущийОбъект=Неопределено)
	Возврат ЭтотОбъект().ПолучитьИмяФормы(ТекущийОбъект);
КонецФункции

&НаСервере
Процедура ИзменениеПометки(Строка)
	ЭлементДанных = ДеревоУзловОбмена.НайтиПоИдентификатору(Строка);
	ЭтотОбъект().ИзменениеПометки(ЭлементДанных);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУзлыОбмена(ТолькоОбновить=Ложь)
	ТекущийОбъект = ЭтотОбъект();
	Дерево = ТекущийОбъект.СформироватьДеревоУзлов(ОбъектРегистрации, ТаблицаРегистрации);
	
	Если ТолькоОбновить Тогда
		// Обновляем некоторые поля текущим данным
		Для Каждого СтрокаПлана Из ДеревоУзловОбмена.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаУзла Из СтрокаПлана.ПолучитьЭлементы() Цикл
				СтрокаДерева = Дерево.Строки.Найти(СтрокаУзла.Ссылка, "Ссылка", Истина);
				Если СтрокаДерева<>Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаУзла, СтрокаДерева, "Пометка, ИсходнаяПометка, НомерСообщения, НеВыгружалось");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Переформируем полностью
		ЗначениеВРеквизитФормы(Дерево, "ДеревоУзловОбмена");
	КонецЕсли;
	
	Для Каждого СтрокаПлана Из ДеревоУзловОбмена.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаУзла Из СтрокаПлана.ПолучитьЭлементы() Цикл
			ТекущийОбъект.ИзменениеПометки(СтрокаУзла);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНОЕ/НЕМОДАЛЬНОЕ ПРЕДУПРЕЖДЕНИЕ.
//

&НаКлиенте
Процедура ПредупреждениеСообщение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Попытка
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Исключение
		Попытка
			Выполнить("ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
		Исключение
			Сообщить(ТекстПредупрежденияСообщения);
		КонецПопытки;
	КонецПопытки;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НЕМОДАЛЬНЫЙ ВОПРОС.
//

&НаКлиенте
// Реализация функции Вопрос() в 8.3 БЕЗ ИСПОЛЬЗОВАНИЯ РЕЖИМА МОДАЛЬНОСТИ.
Процедура Вопрос83(ТекстВопроса, ТаймаутВопроса, ОбработкаОповещения)
	Перем ПараметрыВопроса, Кнопки;
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.Таймаут = ТаймаутВопроса;
	
	Кнопки = РежимДиалогаВопрос.ДаНет;
	ПараметрыВопроса.КнопкаПоУмолчанию = КодВозвратаДиалога.Нет;
	ПараметрыВопроса.КнопкаТаймаута = КодВозвратаДиалога.Нет;
	
	ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ПараметрыВопроса);

КонецПроцедуры
	
// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//   Структура   - параметры процедуры ПоказатьВопросПользователю:
//     КнопкаПоУмолчанию             - Произвольный       - определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению. 
//     Таймаут                       - Число              - интервал времени в секундах до автоматического закрытия окна вопроса. 
//     КнопкаТаймаута                - Произвольный       - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                          на которой отображается количество секунд, оставшихся до истечения таймаута. 
//     Заголовок                     - Строка             - заголовок вопроса. 
//     ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево      - если Истина, то в окне вопроса будет доступен одноименный флажок.
//     БольшеНеЗадаватьЭтотВопрос    - Булево             - принимает значение, выбранное пользователем в соответствующем флажке.
//
&НаКлиенте
Функция ПараметрыВопросаПользователю()
	Перем Параметры, Заголовок;
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	//Попытка
	//	Выполнить("Заголовок = ПолучитьЗаголовокКлиентскогоПриложения()");
	//Исключение
	//	Выполнить("Заголовок = ПолучитьЗаголовокПриложения()");
	//КонецПопытки;
	Заголовок = "";
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Истина);
	Параметры.Вставить("Картинка", Неопределено);
	
	Возврат Параметры;
	
КонецФункции	

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение системного перечисления или значение, 
//                                                              связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может использоваться значение 
//                                                  перечисления КодВозвратаДиалога, а также другие значения, поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
&НаКлиенте
Процедура ПоказатьВопросПользователю(ОбработкаОповещения, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено)
	Перем Параметры;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе	
		Параметры = ПараметрыВопросаПользователю();
	КонецЕсли;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = Параметры.КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = Параметры.КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Параметры.Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Параметры.Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстВопроса);
	Параметры.Вставить("Картинка",          Параметры.Картинка);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Параметры.БлокироватьВесьИнтерфейс);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос);
	
	Выполнить("ОткрытьФорму(Объект.ПараметрыСеансаОбработки.ИмяФормыВопрос, Параметры, , , , , ОбработкаОповещения)");
	
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога
&НаКлиенте
Функция КодВозвратаДиалогаВСтроку(Значение)
	Перем Результат;
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодВозвратаДиалога(Ответ)
	Перем ЗначениеОтвета;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ЗначениеОтвета = Ответ.Значение;
	Иначе
		ЗначениеОтвета = Ответ;
	КонецЕсли;
	
	Возврат ЗначениеОтвета;
	
КонецФункции
