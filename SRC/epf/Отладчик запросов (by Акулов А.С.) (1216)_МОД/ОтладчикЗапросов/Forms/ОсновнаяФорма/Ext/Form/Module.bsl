Перем мНеЗагружатьНастройки Экспорт;
Перем мНеОбновлятьПараметры;
Перем мПризнакИнициализацииПанелиКода;
Перем мВыполненныйЗапрос, мВыполненныйЗапросВременныеТаблицы;
Перем ЗапросБылИзменен, ЗапросБылСохранен, СтароеИмяФайла;
Перем ТипТЗ, ТипСЗ, ТипМассив, ТипМоментВремени, ТипГраница;
Перем глЗапрос;
Перем флПошаговоеВыполнениеПакета, флНеУдалятьВременныеТаблицы;
Перем глТекстЗапросаДляОтмены, глТекстЗапросаДляВозврата;
Перем ПакетЗапросов;
Перем мИмяОбработки;
Перем мКнопкаРаскраски Экспорт;
Перем мФормаПросмотрВременныхТаблиц;
Перем мПереключениеФорм;
Перем мИспользуетсяВнутреннийКласс;

// Проверка версий
Перем IE;
Перем ВыводитьСообщенияПоВерсиям;

///////////////////////////////////////////////////////////////////////////////////
// НАЧАЛО.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой

Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;

// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
// Является обязательным.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	
	Если ТекущийЭлемент=ЭлементыФормы.РедакторКода или ЭлементыФормы.Панель.ТекущаяСтраница=ЭлементыФормы.Панель.Страницы.Результат Тогда
		фл = Истина;
	ИначеЕсли ТекущийЭлемент=ЭлементыФормы.РедакторКодаУстановкиПараметров или ЭлементыФормы.Панель.ТекущаяСтраница=ЭлементыФормы.Панель.Страницы.ПараметрыЗапроса Тогда
		фл = Ложь;
	Иначе
		фл = найти(нрег(Кнопка.Имя), "_редакторкода_")>0;
	КонецЕсли;
	ЭкземплярКласса =?(фл, ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода, ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКодаУстановкиПараметров);
	ЭкземплярКласса.Нажатие(Кнопка);
	
КонецПроцедуры

Функция ВыполнитьЛокальноУстановкуПараметров(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	Перем тОш, Смещ;
	Если ЛиСинтаксическийКонтроль=Истина и мИспользуетсяВнутреннийКласс=Истина Тогда
		Запрос = Новый Запрос;
		Параметры = Новый Структура();
		Попытка
			Выполнить(ТекстДляВыполнения);
			Сообщить("Синтаксических ошибок не обнаружено!");
		Исключение
			тОш =ОписаниеОшибки();
			Смещ = СтрДлина(СтрПолучитьСтроку(ТекстДляВыполнения, 1)) + 1; // плюс символ переноса строки
			глозСообщитьОбОшибкеВыполненияКода(тОш, "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода:", ТекстДляВыполнения, ЭтаФорма, ЭлементыФормы.РедакторКода, -Смещ);
		КонецПопытки;
		Возврат Истина;
	ИначеЕсли флПошаговоеВыполнениеПакета Тогда
		Если глЗапрос=Неопределено Тогда
			глЗапрос = Новый Запрос();
		КонецЕсли;
		озЗаполнитьПараметрыЗапроса(глЗапрос);
		Сообщить("Параметры пакетного запроса перезаполнены.");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты КлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
// Не является обязательной.
//
// Параметры:
//  ТекстДляВыполнения – Строка – текст программы, который выполняется в данном контексте.
//
// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
// Не является обязательной.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Функция ВыполнитьЛокально(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт    
	Перем КонтекстВыполнения, Параметры;
	
	Если ЛиСинтаксическийКонтроль=Истина и мИспользуетсяВнутреннийКласс=Истина Тогда
		КПРедакторКодаПроверитьКод(Неопределено);
		Возврат Истина;
	КонецЕсли;
	
	КонтекстВыполнения = ПолучитьФорму("КонтекстВыполненияКода");
	КонтекстВыполнения.РезультатЗапроса = ТЗ;
	Параметры = Новый Структура();
	Для каждого Строчка Из ПараметрыДляКода Цикл
		Параметры.Вставить(Строчка.ИмяПараметра, Строчка.Значение);
	КонецЦикла;
	КонтекстВыполнения.Параметры = Параметры;
	Возврат КонтекстВыполнения.ПростоВыполнитьКод(ТекстДляВыполнения);
	
КонецФункции // ВыполнитьЛокально()

// КОНЕЦ_.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
///////////////////////////////////////////////////////////////////////////////////

Процедура ВывестиИнфоПанель(ОписаниеЗапроса, ВремяВыполнения, КоличествоЗаписей)
	Перем ВремяЗапроса;
	Если ВремяВыполнения>1000 Тогда
		ВремяЗапроса = Дата(1,1,1) + Цел(ВремяВыполнения / 1000);
		ВремяЗапроса = СокрП(Формат(ВремяЗапроса, "ДФ=ЧЧ:мм:сс','"))+СокрЛ(Формат(ВремяВыполнения % 1000, "ЧЦ=3; ЧДЦ=0; ЧН=; ЧГ="));
	Иначе
		ВремяЗапроса = "0,"+СокрЛ(Формат(ВремяВыполнения % 1000, "ЧЦ=3; ЧДЦ=0; ЧН=; ЧГ="));
	КонецЕсли;
	Заг = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(ОписаниеЗапроса, Символы.ПС, " "), "  ", " "), "  ", " "));
	ЭлементыФормы.НадписьРезультат.Картинка = ЭлементыФормы.ДопЗначки.Кнопки.ВидРезультатаВыборка.Картинка;
	Если Лев(Заг, 1)="+" Тогда
		ЭлементыФормы.НадписьРезультат.Картинка = ЭлементыФормы.ДопЗначки.Кнопки.ВидРезультатаПлюс.Картинка;
		Заг = СокрЛ(Сред(Заг, 2))+ "  / Создание ВТ /"
	ИначеЕсли Лев(Заг, 1)="+" Тогда
		ЭлементыФормы.НадписьРезультат.Картинка = ЭлементыФормы.ДопЗначки.Кнопки.ВидРезультатаМинус.Картинка;
		Заг = СокрЛ(Сред(Заг, 2))+ "  / Удаление ВТ /"
	КонецЕсли;
	ЭлементыФормы.НадписьРезультат.Заголовок = "  "+Заг;
	ЭлементыФормы.НадписьВремя.Заголовок = "  "+ВремяЗапроса+" мс";
	ЭлементыФормы.НадписьКолВоЗаписей.Заголовок = "  "+Формат(КоличествоЗаписей, "ЧДЦ=0; ЧН=; ЧГ=3,0")+" шт.";
КонецПроцедуры

Функция ПрочитатьПараметрИзСтроки(Строчка)
    Ответ = Строчка.Значение;
	Если Строчка.ТипДанных=ТипТЗ Тогда
		Попытка
			Ответ = ЗначениеИзСтрокиВнутр(Строчка.ТЗ);
		Исключение
			Ответ = новый ТаблицаЗначений;
		КонецПопытки;
	ИначеЕсли Строчка.ТипДанных=ТипМассив Тогда
		Ответ = Строчка.Значение.ВыгрузитьЗначения();
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Процедура СообщитьОбОшибке(ТекстОшибки)
	ОчиститьСообщения();
	Сообщить(?(ТекстОшибки="", ОписаниеОшибки(), ТекстОшибки), СтатусСообщения.ОченьВажное);
КонецПроцедуры

Процедура СообщитьОбОшибкеВыполненияЗапроса(знач ТекстОшибки, тШаблон, ТекстЗапроса, СмещениеНП=0)
	Перем НачСтр, НачКол, КонСтр, КонКол, Элем;
	ТекущийЭлемент = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
	Если тШаблон<>"" Тогда		
		Стр = СтрЗаменить(ПарсерТекстаЗапроса.СловоМежду(ТекстОшибки, тШаблон, "{(", ")}"), ",", Символы.ПС);
		НомСтр = ПарсерТекстаЗапроса.ВЧисло(СтрПолучитьСтроку(Стр, 1));
		НомКол = ПарсерТекстаЗапроса.ВЧисло(СтрПолучитьСтроку(Стр, 2));
		Если НомСтр>0 и НомКол>0 Тогда
			ЭтаФорма.Активизировать();
			НП = СмещениеНП + ПарсерТекстаЗапроса.НомерПозицииВТексте(ТекстЗапроса, НомСтр, НомКол);
			ТекущийЭлемент.УстановитьГраницыВыделения(НомСтр, НомКол, НомСтр, НомКол);
			Если (НП>0) и (НП<СтрДлина(ЭлементыФормы.ТекстЗапроса.Значение)) Тогда
				КП = ПарсерТекстаЗапроса.НайтиКонецСлова(ЭлементыФормы.ТекстЗапроса.Значение, НП+1, ",;*-+=)% "+Символы.Таб+Символы.ПС+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ)+1;
				КП = Мин(СтрДлина(ЭлементыФормы.ТекстЗапроса.Значение)+1, КП);
				ТекущийЭлемент.УстановитьГраницыВыделения(НП, КП);
			КонецЕсли;
		КонецЕсли;
		П = Найти(ТекстОшибки, тШаблон);
		Если П>0 Тогда
			ТекстОшибки = Сред(ТекстОшибки, П+СтрДлина(тШаблон));
			Если СмещениеНП<>0 и НомСтр>0 и НомКол>0 Тогда
				ТекстОшибки = Сред(ТекстОшибки, Найти(ТекстОшибки, "{(")+2);
				ТекстОшибки = Сред(ТекстОшибки, Найти(ТекстОшибки, ")}")+2);
				ТекущийЭлемент.ПолучитьГраницыВыделения(НачСтр, НачКол, КонСтр, КонКол);
				ТекстОшибки = "{("+НачСтр+", "+НачКол+")} "+ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ТекстОшибки = СокрЛП(ТекстОшибки);
	СообщитьОбОшибке(ТекстОшибки);
КонецПроцедуры

Функция ПроверитьТекстЗапроса(флПроверкаПередЗапуском=Ложь)	
	Перем Запрос, тОш, Стр, НомСтр, НомКол, НП;
	
	Если флПроверкаПередЗапуском=Истина И ЭлементыФормы.ДействияФормы.Кнопки.НеПроверятьНаОшибкиПередВыполнением.Пометка=Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Запрос = Новый Запрос(ЭлементыФормы.ТекстЗапроса.Значение);
		Запрос.НайтиПараметры();
		Возврат Истина;
	Исключение
		тОш = ОписаниеОшибки();
		Стр = СтрЗаменить(ПарсерТекстаЗапроса.СловоМежду(тОш, "(НайтиПараметры):", "{(", ")}"), ",", Символы.ПС);
		Стр = СтрЗаменить(ПарсерТекстаЗапроса.СловоМежду(тОш, "(НайтиПараметры):", "{(", ")}"), ",", Символы.ПС);
		НомСтр = ПарсерТекстаЗапроса.ВЧисло(СтрПолучитьСтроку(Стр, 1));
		НомКол = ПарсерТекстаЗапроса.ВЧисло(СтрПолучитьСтроку(Стр, 2));
		Стр =  "Ошибка при вызове метода контекста (НайтиПараметры):";
		НП = Найти(тОш, Стр);
		Если НП>0 Тогда
			тОш = СокрЛП(Сред(тОш, НП+СтрДлина(Стр)+1));
		КонецЕсли;
		СообщитьОбОшибке(тОш);
		Если НомСтр>0 и НомКол>0 Тогда
			НП = ПарсерТекстаЗапроса.НомерПозицииВТексте(ЭлементыФормы.ТекстЗапроса.Значение, НомСтр, НомКол);
			ЭтаФорма.Активизировать();
			ТекущийЭлемент = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
			ТекущийЭлемент.УстановитьГраницыВыделения(НомСтр, НомКол, НомСтр, НомКол);
			Если НП>0 Тогда
				КП = ПарсерТекстаЗапроса.НайтиКонецСлова(ТекстЗапроса, НП+1, ",;*-+=)% "+Символы.Таб+Символы.НПП+Символы.ВТаб+Символы.ВК+Символы.ПФ)+1;
				Если КП<НП или КП>СтрДлина(ТекстЗапроса) Тогда
					КП=СтрДлина(ТекстЗапроса)+1;
				КонецЕсли;
				ТекущийЭлемент.УстановитьГраницыВыделения(НП, КП);
			КонецЕсли;
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура озУстановитьВидимостьДопПанели(Кнопка, ДопПанель, Разделитель, ДопКнопка=Неопределено)
	Если ДопКнопка<>Неопределено Тогда
		ДопКнопка.Пометка = Кнопка.Пометка;
	КонецЕсли;
	Если (Кнопка.Пометка И ДопПанель.Свертка=РежимСверткиЭлементаУправления.Нет) или ((не Кнопка.Пометка) и (ДопПанель.Свертка<>РежимСверткиЭлементаУправления.Нет)) Тогда
		Возврат;
	КонецЕсли;
	//основа тут: 
	//http://www.forum.mista.ru/topic.php?id=391177#14
	Если Кнопка.Пометка Тогда
		Разделитель.Свертка			 = РежимСверткиЭлементаУправления.Нет;
    	ДопПанель.Свертка            = РежимСверткиЭлементаУправления.Нет;
   		Если ДопПанель.Высота = 0 Тогда    
        	ТекущийВерх = ДопПанель.Верх;
        	ДопПанель.Верх   = ТекущийВерх - ДопПанель.Высота;
        	ДопПанель.Высота = ТекущийВерх - ДопПанель.Верх;
		КонецЕсли;
    	Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ДопПанель, ГраницаЭлементаУправления.Низ);
    	ДопПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
	Иначе		
		ДопПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ДопПанель, ГраницаЭлементаУправления.Низ);
	    Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ДопПанель, ГраницаЭлементаУправления.Верх);
	    ДопПанель.Свертка            = РежимСверткиЭлементаУправления.Низ;
	    Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
	КонецЕсли;
КонецПроцедуры

Функция СохранитьЗапрос(знач ИмяФайла, Автосохранение=Ложь)
	Перем Текст, Структура, Код, Версия;
	Если Автосохранение Тогда
		Если ПустаяСтрока(СтароеИмяФайла) Тогда
			КПЗапросаСохранитьКак(Неопределено);
			Возврат СтароеИмяФайла<>"";
		Иначе
			ИмяФайла = СокрЛП(СтароеИмяФайла);
			ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-3)+"АвтоСохранение."+Прав(ИмяФайла, 3);
		КонецЕсли;
	КонецЕсли;
	Если ВРег(Прав(ИмяФайла, 3))="TXT" Тогда
		Текст = новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ЭлементыФормы.ТекстЗапроса.Значение);
		Текст.Записать(ИмяФайла, "windows-1251");
	Иначе
		Версия = "ФайлЗапроса 1.0";
		Код = ЭлементыФормы.РедакторКода.ПолучитьТекст();
		КодУстановкиПараметров = ЭлементыФормы.РедакторКодаУстановкиПараметров.ПолучитьТекст();
		КодВидим = (ЭлементыФормы.ПанельКода.Свертка=РежимСверткиЭлементаУправления.Нет);
		Структура = Новый Структура("Версия,ТекстЗапроса,Параметры,КодОбработки,КодВидимость,КодУстановкиПараметров,ПараметрыДляКода,НачПериода,КонПериода", Версия,ЭлементыФормы.ТекстЗапроса.Значение,ПараметрыЗапроса, Код, КодВидим, КодУстановкиПараметров, ПараметрыДляКода, НачПериода, КонПериода);
		ЗначениеВФайл(ИмяФайла, Структура);
	КонецЕсли;
	Если Автосохранение Тогда
		Возврат Истина;
	КонецЕсли;
	СтароеИмяФайла = ИмяФайла;
	ЗапросБылСохранен = истина;
	//ЗапросБылИзменен = Ложь;
	ОбновитьЗаголовокОкна();
КонецФункции

Процедура ЗагрузитьПараметрыИзТЗ(ТЗ)
	Перем ПДатыНач, ПДатыКон, Строчка, ВИмя;
	ПДатыНач = ВРег(",НачПериода,НачальнаяДата,ДатаНач,НачДата,");
	ПДатыКон = ВРег(",КонПериода,КонечнаяДата,ДатаКон,КонДата,");
	фл = (ТЗ.Колонки.Найти("Автозаполнение")=Неопределено);
	ПараметрыЗапроса.Очистить();
	Для каждого Строчка Из ТЗ Цикл
		ВИмя = ","+Врег(Строчка.ИмяПараметра)+",";
		Если Найти(ПДатыНач, ВИмя)>0 Тогда
			НачПериода = Строчка.Значение;
		ИначеЕсли Найти(ПДатыКон, ВИмя)>0 Тогда
			КонПериода = Строчка.Значение;
		КонецЕсли;
		НС = ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строчка);
		Если фл Тогда
			НС.Автозаполнение = фл;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьЗапрос(ИмяФайла, ДобавлятьВИсторию=Истина)
	Перем Текст, Структура, Код, Версия, ТекстЗапроса, Параметры, КодОбработки, КодВидимость, ПДатыНач, ПДатыКон, ВИмя, КодУстановкиПараметров, тзПараметрыДляКода;
	ПДатыНач = ВРег(",НачПериода,НачальнаяДата,ДатаНач,НачДата,");
	ПДатыКон = ВРег(",КонПериода,КонечнаяДата,ДатаКон,КонДата,");
	Если НЕ глозФайлСуществует(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Структура = ЗначениеИзФайла(ИмяФайла);
		Если ТипЗнч(Структура)=Тип("Структура") Тогда
			НетОшибок = Ложь;
			Если ТипЗнч(Структура)<>Тип("Структура") Тогда
				СообщитьОбОшибке("Значение - не структура.");
			ИначеЕсли НЕ Структура.Свойство("Версия", Версия) Тогда
				СообщитьОбОшибке("Нет значения версии.");
			ИначеЕсли Версия <> "ФайлЗапроса 1.0" Тогда
				СообщитьОбОшибке("Несовместимая версия файла.");
			ИначеЕсли НЕ Структура.Свойство("ТекстЗапроса", ТекстЗапроса) Тогда
				СообщитьОбОшибке("Нет текста запроса.");
			ИначеЕсли ТипЗнч(ТекстЗапроса) <> Тип("Строка") Тогда
				СообщитьОбОшибке("Текст запроса - не является строкой.");
			ИначеЕсли НЕ Структура.Свойство("Параметры", Параметры) Тогда
				СообщитьОбОшибке("Нет параметров для запроса.");
			ИначеЕсли ТипЗнч(Параметры)<>Тип("ТаблицаЗначений") Тогда
				СообщитьОбОшибке("Параметры - не таблица значений.");
			Иначе
				НетОшибок = Истина;
			КонецЕсли;

			ПараметрыДляКода.Очистить();
			Если Структура.Свойство("ПараметрыДляКода", тзПараметрыДляКода) Тогда
				Если ТипЗнч(тзПараметрыДляКода)=Тип("ТаблицаЗначений") Тогда
					Для каждого Строчка Из тзПараметрыДляКода Цикл
						ЗаполнитьЗначенияСвойств(ПараметрыДляКода.Добавить(), Строчка);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Структура.Свойство("КодОбработки", КодОбработки);
			Если ТипЗнч(КодОбработки) <> Тип("Строка") Тогда
				КодОбработки = "";
			КонецЕсли;
			
			Структура.Свойство("КодУстановкиПараметров", КодУстановкиПараметров);
			Если ТипЗнч(КодУстановкиПараметров) <> Тип("Строка") Тогда
				КодУстановкиПараметров = "";
			КонецЕсли;
			
			Структура.Свойство("НачПериода", НачПериода);
			Структура.Свойство("КонПериода", КонПериода);
			ЭтаФорма.ТекстЗапроса = ТекстЗапроса;
			ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
			ЗагрузитьПараметрыИзТЗ(Параметры);
			ЭтаФорма.ЭлементыФормы.РедакторКода.УстановитьТекст(КодОбработки);
			ЭтаФорма.ЭлементыФормы.РедакторКодаУстановкиПараметров.УстановитьТекст(КодУстановкиПараметров);
		Иначе			
			Если ТипЗнч(Структура)=Тип("ТаблицаЗначений") Тогда
				ТабЗапросы = ТабЗапросы.Скопировать(,"Запрос,ТекстЗапроса,КодОбработкистрокиРезультата");
			ИначеЕсли ТипЗнч(Структура)=Тип("ДеревоЗначений") Тогда
				ТабЗапросы = Новый ТаблицаЗначений;
				ТабЗапросы.Колонки.Добавить("Запрос");
				ТабЗапросы.Колонки.Добавить("ТекстЗапроса");
				ТабЗапросы.Колонки.Добавить("ПараметрыЗапроса");
				ТабЗапросы.Колонки.Добавить("КодОбработкистрокиРезультата");
				глозВыгрузитьДеревоЗначенийВТаблицуЗначений(Структура, ТабЗапросы);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
			Выбор = ТабЗапросы.ВыбратьСтроку("Выберите запрос:");
			Если Выбор=Неопределено Тогда
				Возврат;
			КонецЕсли;
			ЭтаФорма.ТекстЗапроса = Выбор.ТекстЗапроса;
			ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ЭтаФорма.ТекстЗапроса);
			ПараметрыЗапроса.Очистить();
			Для каждого Параметр Из Выбор.ПараметрыЗапроса Цикл
				ВИмя = ","+Врег(Параметр.ИмяПараметра)+",";
				Если Параметр.ЭтоВыражение = Истина Тогда
					Продолжить;
				ИначеЕсли Найти(ПДатыНач, ВИмя)>0 Тогда
					НачПериода = Параметр.ЗначениеПараметра;
				ИначеЕсли Найти(ПДатыКон, ВИмя)>0 Тогда
					КонПериода = Параметр.ЗначениеПараметра;
				КонецЕсли;
				НС = ПараметрыЗапроса.Добавить();
				НС.ИмяПараметра = Параметр.ИмяПараметра;
				НС.Значение = Параметр.ЗначениеПараметра;
				НС.ТипДанных = Параметр.ТипЗначения;
				НС.Автозаполнение = Истина;
			КонецЦикла;
			ЭлементыФормы.РедакторКода.УстановитьТекст(Выбор.КодОбработкистрокиРезультата);
			//озУстановитьВидимостьОбработкиКода(НЕ ПустаяСтрока(Выбор.КодОбработкистрокиРезультата));
			ДобавлятьВИсторию = Ложь;
		КонецЕсли;
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
		Попытка
			Текст = новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайла);
			ЭтаФорма.ТекстЗапроса = Текст.ПолучитьТекст();
			ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ЭтаФорма.ТекстЗапроса);
		Исключение
			СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецПопытки;
	СтароеИмяФайла = ИмяФайла;
	ЗапросБылСохранен = истина;
	ЗапросБылИзменен = Ложь;
	ОбновитьЗаголовокОкна();
КонецПроцедуры

Функция СохранениеЗапроса()
	Если ЗапросБылСохранен Тогда
		Возврат Истина;
	КонецЕсли;
	Ответ = Вопрос("Запрос был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ=КодВозвратаДиалога.Да Тогда
		КПЗапросаСохранить(неопределено);
	ИначеЕсли Ответ=КодВозвратаДиалога.Нет Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат ЗапросБылСохранен;
КонецФункции // СохранениеЗапроса()

Процедура ОбновитьЗаголовокОкна()
	Заголовок = "Отладчик запросов: "+?(ПустаяСтрока(СтароеИмяФайла), " <новый запрос>", """"+СтароеИмяФайла+"""");
КонецПроцедуры

Функция ОбработатьИзменениеТекстаЗапроса()
	Перем Стр;
	Если ЭтаФорма.Модифицированность и ЭлементыФормы.ПанельТекстЗапроса.ТекущаяСтраница=ЭлементыФормы.ПанельТекстЗапроса.Страницы.ТекстЗапроса Тогда
		ЭтаФорма.Модифицированность = Ложь;
		ТекстЗапроса = ЭлементыФормы.ТекстЗапросаРасш.ПолучитьТекст();
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
		Стр = ТекстЗапроса;
		ТекстЗапросаПриИзменении(Неопределено);
		Если Стр<>ТекстЗапроса Тогда
			ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ОткрытьДиалогСтруктурыЗапроса(НачПозиция, КонПозиция)	
	Если ПарсерТекстаЗапроса.Открыта() Тогда
		ПарсерТекстаЗапроса.Закрыть();
	КонецЕсли;
	ПарсерТекстаЗапроса.ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	Результат = ПарсерТекстаЗапроса.ОткрытьМодально();
	Если ТипЗнч(Результат)<>Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	НачПозиция = Результат.НачПозиция;
	КонПозиция = Результат.КонПозиция;
	Возврат Истина;
КонецФункции

// ---
Функция ПрерватьПошаговоеВыполненияПакета()
	Если флПошаговоеВыполнениеПакета и ПакетЗапросов<>Неопределено Тогда
		Если ПакетЗапросов.Инициализирован=Истина Тогда
			Если Вопрос("Прервать пошаговое выполнение запроса?", РежимДиалогаВопрос.ДаНет, 180)<>КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
			ЗавершитьПошаговоеВыполнениеПакета(Истина);
			ЭлементыФормы.ДействияФормы.Кнопки.ПошаговоеВыполнениеПакетаЗапросов.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура КПЗапросаНовыйЗапрос(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если СохранениеЗапроса() Тогда
		ТекстЗапроса = "";
		ЭлементыФормы.ТекстЗапросаРасш.Очистить();
		СтароеИмяФайла = "";
		ОбновитьЗаголовокОкна();
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаСохранить(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если ПустаяСтрока(СтароеИмяФайла) Тогда
		КПЗапросаСохранитьКак(Кнопка);
	Иначе
		СохранитьЗапрос(СтароеИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаЗагрузить(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если не СохранениеЗапроса() Тогда
		Возврат;
	КонецЕсли;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = ложь;
	Диалог.Фильтр = "Файл запроса (*.1qd)|*.1qd|Файл консоли запросов (*.sel)|*.sel|Текст (*.txt)|*.txt";
	Диалог.Каталог = СтароеИмяФайла;
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	фл = Истина;
	ЗагрузитьЗапрос(Диалог.ПолноеИмяФайла, фл);
	Если фл Тогда
		глозДобавитьФайлВИсторию(Диалог.ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаСохранитьКак(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = ложь;
	Диалог.Фильтр = "Файл запроса (*.1qd)|*.1qd|Текст (*.txt)|*.txt";
	Диалог.ПолноеИмяФайла = СтароеИмяФайла;
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	СохранитьЗапрос(Диалог.ПолноеИмяФайла);
	глозДобавитьФайлВИсторию(Диалог.ПолноеИмяФайла);
КонецПроцедуры

// ---

Процедура КПЗапросаКонструкторЗапросов(Элемент)
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	КЗ = Новый КонструкторЗапроса;
	Если НЕ ПустаяСтрока(ЭлементыФормы.ТекстЗапроса.Значение) Тогда
		Если ПроверитьТекстЗапроса() Тогда
			КЗ.Текст = ЭлементыФормы.ТекстЗапроса.Значение;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если КЗ.ОткрытьМодально() Тогда
		ЗапросБылИзменен = Истина;
		ЗапросБылСохранен = ложь;
		ТекстЗапроса = КЗ.Текст;
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
	КонецЕсли;
КонецПроцедуры // ВызовКонструктораЗапросов()

Процедура КПЗапросаКодЗапроса(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если ПроверитьТекстЗапроса() Тогда
		//ТекстЗапроса = СтрЗаменить(ЭлементыФормы.ТекстЗапроса.Значение, "|", "");
		ФормаКода = ПолучитьФорму("МакетыКода");
		ФормаКода.ТекстЗапроса = ТекстЗапроса;
		ФормаКода.ВладелецФормы = ЭтаФорма;
		ФормаКода.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаПроверитьТекстЗапроса(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	ОчиститьСообщения();
	Если ПроверитьТекстЗапроса() Тогда
		Сообщить("В тексте запроса синтаксических ошибок не обнаружено!");
	КонецЕсли;
КонецПроцедуры

// ---

Процедура КПРезультатаОбработкаРезультата(Кнопка)
	Если ТЗ.Количество()>0 Тогда
		Кнопка.Пометка = не Кнопка.Пометка;
		озУстановитьВидимостьДопПанели(Кнопка, ЭлементыФормы.ПанельКода, ЭлементыФормы.РазделительПанелиКода);
		Если (Кнопка.Пометка) и ПустаяСтрока(ЭлементыФормы.РедакторКода.ПолучитьТекст()) Тогда
			ИнициализацияТекстаОбработкиЗапроса();
		КонецЕсли;
	Иначе
		Кнопка.Пометка = Ложь;
		озУстановитьВидимостьДопПанели(Кнопка, ЭлементыФормы.ПанельКода, ЭлементыФормы.РазделительПанелиКода);
		Предупреждение("Обработка доступна только для таблицы значений!");
	КонецЕсли;
КонецПроцедуры

Процедура КПТаблицаПараметровЗапросаКодУстановкиПараметров(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	озУстановитьВидимостьДопПанели(Кнопка, ЭлементыФормы.ПанельКодаУстановкиПараметров, ЭлементыФормы.РазделительПанелиКодаУстановкиПараметров);
	Если (Кнопка.Пометка) и ПустаяСтрока(ЭлементыФормы.РедакторКодаУстановкиПараметров.ПолучитьТекст()) Тогда
		ИнициализацияТекстаКодаУстановкиПараметров();
	КонецЕсли;
КонецПроцедуры

// ---

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	ОбработатьИзменениеТекстаЗапроса();
	Если мНеОбновлятьПараметры Тогда
		Возврат;
	ИначеЕсли ЗапросБылИзменен и (ТекущаяСтраница=1) Тогда
		Если НЕ ПроверитьТекстЗапроса() Тогда
			ТекущийЭлемент = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
		ИначеЕсли ОбновитьТаблицуПараметрыЗапроса() Тогда
			ТекущийЭлемент = ЭлементыФормы.ТабПараметры;
		//ИначеЕсли НЕ ОбновитьТаблицуПараметрыЗапроса() Тогда
		//	ТекущийЭлемент = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Попытка
		ОбработатьИзменениеТекстаЗапроса();
	Исключение
	КонецПопытки;
	Отказ = истина;
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если ЗапросБылСохранен и (мПереключениеФорм<>истина) Тогда
		Если Вопрос("Закрыть отладчик запросов?", РежимДиалогаВопрос.ДаНет, 180)<>КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Отказ = не СохранениеЗапроса();
	Исключение
		Отказ = истина;
	КонецПопытки;
	Если не (Отказ или мНеЗагружатьНастройки) Тогда
		СохранитьЗначение(мИмяОбработки+"ИмяФайла", СтароеИмяФайла);
		СохранитьЗначение(мИмяОбработки+"Автосохранение", ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.Автосохранение.Пометка);
		СохранитьЗначение(мИмяОбработки+"НеУдалятьВТ", флНеУдалятьВременныеТаблицы);
		СохранитьЗначение(мИмяОбработки+"ПошагВыпПакета", флПошаговоеВыполнениеПакета);
		СохранитьЗначение(мИмяОбработки+"РаскраскаЗапроса", мКнопкаРаскраски.Пометка);
	КонецЕсли;
	Если (мПереключениеФорм<>истина) и не Отказ Тогда
		ПарсерТекстаЗапроса = Неопределено;
	КонецЕсли;
	Если НЕ Отказ Тогда
		Для каждого МетаФорма Из ЭтаФорма.Метаданные().Формы Цикл
			ТекФорма = ПолучитьФорму(МетаФорма);
			Попытка
				Если ТекФорма.Открыта() и ТекФорма<>ЭтаФорма Тогда
					ТекФорма.Закрыть();
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()	 
//	ДобавитьПанельСправкаФормы(ЭтаФорма);
	//Если ВосстановитьЗначение("ОтладчикЗапросов_ИнфоПанельВидима")=ложь Тогда
	//	КоманднаяПанельФормыСправкаФормы(неопределено);
	//КонецЕсли;
	мПризнакИнициализацииПанелиКода = Ложь;
	ЗапросБылИзменен = ложь;
	ЗапросБылСохранен = истина;
	
	//озУстановитьВидимостьОбработкиКода(Ложь);
	кн = ЭлементыФормы.КПРезультата.Кнопки.ОбработкаРезультата;
	кн.Пометка = Ложь;
	озУстановитьВидимостьДопПанели(кн, ЭлементыФормы.ПанельКода, ЭлементыФормы.РазделительПанелиКода);
	
	кн = ЭлементыФормы.КПТаблицаПараметровЗапроса.Кнопки.КодУстановкиПараметров;
	кн.Пометка = Ложь;
	озУстановитьВидимостьДопПанели(кн, ЭлементыФормы.ПанельКодаУстановкиПараметров, ЭлементыФормы.РазделительПанелиКодаУстановкиПараметров);
	
	ИнициализацияКонтекстныхПодсказок();
	Если мНеЗагружатьНастройки=Истина Тогда
		ОбновитьЗаголовокОкна();
		Возврат;
	КонецЕсли;
	ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.Автосохранение.Пометка = ВосстановитьЗначение(мИмяОбработки+"Автосохранение")<>Ложь;
	флНеУдалятьВременныеТаблицы = ВосстановитьЗначение(мИмяОбработки+"НеУдалятьВТ")=Истина;
	ЭлементыФормы.ДействияФормы.Кнопки.НеУдалятьВременныеТаблицыЗапроса.Пометка = флНеУдалятьВременныеТаблицы;
	флПошаговоеВыполнениеПакета = ВосстановитьЗначение(мИмяОбработки+"ПошагВыпПакета")=Истина;
	ЭлементыФормы.ДействияФормы.Кнопки.ПошаговоеВыполнениеПакетаЗапросов.Пометка = флПошаговоеВыполнениеПакета;
	флРаскраска = ВосстановитьЗначение(мИмяОбработки+"РаскраскаЗапроса")=Истина;
	Если флПошаговоеВыполнениеПакета Тогда
		ОткрытьФормуПакетЗапросов();
	КонецЕсли;
	// Открыть последний файл запроса
	ИФ = СокрЛП(ВосстановитьЗначение(мИмяОбработки+"ИмяФайла"));
	Попытка
		ЗагрузитьЗапрос(ИФ);
		ОбновитьЗаголовокОкна();
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	Если флРаскраска Тогда
		КПЗапросаРаскраска(мКнопкаРаскраски);
	КонецЕсли;
	
///////////////////////////////////////////////////////////////////////////////////
// НАЧАЛО.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой

	флПодключатьКлассИР = ВосстановитьЗначение(мИмяОбработки+"ПодключатьКлассИР")<>Ложь;
	флПодключатьКлассВнутр = ВосстановитьЗначение(мИмяОбработки+"ПодключатьКлассВнутр")<>Ложь;
	ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.КонтекстнаяПодсказка.Кнопки.ПодключатьКонтекстнуюПодсказкуИР.Пометка = флПодключатьКлассИР;
	ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.КонтекстнаяПодсказка.Кнопки.ПодключатьВнутреннийКласс.Пометка = флПодключатьКлассИР;
	
	Если флПодключатьКлассИР И Метаданные.Обработки.Найти("ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой")<>Неопределено Тогда
		
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
		
		ОбработкаМенеджер = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой;
		
		ОбработкаМенеджер.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.РедакторКода, ЭлементыФормы.КПРедакторКода, Ложь, "ВыполнитьЛокально", ЭтаФорма);
			
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода.ДобавитьСловоЛокальногоКонтекста("РезультатЗапроса", "Свойство", новый ОписаниеТипов("ТаблицаЗначений"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода.ДобавитьСловоЛокальногоКонтекста("Параметры", "Свойство", новый ОписаниеТипов("Структура"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода.ДобавитьСловоЛокальногоКонтекста("ПерепровестиДокумент", "Метод");
		
		ОбработкаМенеджер.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.РедакторКодаУстановкиПараметров, ЭлементыФормы.КПКодУстановки, Ложь, "ВыполнитьЛокальноУстановкуПараметров", ЭтаФорма);
			
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКодаУстановкиПараметров.ДобавитьСловоЛокальногоКонтекста("Запрос", "Свойство", новый ОписаниеТипов("Запрос"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКодаУстановкиПараметров.ДобавитьСловоЛокальногоКонтекста("Параметры", "Свойство", новый ОписаниеТипов("Структура"));
	
	ИначеЕсли флПодключатьКлассВнутр Тогда
		Макет = ПолучитьМакет("УстаревшийКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой");
		ИмяФайла = ПолучитьИмяВременногоФайла(".epf");
		Макет.Записать(ИмяФайла);
		
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
		ВнешниеОбработки.Создать(ИмяФайла).Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.РедакторКода, ЭлементыФормы.КПРедакторКода, Ложь, "ВыполнитьЛокально", ЭтаФорма);
			
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода.ДобавитьСловоЛокальногоКонтекста("РезультатЗапроса", "Свойство", новый ОписаниеТипов("ТаблицаЗначений"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода.ДобавитьСловоЛокальногоКонтекста("Параметры", "Свойство", новый ОписаниеТипов("Структура"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКода.ДобавитьСловоЛокальногоКонтекста("ПерепровестиДокумент", "Метод");
		
		ВнешниеОбработки.Создать(ИмяФайла).Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
			ЭтаФорма, ЭлементыФормы.РедакторКодаУстановкиПараметров, ЭлементыФормы.КПКодУстановки, Ложь, "ВыполнитьЛокальноУстановкуПараметров", ЭтаФорма);
			
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКодаУстановкиПараметров.ДобавитьСловоЛокальногоКонтекста("Запрос", "Свойство", новый ОписаниеТипов("Запрос"));
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.РедакторКодаУстановкиПараметров.ДобавитьСловоЛокальногоКонтекста("Параметры", "Свойство", новый ОписаниеТипов("Структура"));
		
		мИспользуетсяВнутреннийКласс = Истина;
	Иначе
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Неопределено;
		Для каждого Кнопка Из ЭлементыФормы.КП_ЗапаснаяДляРедактораКода.Кнопки Цикл
			ЭлементыФормы.КПРедакторКода.Кнопки.Добавить(Кнопка.Имя, Кнопка.ТипКнопки, Кнопка.Текст, Кнопка.Действие).Картинка = Кнопка.Картинка;
		КонецЦикла;
		ЭлементыФормы.КПРедакторКода.Кнопки.Выполнить.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КонецЕсли;
			
// КОНЕЦ_.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
///////////////////////////////////////////////////////////////////////////////////

КонецПроцедуры

Процедура КомандныСпискаПКОПоказатьВсе(Кнопка)
	Для Каждого Строка из ДЗ.Строки Цикл
		ЭлементыФормы.ДЗ.Развернуть(Строка, Истина);
	КонецЦикла;
КонецПроцедуры

Процедура КомандныСпискаПКОСвернутьВсе(Кнопка)
	Для Каждого Строка из ДЗ.Строки Цикл
		ЭлементыФормы.ДЗ.Свернуть(Строка);
	КонецЦикла;
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	КлючУникальности = Новый УникальныйИдентификатор();
КонецПроцедуры

Функция ИнициализироватьВременныеТаблицы()
	ВременныеТаблицы = Новый ТаблицаЗначений;
	ВременныеТаблицы.Колонки.Добавить("НомерЗапроса");
	ВременныеТаблицы.Колонки.Добавить("ИмяТаблицы");
	ВременныеТаблицы.Колонки.Добавить("Псевдоним");
	ВременныеТаблицы.Колонки.Добавить("Данные");
	Возврат ВременныеТаблицы;
КонецФункции

Процедура КПРезультатаПросмотрТаблиц(Кнопка)
	Перем ВременныеТаблицы, Запрос, мЗапросы, Стр;
	
	Если мВыполненныйЗапросВременныеТаблицы<>Неопределено Тогда
		ВременныеТаблицы = мВыполненныйЗапросВременныеТаблицы;
	Иначе	
		
		Если глЗапрос=неопределено Тогда
			Возврат;
		ИначеЕсли глЗапрос.МенеджерВременныхТаблиц=неопределено Тогда
			Возврат;
		ИначеЕсли мВыполненныйЗапрос="" Тогда
			Возврат;
		КонецЕсли;
		
		ВременныеТаблицы = ИнициализироватьВременныеТаблицы();
		
		мЗапросы = ПарсерТекстаЗапроса.РазложитьПакетЗапросов(мВыполненныйЗапрос);
		нпп = 0;
		Для каждого Запрос из мЗапросы Цикл
			нпп = нпп + 1;
			Если Лев(Запрос.ТипЗапроса, 1)="+" Тогда
				Стр = ВременныеТаблицы.Добавить();
				Стр.НомерЗапроса = нпп;
				Стр.ИмяТаблицы = СокрЛП(Сред(Запрос.ТипЗапроса, 2));
				Стр.Псевдоним = Стр.ИмяТаблицы;
				Стр.Данные = Неопределено;
			ИначеЕсли Лев(Запрос.ТипЗапроса, 1)="-" Тогда
				Стр = ВременныеТаблицы.Найти(СокрЛП(Сред(Запрос.ТипЗапроса, 2)), "ИмяТаблицы");
				Если Стр<>Неопределено Тогда
					ВременныеТаблицы.Удалить(Стр);
					Стр = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого Строка Из ВременныеТаблицы Цикл	Строка.Данные = озПолучитьВременнуюТаблицу(Строка.ИмяТаблицы) КонецЦикла;
	КонецЕсли;
	
	Если ВременныеТаблицы.Количество()=0 Тогда
		Предупреждение("Нет временных таблиц");
		Возврат;
	КонецЕсли;
	Если мФормаПросмотрВременныхТаблиц=Неопределено Тогда
		мФормаПросмотрВременныхТаблиц = ПолучитьФорму("ПросмотрВременныхТаблиц");
	КонецЕсли;
	мФормаПросмотрВременныхТаблиц.РежимСтруктуры = Ложь;
	мФормаПросмотрВременныхТаблиц.ВременныеТаблицы = ВременныеТаблицы;
	мФормаПросмотрВременныхТаблиц.ВладелецФормы = ЭтаФорма;
	мФормаПросмотрВременныхТаблиц.ЗакрыватьПриЗакрытииВладельца = истина;
	мФормаПросмотрВременныхТаблиц.Открыть();
КонецПроцедуры

Процедура ТабПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Картинка.ЗначениеКартинки = 0;
	ТекТип = ДанныеСтроки.ТипДанных;
	Если ТекТип="---" Тогда
		ОформлениеСтроки.Ячейки.ТипДанных.Текст="";
	ИначеЕсли ТекТип=ТипТЗ Тогда
		ОформлениеСтроки.Ячейки.Значение.Текст="< Таблица значений... >";
	ИначеЕсли ТекТип=ТипГраница или ТекТип=ТипМоментВремени Тогда
		Попытка
			ОформлениеСтроки.Ячейки.Значение.Текст=""+ЗначениеИзСтрокиВнутр(ДанныеСтроки.ТЗ);
		Исключение
			ОформлениеСтроки.Ячейки.Значение.Текст="";
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ТабПараметрыТипДанныхОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных="---";
КонецПроцедуры

Функция озПустоеЗначениеТипа(ОписаниеТипа)
	Перем тТип;
	Если ТипЗнч(ОписаниеТипа)<>Тип("ОписаниеТипов") Тогда
		Возврат неопределено;
	ИначеЕсли ОписаниеТипа.Типы().Количество()<>1 Тогда
		Возврат неопределено;
	КонецЕсли;
	тТип = ОписаниеТипа.Типы().Получить(0);
	Если тТип=Тип("Булево") тогда
		Возврат Ложь;
	ИначеЕсли тТип=Тип("Число") тогда
		Возврат 0;
	ИначеЕсли тТип=Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли тТип=Тип("Дата") Тогда
		Возврат Дата(1, 1, 1);
	ИначеЕсли (тТип=Тип("СписокЗначений")) или тТип=Тип("Массив") Тогда
		Возврат новый СписокЗначений;
	ИначеЕсли тТип=Тип("ТаблицаЗначений") Тогда
		Возврат новый СписокЗначений;
	Иначе
		Попытка
			Возврат новый (тТип);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
КонецФункции

Процедура ТабПараметрыТипДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Форма = ПолучитьФорму("ВыборТипаЗначения");
	Форма.ВладелецФормы = ЭтаФорма;
	Форма.НеВыбрано = ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных="---";
	Форма.ВыбЗнач = ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных;
	Если Форма.ОткрытьМодально()=Истина Тогда		
		ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных = ?(Форма.НеВыбрано, "---", Форма.ВыбЗнач);
		ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение = озПустоеЗначениеТипа(ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных);
	КонецЕсли;
КонецПроцедуры

Процедура РедактироватьКакТаблицуЗначений()	
	Форма = ПолучитьФорму("РедакторТаблицыЗначений");
	Попытка
		Форма.ТЗ = ЗначениеИзСтрокиВнутр(ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТЗ);
	Исключение
		Форма.ТЗ = новый ТаблицаЗначений;
	КонецПопытки;
	Если Форма.ОткрытьМодально()=Истина Тогда
		ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТЗ = ЗначениеВСтрокуВнутр(Форма.ТЗ);
	КонецЕсли;
КонецПроцедуры

Процедура РедактироватьКакСписокЗначений(СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("РедакторСпискаЗначений");
	Форма.Значение = ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение;
	тТип = ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных;
	Если тТип<>ТипТЗ и тТип<>ТипМассив и тТип<>ТипСЗ Тогда
		Форма.мТипЗначенияСписка = тТип;
		Форма.ТекстТипЗначения = ""+тТип;
	КонецЕсли;
	Если Форма.ОткрытьМодально()=Истина Тогда
		ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение = Форма.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ТабПараметрыЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Перем ВыбЗнач, тТипы, тТип;
	СтандартнаяОбработка = ложь;
	Если нрег(СокрЛП(ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных))="таблица значений" Тогда
		тТип = ТипТЗ;
	Иначе
		Если ТипЗнч(ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных)<>Тип("ОписаниеТипов") Тогда
			ТабПараметрыТипДанныхНачалоВыбора(Элемент, СтандартнаяОбработка);
		КонецЕсли;
		тТипы = ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных;
		Если ТипЗнч(тТипы)<>Тип("ОписаниеТипов") Тогда
			Возврат;
		КонецЕсли;
		тТип = ?(тТипы.Типы().Количество()<>1, Неопределено, тТипы.Типы().Получить(0));
	КонецЕсли;
	Если (тТип=Тип("Массив") или тТип=Тип("СписокЗначений")) и (ТипЗнч(ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение)=Тип("СписокЗначений")) Тогда
		РедактироватьКакСписокЗначений(СтандартнаяОбработка);
	ИначеЕсли ЭлементыФормы.ТабПараметры.ТекущиеДанные.СписокЗначений=Истина Тогда
		РедактироватьКакСписокЗначений(СтандартнаяОбработка);
	ИначеЕсли (тТип=ТипЗнч(ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение)) и (тТип<>Неопределено) Тогда
		СтандартнаяОбработка = истина;
	ИначеЕсли тТип = ТипТЗ Тогда
		РедактироватьКакТаблицуЗначений();
	ИначеЕсли тТип=Тип("Граница") или тТип=Тип("МоментВремени") Тогда
		Ф = ПолучитьФорму("Редактор"+?(тТип=Тип("Граница"), "Граница", "МоментВремени"));
		Попытка
			Ф.НачальноеЗначениеВыбора = ЗначениеИзСтрокиВнутр(ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТЗ);
		Исключение
			Ф.НачальноеЗначениеВыбора = Неопределено;
		КонецПопытки;
		Ответ = Ф.ОткрытьМодально();
		Если ТипЗнч(Ответ)=тТип Тогда
			ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТЗ = ЗначениеВСтрокуВнутр(Ответ);
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Истина;
		Если тТип<>Неопределено Тогда
			ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение = озПустоеЗначениеТипа(тТипы);
		ИначеЕсли НЕ ЗначениеЗаполнено(ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение) Тогда
			СЗ = Новый СписокЗначений;
			СЗ.ЗагрузитьЗначения(тТипы.Типы());
			Элем = ВыбратьИзСписка(СЗ, Элемент);
			Если Элем=Неопределено Тогда
				СтандартнаяОбработка = Ложь;
			Иначе
				тТипы = новый Массив();
				тТипы.Добавить(Элем.Значение);
				тТип = новый ОписаниеТипов(тТипы);
				ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение = озПустоеЗначениеТипа(тТип);
			КонецЕсли;
		КонецЕсли;
		Возврат;
	//ИначеЕсли ВвестиЗначение(ВыбЗнач,,ЭлементыФормы.ТабПараметры.ТекущиеДанные.ТипДанных) Тогда
	//	ЭлементыФормы.ТабПараметры.ТекущиеДанные.Значение = ВыбЗнач;
	КонецЕсли;
КонецПроцедуры

Процедура КПРедакторКодаОчиститьКод(Кнопка)
	ИнициализацияТекстаОбработкиЗапроса();
КонецПроцедуры

Процедура КПКодУстановкиОчиститьКод(Кнопка)
	ИнициализацияТекстаКодаУстановкиПараметров(Ложь);
КонецПроцедуры

Процедура КПКодУстановкиОчиститьКод2(Кнопка)
	ИнициализацияТекстаКодаУстановкиПараметров(Истина);
КонецПроцедуры

Процедура КПРедакторКодаВставитьФункцию(Кнопка)	
	Перем Стр, ТекстФункции, П;
	Стр = ЭлементыФормы.РедакторКода.ВыделенныйТекст;
	ТекстФункции = СокрЛП(Кнопка.Текст);
	П = Найти(ТекстФункции, "<?");
	Если П>0 Тогда
		Стр = Лев(ТекстФункции, П-1) + Стр;
		ТекстФункции = Сред(ТекстФункции, П+2);
		ТекстФункции = Стр + Сред(ТекстФункции, Найти(ТекстФункции, ">")+1);
	КонецЕсли;
	ЭлементыФормы.РедакторКода.ВыделенныйТекст = ТекстФункции;
КонецПроцедуры

Процедура КПРезультатЗапросаВыполнитьКод(Кнопка)
	Перем ТекстКод, тОш, Стр, НомСтр, НомКол;
	ТекстКод = ЭлементыФормы.РедакторКода.ПолучитьТекст();
	КонтекстВыполнения = ПолучитьФорму("КонтекстВыполненияКода", , ЭтаФорма);
	КонтекстВыполнения.РезультатЗапроса = ТЗ;
	Параметры = Новый Структура();
	Для каждого Строчка Из ПараметрыДляКода Цикл
		Параметры.Вставить(Строчка.ИмяПараметра, Строчка.Значение);
	КонецЦикла;
	КонтекстВыполнения.Параметры = Параметры;
	Если КонтекстВыполнения.ВыполнитьЛокально(ТекстКод) Тогда
		Сообщить("---------------------------------------------------------------", СтатусСообщения.БезСтатуса);
		Сообщить("Выполнение завершено.", СтатусСообщения.Информация);
	Иначе
		Сообщить("---------------------------------------------------------------", СтатусСообщения.БезСтатуса);
		глозСообщитьОбОшибкеВыполненияКода(КонтекстВыполнения.ОписаниеОшибки, "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода:", ТекстКод, ЭтаФорма, ЭлементыФормы.РедакторКода);
		//Сообщить(КонтекстВыполнения.ОписаниеОшибки.Сообщение, СтатусСообщения.ОченьВажное);
		//Если КонтекстВыполнения.ОписаниеОшибки.НомерСтроки>0 и КонтекстВыполнения.ОписаниеОшибки.НомерКолонки>0 Тогда
		//	// Улучшить в будущем - надо выделять СЛОВО, а не просто устанавливать курсор!
		//	ЭлементыФормы.РедакторКода.УстановитьГраницыВыделения(КонтекстВыполнения.ОписаниеОшибки.НомерСтроки, КонтекстВыполнения.ОписаниеОшибки.НомерКолонки, КонтекстВыполнения.ОписаниеОшибки.НомерСтроки, КонтекстВыполнения.ОписаниеОшибки.НомерКолонки);
		//	ТекущийЭлемент = ЭлементыФормы.РедакторКода;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросАвтосохранение(Кнопка)
	Кнопка.Пометка = не Кнопка.Пометка;
КонецПроцедуры

Процедура КПЗапросаЗагрузитьПакет(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Попытка
		ИмяФайлаПакета = глозПолучитьИмяФайлаСохраненияПакетаЗапросов();
		Если НЕ глозФайлСуществует(ИмяФайлаПакета) Тогда
			Сообщить(СтрЗаменить("
			|Для первого запроса:
			|[Обработка].СоздатьПакетЗапросов(Запрос)
			|
			|Для второго и остальных:
			|[Обработка].ДобавитьЗапросВПакет(Запрос)",
			"[Обработка]", глозПолучитьСтрокуКодаСоздания()), СтатусСообщения.Информация);
			Предупреждение("Пакет запросов создается из конфигуратора в режиме отладки.
			|
			|Установите точки останова в отладчике на каждом ""Запрос.Выполнить()"".
			|При остановке выполнения на этих точках останова нужно вызвать ""Вычислить выражение..."" (Shift+F9)
			|В окне выражения нужно прописать код, указанный в окне ""Служебные сообщения"".",,"Не найден пакет запросов!");
			Возврат;
		КонецЕсли;
		Структура = ЗначениеИзФайла(ИмяФайлаПакета);
		Если Структура.Версия<>"Отладчик пакета запросов формат 1.0" Тогда
			ВызватьИсключение "Несовместимая версия данных.";
		КонецЕсли;
		ТекстЗапроса = Структура.ТекстЗапроса;
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
		глозЗаполнитьПараметрыИзЗапроса(Структура, ПараметрыЗапроса, НачПериода, КонПериода);
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Запрос;
		УдалитьФайлы(ИмяФайлаПакета);
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура КПЗапросаСтруктураЗапроса(Кнопка)
	Перем НП, КП;
	ОбработатьИзменениеТекстаЗапроса();
	Если ОткрытьДиалогСтруктурыЗапроса(НП, КП) Тогда
		ТекущийЭлемент = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
		ТекущийЭлемент.УстановитьГраницыВыделения(Макс(1, НП), КП);
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаВыбратьПодзапрос(Кнопка)
	Перем
		НП, КП, НовТекст, Слово, ТекДлина, Дополнения, СтарыйТекстЗапроса;

	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	
	мВыборки = ПарсерТекстаЗапроса.ПолучитьВложенныеВыборки(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса));
	Если мВыборки.Количество()=1 Тогда
		НП = мВыборки[0].НачПозиция;
		КП = мВыборки[0].КонПозиция;
	ИначеЕсли НЕ ОткрытьДиалогСтруктурыЗапроса(НП, КП) Тогда
		Возврат;
	КонецЕсли;

	ТекущийЭлемент = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(НП, КП);
	НовТекст = ЭлементыФормы.ТекстЗапроса.ВыделенныйТекст;
	Слово = ПарсерТекстаЗапроса.СледующееСловоБезКомментариев(НовТекст, 1);

	Если ПарсерТекстаЗапроса.ФорматСловаЗапроса(Слово.Слово)<>"ВЫБРАТЬ" Тогда
		Предупреждение(	"Извлечь можно только вложенную выборку, но не часть запроса.
						|Воспользуйтесь конструктором запросов.", 300);
		Возврат;
	ИначеЕсли Вопрос(	"Данное действие заменит весь текущий запрос на подзапрос.
						|Отменить операцию будет невозможно.
						|Продолжить?", РежимДиалогаВопрос.ДаНет, 300)<>КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйТекстЗапроса = ТекстЗапроса;
	
	НовТекст = Сред(НовТекст, Слово.НачПозиция);
	КП = ПарсерТекстаЗапроса.НайтиЗакрывающуюСкобку(НовТекст, 1);
	НовТекст = СокрЛП(Лев(НовТекст, КП-2));
	
	ТекДлина = СтрДлина(ТекстЗапроса);
	НП = ТекДлина;
	Для сч=1 По 3 Цикл
		ТекСлово = ПарсерТекстаЗапроса.НайтиКлючевоеСлово(?(сч=1, "УПОРЯДОЧИТЬ", ?(сч=2, "ИТОГИ", ?(сч=3, "АВТОУПОРЯДОЧИВАНИЕ", "---"))), ТекстЗапроса, 1, ТекДлина);
		Если ТекСлово=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НП = Мин(НП, ТекСлово.НачПозиция);
	КонецЦикла;
	
	ТекстЗапроса = НовТекст+?(НП<ТекДлина, Символы.ПС+Символы.ПС+Сред(ТекстЗапроса, НП), "");
	ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
	ТекстЗапросаПриИзменении(Неопределено);
	глТекстЗапросаДляОтмены = СтарыйТекстЗапроса;
	ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Истина;
	ЗапросБылИзменен = Истина;
	Модифицированность = Истина;
КонецПроцедуры

Процедура КПЗапросаПошаговоеВыполнениеПакетаЗапросов(Кнопка)
	//Если НЕ (Кнопка.Пометка или ПроверитьТекстЗапроса()) Тогда
	//	Возврат;
	//КонецЕсли;
	Кнопка.Пометка = не Кнопка.Пометка;
	флПошаговоеВыполнениеПакета = Кнопка.Пометка;
	Если флПошаговоеВыполнениеПакета Тогда
		ОткрытьФормуПакетЗапросов();
	Иначе
		ЗавершитьПошаговоеВыполнениеПакета(истина);
		ПакетЗапросов.Закрыть();
		ПакетЗапросов = Неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаНеУдалятьВременныеТаблицыЗапроса(Кнопка)
	Кнопка.Пометка = не Кнопка.Пометка;
	флНеУдалятьВременныеТаблицы = Кнопка.Пометка;
КонецПроцедуры

Процедура ДействияФормыОткрытьИзОтладчика(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	ОчиститьСообщения();
	Сообщить(СтрЗаменить("[Обработка].ОткрытьДляОтладки(Запрос)", "[Обработка]", глозПолучитьСтрокуКодаСоздания()), СтатусСообщения.Информация);
	Предупреждение("Запрос можно открыть из конфигуратора в режиме отладки.
	|
	|Установите точку останова в отладчике на ""Запрос.Выполнить()"".
	|При остановке выполнения на этой точке останова нужно вызвать ""Вычислить выражение..."" (Shift+F9)
	|
	|В окне выражения нужно прописать код, указанный в окне ""Служебные сообщения"".",, "Информация");
КонецПроцедуры

Процедура ДействияФормыВосстановить(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если глозФайлСуществует(СтароеИмяФайла) Тогда
		Если не ЗапросБылСохранен Тогда
			Если Вопрос("Запрос был изменен. Восстановить сохраненную версию с диска?", РежимДиалогаВопрос.ДаНет, 180)<>КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗагрузитьЗапрос(СтароеИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаОтменитьИзменения(Кнопка)
	Если глТекстЗапросаДляОтмены<>"" Тогда
		Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
			Возврат;
		КонецЕсли;
		глТекстЗапросаДляВозврата = ТекстЗапроса;
		ТекстЗапроса = глТекстЗапросаДляОтмены;
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
		ОбработатьИзменениеТекстаЗапроса();
	КонецЕсли;
	ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Ложь;
	ЭлементыФормы.КПЗапроса.Кнопки.ВернутьИзменения.Доступность = Истина;
КонецПроцедуры

Процедура КПЗапросаВернутьИзменения(Кнопка)
	Если глТекстЗапросаДляВозврата<>"" Тогда
		Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
			Возврат;
		КонецЕсли;
		глТекстЗапросаДляОтмены = ТекстЗапроса;
		ТекстЗапроса = глТекстЗапросаДляВозврата;
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
		ОбработатьИзменениеТекстаЗапроса();
	КонецЕсли;
	ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Истина;
	ЭлементыФормы.КПЗапроса.Кнопки.ВернутьИзменения.Доступность = Ложь;
КонецПроцедуры

Процедура ДействияФормыОткрытьРанееСохраненный(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если не СохранениеЗапроса() Тогда
		Возврат;
	КонецЕсли;
	Форма = ПолучитьФорму("ИсторияЗапросов");
	ПолноеИмяФайла = Форма.ОткрытьМодально();
	Если ТипЗнч(ПолноеИмяФайла)=Тип("Строка") и глозФайлСуществует(ПолноеИмяФайла) Тогда
		ЗагрузитьЗапрос(ПолноеИмяФайла);
		глозДобавитьФайлВИсторию(ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры

Процедура КПЗапросаСписокЗапросовПакета(Кнопка)
	Перем Элем, НачСтр, НачКол, КонСтр, КонКол, ПК, ТекЗапрос, Элемент, тзПакет, сзПакет, сч, Строка, ТипЗапроса, Выбор, Слово;
	ОбработатьИзменениеТекстаЗапроса();
	Элем = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
	Элем.ПолучитьГраницыВыделения(НачСтр, НачКол, КонСтр, КонКол);
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	ПК = ПарсерТекстаЗапроса.НомерПозицииВТексте(ТекстЗапроса, НачСтр, НачКол);
	тзПакет = ПарсерТекстаЗапроса.РазложитьПакетЗапросов(ТекстЗапроса);
	тзПакет.Колонки.Добавить("НПП");
	сзПакет = Новый СписокЗначений;
	ТекЗапрос = Неопределено;
	ПредКонПозиция = 0;
	Для сч=0 По тзПакет.Количество()-1 Цикл 
		Строка = тзПакет[сч];
		Строка.НПП = сч + 1;
		ТипЗапроса = Строка.ТипЗапроса;
		Если ТипЗапроса = "Выборка" Тогда
			ТипЗапроса = "< Выборка >";
		ИначеЕсли Лев(ТипЗапроса, 1)="+" или Лев(ТипЗапроса, 1)="-" Тогда
			ТипЗапроса = Лев(ТипЗапроса, 1)+" "+СокрЛП(Сред(ТипЗапроса, 2));
		КонецЕсли;
		Элемент = сзПакет.Добавить(Строка.НПП, Формат(Строка.НПП, "")+".) "+ТипЗапроса);
		Если ПредКонПозиция<ПК И (Строка.КонПозиция + 1)>=ПК Тогда
			ТекЗапрос = Элемент;
		КонецЕсли;
		ПредКонПозиция = Строка.КонПозиция + 1;
	КонецЦикла;
	Выбор = сзПакет.ВыбратьЭлемент("Запросы пакета:", ТекЗапрос);
	Если Выбор<>Неопределено Тогда
		Строка = тзПакет.Найти(Выбор.Значение, "НПП");
		Если Строка<>Неопределено Тогда
			Слово = ПарсерТекстаЗапроса.СледующееСловоБезКомментариев(ТекстЗапроса, Строка.НачПозиция);
			Если Слово.Слово<>"" и Слово.НачПозиция<Строка.Конпозиция Тогда
				Элем.УстановитьГраницыВыделения(Макс(1, Слово.НачПозиция), Слово.КонПозиция+1);
			Иначе
				Элем.УстановитьГраницыВыделения(Строка.НачПозиция, Строка.НачПозиция);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОпределитьТипОтветаЗапроса(Параметр1)
	Перем Пакет, Ответ;
	Пакет = ?(ТипЗнч(Параметр1)=Тип("Строка"), ПарсерТекстаЗапроса.РазложитьПакетЗапросов(Параметр1), Параметр1);
	сч = Пакет.Количество();
	Пока сч>0 Цикл
		сч = сч - 1;
		ТекТекст = Сред(Параметр1, Пакет[сч].НачПозиция, Пакет[сч].КонПозиция-Пакет[сч].НачПозиция+1);
		Если НЕ ПустаяСтрока(ТекТекст) Тогда
			Ответ = ?(Пакет.Количество()>0, Пакет[сч].ТипЗапроса, "");
			Возврат Ответ;
		КонецЕсли;
	КонецЦикла;
	Возврат "";
КонецФункции

Функция КолСтрокНижнегоУровня(Строки)
// рекурсивная, Строки - строки дерева значений
	Отв = 0;
	Для каждого Строка Из Строки Цикл
		СтрокиСтроки = Строка.Строки;
		Если СтрокиСтроки.Количество()>0 Тогда
			Отв = Отв + КолСтрокНижнегоУровня(СтрокиСтроки);
		Иначе
			Отв = Отв + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Отв;
КонецФункции

Функция ПодсчитатьКоличествоСтрокРезульата(Рез)
	Если ТипЗнч(Рез)=Тип("ТаблицаЗначений") Тогда
		Возврат Рез.Количество();
	ИначеЕсли ТипЗнч(Рез)=Тип("ДеревоЗначений") Тогда
		Возврат КолСтрокНижнегоУровня(Рез.Строки);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ЗакрытьФормуПросмотраВТ()
	Если мФормаПросмотрВременныхТаблиц<>Неопределено Тогда
		Если мФормаПросмотрВременныхТаблиц.Открыта() Тогда
			мФормаПросмотрВременныхТаблиц.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ИнициализацияТекстаОбработкиЗапроса()
	Перем Текст, Колонка;
	Если НЕ ПустаяСтрока(ЭлементыФормы.РедакторКода.ПолучитьТекст()) Тогда
		Если Вопрос("Содержимое текстового поля будет очищено
					|и заменено на стандартный шаблон.
					|Продолжить?", РежимДиалогаВопрос.ДаНет, 180)<>КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Текст = "Для каждого СтрокаДанных из РезультатЗапроса Цикл";
	Для каждого Колонка Из ТЗ.Колонки Цикл
		Текст = Текст + Символы.ПС + Символы.Таб+"СтрокаДанных."+Колонка.Имя+"  // "+Колонка.ТипЗначения;
	КонецЦикла;
	Текст = Текст + Символы.ПС + "КонецЦикла;";
	ЭлементыФормы.РедакторКода.УстановитьТекст(Текст);
КонецПроцедуры

Процедура ИнициализацияТекстаКодаУстановкиПараметров(флКодПоКаждомуПараметру=Ложь)
	Перем Текст, Колонка;
	Если НЕ ПустаяСтрока(ЭлементыФормы.РедакторКодаУстановкиПараметров.ПолучитьТекст()) Тогда
		Если Вопрос("Содержимое текстового поля будет очищено
					|и заменено на стандартный шаблон.
					|Продолжить?", РежимДиалогаВопрос.ДаНет, 180)<>КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если флКодПоКаждомуПараметру Тогда
		Текст = "";
		Для каждого Параметр Из ПараметрыЗапроса Цикл
			Текст = Текст + "Запрос.Параметры.Вставить("""+Параметр.ИмяПараметра+""", Параметры."+Параметр.ИмяПараметра+");"+Символы.ПС;
		КонецЦикла;
		Текст = СокрЛП(Текст);
	Иначе
		Текст = "Для каждого Элемент из Параметры Цикл
				|	Запрос.Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
				|КонецЦикла;";
	КонецЕсли;
	ЭлементыФормы.РедакторКодаУстановкиПараметров.УстановитьТекст(СокрП(Текст));
КонецПроцедуры

Функция озПолучитьВременнуюТаблицу(ИмяТаблицы)
	Перем ЗапросТМП, Ответ;
	Попытка
		ЗапросТМП = новый Запрос;
		ЗапросТМП.МенеджерВременныхТаблиц = глЗапрос.МенеджерВременныхТаблиц;
		ЗапросТМП.Текст = "ВЫБРАТЬ * ИЗ "+ИмяТаблицы;
		Ответ = ЗапросТМП.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Исключение
		Ответ = новый ТаблицаЗначений;
		Ответ.Колонки.Добавить("Ош", , "Ошибка при получении данных.");
	КонецПопытки;
	Возврат Ответ;
КонецФункции

Функция ИзвлечьРезультат(Запрос, Результат, ТекстЗапроса, ВыводитьИнфоПанель=Ложь, Интервал=0)
	Перем ТипОтв, ТипОбходаРезультата, Рез, ТипОтвета;
	ТипОтв = ОпределитьТипОтветаЗапроса(ТекстЗапроса);
	Если Лев(ТипОтв, 1)="+" Тогда
		глЗапрос = Запрос;
		Рез = озПолучитьВременнуюТаблицу(СокрЛП(Сред(ТипОтв, 2)));
	ИначеЕсли ТРег(СокрЛП(ТипОтв))="Выборка" Тогда
		ТипОбходаРезультата = ?(ТипВыгрузки=1, ОбходРезультатаЗапроса.ПоГруппировкам, ?(ТипВыгрузки=2, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ОбходРезультатаЗапроса.Прямой));
		Рез = ?(ТипВыгрузки=0, Результат.Выгрузить(), Результат.Выгрузить(ТипОбходаРезультата));
	Иначе
		Рез = новый ТаблицаЗначений;
	КонецЕсли;
	ТипОтвета = ТипОтв;
	ВывестиИнфоПанель(ТипОтвета, Интервал, ПодсчитатьКоличествоСтрокРезульата(Рез));
	Возврат Рез;
КонецФункции

Процедура ВывестиРезультатЗапроса(Рез)
	Если Рез=Неопределено Тогда
		Если ЭлементыФормы.Панель.ТекущаяСтраница=ЭлементыФормы.Панель.Страницы.Результат Тогда
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Запрос;
		КонецЕсли;
		ЭлементыФормы.Панель.Страницы.Результат.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Рез)=ТипЗнч(ДЗ) Тогда
		ДЗ = Рез;
		ЭлементыФормы.ДЗ.Данные = "ДЗ";
	Иначе
		ТЗ = Рез;
		ЭлементыФормы.ДЗ.Данные = "ТЗ";
	КонецЕсли;
	
	//озУстановитьВидимостьОбработкиКода(Ложь);
	кн = ЭлементыФормы.КПРезультата.Кнопки.ОбработкаРезультата;
	кн.Пометка = Ложь;
	озУстановитьВидимостьДопПанели(кн, ЭлементыФормы.ПанельКода, ЭлементыФормы.РазделительПанелиКода);
	
	ЭлементыФормы.ДЗ.СоздатьКолонки();
	ЭлементыФормы.Панель.Страницы.Результат.Видимость = Истина;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результат;
	ЭлементыФормы.КПРезультата.Кнопки.ОбработкаРезультата.Доступность = (ЭлементыФормы.ДЗ.Данные="ТЗ");
КонецПроцедуры

Процедура ОткрытьФормуПакетЗапросов()
	ПакетЗапросов = ПолучитьФорму("ПакетЗапросов");
	ПакетЗапросов.ВладелецФормы = ЭтаФорма;
	ПакетЗапросов.Инициализирован = Ложь;
	Если ПакетЗапросов.Открыта() Тогда
		ПакетЗапросов.Закрыть();
	КонецЕсли;
	ПакетЗапросов.Открыть();
КонецПроцедуры

Процедура ВыполнитьШагПакетаЗапросов() Экспорт
	Если ПакетЗапросов=Неопределено Тогда
		ОткрытьФормуПакетЗапросов();
		Возврат;
	ИначеЕсли НЕ ПакетЗапросов.Инициализирован Тогда
		Если НЕ ПроверитьТекстЗапроса(Истина) Тогда
			Возврат;
		КонецЕсли;
	
		Если НЕ ВсеПараметрыЗапросаУказаны() Тогда
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ПараметрыЗапроса;
			Возврат;
		КонецЕсли;
		глЗапрос = Неопределено;
		мВыполненныйЗапрос = "";
		мВыполненныйЗапросВременныеТаблицы = Неопределено;
		ПакетЗапросов.ИнициализироватьПакет(ЭлементыФормы.ТекстЗапроса.Значение);
		ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Истина;
		ЭлементыФормы.ТекстЗапросаРасш.ТолькоПросмотр = Истина;
		Предупреждение("Выберите в окне пакета
						|запросы на которых следует сделать остановку.", 180);
		Возврат;
	КонецЕсли;
	тзПакет = ПакетЗапросов.Пакет;
	Если тзПакет.Количество()<1 Тогда
		Возврат;
	КонецЕсли;
	Если мВыполненныйЗапросВременныеТаблицы=Неопределено Тогда
		мВыполненныйЗапросВременныеТаблицы = ИнициализироватьВременныеТаблицы();
	КонецЕсли;
	Если глЗапрос=Неопределено Тогда
		глЗапрос = Новый Запрос();
		глЗапрос.Текст = ТекстЗапроса;
		озЗаполнитьПараметрыЗапроса(глЗапрос);
	КонецЕсли;
	ПоследняяСтрочка = тзПакет[тзПакет.Количество()-1];
	Интервал = 0;
	Для каждого Строчка из тзПакет Цикл
		ТекСтатус = Строчка.Статус;
		ТекТекст = Сред(ТекстЗапроса, Строчка.НачПозиция, Строчка.КонПозиция-Строчка.НачПозиция+1);
		Если ТекСтатус=1 или ПустаяСтрока(ТекТекст) Тогда
			Продолжить;
		ИначеЕсли ТекСтатус=0 Тогда
			Строчка.Статус=2;
			ТекСтатус = 2;
		ИначеЕсли (ТекСтатус<>2) и (ТекСтатус<>3) Тогда
			ТекСтатус = 2;
		КонецЕсли;
		ТекСтатус = ?(Строчка=ПоследняяСтрочка, 4, ТекСтатус);
		глЗапрос.Текст = ТекТекст;
		//ТекВремя1 = глозПолучитьТекущееВремяВМиллисекундах();
		 //Ситис Вирич П.В.   Начало 2018-04-15
		 ТекВремя1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
		 //Ситис Вирич П.В.   Конец 2018-04-15 

		Строчка.Статус = 0;
		Попытка
			Результат = глЗапрос.Выполнить();
		Исключение
			тОш = ОписаниеОшибки();
			СообщитьОбОшибкеВыполненияЗапроса(тОш, "(Выполнить):", глЗапрос.Текст, Строчка.НачПозиция-1);
			Возврат;
		КонецПопытки;
		//тервал = Интервал + глозПолучитьТекущееВремяВМиллисекундах() - ТекВремя1;		
		 //Ситис Вирич П.В.   Начало 2018-04-15
		 Интервал = Интервал + ТекущаяУниверсальнаяДатаВМиллисекундах() - ТекВремя1;
		 //Ситис Вирич П.В.   Конец 2018-04-15 
		
		Строчка.Статус = 1;
		Если Лев(Строчка.ТипЗапроса, 1)="+" Тогда
			НомерЗапроса = 1 + тзПакет.Индекс(Строчка);
			ИмяВТ = СокрЛП(Сред(Строчка.ТипЗапроса, 2));
			НовСтр = мВыполненныйЗапросВременныеТаблицы.Добавить();
			НовСтр.НомерЗапроса = НомерЗапроса;
			НовСтр.ИмяТаблицы = "Запрос"+Формат(НомерЗапроса, "ЧДЦ=0; ЧН=; ЧГ=")+"_"+ИмяВТ;
			НовСтр.Псевдоним = ИмяВТ;
			НовСтр.Данные = озПолучитьВременнуюТаблицу(ИмяВТ);
		КонецЕсли;
		Если ТекСтатус<>3 Тогда
			Рез = ИзвлечьРезультат(глЗапрос, Результат, ТекТекст, Истина, Интервал);
			ВывестиРезультатЗапроса(Рез);
			Если ТекСтатус=4 Тогда
				//мВыполненныйЗапрос = ЭлементыФормы.ТекстЗапроса.Значение;
				//ЗавершитьПошаговоеВыполнениеПакета(Ложь);
				////ПакетЗапросов.ЭлементыФормы.Пакет.ТекущаяСтрока = Неопределено;
				//Предупреждение("Выполнение пакета запросов завершено.", 180);
			Иначе
				Для каждого Строчка2 Из тзПакет Цикл 
					Если Строчка2.Статус = 2 Тогда
						Если ПакетЗапросов<>Неопределено Тогда
							ПакетЗапросов.ЭлементыФормы.Пакет.ТекущаяСтрока = Строчка2;
						КонецЕсли;
						Строчка2.Статус = 0;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	Предупреждение("Выполнение пакета запросов завершено.", 180);
	мВыполненныйЗапрос = ЭлементыФормы.ТекстЗапроса.Значение;
	ЗавершитьПошаговоеВыполнениеПакета(Ложь);
	тзПакет.Очистить();
КонецПроцедуры

Процедура ЗавершитьПошаговоеВыполнениеПакета(Прервано=Ложь) Экспорт
	Если Прервано Тогда
		мВыполненныйЗапрос = Неопределено;
		мВыполненныйЗапросВременныеТаблицы = Неопределено;
		глЗапрос = Неопределено;
		Если ПакетЗапросов<>Неопределено Тогда
			ПакетЗапросов.Пакет.Очистить();
		КонецЕсли;
	Иначе
		ПакетЗапросов.Инициализирован = Ложь;
		мВыполненныйЗапрос = ЭлементыФормы.ТекстЗапроса.Значение;
	КонецЕсли;
	ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Ложь;
	ЭлементыФормы.ТекстЗапросаРасш.ТолькоПросмотр = Ложь;
	Если Прервано Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Запрос;
		ЭлементыФормы.Панель.Страницы.Результат.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

// <<< --------------------------------------------------------------------------------------------------------------
// <<< --------------------------------------------------------------------------------------------------------------
// <<< - переделать -------------------------------------------------------------------------------------------------
// <<< ----- переделать ---------------------------------------------------------------------------------------------
// <<< - переделать -------------------------------------------------------------------------------------------------

Функция ПроверитьЗаполненностьПараметров(флПроверкаПередЗапуском=Истина)
	Если НЕ ЭлементыФормы.ДействияФормы.Кнопки.НеПроверятьНаОшибкиПередВыполнением.Пометка Тогда
		Если НЕ ПроверитьТекстЗапроса(флПроверкаПередЗапуском) Тогда
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Запрос;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ЗапросБылИзменен и ЭлементыФормы.Панель.ТекущаяСтраница<>ЭлементыФормы.Панель.Страницы.ПараметрыЗапроса Тогда
		Если ОбновитьТаблицуПараметрыЗапроса() Тогда
			мНеОбновлятьПараметры = Истина;
			Попытка
				ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ПараметрыЗапроса;
			Исключение
				мНеОбновлятьПараметры = Ложь;
				ВызватьИсключение;
			КонецПопытки;
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли не ВсеПараметрыЗапросаУказаны() Тогда
		СообщитьОбОшибке("Не заполнены ВСЕ параметры запроса.");
		Если Вопрос("Не заполнены ВСЕ параметры запроса. Продолжить?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ПараметрыЗапроса;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ВыполнитьЗапросБезУдаленияВТ(ПараметрТекстЗапроса="")
	мВыполненныйЗапросВременныеТаблицы = Неопределено;
	глЗапрос = неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = ?(ПараметрТекстЗапроса="", ЭлементыФормы.ТекстЗапроса.Значение, ПараметрТекстЗапроса);
	озЗаполнитьПараметрыЗапроса(Запрос);
	ВременныеТаблицы = ИнициализироватьВременныеТаблицы();
	//ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	ПараметрТекстЗапроса = ?(ПараметрТекстЗапроса="", ТекстЗапроса, ПараметрТекстЗапроса);
	Пакет = ПарсерТекстаЗапроса.РазложитьПакетЗапросов(ПараметрТекстЗапроса);
	Интервал = 0;
	Попытка
		НомерЗапроса = 0;
		Для каждого ЗапросПакета Из Пакет Цикл
			НомерЗапроса = НомерЗапроса + 1;
			ТекТекст = Сред(ПараметрТекстЗапроса, ЗапросПакета.НачПозиция, ЗапросПакета.КонПозиция-ЗапросПакета.НачПозиция+1);
			Если ПустаяСтрока(ТекТекст) Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = ТекТекст;
			ТекВремя1 = глозПолучитьТекущееВремяВМиллисекундах();
			Попытка
				Результат = Запрос.Выполнить();
			Исключение
				тОш = ОписаниеОшибки();
				СообщитьОбОшибкеВыполненияЗапроса(тОш, "(Выполнить):", Запрос.Текст, ЗапросПакета.НачПозиция-1);
				Возврат Неопределено;
			КонецПопытки;
			Интервал1 = глозПолучитьТекущееВремяВМиллисекундах()-ТекВремя1;
			Интервал = Интервал + Интервал1;
			Если Лев(ЗапросПакета.ТипЗапроса, 1)="+" Тогда
				ИмяВТ = СокрЛП(Сред(ЗапросПакета.ТипЗапроса, 2));
				НовСтр = ВременныеТаблицы.Добавить();
				НовСтр.НомерЗапроса = НомерЗапроса;
				НовСтр.ИмяТаблицы = "Запрос"+Формат(НомерЗапроса, "ЧДЦ=0; ЧН=; ЧГ=")+"_"+ИмяВТ;
				НовСтр.Псевдоним = ИмяВТ;
				глЗапрос = Запрос;
				НовСтр.Данные = озПолучитьВременнуюТаблицу(ИмяВТ);
			КонецЕсли;
		КонецЦикла;
	Исключение
		СообщитьОбОшибке("Ошибка при выполнении запроса: "+Символы.ПС+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	мВыполненныйЗапрос = ЭлементыФормы.ТекстЗапроса.Значение;
	мВыполненныйЗапросВременныеТаблицы = ВременныеТаблицы;
	Возврат ИзвлечьРезультат(Запрос, Результат, мВыполненныйЗапрос, истина, Интервал);
КонецФункции

Функция ВыполнитьЗапрос(ПараметрТекстЗапроса="")
	мВыполненныйЗапросВременныеТаблицы = Неопределено;
	глЗапрос = неопределено;
	Запрос = Новый Запрос;
	Рез = Неопределено;
	Попытка
		Запрос.Текст = ?(ПараметрТекстЗапроса="", ЭлементыФормы.ТекстЗапроса.Значение, ПараметрТекстЗапроса);
	Исключение
		тОш = ОписаниеОшибки();
		СообщитьОбОшибкеВыполненияЗапроса(тОш, "(Выполнить):", Запрос.Текст);
		Возврат Рез;
	КонецПопытки;
	
	Попытка
		озЗаполнитьПараметрыЗапроса(Запрос);
	Исключение
		Возврат Рез;
	КонецПопытки;

	Попытка
		ТекВремя1 = глозПолучитьТекущееВремяВМиллисекундах();
		Результат = Запрос.Выполнить();
		Интервал = глозПолучитьТекущееВремяВМиллисекундах()-ТекВремя1;
		глЗапрос = Запрос;
		мВыполненныйЗапрос = Запрос.Текст;
	Исключение
		тОш = ОписаниеОшибки();
		СообщитьОбОшибкеВыполненияЗапроса(тОш, "(Выполнить):", Запрос.Текст);
		Возврат Рез;
	КонецПопытки;
	Возврат ИзвлечьРезультат(Запрос, Результат, мВыполненныйЗапрос, истина, Интервал);
КонецФункции

Процедура СформироватьНажатие(Кнопка) Экспорт
	ОбработатьИзменениеТекстаЗапроса();
	ЗакрытьФормуПросмотраВТ();
	// проверить параметры
	//Если НЕ ПроверитьЗаполненностьПараметров() Тогда
	//	Возврат;
	//Иначе
	Если флПошаговоеВыполнениеПакета Тогда
	ИначеЕсли НЕ ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.Автосохранение.Пометка Тогда
	ИначеЕсли не СохранитьЗапрос("", Истина) Тогда 	
		Возврат; // автосохранение отменено
	КонецЕсли;
	// -------------------------------------------------------------------------------------
	// Выполнение запроса
	Рез = Неопределено;
	Если флПошаговоеВыполнениеПакета=Истина Тогда
		ВыполнитьШагПакетаЗапросов();
	ИначеЕсли ПроверитьТекстЗапроса(Истина) Тогда		
		Если НЕ ПроверитьЗаполненностьПараметров() Тогда
			Возврат;
		КонецЕсли;
		Рез = ?(флНеУдалятьВременныеТаблицы, ВыполнитьЗапросБезУдаленияВТ(), ВыполнитьЗапрос());
		ВывестиРезультатЗапроса(Рез);
	КонецЕсли;
	ЗапросБылИзменен = Ложь;
КонецПроцедуры

// <<< - добавить разбор параметров по запросам пакета
Функция ОбновитьТаблицуПараметрыЗапроса()
	Перем ПДаты, Врем, Запрос, ТЗ, НС, СП, ПИмя, сч, поз;
	ПДатыНач = ВРЕГ(",НачПериода,НачальнаяДата,ДатаНач,НачДата,ДатаНачала,НачальнаяДата,");
	ПДатыКон = ВРЕГ(",КонПериода,КонечнаяДата,ДатаКон,КонДата,ДатаКонца,КонечнаяДата,Дата,");
	Врем = ПараметрыЗапроса.Скопировать();
	ПараметрыЗапроса.Очистить();
	Если НЕ ПроверитьТекстЗапроса() Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос(ЭлементыФормы.ТекстЗапроса.Значение);
	ТЗ = Запрос.НайтиПараметры();
	Для каждого Параметр Из ТЗ Цикл
		ПИмя = Параметр.Имя;
		СП = Врем.Найти(ПИмя, "ИмяПараметра");
		НС = ПараметрыЗапроса.Добавить();
		НС.Автозаполнение = Истина;
		НС.ИмяПараметра = ПИмя;
		Если СП<>неопределено Тогда
			ЗаполнитьЗначенияСвойств(НС, СП, "ТипДанных,Значение,ТЗ");
		Иначе
			НС.ТипДанных = Параметр.ТипЗначения;
			Если Найти(ПДатыНач, ","+ВРег(ПИмя)+",")>0 Тогда
				НС.Значение = НачалоДня(НачПериода);
			ИначеЕсли Найти(ПДатыКон, ","+ВРег(ПИмя)+",")>0 Тогда
				НС.Значение = КонецДня(КонПериода);
			Иначе
				НС.Значение = озПустоеЗначениеТипа(НС.ТипДанных);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТЗ = ПарсерТекстаЗапроса.НайтиВсеПараметрыЗапроса(ЭлементыФормы.ТекстЗапроса.Значение, 1, СтрДлина(ЭлементыФормы.ТекстЗапроса.Значение));
	сч = -1;
	Для каждого Параметр Из ТЗ Цикл
		Если Найти(ПДаты, ","+ВРег(ПИмя)+",") Тогда
			Продолжить;
		КонецЕсли;
		сч = сч + 1;
		ПИмя = Параметр.ИмяПараметра;
		СП = ПараметрыЗапроса.Найти(ПИмя, "ИмяПараметра");
		Если СП=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СП.ГдеВстречается = Параметр.ИмяЗапроса;
//		СП.Запрос = ?(Параметр.ТекущийЗапрос=Неопределено, "", ЗначениеВСтрокуВнутр(Параметр.ТекущийЗапрос));
		поз = ПараметрыЗапроса.Индекс(СП);
		Если поз>=0 и поз<>сч Тогда
			ПараметрыЗапроса.Сдвинуть(СП, сч-поз);
		КонецЕсли;
	КонецЦикла;
	Возврат ПараметрыЗапроса.Количество()>0;
КонецФункции

Функция ВсеПараметрыЗапросаУказаны()
	Перем Стр, ВИмя, ПДатыНач, ПДатыКон, Запрос, ТЗ;
	Если ПараметрыЗапроса.Количество()=0 и Найти(ЭлементыФормы.ТекстЗапроса.Значение, "&")>0 Тогда
		ОбновитьТаблицуПараметрыЗапроса();
		Если ПараметрыЗапроса.Количество()<>0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	// остальные поля
	Для каждого Стр из ПараметрыЗапроса Цикл
		Если Стр.Значение=Неопределено и Стр.ТипДанных<>ТипГраница и Стр.ТипДанных<>ТипМоментВремени и Стр.ТипДанных<>ТипТЗ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции // ВсеПараметрыЗапросаУказаны()

Процедура озЗаполнитьПараметрыЗапроса(Запрос)
	Если (ТипЗнч(Запрос)=Тип("Запрос")) и ((Найти(ВРЕГ(ЭлементыФормы.ТекстЗапроса.Значение), "ПОМЕСТИТЬ")>0) или (Найти(ВРЕГ(Запрос.Текст), "ПОМЕСТИТЬ")>0)) Тогда
		Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
			Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
		КонецЕсли;
	КонецЕсли;
	тКод = ЭлементыФормы.РедакторКодаУстановкиПараметров.ПолучитьТекст();
	Если не ПустаяСтрока(тКод) и ЭлементыФормы.ПанельКодаУстановкиПараметров.Свертка=РежимСверткиЭлементаУправления.Нет Тогда
		СтруктураПараметровЗапроса = Новый Структура();
		Для каждого Стр из ПараметрыЗапроса Цикл
			СтруктураПараметровЗапроса.Вставить(Стр.ИмяПараметра, ПрочитатьПараметрИзСтроки(Стр));
		КонецЦикла;
		КонтекстВыполнения = ПолучитьФорму("КонтекстВыполненияКода", , ЭтаФорма);
		КонтекстВыполнения.РезультатЗапроса = Неопределено;
		Попытка
			фл = КонтекстВыполнения.ВыполнитьКодУстановкиПараметров(Запрос, тКод, СтруктураПараметровЗапроса);
		Исключение
			тОш = ОписаниеОшибки();
			глозСообщитьОбОшибкеВыполненияКода(тОш, "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода:", тКод, ЭтаФорма, ЭлементыФормы.РедакторКодаУстановкиПараметров);
			Сообщить(тОш);
			ВызватьИсключение тОш;
		КонецПопытки;
	Иначе
		Для каждого Стр из ПараметрыЗапроса Цикл
			Запрос.Параметры.Вставить(Стр.ИмяПараметра, ПрочитатьПараметрИзСтроки(Стр));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура КПРедакторКодаПроверитьКод(Кнопка)
	Перем Код, тОш, Смещ;
	Код = "Если ЛОЖЬ тогда
	|"+ЭлементыФормы.РедакторКода.ПолучитьТекст()+"
	|КонецЕсли;";
	Попытка
		Выполнить(Код);
		Сообщить("Синтаксических ошибок не обнаружено!");
	Исключение
		тОш =ОписаниеОшибки();
		Смещ = СтрДлина(СтрПолучитьСтроку(Код, 1)) + 1; // плюс символ переноса строки
		глозСообщитьОбОшибкеВыполненияКода(тОш, "Ошибка компиляции при вычислении выражения или выполнении фрагмента кода:", Код, ЭтаФорма, ЭлементыФормы.РедакторКода, -Смещ);
	КонецПопытки;
КонецПроцедуры

Процедура ТекстЗапросаПриИзменении(Элемент)	
	ЗапросБылИзменен = истина;
	ЗапросБылСохранен = ложь;
	Если глТекстЗапросаДляОтмены<>"" Тогда
		глТекстЗапросаДляОтмены = "";
	КонецЕсли;
	Если глТекстЗапросаДляВозврата<>"" Тогда
		глТекстЗапросаДляВозврата = "";
	КонецЕсли;
	ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Ложь;
	ЭлементыФормы.КПЗапроса.Кнопки.ВернутьИзменения.Доступность = Ложь;
	Если Найти(ТекстЗапроса, "|")>0 Тогда
		ТекстЗапроса = СокрЛП(СтрЗаменить(ТекстЗапроса, "|", ""));
		Если Лев(ТекстЗапроса, 1)="""" Тогда
			Если Прав(ТекстЗапроса, 1)=";" Тогда
				ТекстЗапроса = СокрП(Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1));
			КонецЕсли;
			Если Прав(ТекстЗапроса, 1)="""" Тогда
				ТекстЗапроса = СокрП(Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-1));
			КонецЕсли;
			ТекстЗапроса = СокрЛ(Сред(ТекстЗапроса, 2));
		КонецЕсли;
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
	КонецЕсли;
КонецПроцедуры

Процедура КПРезультатаВывестиТаблицу(Кнопка)
	Если мВыполненныйЗапрос="" Тогда
		Возврат;
	КонецЕсли;
	Построитель = Новый ПостроительОтчета(мВыполненныйЗапрос);
	озЗаполнитьПараметрыЗапроса(Построитель);
	Для каждого Поле Из Построитель.ДоступныеПоля Цикл	Поле.Представление = глозПредставлениеПеременной(Поле.Имя); КонецЦикла;
	Для каждого Поле Из Построитель.ВыбранныеПоля Цикл	Поле.Представление = глозПредставлениеПеременной(Поле.Имя); КонецЦикла;
	Построитель.АвтоДетальныеЗаписи = Истина;
	
	Если Построитель.ДоступныеПоля.Количество()>0 Тогда
		ФормаНастройки = ПолучитьФорму("НастройкаВывода");
		ФормаНастройки.Построитель = Построитель;
		Если ФормаНастройки.ОткрытьМодально()<>Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Интерфейс);
	Построитель.ОформитьМакет();
	Построитель.Выполнить();
	Построитель.Вывести();
КонецПроцедуры

Процедура ИнициализацияКонтекстныхПодсказок()
	//
	// TO-DO: Реализовать подключение контекстных подсказок для поля кода обработки результата запроса
	//
КонецПроцедуры

Процедура ДействияФормыОткрытьКопию(Кнопка)
	Перем Отчет, НовыйОтчет;
	ОбработатьИзменениеТекстаЗапроса();
	Отчет = ЭтотОбъект;
	Если Строка(Отчет) = "ВнешняяОбработкаОбъект." + Отчет.Метаданные().Имя Тогда
		НовыйОтчет = ВнешниеОбработки.Создать(Отчет.ИспользуемоеИмяФайла);
	ИначеЕсли Строка(Отчет) = "ВнешнийОтчетОбъект." + Отчет.Метаданные().Имя Тогда
		НовыйОтчет = ВнешниеОтчеты.Создать(Отчет.ИспользуемоеИмяФайла);
	ИначеЕсли Строка(Отчет) = "ОтчетОбъект." + Отчет.Метаданные().Имя Тогда
		НовыйОтчет = Отчеты[Отчет.Метаданные().Имя].Создать();
	ИначеЕсли Строка(Отчет) = "ОбработкаОбъект." + Отчет.Метаданные().Имя Тогда
		НовыйОтчет = Обработки[Отчет.Метаданные().Имя].Создать();
	Иначе
		Возврат;
	КонецЕсли;
	НоваяФорма = НовыйОтчет.ПолучитьФорму();
	НоваяФорма.ТекстЗапроса = ТекстЗапроса;
	ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
	Если мКнопкаРаскраски.Пометка Тогда
		НоваяФорма.КПЗапросаРаскраска(НоваяФорма.мКнопкаРаскраски);
	КонецЕсли;
	НоваяФорма.ПараметрыЗапроса = ПараметрыЗапроса.Скопировать();
	НоваяФорма.мНеЗагружатьНастройки = Истина;
	НоваяФорма.ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.Автосохранение.Пометка = Ложь;
	НоваяФорма.Открыть();
КонецПроцедуры

Процедура КПЗапросаРаскраска(Кнопка) Экспорт
	Кнопка.Пометка = не Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ЭлементыФормы.ТекстЗапроса.Значение);
		ЭлементыФормы.ПанельТекстЗапроса.ТекущаяСтраница = ЭлементыФормы.ПанельТекстЗапроса.Страницы.ТекстЗапроса;
	Иначе
		ОбработатьИзменениеТекстаЗапроса();
		ЭлементыФормы.ТекстЗапроса.Значение = ЭлементыФормы.ТекстЗапросаРасш.ПолучитьТекст();
		ЭлементыФормы.ПанельТекстЗапроса.ТекущаяСтраница = ЭлементыФормы.ПанельТекстЗапроса.Страницы.ОбычныйТекст;
	КонецЕсли;
КонецПроцедуры

Функция РазложитьВложенныеЗапросыПоВТ(ТекстЗапроса, знач ВиртуальныеТаблицы)
	Перем Пролог, тз, мЗапросы, ПодЗапрос, тздо, ТипЗапроса, ИсточникиВыборки, Источник, фл, ИмяВТ, п, ВремТекст;
	ВиртуальныеТаблицы = ?(ТипЗнч(ВиртуальныеТаблицы)=Тип("Соответствие"), ВиртуальныеТаблицы, Новый Соответствие);
	Пролог = "";
	тз = ТекстЗапроса;
	фл = Истина;
	Пока фл Цикл
		фл = Ложь;
		мЗапросы = ПарсерТекстаЗапроса.РазложитьОбъединенныйЗапрос(тз, 1, СтрДлина(тз));
		Для каждого ПодЗапрос Из мЗапросы Цикл
			ИсточникиВыборки = ПарсерТекстаЗапроса.ПолучитьИсточникиВыборки(тз, ПодЗапрос.НачПозиция, ПодЗапрос.КонПозиция);
			Для каждого Источник Из ИсточникиВыборки Цикл
				Если Источник.ЭтоПодзапрос=Истина Тогда
				    фл = Истина;
					ИмяВТ = "вт"+Источник.Имя;
					Пока ВиртуальныеТаблицы[ИмяВТ]<>Неопределено Цикл
						ИмяВТ = ПарсерТекстаЗапроса.ОпределитьНовоеИмя(ИмяВТ);
						Если ИмяВТ=Неопределено Тогда
							ИмяВТ = "вт"+Источник.Имя;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ВиртуальныеТаблицы[ИмяВТ]=999999;
					п = ПарсерТекстаЗапроса.НайтиЗакрывающуюСкобку(тз, Источник.НачПозиция+1);
					ВремТекст = Сред(тз, Источник.НачПозиция, ?(п<>0, п-Источник.НачПозиция-1, СтрДлина(тз)));
					тздо = тз;
					тз = СтрЗаменить(тз, "("+ВремТекст+")", ИмяВТ);
					Если тз=тздо Тогда
						Сообщить("Неудачная попытка разобрать запрос: "+Символы.ПС+Символы.ПС+ТекстЗапроса+Символы.ПС+Символы.ПС+"не найден подзапрос: "+Символы.ПС+Символы.ПС+"("+ВремТекст+")", СтатусСообщения.Внимание);
						Возврат ТекстЗапроса; // не удалось...
					КонецЕсли;
					ВремТекст = СокрЛП(ВремТекст);
					п = ПарсерТекстаЗапроса.НайтиКлючевоеСлово("ИЗ", ВремТекст, 1, СтрДлина(ВремТекст));
					Если п=Неопределено Тогда
						ВремТекст = ВремТекст+Символы.ПС+"ПОМЕСТИТЬ "+ИмяВТ;
					Иначе
						ВремТекст = Лев(ВремТекст, П.НачПозиция-1)+Символы.ПС+"ПОМЕСТИТЬ "+ИмяВТ+Символы.ПС+Сред(ВремТекст, П.НачПозиция);
					КонецЕсли;
					Пролог = Пролог + РазложитьВложенныеЗапросыПоВТ(ВремТекст, ВиртуальныеТаблицы) + Символы.ПС+";"+Символы.ПС+Символы.ПС+"////////////////////////////////////////////"+Символы.ПС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если фл Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Пролог + тз;
КонецФункции

Процедура КПЗапросаРазложитьЗапрос(Кнопка)
	Перем ТипЗапроса, тз, Слово, вт, НачСтр, НачКол, КонСтр, КонКол, ГраницыЗапроса;
	тз = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
	тз.ПолучитьГраницыВыделения(НачСтр, НачКол, КонСтр, КонКол);
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПроверитьТекстЗапроса() Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	ТипЗапроса = ПарсерТекстаЗапроса.ПолучитьТипЗапроса(ТекстЗапроса);
	ГраницыЗапроса = Неопределено;
	тз = ТекстЗапроса;
	вт =Неопределено;
	Если ТипЗапроса="Пакет" Тогда
		ГраницыЗапроса = ПарсерТекстаЗапроса.ПолучитьГраницыЗапроса2(ТекстЗапроса, НачСтр, НачКол);
		Слово = ПарсерТекстаЗапроса.СледующееСловоБезКомментариев(ТекстЗапроса, ГраницыЗапроса.НачПозиция);
		ГраницыЗапроса.НачПозиция = ?(Слово<>Неопределено, ?(Слово.НачПозиция>0, Слово.НачПозиция, ГраницыЗапроса.НачПозиция), ГраницыЗапроса.НачПозиция);
		вт = ПарсерТекстаЗапроса.ПолучитьСписокВТ(ТекстЗапроса);
		тз = Сред(ТекстЗапроса, ГраницыЗапроса.НачПозиция, ГраницыЗапроса.КонПозиция - ГраницыЗапроса.НачПозиция + 1);
		Если Прав(тз, 1)=";" Тогда
			тз = Лев(тз, СтрДлина(тз)-1);
		КонецЕсли;
	ИначеЕсли ТипЗапроса<>"Выборка" и Лев(ТипЗапроса, 1)<>"+" Тогда
		Возврат;
	КонецЕсли;
	глТекстЗапросаДляОтмены = ТекстЗапроса;
	ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Истина;
	тз = РазложитьВложенныеЗапросыПоВТ(тз, вт);
	ТекстЗапроса = СокрЛП(?(ГраницыЗапроса=Неопределено, тз, СокрП(Лев(ТекстЗапроса, ГраницыЗапроса.НачПозиция-1))+Символы.ПС + тз + Символы.ПС + СокрЛ(Сред(ТекстЗапроса, ГраницыЗапроса.КонПозиция+1))));
	ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
	ЗапросБылИзменен = Истина;
	Модифицированность = Истина;
КонецПроцедуры

Процедура КПЗапросаСобратьЗапрос(Кнопка)
	Перем Пакет, ВТ, Запрос, ТипЗапроса, тз,  Источники, Источник, НП, Слово, ВремЗнач;
	// Вставить содержимое обработчика.
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПроверитьТекстЗапроса() Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	Если ПарсерТекстаЗапроса.ЭтоПакетЗапросов(ТекстЗапроса)<>Истина Тогда
		Возврат;
	КонецЕсли;
	Пакет = ПарсерТекстаЗапроса.РазложитьПакетЗапросов(ТекстЗапроса);
	ВТ = новый Структура();
	сч = 0; к = Пакет.Количество();
	Для каждого Запрос Из Пакет Цикл
		сч = сч + 1;
		тз = Сред(ТекстЗапроса, Запрос.НачПозиция, Запрос.КонПозиция-Запрос.НачПозиция+1);
		ТипЗапроса = ПарсерТекстаЗапроса.ПолучитьТипЗапроса(тз);
		Если ТипЗапроса="Выборка" или Лев(ТипЗапроса, 1)="+" Тогда			
			мЗапросы = ПарсерТекстаЗапроса.РазложитьОбъединенныйЗапрос(тз, 1, СтрДлина(тз));
			Для каждого ПодЗапрос Из мЗапросы Цикл
				Источники = ПарсерТекстаЗапроса.ПолучитьИсточникиВыборки(тз, ПодЗапрос.НачПозиция, ПодЗапрос.КонПозиция);
				Для каждого Источник Из Источники Цикл
					ТекТекст = СокрЛП(Сред(тз, Источник.НачПозиция, Источник.КонПозиция-Источник.НачПозиция+1));
					СловоКАК = ПарсерТекстаЗапроса.НайтиКлючевоеСлово("КАК", ТекТекст, 1, СтрДлина(ТекТекст));
					Если СловоКАК<>Неопределено Тогда
						ТекТекст = СокрП(Лев(ТекТекст, СловоКАК.НачПозиция-1));
						Источник.КонПозиция = Источник.НачПозиция + СловоКАК.НачПозиция - 1;
						СловоКАК = Неопределено;
					КонецЕсли;
					Если Найти(ТекТекст, "&")=0 и Найти(ТекТекст, ".")=0 Тогда
						Попытка
							ВремЗнач = "";
							Если ВТ.Свойство(СокрЛП(ТекТекст), ВремЗнач) Тогда
								тз = Лев(тз, Источник.НачПозиция-1)+" ("+ВремЗнач+")"+Сред(тз, Источник.КонПозиция-1);// КАК "+Источник.Имя;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если Лев(ТипЗапроса, 1)="+" Тогда
				НП = ПарсерТекстаЗапроса.НайтиКлючевоеСлово("ПОМЕСТИТЬ", тз, 1, СтрДлина(тз));
				Если НП<>Неопределено Тогда
					Слово = ПарсерТекстаЗапроса.СледующееСловоБезКомментариев(тз, НП.КонПозиция+1);
					тз = СокрЛП(Лев(тз, НП.НачПозиция-1)) + ?(Слово=Неопределено, "", Символы.ПС+СокрЛП(Сред(тз, Слово.КонПозиция+1)));
				КонецЕсли;
				ВТ.Вставить(СокрЛП(Сред(ТипЗапроса, 2)), тз);
			КонецЕсли;
		ИначеЕсли Лев(ТипЗапроса, 1)="-" Тогда
			ВТ.Удалить(СокрЛП(Сред(ТипЗапроса, 2)));
		КонецЕсли;
	КонецЦикла;
	глТекстЗапросаДляОтмены = ТекстЗапроса;
	ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Истина;
	тз = СокрЛП(СтрЗаменить(тз, "////////////////////////////////////////////////////////////////////////////////"+Символы.ПС, Символы.ПС));
	тз = СокрЛП(СтрЗаменить(тз, "////////////////////////////////////////////"+Символы.ПС, Символы.ПС));
	ТекстЗапроса = СтрЗаменить(СтрЗаменить(тз, Символы.ПС+Символы.ПС, Символы.ПС), Символы.ПС+Символы.ПС, Символы.ПС);
	ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
	ЗапросБылИзменен = Истина;
	Модифицированность = Истина;
КонецПроцедуры

Процедура КПЗапросаСделатьВложеннымЗапросом(Кнопка)
	Перем тз, Слово, ГраницыЗапроса, НачСтр, НачКол, КонСтр, КонКол, ПсевдонимИсточникаДанных, ПостроительОтчета, ОписаниеОшибки, СтарыйТекстЗапроса;
	тз = ?(мКнопкаРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
	тз.ПолучитьГраницыВыделения(НачСтр, НачКол, КонСтр, КонКол);
	ОбработатьИзменениеТекстаЗапроса();
	Если НЕ ПрерватьПошаговоеВыполненияПакета() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПроверитьТекстЗапроса() Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.Значение;
	ТипЗапроса = ПарсерТекстаЗапроса.ПолучитьТипЗапроса(ТекстЗапроса);
	тз = ТекстЗапроса;
	ГраницыЗапроса = Неопределено;
	Если ТипЗапроса="Пакет" Тогда
		ГраницыЗапроса = ПарсерТекстаЗапроса.ПолучитьГраницыЗапроса2(ТекстЗапроса, НачСтр, НачКол);
		Слово = ПарсерТекстаЗапроса.СледующееСловоБезКомментариев(ТекстЗапроса, ГраницыЗапроса.НачПозиция);
		ГраницыЗапроса.НачПозиция = ?(Слово<>Неопределено, ?(Слово.НачПозиция>0, Слово.НачПозиция, ГраницыЗапроса.НачПозиция), ГраницыЗапроса.НачПозиция);
		тз = Сред(ТекстЗапроса, ГраницыЗапроса.НачПозиция, ГраницыЗапроса.КонПозиция - ГраницыЗапроса.НачПозиция + 1);
	ИначеЕсли ТипЗапроса<>"Выборка" и Лев(ТипЗапроса, 1)<>"+" Тогда
		Возврат;
	КонецЕсли;
	ПсевдонимИсточникаДанных = "ИсточникДанных";
	Если ВвестиСтроку(ПсевдонимИсточникаДанных, "Псевдоним", 40, ложь) Тогда
		//	Попытка
		//		ПостроительОтчета = Новый ПостроительОтчета("Выбрать * Из ("+ТекстЗапроса+") как "+ПсевдонимИсточникаДанных);
		//		ТекстЗапроса = ПостроительОтчета.ПолучитьЗапрос().Текст;
		//	Исключение
		//		СообщитьОбОшибке(ОписаниеОшибки());
		//	КонецПопытки;
		ОписаниеОшибки = "";
		НовТекстЗапроса = ПарсерТекстаЗапроса.ВложитьЗапрос(тз, 1, СтрДлина(тз), ПсевдонимИсточникаДанных, ОписаниеОшибки);
		Если ГраницыЗапроса<>Неопределено и ОписаниеОшибки="" Тогда
			НовТекстЗапроса = СокрП(Лев(ТекстЗапроса, ГраницыЗапроса.НачПозиция-1))+Символы.ПС + НовТекстЗапроса + Символы.ПС + СокрЛ(Сред(ТекстЗапроса, ГраницыЗапроса.КонПозиция+1));
		КонецЕсли;
		НовТекстЗапроса = СокрЛП(НовТекстЗапроса);
		Если ОписаниеОшибки="" Тогда
			СтарыйТекстЗапроса = ТекстЗапроса;
			ТекстЗапроса = НовТекстЗапроса;
			ЭлементыФормы.ТекстЗапросаРасш.УстановитьТекст(ТекстЗапроса);
			ТекстЗапросаПриИзменении(Неопределено);
			глТекстЗапросаДляОтмены = СтарыйТекстЗапроса;
			ЭлементыФормы.КПЗапроса.Кнопки.ОтменитьИзменения.Доступность = Истина;
		Иначе
			СообщитьОбОшибке(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	ЗапросБылИзменен = Истина;
	Модифицированность = Истина;
КонецПроцедуры

Функция ПолучитьТекстПоследнегоВыполненногоЗапроса()
	Перем тТекущийЗапрос, мПакет, тТип;
	тТекущийЗапрос = СокрЛП(глЗапрос.Текст);
	Если ПустаяСтрока(тТекущийЗапрос) Тогда
		Возврат "";
	КонецЕсли;
	мПакет = ПарсерТекстаЗапроса.РазложитьПакетЗапросов(тТекущийЗапрос);
	Если мПакет.Количество()>1 Тогда
		тТекущийЗапрос = СокрЛП(Сред(тТекущийЗапрос,  мПакет[мПакет.Количество()-1].НачПозиция));
	КонецЕсли;
	Если Прав(тТекущийЗапрос, 1)=";" Тогда
		тТекущийЗапрос = СокрП(Лев(тТекущийЗапрос, СтрДлина(тТекущийЗапрос)-1));
	КонецЕсли;
	тТип = СокрЛП(ПарсерТекстаЗапроса.ПолучитьТипЗапроса(тТекущийЗапрос));
	Если тТип="Выборка" Тогда 
		Возврат тТекущийЗапрос;
	Иначе
		тТип = Лев(тТип, 1);
		Если тТип="+" или тТип="-" Тогда
			Возврат тТекущийЗапрос;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции	

Процедура КПРезультатаПросмотрВложенныхЗапросов(Кнопка)
	Перем тЗапрос, ТекСтруктураЗапроса;
	// *** в перспективе - сделать анализ условий соединения и указать, какие записи не входят в состав ***
	тЗапрос = ПолучитьТекстПоследнегоВыполненногоЗапроса();
	Если ПустаяСтрока(тЗапрос) Тогда
		Сообщить("Не удалось определить тип последнего запроса.", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	ДЗ = ПарсерТекстаЗапроса.РазложитьЗапросВДерево(тЗапрос, 1, СтрДлина(тЗапрос), Истина);
	Если мФормаПросмотрВременныхТаблиц=Неопределено Тогда
		мФормаПросмотрВременныхТаблиц = ПолучитьФорму("ПросмотрВременныхТаблиц");
	КонецЕсли;
	мФормаПросмотрВременныхТаблиц.РежимСтруктуры = Истина;
	мФормаПросмотрВременныхТаблиц.глЗапрос = глЗапрос;
	мФормаПросмотрВременныхТаблиц.СтруктураЗапроса = ДЗ;
	мФормаПросмотрВременныхТаблиц.ВладелецФормы = ЭтаФорма;
	мФормаПросмотрВременныхТаблиц.ЗакрыватьПриЗакрытииВладельца = истина;
	мФормаПросмотрВременныхТаблиц.ТекстЗапроса = тЗапрос;
	мФормаПросмотрВременныхТаблиц.Открыть();
КонецПроцедуры

Процедура КПРезультатаОтсеиваниеДанныхПоУсловиям(Кнопка)
	// *** получить структуру условий ***
	// получить все данные источника
	// проверить соответствие всех данных источника
	Предупреждение("На данный момент функция не реализована!");
КонецПроцедуры

Процедура КПЗапросаРасковычить(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	ТекстЗапроса = ЭлементыФормы.ТекстЗапросаРасш.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", """");
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//***//
КонецПроцедуры

Процедура КоманднаяПанельОткрытьСтраничкуАвтора(Кнопка)
	
	ЗапуститьПриложение("http://infostart.ru/profile/71422/public/");
	
КонецПроцедуры

Процедура КоманднаяПанельОткрытьСтраничкуРазработки(Кнопка)
	
	ЗапуститьПриложение("http://infostart.ru/public/190493/");
	
КонецПроцедуры

Процедура КоманднаяПанельПроверитьВерсию(Кнопка)
	
	//ВыводитьСообщенияПоВерсиям = Истина;
	//НачатьПроверкуВерсий();
	
КонецПроцедуры

Процедура КоманднаяПанельОтключитьПроверкуВерсий(Кнопка)
	
	//ОтключитьПроверкуНовыхВерсий = Не ОтключитьПроверкуНовыхВерсий;
	//СохранитьЗначение("ОтладчикЗапросов_ОтключитьПроверкуНовыхВерсий", ОтключитьПроверкуНовыхВерсий);
	//ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Публикация.Кнопки.ОтключитьПроверкуНовыхВерсий.Пометка = ОтключитьПроверкуНовыхВерсий;	
	
КонецПроцедуры

Процедура ДействияФормы2опрограмме(Кнопка)
	Предупреждение(Кнопка.Текст);
КонецПроцедуры

Процедура КоманднаяПанель2Обновить(Кнопка)
	ОбработатьИзменениеТекстаЗапроса();
	ОбновитьТаблицуПараметрыЗапроса();
КонецПроцедуры

Процедура КоманднаяПанель3ПроверитьКод(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура КоманднаяПанель2ЗаполнитьПериоды(Кнопка)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоДня(НачПериода), ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НачалоДня( НастройкаПериода.ПолучитьДатуНачала() );
		КонПериода = КонецДня( НастройкаПериода.ПолучитьДатуОкончания() );
		ЗаполнитьПериодыВПараметрах();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПериодыВПараметрах()
	ПДатыНач = ВРЕГ(",НачПериода,НачальнаяДата,ДатаНач,НачДата,ДатаНачала,НачальнаяДата,");
	ПДатыКон = ВРЕГ(",КонПериода,КонечнаяДата,ДатаКон,КонДата,ДатаКонца,КонечнаяДата,Дата,Период,");
	Для каждого Строчка Из ПараметрыЗапроса Цикл
		ПИмя = ","+ВРЕГ(СокрЛП(Строчка.ИмяПараметра))+",";
		ТекТип = Строчка.ТипДанных;
		Если ТипЗнч(ТекТип)<>Тип("ОписаниеТипов") Тогда
			ТекТип = Новый ОписаниеТипов("Дата");
			флЕстьТипДата = Истина;
		Иначе
			флЕстьТипДата = ТекТип.СодержитТип(Тип("Дата"));
		КонецЕсли;
		Если Найти(ПДатыНач, ПИмя)>0 и флЕстьТипДата и Строчка.Автозаполнение Тогда
			Строчка.Значение = НачалоДня(НачПериода);
		ИначеЕсли Найти(ПДатыКон, ПИмя)>0 и флЕстьТипДата и Строчка.Автозаполнение Тогда
			Строчка.Значение = КонецДня(КонПериода);
		Иначе
			Продолжить;
		КонецЕсли;
		Если ТекТип<>Строчка.ТипДанных Тогда
			Строчка.ТипДанных = ТекТип;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПриЗакрытии()
///////////////////////////////////////////////////////////////////////////////////
// НАЧАЛО.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой=Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Уничтожение всех экземпляров компоненты. Обязательный блок.
	Для Каждого Экземпляр Из ПолеТекстовогоДокументаСКонтекстнойПодсказкой Цикл
		Экземпляр.Значение.Уничтожить();
	КонецЦикла;
	
// КОНЕЦ_.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
///////////////////////////////////////////////////////////////////////////////////
КонецПроцедуры

Процедура КПЗапросаВыполнитьПоВыделеннойЧастиЗапроса(Кнопка)
	ПараметрТекстЗапроса = ?(ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.кнРежимРаскраски.Пометка, ЭлементыФормы.ТекстЗапросаРасш.ВыделенныйТекст, ЭлементыФормы.ТекстЗапроса.ВыделенныйТекст);
	ЗакрытьФормуПросмотраВТ();
	Если флПошаговоеВыполнениеПакета Тогда
		Возврат;
	ИначеЕсли НЕ ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.Автосохранение.Пометка Тогда
	ИначеЕсли не СохранитьЗапрос("", Истина) Тогда 	
		Возврат; // автосохранение отменено
	КонецЕсли;
	// -------------------------------------------------------------------------------------
	// Выполнение запроса
	Рез = ?(флНеУдалятьВременныеТаблицы, ВыполнитьЗапросБезУдаленияВТ(ПараметрТекстЗапроса), ВыполнитьЗапрос(ПараметрТекстЗапроса));
	ВывестиРезультатЗапроса(Рез);
	ЗапросБылИзменен = Ложь;
КонецПроцедуры

Процедура ДействияФормыНеПроверятьНаОшибкиПередВыполнением(Кнопка)
	Кнопка.Пометка = не Кнопка.Пометка;
КонецПроцедуры

Процедура ТабПараметрыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	ТД = ЭлементыФормы.ТабПараметры.ТекущиеДанные;
	Если ТД<>Неопределено Тогда
		ТД.ТЗ = "";
	КонецЕсли;
КонецПроцедуры

Процедура ТабПараметрыПриИзмененииФлажка(Элемент, Колонка)
	ТД = ЭлементыФормы.ТабПараметры.ТекущиеДанные;
	Если Колонка.Имя<>"СписокЗначений" или ТД=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТД.ТипДанных=ТипТЗ или ТД.ТипДанных=ТипМассив или ТД.ТипДанных=ТипСЗ Тогда
		Если ТД.СписокЗначений=Истина Тогда
			Предупреждение("Списки из сложных типов не поддщерживаются!");
			ТД.СписокЗначений = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ТД.Значение)<>Тип("СписокЗначений") и ТД.СписокЗначений=Истина Тогда
		ТекСЗ = Новый СписокЗначений;
		ТекСЗ.Добавить(ТД.Значение);
		ТД.Значение = ТекСЗ;
	ИначеЕсли ТипЗнч(ТД.Значение)=Тип("СписокЗначений") и ТД.СписокЗначений<>Истина Тогда
		ТекСЗ = ТД.Значение;
		Если ТекСЗ.Количество()>0 Тогда
			ТД.Значение = ТекСЗ[0].Значение;
		Иначе
			ТД.Значение = ?(ТипЗнч(ТД.ТипЗначения)=Тип("ОписаниеТипов"), ТД.ТипЗначения.ПривестиЗначение(), Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТабПараметрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ТД = Элемент.ТекущиеДанные;
	Если ТД=Неопределено или Колонка<>Элемент.Колонки.ГдеВстречается Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТД.ИмяПараметра) Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	фл = ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.кнРежимРаскраски.Пометка;
	ПараметрТекстЗапроса = ?(фл, ЭлементыФормы.ТекстЗапросаРасш.ПолучитьТекст(), ТекстЗапроса);
	ТЗ = ПарсерТекстаЗапроса.НайтиВсеПараметрыЗапроса(ПараметрТекстЗапроса, 1, СтрДлина(ПараметрТекстЗапроса));
	Стр = ТЗ.Найти(врег(СокрЛП(ТД.ИмяПараметра)), "ВРЕГ_ИмяПараметра");
	Если Стр=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Поле = ?(фл, ЭлементыФормы.ТекстЗапросаРасш, ЭлементыФормы.ТекстЗапроса);
	ТекущийЭлемент = Поле;
	Поле.УстановитьГраницыВыделения(Стр.НачПозиция, Мин(Стр.КонПозиция+1, СтрДлина(ТекстЗапроса)));
КонецПроцедуры

Процедура ТабПараметрыГдеВстречаетсяОткрытие(Элемент, СтандартнаяОбработка)
	ТабПараметрыВыбор(ЭлементыФормы.ТабПараметры, 0, ЭлементыФормы.ТабПараметры.Колонки.ГдеВстречается, СтандартнаяОбработка);
КонецПроцедуры

Процедура ПакетЗапросовШагНазад() Экспорт
	Если ПакетЗапросов=Неопределено Тогда
		Возврат;
	КонецЕсли;
	тзПакет = ПакетЗапросов.Пакет;
	ПоследняяСтрока = Неопределено;
	ТекСтр = Неопределено;
	Для каждого Строчка Из тзПакет Цикл		
		Если ПустаяСтрока(Сред(ТекстЗапроса, Строчка.НачПозиция, Строчка.КонПозиция-Строчка.НачПозиция+1)) Тогда
			Продолжить;
		ИначеЕсли Строчка.Статус=1 Тогда
			ПоследняяСтрока=Строчка;
		ИначеЕсли Строчка.Статус=0 Тогда
			ТекСтр = Строчка;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//***
	
	тз = глЗапрос.Текст;
	Если Лев(СокрЛ(ПоследняяСтрока.ТипЗапроса), 1)="+" Тогда
		глЗапрос.Текст = "УНИЧТОЖИТЬ " + Сред(СокрЛП(ПоследняяСтрока.ТипЗапроса), 2);
		глЗапрос.Выполнить();
	КонецЕсли;
	
	Если ТекСтр<>Неопределено Тогда
		ТекСтр.Статус = 2;
	КонецЕсли;
	ПоследняяСтрока.Статус = 0;
	
	ПоследняяСтрока = Неопределено;
	Для каждого Строчка Из тзПакет Цикл		
		Если ПустаяСтрока(Сред(ТекстЗапроса, Строчка.НачПозиция, Строчка.КонПозиция-Строчка.НачПозиция+1)) Тогда
			Продолжить;
		ИначеЕсли Строчка.Статус=1 Тогда
			ПоследняяСтрока=Строчка;
		КонецЕсли;
	КонецЦикла;
	Если ПоследняяСтрока<>Неопределено Тогда
		глЗапрос.Текст = ПоследняяСтрока.Текст;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПакетЗапросовОбновитьПараметрыЗапроса() Экспорт
	Если глЗапрос=Неопределено Тогда
		глЗапрос = Новый Запрос();
	КонецЕсли;
	озЗаполнитьПараметрыЗапроса(глЗапрос);
КонецПроцедуры

Процедура ДействияФормыПодключатьКонтекстнуюПодсказкуИР(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	СохранитьЗначение(мИмяОбработки+"ПодключатьКлассИР", Кнопка.Пометка);
КонецПроцедуры

Процедура ДействияФормыПодключатьВнутреннийКласс(Кнопка)
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	СохранитьЗначение(мИмяОбработки+"ПодключатьКлассВнутр", Кнопка.Пометка);
КонецПроцедуры

Процедура ДействияФормыПереоткрыть(Кнопка)
	// http://infostart.ru/public/103905/
	Для каждого МетаФорма Из ЭтаФорма.Метаданные().Формы Цикл
		ТекФорма = ПолучитьФорму(МетаФорма);
		Если ТекФорма.Открыта() Тогда
			ТекФорма.Закрыть();
			Если ТекФорма = ЭтаФорма Тогда
				Если Найти(Строка(ТипЗнч(ЭтотОбъект)), "Внешняя обработка объект:") = 1 Тогда
					ВнешниеОбработки.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				Иначе
					ВнешниеОтчеты.Создать(ЭтотОбъект.ИспользуемоеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ТабличноеПоле1ПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТД = Элемент.ТекущиеДанные;
	Если ОтменаРедактирования или (ТД=Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Темр = Новый Структура(ТД.ИмяПараметра);
	Исключение
		Предупреждение("Некорректное имя параметра.");
		Отказ = Истина;
		Элемент.ТекущаяКолонка = Элемент.Колонки.ИмяПараметра;
		Возврат;
	КонецПопытки;
	//ТД.ТипЗначения = ""+ТипЗнч(ТД.Значение);
	
КонецПроцедуры

Процедура ПараметрыДляКодаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("СтрокаТаблицыЗначений") Тогда
		ПараметрыПеретаскивания.Значение = "Параметры."+ПараметрыПеретаскивания.Значение.ИмяПараметра;
	КонецЕсли;
КонецПроцедуры

Процедура ПараметрыДляКодаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение)=Тип("СтрокаТаблицыЗначений") Тогда
		ПараметрыПеретаскивания.Значение = "Параметры."+ПараметрыПеретаскивания.Значение.ИмяПараметра;
	КонецЕсли;
КонецПроцедуры

Процедура КПРезультатаКонструкторПравилаЭкспрессПроверки(Кнопка)
	ф = ПолучитьФорму("КонструкторЭП", ЭтаФорма, ЭтаФорма);
	ф.Результат = ЭлементыФормы.ДЗ.Значение.Скопировать();
	ф.Параметры = ПараметрыЗапроса.Скопировать();
	ф.ТекстЗапроса = мВыполненныйЗапрос;
	ф.Открыть();
КонецПроцедуры

Процедура кн_xНажатие(Элемент)
	КПРезультатаОбработкаРезультата(ЭлементыФормы.КПРезультата.Кнопки.ОбработкаРезультата);
КонецПроцедуры

мИмяОбработки = "ВО_КонструкторЗапросов_";
мВыполненныйЗапрос = "";
мВыполненныйЗапросВременныеТаблицы = Неопределено;
глЗапрос = неопределено;
ТипВыгрузки = 3;
ТипТЗ = новый ОписаниеТипов("ТаблицаЗначений");
ТипСЗ = Новый ОписаниеТипов("СписокЗначений");
ТипМассив = новый ОписаниеТипов("Массив");
ТипГраница = Новый ОписаниеТипов("Граница");
ТипМоментВремени = Новый ОписаниеТипов("МоментВремени");
флПошаговоеВыполнениеПакета = Ложь;
флНеУдалятьВременныеТаблицы = Ложь;
ПарсерТекстаЗапроса = ПолучитьФорму("СтруктураЗапроса");
ПакетЗапросов = Неопределено;
мНеОбновлятьПараметры = Ложь;
мНеЗагружатьНастройки = Ложь;
мКнопкаРаскраски = ЭлементыФормы.ДействияФормы.Кнопки.Файл.Кнопки.кнРежимРаскраски;
мФормаПросмотрВременныхТаблиц = Неопределено;
мПереключениеФорм = Ложь;
глТекстЗапросаДляВозврата = "";
мИспользуетсяВнутреннийКласс = Ложь;