&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьДеревоОбъектовИРолей();
	
	ЗаполнитьТаблицуРолей();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбъектовИРолей()
	
	СоответсвиеОбъектовИРолей = СписокДоступныхДействий();
	
	НоваяСтрока = ДеревоМетаданных.ПолучитьЭлементы().Добавить();
	
	НоваяСтрока.ТипОбъекта =  "Конфигурация";
	
	НоваяСтрока.ИмяОбъекта = Метаданные.Имя;
	НоваяСтрока.СинонимОбъекта = Метаданные.Синоним;
	НоваяСтрока.Использовать = Ложь;
	
	ДоступныеДействия = СоответсвиеОбъектовИРолей[НоваяСтрока.ТипОбъекта];

	ДобавитьОбъектыВДеревоМетаданных("ПараметрыСеанса", "Параметры сеанса",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Подсистемы", "Подсистемы",СоответсвиеОбъектовИРолей, Ложь);

	ДобавитьОбъектыВДеревоМетаданных("ОбщиеРеквизиты", "Общие реквизиты",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ПланыОбмена", "Планы Обмена",СоответсвиеОбъектовИРолей, Ложь);
	
	ДобавитьОбъектыВДеревоМетаданных("КритерииОтбора", "КритерииОтбора",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ОбщиеФормы", "ОбщиеФормы",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ОбщиеКоманды", "ОбщиеКоманды",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Константы", "Константы",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Справочники", "Справочники",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Документы", "Документы",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Последовательности", "Последовательности",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ЖурналыДокументов", "ЖурналыДокументов",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Отчеты", "Отчеты",СоответсвиеОбъектовИРолей, Ложь);
	
	ДобавитьОбъектыВДеревоМетаданных("Обработки", "Обработки",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ПланыВидовХарактеристик", "Планы видов характеристик",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ПланыСчетов", "ПланыСчетов",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ПланыВидовРасчета", "ПланыВидовРасчета",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("РегистрыСведений", "РегистрыСведений",СоответсвиеОбъектовИРолей, Ложь);
	
	ДобавитьОбъектыВДеревоМетаданных("РегистрыНакопления", "РегистрыНакопления",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("РегистрыБухгалтерии", "РегистрыБухгалтерии",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("РегистрыРасчета", "РегистрыРасчета",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("БизнесПроцессы", "БизнесПроцессы",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("Задачи", "Задачи",СоответсвиеОбъектовИРолей, Ложь);
	ДобавитьОбъектыВДеревоМетаданных("ВнешниеИсточникиДанных", "ВнешниеИсточникиДанных",СоответсвиеОбъектовИРолей, Ложь);
	
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	
	СтрокиДерева = Дерево.Строки;
	Для каждого Строка Из СтрокиДерева Цикл
		Строка.Строки.Сортировать("СинонимОбъекта", Истина);
	КонецЦикла;
	 	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоМетаданных");
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъектыВДеревоМетаданных(ТипОбъекта, ТипОбъектаСиноним,СоответсвиеОбъектовИРолей,ЗначениеПоУмолчанию);
	
	НоваяСтрока = ДеревоМетаданных.ПолучитьЭлементы().Добавить();
	НоваяСтрока.ИмяОбъекта = ТипОбъекта;
	НоваяСтрока.СинонимОбъекта = ТипОбъектаСиноним;
	НоваяСтрока.ТипОбъекта =ТипОбъекта;
	НоваяСтрока.Использовать = ЗначениеПоУмолчанию;
	
	ДоступныеДействия = СоответсвиеОбъектовИРолей[НоваяСтрока.ТипОбъекта];
	
	Для Каждого ВозможноеДействие Из ДоступныеДействия Цикл
		
		НоваяСтрокаПрав = НоваяСтрока.ТаблицаДоступныхДействий.Добавить();
		НоваяСтрокаПрав.ДоступноеДействиеИмя = ВозможноеДействие.Значение;
		НоваяСтрокаПрав.ДоступноеДействиеСиноним = ВозможноеДействие.Представление;
		НоваяСтрокаПрав.Использовать = ЗначениеПоУмолчанию;
		
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта] Цикл
		
		НоваяСтрокаПодчиненная = НоваяСтрока.ПолучитьЭлементы().Добавить();
		
		НоваяСтрокаПодчиненная.ТипОбъекта =  ТипОбъекта;
		
		НоваяСтрокаПодчиненная.ИмяОбъекта = ОбъектМетаданных.Имя;
		НоваяСтрокаПодчиненная.СинонимОбъекта = ОбъектМетаданных.Синоним;
		НоваяСтрокаПодчиненная.Использовать = ЗначениеПоУмолчанию;
		
		Для Каждого ВозможноеДействие Из ДоступныеДействия Цикл
			
			НоваяСтрокаПрав = НоваяСтрокаПодчиненная.ТаблицаДоступныхДействий.Добавить();
			НоваяСтрокаПрав.ДоступноеДействиеИмя = ВозможноеДействие.Значение;
			НоваяСтрокаПрав.ДоступноеДействиеСиноним = ВозможноеДействие.Представление;
			НоваяСтрокаПрав.Использовать = ЗначениеПоУмолчанию;
			
		КонецЦикла;
		
		Если ТипОбъекта = "Подсистемы" Тогда
		     ЗаполнениеПодсистем(ТипОбъекта,ОбъектМетаданных.Имя,НоваяСтрокаПодчиненная,ЗначениеПоУмолчанию,ДоступныеДействия);
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнениеПодсистем(ТипОбъекта,Имя,НоваяСтрока,ЗначениеПоУмолчанию,ДоступныеДействия)
	Для Каждого ОбъектМетаданных Из Метаданные[ТипОбъекта][Имя].Подсистемы Цикл
		
		НоваяСтрокаПодчиненная = НоваяСтрока.ПолучитьЭлементы().Добавить();
		
		НоваяСтрокаПодчиненная.ТипОбъекта =  ТипОбъекта;
		
		НоваяСтрокаПодчиненная.ИмяОбъекта = ОбъектМетаданных.Имя;
		НоваяСтрокаПодчиненная.СинонимОбъекта = ОбъектМетаданных.Синоним;
		НоваяСтрокаПодчиненная.Использовать = ЗначениеПоУмолчанию;
		
		Для Каждого ВозможноеДействие Из ДоступныеДействия Цикл
			
			НоваяСтрокаПрав = НоваяСтрокаПодчиненная.ТаблицаДоступныхДействий.Добавить();
			НоваяСтрокаПрав.ДоступноеДействиеИмя = ВозможноеДействие.Значение;
			НоваяСтрокаПрав.ДоступноеДействиеСиноним = ВозможноеДействие.Представление;
			НоваяСтрокаПрав.Использовать = ЗначениеПоУмолчанию;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ЗаполнениеПодсистем()

&НаСервере
Функция СписокДоступныхДействий()
	
	СоответствиеДоступныхДействий = Новый Соответствие;
	//Подсистемы
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Просмотр", "Просмотр");
	
	СоответствиеДоступныхДействий.Вставить("Подсистемы", СписокДоступныхДействий);
	
	//ПараметрыСеанса 
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Получение", "Получение значения, не хранящегося в базе данных");
	СписокДоступныхДействий.Добавить("Установка", "Установка значения, не сохраняемого в базе данных");
	
	СоответствиеДоступныхДействий.Вставить("ПараметрыСеанса", СписокДоступныхДействий);
	
	//Общие реквизиты
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Просмотр", "Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование", "Редактирование");
	
	СоответствиеДоступныхДействий.Вставить("ОбщиеРеквизиты", СписокДоступныхДействий);

	//Планы обмена
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение", "Чтение");
	СписокДоступныхДействий.Добавить("Добавление", "Добавление");
	СписокДоступныхДействий.Добавить("Изменение", "Изменение");
	СписокДоступныхДействий.Добавить("Удаление", "Удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование", "Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления", "Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления", "Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных", "Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке", "Ввод по строке");
	
	СоответствиеДоступныхДействий.Вставить("ПланыОбмена", СписокДоступныхДействий);
	
	//Критерии отбора
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	
	СоответствиеДоступныхДействий.Вставить("КритерииОтбора", СписокДоступныхДействий);
	
	//Общие формы
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	
	СоответствиеДоступныхДействий.Вставить("ОбщиеФормы", СписокДоступныхДействий);
	
	//Общие команды
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	
	СоответствиеДоступныхДействий.Вставить("ОбщиеКоманды", СписокДоступныхДействий);
	
	//Константы
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	
	СоответствиеДоступныхДействий.Вставить("Константы", СписокДоступныхДействий);
	
	//Справочники
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление","Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных","Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке", "Ввод по строке");
	
	СоответствиеДоступныхДействий.Вставить("Справочники", СписокДоступныхДействий);
	
	//Последовательности
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение", "Чтение");
	СписокДоступныхДействий.Добавить("Изменение", "Изменение");
	СоответствиеДоступныхДействий.Вставить("Последовательности", СписокДоступныхДействий);
	
	//Документы
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Проведение", "Проведение документов");
	СписокДоступныхДействий.Добавить("ОтменаПроведения","Интерактивная отмена проведения");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных","Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ИнтерактивноеПроведение", "Интерактивное проведение");
	СписокДоступныхДействий.Добавить("ИнтерактивноеПроведениеНеОперативное","Интерактивное проведение (стандартными командами форм) документа в неоперативном режиме");
	
	СписокДоступныхДействий.Добавить("ИнтерактивнаяОтменаПроведения", "Интерактивная отмена проведения");
	СписокДоступныхДействий.Добавить("ИнтерактивноеИзменениеПроведенных", "Интерактивное редактирование проведенного документа. Если право не установлено, то пользователь не может проведенный документ удалить, установить пометку удаления, перепровести или сделать непроведенным. Форма такого документа открывается в режиме просмотра");
	СписокДоступныхДействий.Добавить("ВводПоСтроке", "Ввод по строке");
	
	СоответствиеДоступныхДействий.Вставить("Документы", СписокДоступныхДействий);
	
	//Журналы документов
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СоответствиеДоступныхДействий.Вставить("ЖурналыДокументов", СписокДоступныхДействий);
	
	//Отчеты
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Использование","Использование");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СоответствиеДоступныхДействий.Вставить("Отчеты", СписокДоступныхДействий);
	
	//Обработки
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Использование","Использование");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СоответствиеДоступныхДействий.Вставить("Обработки", СписокДоступныхДействий);
	
	//ПВХ
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных","Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке","Ввод по строке");
	
	СоответствиеДоступныхДействий.Вставить("ПланыВидовХарактеристик", СписокДоступныхДействий);
	
	//План счетов
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных","Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке","Ввод по строке");
	
	СоответствиеДоступныхДействий.Вставить("ПланыСчетов", СписокДоступныхДействий);
	
	//ПВР
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление", "Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных","Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке","Ввод по строке");
		
	СоответствиеДоступныхДействий.Вставить("ПланыВидовРасчета", СписокДоступныхДействий);
	
	//Регистры сведений
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("УправлениеИтогами","Управление итогами регистра (установка периода, по который рассчитаны итоги, и пересчет итогов)");
	
	СоответствиеДоступныхДействий.Вставить("РегистрыСведений", СписокДоступныхДействий);
	
	//Регистры накопления
	
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("УправлениеИтогами","Управление итогами регистра (установка периода, по который рассчитаны итоги, и пересчет итогов)");
	
	СоответствиеДоступныхДействий.Вставить("РегистрыНакопления", СписокДоступныхДействий);
	
	//Регистры бухгалтерии
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("УправлениеИтогами","Управление итогами регистра (установка периода, по который рассчитаны итоги, и пересчет итогов)");
	
	СоответствиеДоступныхДействий.Вставить("РегистрыБухгалтерии", СписокДоступныхДействий);
	
	//Регистры расчета
	
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	//СписокДоступныхДействий.Добавить("УправлениеИтогами","Управление итогами регистра (установка периода, по который рассчитаны итоги, и пересчет итогов)");
	
	СоответствиеДоступныхДействий.Вставить("РегистрыРасчета", СписокДоступныхДействий);

	//Бизнес-процессы
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление","Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных", "Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке","Ввод по строке");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяАктивация", "Интерактивная активация");
	СписокДоступныхДействий.Добавить("Старт", "Старт бизнес-процесса");
	СписокДоступныхДействий.Добавить("ИнтерактивныйСтарт","Интерактивный старт бизнес-процесса");
	
	СоответствиеДоступныхДействий.Вставить("БизнесПроцессы", СписокДоступныхДействий);
	
	//задачи
	СписокДоступныхДействий = Новый СписокЗначений;

	СписокДоступныхДействий.Добавить("Чтение","Чтение");
	СписокДоступныхДействий.Добавить("Добавление","Добавление");
	СписокДоступныхДействий.Добавить("Изменение","Изменение");
	СписокДоступныхДействий.Добавить("Удаление","Удаление");
	СписокДоступныхДействий.Добавить("Просмотр","Просмотр");
	СписокДоступныхДействий.Добавить("ИнтерактивноеДобавление","Интерактивное добавление");
	СписокДоступныхДействий.Добавить("Редактирование","Редактирование");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдаление","Интерактивное непосредственное удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяПометкаУдаления","Интерактивная пометка на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеСнятиеПометкиУдаления","Интерактивное снятие пометки на удаление");
	СписокДоступныхДействий.Добавить("ИнтерактивноеУдалениеПомеченных", "Интерактивное удаление помеченных объектов");
	СписокДоступныхДействий.Добавить("ВводПоСтроке","Ввод по строке");
	СписокДоступныхДействий.Добавить("ИнтерактивнаяАктивация", "Интерактивная активация");
	СписокДоступныхДействий.Добавить("Выполнение", "Выполнение задачи");
	СписокДоступныхДействий.Добавить("ИнтерактивноеВыполнение", "Интерактивное выполнение задачи");
	
	СоответствиеДоступныхДействий.Вставить("Задачи", СписокДоступныхДействий);
	
	//Внешние источники данных
	СписокДоступныхДействий = Новый СписокЗначений;

	СписокДоступныхДействий.Добавить("Использование","Использование");
	СписокДоступныхДействий.Добавить("Администрирование","Администрирование");
	СписокДоступныхДействий.Добавить("ИзменениеСтандартнойАутентификации", "Пользователь имеет право изменять свои сохраненные параметры стандартной аутентификации внешнего источника данных");
	СписокДоступныхДействий.Добавить("ИзменениеСтандартнойАутентификацииСеанса", "Пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса");
	СписокДоступныхДействий.Добавить("ИзменениеАутентификацииОССеанса", "Пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса и текущего пользователя");
	
	СоответствиеДоступныхДействий.Вставить("ВнешниеИсточникиДанных", СписокДоступныхДействий);

	//Конфигурация
	
	СписокДоступныхДействий = Новый СписокЗначений;
	
	СписокДоступныхДействий.Добавить("Администрирование","Администрирование");
	СписокДоступныхДействий.Добавить("АдминистрированиеДанных", "Право на административные действия над данными");
	СписокДоступныхДействий.Добавить("ОбновлениеКонфигурацииБазыДанных", "Обновление конфигурации базы данных");
	СписокДоступныхДействий.Добавить("МонопольныйРежим", "Использование монопольного режима");
	СписокДоступныхДействий.Добавить("АктивныеПользователи", "Просмотр списка активных пользователей");
	СписокДоступныхДействий.Добавить("ЖурналРегистрации", "Журнал регистрации");
	СписокДоступныхДействий.Добавить("ТонкийКлиент", "Право запуска тонкого клиента");
	СписокДоступныхДействий.Добавить("ВебКлиент", "Право запуска веб-клиента");
	СписокДоступныхДействий.Добавить("ТолстыйКлиент", "Право запуска толстого клиента");
	СписокДоступныхДействий.Добавить("ВнешнееСоединение","Внешнее соединение");
	СписокДоступныхДействий.Добавить("Automation","Использование automation");
	СписокДоступныхДействий.Добавить("РежимВсеФункции","Право на использования режима 'Все функции'");
	СписокДоступныхДействий.Добавить("СохранениеДанныхПользователя","Право на сохранение данных пользователя (настроек, избранного, истории)");
	СписокДоступныхДействий.Добавить("ИнтерактивноеОткрытиеВнешнихОбработок", "Интерактивное открытие внешних обработок");
	СписокДоступныхДействий.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетов", "Интерактивное открытие внешних отчетов");
	СписокДоступныхДействий.Добавить("Вывод","Вывод на печать, запись и копирование в буфер обмена");
	
	СоответствиеДоступныхДействий.Вставить("Конфигурация", СписокДоступныхДействий);
	
	Возврат СоответствиеДоступныхДействий;
	
КонецФункции

&НаКлиенте
Процедура СформироватьРезультат(Команда)
	//ЗаполнитьТипыОбъектов();
	Отчет.ТаблицаТиповОбъектов.Очистить();
	Отчет.ТаблицаРезультата.Очистить();
	    
	Если Формировать = "ПоОбъектам" Тогда
		СформироватьРезультатНаСервере();
	ИначеЕсли Формировать = "ПоПользователюИлиГруппе" Тогда	
		СформироватьПоПользователюИлиГруппе();
		
	Иначе
		СформироватьРезультатПоРолям();
	КонецЕсли;
	
	ЗаполнениеТиповИПрав();
	СкомпоноватьРезультат();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРЛС()

	//ТЗ = Константы._ФайлРЛС.Получить().Получить();
	//Если ТЗ = Неопределено Тогда
	//	Сообщить("Загрузите файл РЛС");
	//Иначе
	//	ЗначениеВРеквизитФормы(ТЗ, "ТаблицаРЛС");	
	//КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПроверитьНаСервере(Хранилище,ТабДок)
	
	ПутьКФайлу = ПолучитьИзВременногоХранилища(Хранилище);
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ПутьКФайлу.Записать(ИмяФайла);
	ТабДок.Прочитать(ИмяФайла);
	
	Построитель = Новый ПостроительЗапроса;
	
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, 7));
	Построитель.Выполнить();
	ТЗ = Построитель.Результат.Выгрузить();
	
	//ЗначениеВРеквизитФормы(ТЗ, "ТаблицаРЛС");
	
	Для каждого Строка Из ТЗ Цикл
	    СтрокаРЛС = ТаблицаРЛС.Добавить();
		СтрокаРЛС.Объект = Строка.Об_єкт;
		СтрокаРЛС.Роль = Строка.Роль;
		СтрокаРЛС.Право = Строка.Право;
		СтрокаРЛС.Поля = Строка.Поля;
		СтрокаРЛС.ОграничениеДоступа = Строка.ОбмеженняДоступу;
	КонецЦикла;
	
	//Запись = Константы._ФайлРЛС.СоздатьМенеджерЗначения();
	//ХранилищеЗнач = Новый ХранилищеЗначения(ТЗ);
	//Запись.Значение = ХранилищеЗнач;
	//Запись.Записать();
	
	//ЗначениеВРеквизитФормы(ТЗ, "ТаблицаРЛС");
	
	//Право = ПараметрыДоступа(<НаименованиеПрава>, <ОбъектМетаданных>,"Ссылка") 
	//Метаданные.Справочники.ИНАГРО_ВидыБизнесПроцессов.
КонецПроцедуры

&НаСервере                                                                                              
Процедура СформироватьРезультатНаСервере()
	//ЗаполнитьТаблицуРЛС();
	
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	СтруктураОтбора = Новый Структура("Использовать", Истина);
	МассивСтрок = Дерево.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	Отчет.ТаблицаРезультата.Очистить();
	
	Для каждого Строка Из МассивСтрок Цикл
		    Если Строка.ИмяОбъекта = "УправлениеПредприятием" Тогда
				Продолжить;
			КонецЕсли;
		
		//Если Строка.ТипОбъекта = "Справочники"  Тогда
		     ЗаполнитьРолиИРЛС(Строка);
		//КонецЕсли;

		//ТД = Отчет.ТаблицаРезультата.Добавить();
		//ТД.ИмяОбъекта = Строка.ИмяОбъекта;
		//ТД.Роль = "Роль";
		//ТД.Право = "Право";
		//ТД.РЛС = "РЛС"; 
	КонецЦикла;
	
	//СкомпоноватьРезультат();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРолиИРЛС(Строка,Вложеность = Неопределено)
	
	КолекцияРолей = Метаданные.Роли;
	Если Строка.Строки.Количество() = 0 ИЛИ Строка.Родитель <> Неопределено Тогда

		Если Строка.Родитель.Родитель = Неопределено Тогда
		     ОбъектМетаданных = Метаданные[Строка(Строка.ТипОбъекта)][Строка.ИмяОбъекта];
		 Иначе
			  ОбъектМетаданных = Метаданные[Строка(Строка.ТипОбъекта)][Строка.Родитель.ИмяОбъекта]["Подсистемы"][Строка.ИмяОбъекта];
		КонецЕсли;
	 
	//Метаданные.Справочники[Строка.ИмяОбъекта];
	
	Для каждого Роль Из КолекцияРолей Цикл
		Для каждого СтрокаПрав Из Строка.ТаблицаДоступныхДействий Цикл
		      Если СтрокаПрав.Использовать = Ложь Тогда
			       Продолжить;
			  КонецЕсли;
		//Для Каждого ОбъектМетаданных Из ТаблицаМетаданных Цикл
			
			//СписокВозможныхДействий =  СоответствиеВозможныхДействий[ОбъектМетаданных.ТипОбъекта];
			//Для Каждого ВозможноеДействие ИЗ СписокВозможныхДействий Цикл
			//	Права = ВозможноеДействие.Значение;
				//
				 Права =  Строка(СтрокаПрав.ДоступноеДействиеИмя);
				//Права = Строка(СтрокаПрав.Значение);
				
				РезультатЧтения = ПравоДоступа(Права, ОбъектМетаданных , Роль);
				Если РезультатЧтения Тогда
					МассивРЛС = ПолучитьРЛС(Строка,Роль,Права);
					Если МассивРЛС.Количество() = 0 Тогда
						ДобавитьЗаписьВТабЧасть(Строка, Роль,СтрокаПрав.ДоступноеДействиеСиноним,Неопределено);
					Иначе
						//Для каждого СтрокаМассива Из МассивРЛС Цикл
							//ДобавитьЗаписьВТабЧасть(Строка, Роль,Права,СтрокаМассива.ОграничениеДоступа);	
							ДобавитьЗаписьВТабЧасть(Строка, Роль,СтрокаПрав.ДоступноеДействиеСиноним,Неопределено);
						//КонецЦикла;                                                      			
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	//КонецЦикла; 
	
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ДобавитьЗаписьВТабЧасть(Строка, Роль, Право,РЛС)
	
	ТД = Отчет.ТаблицаРезультата.Добавить();
	ТД.ТипОбъекта = Строка.ТипОбъекта;
	ТД.ИмяОбъекта = Строка.ИмяОбъекта;
	ТД.Роль = Строка(Роль);
	ТД.Право = Право;
	//ТД.РЛС = Рлс; 

КонецПроцедуры 

&НаСервере
Функция ПолучитьРЛС(Строка,Роль,Право)
	//МассивРЛС = Новый массив;	
	Массив = Новый Массив;
	Если НЕ (Право = "Чтение" ИЛИ Право = "Добавление" ИЛИ Право = "Изменение" ИЛИ Право = "Удаление")   Тогда
	     Возврат Массив;
	КонецЕсли;
	Структура = Новый Структура;
	
	Если Строка.ТипОбъекта = "Справочники"  Тогда
	     ОбъектПоиска =  "Справочник." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "Документы"  Тогда
		ОбъектПоиска =  "Документ." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "ПланыВидовХарактеристик"  Тогда
	    ОбъектПоиска =  "ПланВидовХарактеристик." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "БизнесПроцессы"  Тогда
		ОбъектПоиска =  "БизнесПроцесс." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "ЖурналыДокументов"  Тогда
	    ОбъектПоиска =  "ЖурналДокументов." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "Задачи"  Тогда
	    ОбъектПоиска =  "Задача." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "РегистрыБухгалтерии"  Тогда
	    ОбъектПоиска =  "РегистрБухгалтерии." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "РегистрыНакопления"  Тогда
	    ОбъектПоиска =  "РегистрНакопления." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "РегистрыРасчета"  Тогда
	    ОбъектПоиска =  "РегистрРасчета." + Строка.ИмяОбъекта;
	ИначеЕсли Строка.ТипОбъекта = "РегистрыСведений"  Тогда
	    ОбъектПоиска =  "РегистрСведений." + Строка.ИмяОбъекта;
	
	Иначе
		 ОбъектПоиска =  Строка.ТипОбъекта + "." + Строка.ИмяОбъекта;
	КонецЕсли;
	//ОбъектПоиска =  "Справочник." + Строка.ИмяОбъекта;
	Структура.Вставить("Объект",ОбъектПоиска);
	Структура.Вставить("Роль",Роль.Имя);
	Структура.Вставить("Право",Право);
	МассивРЛС = ТаблицаРЛС.НайтиСтроки(Структура);
	//Структура.Вставить("",);
	Если МассивРЛС.Количество() > 0 Тогда
		МассивОграниченияДоступа = Константы.ПараметрыОграниченияДоступа.Получить().Получить().СвойстваВидовДоступа.Массив;
		РЛС ="";
		Для каждого СтрокаДоступа Из МассивОграниченияДоступа Цикл
			 Для каждого СтрокаРЛС Из МассивРЛС Цикл
				  //СтрокаДоступа.Имя  МассивРЛС[0].ОграничениеДоступа  Найт
			 	   НомерСтроки  = Найти(СтрокаРЛС.ОграничениеДоступа,"""" +Строка(СтрокаДоступа.Имя)+"""");
			       Если НомерСтроки <> 0 Тогда
						//Массив.Добавить(Строка(СтрокаДоступа.Имя));      	
						Если РЛС ="" Тогда
						     РЛС = Строка(СтрокаДоступа.Представление);
						 Иначе
							 //РЛС = РЛС + ";" + Символы.ПС + Строка(СтрокаДоступа.Имя);
							 РЛС = РЛС + "; " + Строка(СтрокаДоступа.Представление);

						КонецЕсли;
				   КонецЕсли;
			 КонецЦикла;
		КонецЦикла;
	    Массив.Добавить(РЛС);
	КонецЕсли;
	 
	 Возврат Массив;
КонецФункции 

&НаСервере
Процедура ЗаполнитьСписокПрав()
	СписокПрав.Добавить("Чтение");
	СписокПрав.Добавить("Добавление");
	СписокПрав.Добавить("Изменение");
	СписокПрав.Добавить("Удаление");
	СписокПрав.Добавить("Проведение");
	СписокПрав.Добавить("ОтменаПроведения");
	СписокПрав.Добавить("Просмотр");
	СписокПрав.Добавить("ИнтерактивноеДобавление");
	СписокПрав.Добавить("Редактирование");
	СписокПрав.Добавить("ИнтерактивнаяПометкаУдаления");
	
	СписокПрав.Добавить("ИнтерактивноеСнятиеПометкиУдаления");
	СписокПрав.Добавить("ИнтерактивноеУдалениеПомеченных");
	СписокПрав.Добавить("ИнтерактивноеПроведение");
	СписокПрав.Добавить("ИнтерактивноеПроведениеНеОперативное");
	СписокПрав.Добавить("ИнтерактивнаяОтменаПроведения");
	СписокПрав.Добавить("ИнтерактивноеИзменениеПроведенных");
	СписокПрав.Добавить("ВводПоСтроке");
	СписокПрав.Добавить("УправлениеИтогами");
	СписокПрав.Добавить("Использование");
	
	СписокПрав.Добавить("ИнтерактивноеУдаление");

КонецПроцедуры 

&НаКлиенте
Процедура ДеревоМетаданныхТаблицаДоступныхДействийИспользоватьПриИзменении(Элемент)
	//Элементы.ДеревоМетаданных.ТекущиеДанные.ТаблицаДоступныхДействий.НайтиСтроки(Новый Структура("Использовать", Истина)).Количество() > 0	
	ТД = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТД<> Неопределено Тогда
		Если ТД.ТаблицаДоступныхДействий.НайтиСтроки(Новый Структура("Использовать", Истина)).Количество() > 0 Тогда
			ТД.Использовать = Истина;
		Иначе	
			ТД.Использовать = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеНаПрава(Команда)
	ТД = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТД<> Неопределено Тогда
		ТаблицаДоступныхДействий = ТД.ТаблицаДоступныхДействий;
		Для каждого Строка Из ТаблицаДоступныхДействий Цикл
		    Строка.Использовать = Истина;
		КонецЦикла;
		ДеревоМетаданныхТаблицаДоступныхДействийИспользоватьПриИзменении(Неопределено);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеНаПравах(Команда)
	ТД = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТД<> Неопределено Тогда
		ТаблицаДоступныхДействий = ТД.ТаблицаДоступныхДействий;
		Для каждого Строка Из ТаблицаДоступныхДействий Цикл
			Строка.Использовать = Ложь;
		КонецЦикла;
		ДеревоМетаданныхТаблицаДоступныхДействийИспользоватьПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыОбъектов()
	//Отчет.ТаблицаТиповОбъектов.Очистить();
	//Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	////Структура = Новый Структура("И");
	//СтрокаДерева = Дерево.Строки;
	//Для каждого СтрокаПоиска Из СтрокаДерева Цикл
	//	ДобавлемыйТипДанных = СтрокаПоиска.Строки.Найти(Истина, "Использовать", Истина);
	//	Если ДобавлемыйТипДанных <> Неопределено Тогда
	//		ТипОбъекта = ДобавлемыйТипДанных.ТипОбъекта; 
	//		ТаблицаДоступныхДействий = ДобавлемыйТипДанных.ТаблицаДоступныхДействий;
	//		Для каждого Строка Из ТаблицаДоступныхДействий Цикл
	//			ДобавляемыйТип = Отчет.ТаблицаТиповОбъектов.Добавить();	
	//			ДобавляемыйТип.ТипОбъектаТ = ТипОбъекта;
	//			ДобавляемыйТип.ПравоТ =  Строка.ДоступноеДействиеИмя;			
	//		КонецЦикла;     		
	//	КонецЕсли;    
	//КонецЦикла;
	//

КонецПроцедуры 

&НаКлиенте
Процедура Настройки(Команда)
	
	Элементы.ГруппаВсеНастройки.Видимость = НЕ Элементы.ГруппаВсеНастройки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхИспользоватьПриИзменении(Элемент)
	ТД = Элементы.ДеревоМетаданных.ТекущиеДанные;
	Если ТД <> Неопределено  Тогда
	    Использовать = ТД.Использовать;
		ТаблицаДоступныхДействий = ТД.ТаблицаДоступныхДействий;
		Для каждого Строка Из ТаблицаДоступныхДействий Цикл
		    Строка.Использовать = Использовать;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПриИзменении(Элемент)
	Элементы.ГруппаПоОбъектам.Видимость = Формировать = "ПоОбъектам";
	Элементы.ГруппаГруппаПоРолям.Видимость = Формировать = "ПоРолям";
	Элементы.Профиль.Видимость = Формировать = "ПоПрофилю";
	Элементы.ПользовательГруппа.Видимость = Формировать = "ПоПользователюИлиГруппе";
	Элементы.ТолькоВыбранные.Видимость = Формировать = "ПоРолям";
	Элементы.ТаблицаРолейТолькоВыбранные.Видимость = Ложь;
	
	//+++ УАХ 14.12.2015
	Элементы.ТолькоВыбранные.Видимость = Ложь;
	//--- УАХ 14.12.2015
	
	Если Формировать = "ПоРолям" Тогда
		ТолькоВыбранные = Ложь;
		Элементы.ТаблицаРолейТолькоВыбранные.Видимость = ТолькоВыбранные;
		Элементы.ТаблицаРолей.Видимость = НЕ ТолькоВыбранные;

		Если Элементы.ТаблицаРолей.ТекущиеДанные = Неопределено Тогда  		
			Возврат;
		КонецЕсли;
		
		ИмяРоли = ?(Элементы.ТаблицаРолей.Видимость, Элементы.ТаблицаРолей.ТекущиеДанные.ИмяРоли,Элементы.ТаблицаРолейТолькоВыбранные.ТекущиеДанные.ИмяРоли);
		ИмяРоли = "Роль."+ ИмяРоли;
		ЗаполнениеТаблицыПрофилейРолей(ИмяРоли);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРолей()
	
	Роли = Метаданные.Роли;
	Для каждого СтрокаРоли Из Роли Цикл
		НоваяСтрока = ТаблицаРолей.Добавить();
		НоваяСтрока.Роль = СтрокаРоли.Синоним;
        НоваяСтрока.ИмяРоли = СтрокаРоли.Имя;
			
	КонецЦикла;
	
	ТаблицаРолейДляСортировки = РеквизитФормыВЗначение("ТаблицаРолей");
    ТаблицаРолейДляСортировки.Сортировать("Роль");
	ЗначениеВРеквизитФормы(ТаблицаРолейДляСортировки,"ТаблицаРолей");

КонецПроцедуры // ЗаполнитьТаблицуРолей()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Формировать = ?(Формировать = "","ПоОбъектам",Формировать);
	Элементы.ГруппаПоОбъектам.Видимость = Формировать = "ПоОбъектам";
	Элементы.ГруппаГруппаПоРолям.Видимость = Формировать = "ПоРолям";
	Элементы.Профиль.Видимость = Формировать = "ПоПрофилю";
	Элементы.ПользовательГруппа.Видимость = Формировать = "ПоПользователюИлиГруппе";
	Элементы.ТолькоВыбранные.Видимость = Формировать = "ПоРолям";

	Если СформироватьОтчет Тогда
		ФормироватьПриИзменении(Элементы.Формировать);
	    СформироватьРезультат(Элементы.ФормаСформироватьРезультат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьРезультатПоРолям()
	ЗаполнитьТаблицуРЛС();
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	СтрокаДерева = Дерево.Строки;
	МассивВыбранныхРолей = ТаблицаРолей.НайтиСтроки(Новый Структура("Использовать",Истина));
	Для каждого СтрокаРолей Из МассивВыбранныхРолей Цикл
		//Если СтрокаРолей.Использовать = Ложь Тогда
		//	Продолжить;		
		//КонецЕсли;
		Роль = Метаданные.Роли[СтрокаРолей.ИмяРоли];
		Для каждого ТипыОбъектов Из СтрокаДерева Цикл
			Если СтрокаДерева.Количество() = 0 Тогда
			    Продолжить;
			КонецЕсли;
			
		     СтрокаТиповОбъектов = ТипыОбъектов.Строки;
			 Для каждого СтрокаОбъектов Из СтрокаТиповОбъектов Цикл
				 ТаблицаДоступныхДействий = СтрокаОбъектов.ТаблицаДоступныхДействий;
				
			     Для каждого Строка Из ТаблицаДоступныхДействий Цикл
					 
					 Права =  Строка(Строка.ДоступноеДействиеИмя);
					 					 
					 РезультатЧтения = ПравоДоступа(Права, Метаданные[СтрокаОбъектов.ТипОбъекта][СтрокаОбъектов.ИмяОбъекта] ,Роль);
					 Если Права = "Чтение" И РезультатЧтения = Ложь Тогда
						Прервать;
					 КонецЕсли;
					 Если РезультатЧтения Тогда
						 МассивРЛС = ПолучитьРЛС(СтрокаОбъектов,Роль,Права);
						 Если МассивРЛС.Количество() = 0 Тогда
							 ДобавитьЗаписьВТабЧасть(СтрокаОбъектов, Роль,Строка.ДоступноеДействиеСиноним,Неопределено);
						 Иначе
							 Для каждого СтрокаМассива Из МассивРЛС Цикл
								 //ДобавитьЗаписьВТабЧасть(Строка, Роль,Права,СтрокаМассива.ОграничениеДоступа);	
								 ДобавитьЗаписьВТабЧасть(СтрокаОбъектов, Роль,Строка.ДоступноеДействиеСиноним,СтрокаМассива);
							 КонецЦикла;
						 КонецЕсли;
						 
					 КонецЕсли;

				 КонецЦикла;

			 КонецЦикла;
		
		КонецЦикла;
	            
	КонецЦикла;
		
	//Для каждого СтрокаТаблицы Из Таблица Цикл
	//	 ДобавляемыйТип = Отчет.ТаблицаТиповОбъектов.Добавить();
	//	 ДобавляемыйТип.ТипОбъектаТ = СтрокаТаблицы.ТипОбъекта;
	//	 ДобавляемыйТип.ПравоТ = СтрокаТаблицы.ПравоТ; 	
	//КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ЗаполнениеТиповИПрав()
	Отчет.ТаблицаТиповОбъектов.Очистить();
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	ТаблицаТипов = Отчет.ТаблицаРезультата.Выгрузить();
	ТаблицаТипов.Свернуть("ТипОбъекта");
	Для каждого СтрокаТаблицы Из ТаблицаТипов Цикл
		СтрДереваТиповОбъекта = Дерево.Строки.НайтиСтроки(Новый Структура("ТипОбъекта",СтрокаТаблицы.ТипОбъекта ));
		Для каждого СтрДерева Из СтрДереваТиповОбъекта Цикл
			ТаблицаДоступныхДействий  = СтрДерева.ТаблицаДоступныхДействий;
			ПроверятьПрава = Ложь;
			Если Формировать = "ПоОбъектам" Тогда
				Количество = ТаблицаДоступныхДействий.НайтиСтроки(Новый Структура("Использовать", Ложь)).Количество();
				Если Количество <> ТаблицаДоступныхДействий.Количество() Тогда
				     ПроверятьПрава = Истина;
				КонецЕсли;
							
			КонецЕсли;
			
			Для каждого СтрокаДоступа Из ТаблицаДоступныхДействий Цикл
				Если ПроверятьПрава И СтрокаДоступа.Использовать = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавляемыйТип = Отчет.ТаблицаТиповОбъектов.Добавить();
				ДобавляемыйТип.ТипОбъекта = СтрДерева.ТипОбъекта;
				ДобавляемыйТип.Право = СтрокаДоступа.ДоступноеДействиеСиноним;
				
			КонецЦикла;
			
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	    
	ЗаполнитьТаблицуРолейНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРолейНаСервере(МассивПрофилей = Неопределено)
	
	МассивОчистки =  ТаблицаРолей.НайтиСтроки(Новый Структура("Использовать",Истина));
	
	Для каждого СтрокаОчистки Из МассивОчистки Цикл
		СтрокаОчистки.Использовать = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиГруппДоступаРоли.Роль.Имя КАК Роль
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|ГДЕ
		|	ПрофилиГруппДоступаРоли.Ссылка В(&МассивПрофилей)";
	
	Запрос.УстановитьПараметр("МассивПрофилей", ?(МассивПрофилей = Неопределено, Профиль,МассивПрофилей));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденаяСтрока = ТаблицаРолей.НайтиСтроки(Новый Структура("ИмяРоли",Выборка.Роль));
		Если НайденаяСтрока.Количество() = 0 Тогда
			Сообщить("В таблице ролей не найденая роль "+ Выборка.Роль);
			Продолжить;
		КонецЕсли;
		
		НайденаяСтрока[0].Использовать = Истина;
		
	КонецЦикла;

КонецПроцедуры 
 
&НаСервере
Процедура СформироватьПоПользователюИлиГруппе()
	ЗаполнитьТаблицуРЛС();
	МассивПрофилей = Неопределено;
	Если ТипЗнч(ПользовательГруппа) = Тип("СправочникСсылка.ГруппыДоступа") Тогда
		Профиль = ПользовательГруппа.Профиль;
	ИначеЕсли ТипЗнч(ПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль,
		|	ПрофилиГруппДоступаРоли.Роль.Синоним КАК Роль
		|ПОМЕСТИТЬ втПрофилиРоли
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь.Ссылка = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка.Профиль,
		|	ПрофилиГруппДоступаРоли.Роль.Синоним
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО ГруппыДоступаПользователи.Пользователь = СоставыГруппПользователей.ГруппаПользователей
		|ГДЕ
		|	СоставыГруппПользователей.Используется
		|	И СоставыГруппПользователей.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втПрофилиРоли.Профиль,
		|	втПрофилиРоли.Роль
		|ИЗ
		|	втПрофилиРоли КАК втПрофилиРоли";
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательГруппа);
	
	РезультатЗапроса =  Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
		
	МассивПрофилей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Профиль");
	
	Пока Выборка.Следующий() Цикл	
		Строка = Отчет.ТаблицаПрофилей.Добавить();
		Строка.Профиль = Выборка.Профиль;
		Строка.Роль = Выборка.Роль;
	КонецЦикла;
	
	Иначе
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуРолейНаСервере(МассивПрофилей);
	СформироватьРезультатПоРолям();

КонецПроцедуры 

&НаКлиенте
Процедура ТолькоВыбранныеПриИзменении(Элемент)
	Если ТолькоВыбранные Тогда
		ОтобразитьТолькоВыбранные();
		Если ТаблицаРолейТолькоВыбранные.Количество() <> 0 Тогда  		
			ИмяРоли = ТаблицаРолейТолькоВыбранные[0];
			ИмяРоли = "Роль."+ ИмяРоли;
			ЗаполнениеТаблицыПрофилейРолей(ИмяРоли);
			
		КонецЕсли;
		
	Иначе
		Если Элементы.ТаблицаРолей.ТекущиеДанные <> Неопределено Тогда  		
			ИмяРоли = Элементы.ТаблицаРолей.ТекущиеДанные.ИмяРоли;
			ИмяРоли = "Роль."+ ИмяРоли;
			ЗаполнениеТаблицыПрофилейРолей(ИмяРоли);
		КонецЕсли;
	КонецЕсли;
	Элементы.ТаблицаРолей.Видимость = НЕ ТолькоВыбранные;
	Элементы.ТаблицаРолейТолькоВыбранные.Видимость = ТолькоВыбранные;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьТолькоВыбранные()
	ТаблицаРолейТолькоВыбранные.Очистить();
	Таблица = ТаблицаРолей.Выгрузить();
	Массив = Таблица.НайтиСтроки(Новый Структура("Использовать",Истина));
	Для каждого Строка Из Массив Цикл
		НоваяСтрока = ТаблицаРолейТолькоВыбранные.Добавить();
		НоваяСтрока.Использовать = Истина;
		НоваяСтрока.Роль = Строка.Роль;
		НоваяСтрока.ИмяРоли = Строка.ИмяРоли;
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаРолейТолькоВыбранныеИспользоватьПриИзменении(Элемент)
	ТД = Элементы.ТаблицаРолейТолькоВыбранные.ТекущиеДанные;
	Если ТД.Использовать = Ложь Тогда
	     ТаблицаРолейТолькоВыбранныеИспользоватьПриИзмененииНаСервере(ТД.Роль);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаРолейТолькоВыбранныеИспользоватьПриИзмененииНаСервере(Роль)
	 Строка = ТаблицаРолей.НайтиСтроки(Новый Структура("Роль",Роль));
	 Если Строка <> Неопределено Тогда
	     Строка[0].Использовать = Ложь;
	 
	 КонецЕсли;
	  ОтобразитьТолькоВыбранные();
	 //Строка = ТаблицаРолейТолькоВыбранные.НайтиСтроки(Новый Структура("Использовать",Ложь));
	 //Если Строка <> Неопределено Тогда
	 //    Строка[0].Использовать = Ложь;	
	 //
	 //КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлРЛС(Команда)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Все ограничения доступа (*.mxl)|*.mxl";
	Диалог.МножественныйВыбор = Ложь;
	//Диалог.ПолноеИмяФайла = ФайлОграниченийДоступаКонфигурация;
	
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
		ТабДок = Новый ТабличныйДокумент;
		//ТабДок.Прочитать(ПутьКФайлу);
		Хранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
		ПроверитьНаСервере(Хранилище,ТабДок);
		
		//ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаВсеОбъекты(Команда)
	УстановитьНаВсеОбъектыНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаВсеОбъектыНаСервере(Значение)
	Дерево = РеквизитФормыВЗначение("ДеревоМетаданных");
	УстановитьВсемОбъектам(Дерево.Строки,Значение);
	//Дерево.Строки.Строки.Сортировать("СинонимОбъекта", Ложь);
	
	ЗначениеВРеквизитФормы(Дерево,"ДеревоМетаданных");
КонецПроцедуры 

&НаСервере
Процедура УстановитьВсемОбъектам(СтрокаДерева,Значение)
	МассивСтрокДерева = СтрокаДерева.НайтиСтроки(Новый Структура("Использовать", НЕ Значение), Истина);
	Для каждого Строка Из МассивСтрокДерева Цикл
		Строка.Использовать = Значение;
		Для каждого СтрокаДоступа Из Строка.ТаблицаДоступныхДействий Цикл
			СтрокаДоступа.Использовать = Значение;
			
		КонецЦикла;
				
	КонецЦикла;
	//Если СтрокаДерева.Количество() > 0 Тогда
	//	Для каждого Строка Из СтрокаДерева Цикл
	//	    Строка.Использовать = Значение;
	//		Для каждого СтрокаДоступа Из Строка.ТаблицаДоступныхДействий Цикл
	//		    СтрокаДоступа.Использовать = Значение;              		
	//		
	//		КонецЦикла;
	//		УстановитьВсемОбъектам(Строка.Строки,Значение);		
	//	КонецЦикла;         
	//КонецЕсли;               	

КонецПроцедуры 

&НаКлиенте
Процедура СнятьСоВсехОбъектов(Команда)
	УстановитьНаВсеОбъектыНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаВсеРоли(Команда)
	УстановитьНаВсеРолиНаСервере(Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьНаВсеРолиНаСервере(Значение)
	 ТабРолей = РеквизитФормыВЗначение("ТаблицаРолей");
	 МассивСтрок = ТабРолей.НайтиСтроки(Новый Структура("Использовать", НЕ Значение));
	 Для каждого Строка Из МассивСтрок Цикл
	     Строка.Использовать = Значение;
	 КонецЦикла;
	 ЗначениеВРеквизитФормы(ТабРолей, "ТаблицаРолей");
	 
	 ТабРолей = РеквизитФормыВЗначение("ТаблицаРолейТолькоВыбранные");
	 МассивСтрок = ТабРолей.НайтиСтроки(Новый Структура("Использовать", Не Значение));
	 Для каждого Строка Из МассивСтрок Цикл
		 Строка.Использовать = Значение;
	 КонецЦикла;
	 ЗначениеВРеквизитФормы(ТабРолей, "ТаблицаРолейТолькоВыбранные");

КонецПроцедуры

&НаКлиенте
Процедура СнятьСоВсехРолей(Команда)
	УстановитьНаВсеРолиНаСервере(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеТаблицыПрофилейРолей(ИмяРоли)
	Роль = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ИмяРоли);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Роль = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	ТаблицаПрофилейРоли.Параметры.УстановитьЗначениеПараметра("Роль",Роль);

КонецПроцедуры // ЗаполнениеТаблицыПрофилейРолей()

&НаКлиенте
Процедура СтрокаРоли()
	ОтключитьОбработчикОжидания("СтрокаРоли");
	Если ТолькоВыбранные Тогда
		
		Если Элементы.ТаблицаРолейТолькоВыбранные.ТекущиеДанные <> Неопределено Тогда  		
			ИмяРоли = Элементы.ТаблицаРолейТолькоВыбранные.ТекущиеДанные.ИмяРоли;
			ИмяРоли = "Роль."+ ИмяРоли;
			ЗаполнениеТаблицыПрофилейРолей(ИмяРоли);
			
		КонецЕсли;
		
	Иначе
		Если Элементы.ТаблицаРолей.ТекущиеДанные <> Неопределено Тогда  		
			ИмяРоли = Элементы.ТаблицаРолей.ТекущиеДанные.ИмяРоли;
			ИмяРоли = "Роль."+ ИмяРоли;
			ЗаполнениеТаблицыПрофилейРолей(ИмяРоли);
		КонецЕсли;
	КонецЕсли;

	//Если Элементы.ТаблицаРолей.ТекущиеДанные = Неопределено Тогда  		
	//     Возврат;
	//КонецЕсли;
	//
	//ИмяРоли = ?(Элементы.ТаблицаРолей.Видимость, Элементы.ТаблицаРолей.ТекущиеДанные.ИмяРоли,Элементы.ТаблицаРолейТолькоВыбранные.ТекущиеДанные.ИмяРоли); 	
	//ИмяРоли = "Роль."+ ИмяРоли;
	//ЗаполнениеТаблицыПрофилейРолей(ИмяРоли); 	    	
КонецПроцедуры // СтрокаРоли()

&НаКлиенте
Процедура ТаблицаРолейПриАктивизацииСтроки(Элемент)
	//ТаблицаПрофилейРоли.Параметры.УстановитьЗначениеПараметра("Роль",Неопределено);
	//ПодключитьОбработчикОжидания("СтрокаРоли", 1, Истина); 
	                                 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРолейТолькоВыбранныеПриАктивизацииСтроки(Элемент)
	//ТаблицаПрофилейРоли.Параметры.УстановитьЗначениеПараметра("Роль",Неопределено);
	//ПодключитьОбработчикОжидания("СтрокаРоли", 1, Истина);
КонецПроцедуры

