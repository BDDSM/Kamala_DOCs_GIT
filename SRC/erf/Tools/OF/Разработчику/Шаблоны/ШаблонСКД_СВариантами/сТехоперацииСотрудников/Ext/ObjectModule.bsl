Перем СохраненнаяНастройка Экспорт;
Перем Расшифровки Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Результат.АвтоМасштаб  = истина;

	Если КомпоновщикНастроек.Настройки.Структура.Количество() > 1 Тогда // отчеты с доп настройками
		
		// варианты
		Если КомпоновщикНастроек.Настройки.Структура[0].Имя  = "ШАПКАНаряд" Тогда
			
			Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			Возврат ФормированиеПФНарядов(ЭтотОбъект, Результат, ДанныеРасшифровки);
			
		КонецЕсли;
  			
	КонецЕсли;

	ТабДок = ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
	//Результат.ФиксацияСлева = 1;
	
	// Верхний колонтитул 
	ТабДок.ВерхнийКолонтитул.Выводить = Истина;
	ТабДок.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	ТабДок.ВерхнийКолонтитул.Шрифт = Новый Шрифт(Результат.ВерхнийКолонтитул.Шрифт, , , , Истина);
	//ТабДок.ВерхнийКолонтитул.ТекстСлева = "Заголовок отчета";
	ТабДок.ВерхнийКолонтитул.ТекстВЦентре = "Стор. [&НомерСтраницы] з [&СтраницВсего]";
	ТабДок.ВерхнийКолонтитул.ТекстСправа = "Дата/час друку: [&Дата]/[&Время]";

	Возврат ТабДок;
	
	//Ситис Вирич П.В.   Конец 2018-04-17 

КонецФункции

Функция ФормированиеПФНарядов(ЭтотОбъект, Результат, ДанныеРасшифровки)
	
	Настройки = КомпоновщикНастроек.Настройки;

	// получим макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// создадим и инициализируем процессор компоновки данных
	ВнешниеНаборыДанных = Новый Структура;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Локализация.ПеревестиМакетКомпоновкиДанных(МакетКомпоновки);
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);

	// очистим результирующий табличный документ
	Результат.Очистить();

	МакетНаряда = ЭтотОбъект.ПолучитьМакет("МакетНаряда");
	
	ОблатьШапка = МакетНаряда.ПолучитьОбласть("Шапка");
	ОблатьПодвал = МакетНаряда.ПолучитьОбласть("Подвал");
 	ОблатьШапкаСтрок = МакетНаряда.ПолучитьОбласть("ШапкаСтрок");
 	ОблатьСтрока = МакетНаряда.ПолучитьОбласть("Строка");
	ОблатьИтого = МакетНаряда.ПолучитьОбласть("Итого");

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//
	
	Дерево = Новый ДеревоЗначений;;
    ПроцессорВывода.УстановитьОбъект(Дерево);
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Если Дерево.Строки.Количество() > 1 Тогда

		Для каждого СтрокаСотрудник Из Дерево.Строки Цикл
			
			Если СтрокаСотрудник.Сотрудник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ОблатьШапка.Параметры.период = Настройки.ПараметрыДанных.Элементы[1].Значение;
			Исключение
			    //ОписаниеОшибки()
			КонецПопытки;

			ОблатьШапка.Параметры.Сотрудник = СтрокаСотрудник.Сотрудник;
			
			Результат.Вывести(ОблатьШапка);
			
			Результат.Вывести(ОблатьШапкаСтрок);

			Для каждого СтрокаТО Из СтрокаСотрудник.Строки Цикл
				
				ОблатьСтрока.Параметры.Заполнить(СтрокаТО);
				
				ОблатьСтрока.Параметры.СводДат = МассивВСтроку(СтрокаТО.СводДат);
				
				Результат.Вывести(ОблатьСтрока);
				
			КонецЦикла;
			
			ОблатьИтого.Параметры.Заполнить(СтрокаСотрудник);
			
			Результат.Вывести(ОблатьИтого);
						
			Результат.Вывести(ОблатьПодвал);
			
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция МассивВСтроку(Масс)
	Стр = "";
	
	Для каждого Эл Из Масс Цикл
		Стр = Стр +?(Стр="","", ", ") + Эл;
	КонецЦикла;
	
	Возврат Стр;

КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра <> Неопределено Тогда
		Если ЗначениеПараметра.Значение = '00010101' Тогда
			ЗначениеПараметра.Значение = КонецДня(ТекущаяДата());
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ЗначениеПараметра <> Неопределено Тогда
		Если ЗначениеПараметра.Значение = '00010101' Тогда
			ЗначениеПараметра.Значение = КонецДня(КонецМесяца(ТекущаяДата()));
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли;
	КонецЕсли;

	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ЗначениеПараметра <> Неопределено Тогда
		Если ЗначениеПараметра.Значение = '00010101' Тогда
			ЗначениеПараметра.Значение = НачалоМесяца(ТекущаяДата());
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция НайтиЭлементОтбораПоПолю(КоллекцияЭлементов, ИмяПоля) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если  ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля)  Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Для настройки отчета (расшифровка и др.)
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Процедура заполняет параметры отчета по элементу справочника из переменной СохраненнаяНастройка.
Процедура ПрименитьНастройку() Экспорт
	
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	 
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

// Функция возвращает отчет в виде XML файла для отображения отчета с помощью
// веб расширения
//
Функция СформироватьОтчетВXML() Экспорт
	
	СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ЭтотОбъект);
		
	ДоработатьКомпоновщикПередВыводом();
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// В качестве схемы компоновки будет выступать схема самого отчета
	// В качестве настроек отчета - текущие настройки отчета
	// Данные расшифровки будем помещать в свойство расширения формы - ДанныеРасшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки);

	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("result");
	
	Пока Истина Цикл
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		Если ЭлементРезультата = Неопределено Тогда
			Прервать;
		КонецЕсли;
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементРезультата, "item", "http://v8.1c.ru/8.1/data-composition-system/result");
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
КонецПроцедуры

НастройкаПериода = Новый НастройкаПериода;

Расшифровки = Новый СписокЗначений;

#КонецЕсли