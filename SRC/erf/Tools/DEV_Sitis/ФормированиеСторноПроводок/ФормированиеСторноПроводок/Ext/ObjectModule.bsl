Процедура ПроводкиКСторнированиюУстановитьПометки(Значение) Экспорт 
	ТЗПометки = ПроводкиКСторнированию.Выгрузить(, "Пометка");
	ТЗПометки.ЗаполнитьЗначения(Значение, "Пометка");
	ПроводкиКСторнированию.ЗагрузитьКолонку(ТЗПометки.ВыгрузитьКолонку("Пометка"));
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	// Insert handler content.
КонецПроцедуры

Функция ПолучитьРезультатТаблицей() Экспорт 
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", СтандартныйПериод.ДатаНачала);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецДня(СтандартныйПериод.ДатаОкончания));
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикМакетаКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,Тип("DataCompositionValueCollectionTemplateGenerator"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(КомпоновщикМакетаКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьТаблицуПроводок() Экспорт 
	ТЗПроводки = ПолучитьРезультатТаблицей();
	ПроводкиКСторнированию.Загрузить(ТЗПроводки);
КонецПроцедуры

Функция СоздатьДокументКорректировки() Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда 
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	#Область СозданиеДокументаКорректировкаЗаписейРегистров
	ДокументОбъект = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаДокумента;
	ДокументОбъект.Комментарий = Комментарий;
	ТаблицаХозрасчетный = ДокументОбъект.ТаблицаРегистровБухгалтерии.Добавить();
	ТаблицаХозрасчетный.Имя = "Хозрасчетный";
	ТаблицаХозрасчетный.Представление = "Журнал проводок (бухгалтерский учет)";
	ДокументОбъект.Записать();
	#КонецОбласти
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	#Если ТонкийКлиент Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Создан документ " + ДокументОбъект.Ссылка;
		Сообщение.Сообщить();
	#КонецЕсли	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Сообщить("Создан документ " + ДокументОбъект.Ссылка);
	#КонецЕсли	
		
	Возврат ДокументОбъект.Ссылка;
КонецФункции

Процедура ЗагрузитьПроводкиВДокумент(ДокументСсылка, ТЗПроводки = Неопределено) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда 
	 	Возврат;
	КонецЕсли;
	
	Если ТЗПроводки = Неопределено Тогда 
		ТЗПроводки = ПроводкиКСторнированию.Выгрузить();
	КонецЕсли;
	
	#Область СторноЧерезКоррСчет
	Если СторноЧерезКоррСчет Тогда 
		СтруктуруСчетовИзОтбора = ПолучитьСтруктуруСчетовИзОтбора();
		КопияТЗПроводки = ТЗПроводки.Скопировать();
		ТЗПроводки      = ПроводкиКСторнированию.ВыгрузитьКолонки();
		
		СтруктуруЗаполненияКоррДт = СоздатьСтруктуруЗаполненияКорр("Дт");
		СтруктуруЗаполненияКоррКт = СоздатьСтруктуруЗаполненияКорр("Кт");
		
		Для Каждого Проводка Из КопияТЗПроводки Цикл 
			Если СтруктуруСчетовИзОтбора.ИспользоватьФильтрСчетов Тогда 
				Если Не СтруктуруСчетовИзОтбора.Счет.Найти(Проводка.СчетДт) = Неопределено 
					Или Не СтруктуруСчетовИзОтбора.СчетДт.Найти(Проводка.СчетДт) = Неопределено
					Тогда
					ПроводкаКорр = ТЗПроводки.Добавить();
					ЗаполнитьЗначенияСвойств(ПроводкаКорр, Проводка);
					ЗаполнитьЗначенияСвойств(ПроводкаКорр, СтруктуруЗаполненияКоррКт);
				КонецЕсли;
				
				Если Не СтруктуруСчетовИзОтбора.Счет.Найти(Проводка.СчетКт) = Неопределено 
					Или Не СтруктуруСчетовИзОтбора.СчетКт.Найти(Проводка.СчетКт) = Неопределено
					Тогда
					ПроводкаКорр = ТЗПроводки.Добавить();
					ЗаполнитьЗначенияСвойств(ПроводкаКорр, Проводка);
					ЗаполнитьЗначенияСвойств(ПроводкаКорр, СтруктуруЗаполненияКоррДт);
				КонецЕсли;
			Иначе 
				ПроводкаКорр = ТЗПроводки.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаКорр, Проводка);
				ЗаполнитьЗначенияСвойств(ПроводкаКорр, СтруктуруЗаполненияКоррДт);
				
				ПроводкаКорр = ТЗПроводки.Добавить();
				ЗаполнитьЗначенияСвойств(ПроводкаКорр, Проводка);
				ЗаполнитьЗначенияСвойств(ПроводкаКорр, СтруктуруЗаполненияКоррДт);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗагрузкаПроводокХозрасчетный
	Проводки = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Проводки.Отбор.Регистратор.Установить(ДокументСсылка, Истина);
	
	Колонки = ТЗПроводки.Колонки;
	//колонки к удалению, и переименованию с значениями сторно
	МассивИменКолонко = Новый Массив;
	МассивИменКолонко.Добавить("КоличествоДт");
	МассивИменКолонко.Добавить("КоличествоКт");
	МассивИменКолонко.Добавить("ВалютнаяСуммаДт");
	МассивИменКолонко.Добавить("ВалютнаяСуммаКт");
	МассивИменКолонко.Добавить("СуммаНУДт");
	МассивИменКолонко.Добавить("СуммаНУКт");
	МассивИменКолонко.Добавить("Сумма");
	
	Для Каждого ИмяКолонки Из МассивИменКолонко Цикл 
		Колонки.Удалить(ИмяКолонки);
		Колонки[ИмяКолонки + "Сторно"].Имя = ИмяКолонки;
	КонецЦикла;
	
	ТЗПроводки.ЗаполнитьЗначения(ДатаДокумента, "Период");
	ТЗПроводки.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	
	Колонки.Добавить("Активность", Новый ОписаниеТипов("Булево"));
	ТЗПроводки.ЗаполнитьЗначения(Истина, "Активность");
	
	Проводки.Загрузить(ТЗПроводки);
	Проводки.Записать();
	#КонецОбласти
	
КонецПроцедуры

Функция СоздатьСтруктуруЗаполненияКорр(ПризнакДтКт = "Дт") 
	СтруктураЗаполнения = Новый Структура;
	
	СтруктураЗаполнения.Вставить("Счет" + ПризнакДтКт, КоррСчет);
	
	Для НомерСубконто = 1 По Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто Цикл 
		СтруктураЗаполнения.Вставить("ВидСубконто" + ПризнакДтКт + НомерСубконто, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка());
		СтруктураЗаполнения.Вставить("Субконто" + ПризнакДтКт + НомерСубконто, Неопределено);
	КонецЦикла;
	
	Для Каждого СтрокаВидСубконто Из КоррСчет.ВидыСубконто Цикл 
		СтруктураЗаполнения.Вставить("ВидСубконто" + ПризнакДтКт + СтрокаВидСубконто.НомерСтроки, СтрокаВидСубконто.ВидСубконто);
	КонецЦикла;
	
	Если Не КоррСчет.УчетПоНалоговымНазначениямНДС Тогда 
		СтруктураЗаполнения.Вставить("НалоговоеНазначение" + ПризнакДтКт, Неопределено);
	КонецЕсли;
	
	Если Не КоррСчет.Количественный Тогда 
		СтруктураЗаполнения.Вставить("Количество" + ПризнакДтКт, Неопределено);
	КонецЕсли;
	
	Если Не КоррСчет.Валютный Тогда 
		СтруктураЗаполнения.Вставить("Валюта" + ПризнакДтКт, Неопределено);
		СтруктураЗаполнения.Вставить("ВалютнаяСумма" + ПризнакДтКт, Неопределено);
	КонецЕсли;
	
	Если Не КоррСчет.НалоговыйУчет Тогда 
		СтруктураЗаполнения.Вставить("СуммаНУ" + ПризнакДтКт, Неопределено);
	КонецЕсли;
	
	Возврат СтруктураЗаполнения;
КонецФункции

Функция ПолучитьСтруктуруСчетовИзОтбора() Экспорт 
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	МассивИменПоляСчета = Новый Массив;
	МассивИменПоляСчета.Добавить("Счет");
	МассивИменПоляСчета.Добавить("СчетДт");
	МассивИменПоляСчета.Добавить("СчетКт");
	
	ПоляПоиска = Новый Массив;
	СоответствиеЗначенийСчетов = Новый Соответствие;
	Для Каждого ИмяПоляСчет Из МассивИменПоляСчета Цикл  
		ПоляПоиска.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоляСчет));
		СоответствиеЗначенийСчетов.Вставить(Новый ПолеКомпоновкиДанных(ИмяПоляСчет), Новый Массив);
	КонецЦикла;
	
	ВидыСравнения = Новый Массив;
	ВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВИерархии);
	ВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	ВидыСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	Для Каждого ЭлементОтбора Из Отбор Цикл 
		Если Не ЭлементОтбора.Использование Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ПоляПоиска.Найти(ЭлементОтбора.ЛевоеЗначение) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ВидыСравнения.Найти(ЭлементОтбора.ВидСравнения) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивСчетов = СоответствиеЗначенийСчетов.Получить(ЭлементОтбора.ЛевоеЗначение);
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
			МассивСчетов.Добавить(ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Для Каждого ЭлементСпискаСчетОтбора Из ЭлементОтбора.ПравоеЗначение Цикл 
				МассивСчетов.Добавить(ЭлементСпискаСчетОтбора.Значение);
			КонецЦикла;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			МассивСчетов.Добавить(ЭлементОтбора.ПравоеЗначение);
			ВыборкаСчетовотбора = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ЭлементОтбора.ПравоеЗначение);
			Пока ВыборкаСчетовотбора.Следующий() Цикл 
				МассивСчетов.Добавить(ВыборкаСчетовотбора.Ссылка);
			КонецЦикла;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			Для Каждого ЭлементСпискаСчетОтбора Из ЭлементОтбора.ПравоеЗначение Цикл 
				МассивСчетов.Добавить(ЭлементСпискаСчетОтбора.Значение);
				ВыборкаСчетовотбора = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ЭлементСпискаСчетОтбора.Значение);
				Пока ВыборкаСчетовотбора.Следующий() Цикл 
					МассивСчетов.Добавить(ВыборкаСчетовотбора.Ссылка);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		СоответствиеЗначенийСчетов.Вставить(ЭлементОтбора.ЛевоеЗначение, МассивСчетов);
	КонецЦикла;
	
	Результат = Новый Структура;
	Для Каждого ИмяПоляСчет Из МассивИменПоляСчета Цикл  
		МассивСчетов = СоответствиеЗначенийСчетов.Получить(Новый ПолеКомпоновкиДанных(ИмяПоляСчет));
		Результат.Вставить(ИмяПоляСчет, МассивСчетов);
	КонецЦикла;
	
	ИспользоватьФильтрСчетов = ТолькоНаЧастьПроводкиПоСчетамИзОтбора;
	
	Результат.Вставить("ИспользоватьФильтрСчетов", ИспользоватьФильтрСчетов);
	
	Возврат Результат;
КонецФункции